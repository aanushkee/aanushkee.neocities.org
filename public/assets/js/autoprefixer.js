var autoprefixer = (function () {
  'use strict';

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser$1 = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions$3 = {};
  var release = {};
  var config = {};

  function noop$1() {}

  var on = noop$1;
  var addListener = noop$1;
  var once = noop$1;
  var off = noop$1;
  var removeListener = noop$1;
  var removeAllListeners = noop$1;
  var emit = noop$1;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance = global$1.performance || {};
  var performanceNow =
    performance.now        ||
    performance.mozNow     ||
    performance.msNow      ||
    performance.oNow       ||
    performance.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var browser$1$1 = {
    nextTick: nextTick,
    title: title,
    browser: browser$1,
    env: env,
    argv: argv,
    version: version,
    versions: versions$3,
    on: on,
    addListener: addListener,
    once: once,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config,
    uptime: uptime
  };

  var process = browser$1$1;

  var _nodeResolve_empty = {};

  var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': _nodeResolve_empty
  });

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getAugmentedNamespace(n) {
  	if (n.__esModule) return n;
  	var a = Object.defineProperty({}, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var path$2 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

  let { red, bold, gray, options: colorette } = path$2;



  class CssSyntaxError extends Error {
    constructor (message, line, column, source, file, plugin) {
      super(message);
      this.name = 'CssSyntaxError';
      this.reason = message;

      if (file) {
        this.file = file;
      }
      if (source) {
        this.source = source;
      }
      if (plugin) {
        this.plugin = plugin;
      }
      if (typeof line !== 'undefined' && typeof column !== 'undefined') {
        this.line = line;
        this.column = column;
      }

      this.setMessage();

      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, CssSyntaxError);
      }
    }

    setMessage () {
      this.message = this.plugin ? this.plugin + ': ' : '';
      this.message += this.file ? this.file : '<css input>';
      if (typeof this.line !== 'undefined') {
        this.message += ':' + this.line + ':' + this.column;
      }
      this.message += ': ' + this.reason;
    }

    showSourceCode (color) {
      if (!this.source) return ''

      let css = this.source;
      if (color == null) color = null;
      if (path$2) {
        if (color) css = path$2(css);
      }

      let lines = css.split(/\r?\n/);
      let start = Math.max(this.line - 3, 0);
      let end = Math.min(this.line + 2, lines.length);

      let maxWidth = String(end).length;

      let mark, aside;
      if (color) {
        mark = text => bold(red(text));
        aside = text => gray(text);
      } else {
        mark = aside = str => str;
      }

      return lines
        .slice(start, end)
        .map((line, index) => {
          let number = start + 1 + index;
          let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';
          if (number === this.line) {
            let spacing =
              aside(gutter.replace(/\d/g, ' ')) +
              line.slice(0, this.column - 1).replace(/[^\t]/g, ' ');
            return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^')
          }
          return ' ' + aside(gutter) + line
        })
        .join('\n')
    }

    toString () {
      let code = this.showSourceCode();
      if (code) {
        code = '\n\n' + code + '\n';
      }
      return this.name + ': ' + this.message + code
    }
  }

  var cssSyntaxError = CssSyntaxError;
  CssSyntaxError.default = CssSyntaxError;

  const DEFAULT_RAW = {
    colon: ': ',
    indent: '    ',
    beforeDecl: '\n',
    beforeRule: '\n',
    beforeOpen: ' ',
    beforeClose: '\n',
    beforeComment: '\n',
    after: '\n',
    emptyBody: '',
    commentLeft: ' ',
    commentRight: ' ',
    semicolon: false
  };

  function capitalize$1 (str) {
    return str[0].toUpperCase() + str.slice(1)
  }

  class Stringifier {
    constructor (builder) {
      this.builder = builder;
    }

    stringify (node, semicolon) {
      /* istanbul ignore if */
      if (!this[node.type]) {
        throw new Error(
          'Unknown AST node type ' +
            node.type +
            '. ' +
            'Maybe you need to change PostCSS stringifier.'
        )
      }
      this[node.type](node, semicolon);
    }

    root (node) {
      this.body(node);
      if (node.raws.after) this.builder(node.raws.after);
    }

    comment (node) {
      let left = this.raw(node, 'left', 'commentLeft');
      let right = this.raw(node, 'right', 'commentRight');
      this.builder('/*' + left + node.text + right + '*/', node);
    }

    decl (node, semicolon) {
      let between = this.raw(node, 'between', 'colon');
      let string = node.prop + between + this.rawValue(node, 'value');

      if (node.important) {
        string += node.raws.important || ' !important';
      }

      if (semicolon) string += ';';
      this.builder(string, node);
    }

    rule (node) {
      this.block(node, this.rawValue(node, 'selector'));
      if (node.raws.ownSemicolon) {
        this.builder(node.raws.ownSemicolon, node, 'end');
      }
    }

    atrule (node, semicolon) {
      let name = '@' + node.name;
      let params = node.params ? this.rawValue(node, 'params') : '';

      if (typeof node.raws.afterName !== 'undefined') {
        name += node.raws.afterName;
      } else if (params) {
        name += ' ';
      }

      if (node.nodes) {
        this.block(node, name + params);
      } else {
        let end = (node.raws.between || '') + (semicolon ? ';' : '');
        this.builder(name + params + end, node);
      }
    }

    body (node) {
      let last = node.nodes.length - 1;
      while (last > 0) {
        if (node.nodes[last].type !== 'comment') break
        last -= 1;
      }

      let semicolon = this.raw(node, 'semicolon');
      for (let i = 0; i < node.nodes.length; i++) {
        let child = node.nodes[i];
        let before = this.raw(child, 'before');
        if (before) this.builder(before);
        this.stringify(child, last !== i || semicolon);
      }
    }

    block (node, start) {
      let between = this.raw(node, 'between', 'beforeOpen');
      this.builder(start + between + '{', node, 'start');

      let after;
      if (node.nodes && node.nodes.length) {
        this.body(node);
        after = this.raw(node, 'after');
      } else {
        after = this.raw(node, 'after', 'emptyBody');
      }

      if (after) this.builder(after);
      this.builder('}', node, 'end');
    }

    raw (node, own, detect) {
      let value;
      if (!detect) detect = own;

      // Already had
      if (own) {
        value = node.raws[own];
        if (typeof value !== 'undefined') return value
      }

      let parent = node.parent;

      // Hack for first rule in CSS
      if (detect === 'before') {
        if (!parent || (parent.type === 'root' && parent.first === node)) {
          return ''
        }
      }

      // Floating child without parent
      if (!parent) return DEFAULT_RAW[detect]

      // Detect style by other nodes
      let root = node.root();
      if (!root.rawCache) root.rawCache = {};
      if (typeof root.rawCache[detect] !== 'undefined') {
        return root.rawCache[detect]
      }

      if (detect === 'before' || detect === 'after') {
        return this.beforeAfter(node, detect)
      } else {
        let method = 'raw' + capitalize$1(detect);
        if (this[method]) {
          value = this[method](root, node);
        } else {
          root.walk(i => {
            value = i.raws[own];
            if (typeof value !== 'undefined') return false
          });
        }
      }

      if (typeof value === 'undefined') value = DEFAULT_RAW[detect];

      root.rawCache[detect] = value;
      return value
    }

    rawSemicolon (root) {
      let value;
      root.walk(i => {
        if (i.nodes && i.nodes.length && i.last.type === 'decl') {
          value = i.raws.semicolon;
          if (typeof value !== 'undefined') return false
        }
      });
      return value
    }

    rawEmptyBody (root) {
      let value;
      root.walk(i => {
        if (i.nodes && i.nodes.length === 0) {
          value = i.raws.after;
          if (typeof value !== 'undefined') return false
        }
      });
      return value
    }

    rawIndent (root) {
      if (root.raws.indent) return root.raws.indent
      let value;
      root.walk(i => {
        let p = i.parent;
        if (p && p !== root && p.parent && p.parent === root) {
          if (typeof i.raws.before !== 'undefined') {
            let parts = i.raws.before.split('\n');
            value = parts[parts.length - 1];
            value = value.replace(/\S/g, '');
            return false
          }
        }
      });
      return value
    }

    rawBeforeComment (root, node) {
      let value;
      root.walkComments(i => {
        if (typeof i.raws.before !== 'undefined') {
          value = i.raws.before;
          if (value.includes('\n')) {
            value = value.replace(/[^\n]+$/, '');
          }
          return false
        }
      });
      if (typeof value === 'undefined') {
        value = this.raw(node, null, 'beforeDecl');
      } else if (value) {
        value = value.replace(/\S/g, '');
      }
      return value
    }

    rawBeforeDecl (root, node) {
      let value;
      root.walkDecls(i => {
        if (typeof i.raws.before !== 'undefined') {
          value = i.raws.before;
          if (value.includes('\n')) {
            value = value.replace(/[^\n]+$/, '');
          }
          return false
        }
      });
      if (typeof value === 'undefined') {
        value = this.raw(node, null, 'beforeRule');
      } else if (value) {
        value = value.replace(/\S/g, '');
      }
      return value
    }

    rawBeforeRule (root) {
      let value;
      root.walk(i => {
        if (i.nodes && (i.parent !== root || root.first !== i)) {
          if (typeof i.raws.before !== 'undefined') {
            value = i.raws.before;
            if (value.includes('\n')) {
              value = value.replace(/[^\n]+$/, '');
            }
            return false
          }
        }
      });
      if (value) value = value.replace(/\S/g, '');
      return value
    }

    rawBeforeClose (root) {
      let value;
      root.walk(i => {
        if (i.nodes && i.nodes.length > 0) {
          if (typeof i.raws.after !== 'undefined') {
            value = i.raws.after;
            if (value.includes('\n')) {
              value = value.replace(/[^\n]+$/, '');
            }
            return false
          }
        }
      });
      if (value) value = value.replace(/\S/g, '');
      return value
    }

    rawBeforeOpen (root) {
      let value;
      root.walk(i => {
        if (i.type !== 'decl') {
          value = i.raws.between;
          if (typeof value !== 'undefined') return false
        }
      });
      return value
    }

    rawColon (root) {
      let value;
      root.walkDecls(i => {
        if (typeof i.raws.between !== 'undefined') {
          value = i.raws.between.replace(/[^\s:]/g, '');
          return false
        }
      });
      return value
    }

    beforeAfter (node, detect) {
      let value;
      if (node.type === 'decl') {
        value = this.raw(node, null, 'beforeDecl');
      } else if (node.type === 'comment') {
        value = this.raw(node, null, 'beforeComment');
      } else if (detect === 'before') {
        value = this.raw(node, null, 'beforeRule');
      } else {
        value = this.raw(node, null, 'beforeClose');
      }

      let buf = node.parent;
      let depth = 0;
      while (buf && buf.type !== 'root') {
        depth += 1;
        buf = buf.parent;
      }

      if (value.includes('\n')) {
        let indent = this.raw(node, null, 'indent');
        if (indent.length) {
          for (let step = 0; step < depth; step++) value += indent;
        }
      }

      return value
    }

    rawValue (node, prop) {
      let value = node[prop];
      let raw = node.raws[prop];
      if (raw && raw.value === value) {
        return raw.raw
      }

      return value
    }
  }

  var stringifier = Stringifier;

  var isClean$3 = Symbol('isClean');

  var symbols = {
  	isClean: isClean$3
  };

  function stringify$2 (node, builder) {
    let str = new stringifier(builder);
    str.stringify(node);
  }

  var stringify_1$1 = stringify$2;
  stringify$2.default = stringify$2;

  let { isClean: isClean$2 } = symbols;


  function cloneNode (obj, parent) {
    let cloned = new obj.constructor();

    for (let i in obj) {
      if (!Object.prototype.hasOwnProperty.call(obj, i)) {
        // istanbul ignore next
        continue
      }
      if (i === 'proxyCache') continue
      let value = obj[i];
      let type = typeof value;

      if (i === 'parent' && type === 'object') {
        if (parent) cloned[i] = parent;
      } else if (i === 'source') {
        cloned[i] = value;
      } else if (Array.isArray(value)) {
        cloned[i] = value.map(j => cloneNode(j, cloned));
      } else {
        if (type === 'object' && value !== null) value = cloneNode(value);
        cloned[i] = value;
      }
    }

    return cloned
  }

  class Node {
    constructor (defaults = {}) {
      this.raws = {};
      this[isClean$2] = false;

      for (let name in defaults) {
        if (name === 'nodes') {
          this.nodes = [];
          for (let node of defaults[name]) {
            if (typeof node.clone === 'function') {
              this.append(node.clone());
            } else {
              this.append(node);
            }
          }
        } else {
          this[name] = defaults[name];
        }
      }
    }

    error (message, opts = {}) {
      if (this.source) {
        let pos = this.positionBy(opts);
        return this.source.input.error(message, pos.line, pos.column, opts)
      }
      return new cssSyntaxError(message)
    }

    warn (result, text, opts) {
      let data = { node: this };
      for (let i in opts) data[i] = opts[i];
      return result.warn(text, data)
    }

    remove () {
      if (this.parent) {
        this.parent.removeChild(this);
      }
      this.parent = undefined;
      return this
    }

    toString (stringifier = stringify_1$1) {
      if (stringifier.stringify) stringifier = stringifier.stringify;
      let result = '';
      stringifier(this, i => {
        result += i;
      });
      return result
    }

    clone (overrides = {}) {
      let cloned = cloneNode(this);
      for (let name in overrides) {
        cloned[name] = overrides[name];
      }
      return cloned
    }

    cloneBefore (overrides = {}) {
      let cloned = this.clone(overrides);
      this.parent.insertBefore(this, cloned);
      return cloned
    }

    cloneAfter (overrides = {}) {
      let cloned = this.clone(overrides);
      this.parent.insertAfter(this, cloned);
      return cloned
    }

    replaceWith (...nodes) {
      if (this.parent) {
        let bookmark = this;
        let foundSelf = false;
        for (let node of nodes) {
          if (node === this) {
            foundSelf = true;
          } else if (foundSelf) {
            this.parent.insertAfter(bookmark, node);
            bookmark = node;
          } else {
            this.parent.insertBefore(bookmark, node);
          }
        }

        if (!foundSelf) {
          this.remove();
        }
      }

      return this
    }

    next () {
      if (!this.parent) return undefined
      let index = this.parent.index(this);
      return this.parent.nodes[index + 1]
    }

    prev () {
      if (!this.parent) return undefined
      let index = this.parent.index(this);
      return this.parent.nodes[index - 1]
    }

    before (add) {
      this.parent.insertBefore(this, add);
      return this
    }

    after (add) {
      this.parent.insertAfter(this, add);
      return this
    }

    root () {
      let result = this;
      while (result.parent) result = result.parent;
      return result
    }

    raw (prop, defaultType) {
      let str = new stringifier();
      return str.raw(this, prop, defaultType)
    }

    cleanRaws (keepBetween) {
      delete this.raws.before;
      delete this.raws.after;
      if (!keepBetween) delete this.raws.between;
    }

    toJSON (_, inputs) {
      let fixed = {};
      let emitInputs = inputs == null;
      inputs = inputs || new Map();
      let inputsNextIndex = 0;

      for (let name in this) {
        if (!Object.prototype.hasOwnProperty.call(this, name)) {
          // istanbul ignore next
          continue
        }
        if (name === 'parent') continue
        let value = this[name];

        if (Array.isArray(value)) {
          fixed[name] = value.map(i => {
            if (typeof i === 'object' && i.toJSON) {
              return i.toJSON(null, inputs)
            } else {
              return i
            }
          });
        } else if (typeof value === 'object' && value.toJSON) {
          fixed[name] = value.toJSON(null, inputs);
        } else if (name === 'source') {
          let inputId = inputs.get(value.input);
          if (inputId == null) {
            inputId = inputsNextIndex;
            inputs.set(value.input, inputsNextIndex);
            inputsNextIndex++;
          }
          fixed[name] = {
            inputId,
            start: value.start,
            end: value.end
          };
        } else {
          fixed[name] = value;
        }
      }

      if (emitInputs) {
        fixed.inputs = [...inputs.keys()].map(input => input.toJSON());
      }

      return fixed
    }

    positionInside (index) {
      let string = this.toString();
      let column = this.source.start.column;
      let line = this.source.start.line;

      for (let i = 0; i < index; i++) {
        if (string[i] === '\n') {
          column = 1;
          line += 1;
        } else {
          column += 1;
        }
      }

      return { line, column }
    }

    positionBy (opts) {
      let pos = this.source.start;
      if (opts.index) {
        pos = this.positionInside(opts.index);
      } else if (opts.word) {
        let index = this.toString().indexOf(opts.word);
        if (index !== -1) pos = this.positionInside(index);
      }
      return pos
    }

    getProxyProcessor () {
      return {
        set (node, prop, value) {
          if (node[prop] === value) return true
          node[prop] = value;
          if (
            prop === 'prop' ||
            prop === 'value' ||
            prop === 'name' ||
            prop === 'params' ||
            prop === 'important' ||
            prop === 'text'
          ) {
            node.markDirty();
          }
          return true
        },

        get (node, prop) {
          if (prop === 'proxyOf') {
            return node
          } else if (prop === 'root') {
            return () => node.root().toProxy()
          } else {
            return node[prop]
          }
        }
      }
    }

    toProxy () {
      if (!this.proxyCache) {
        this.proxyCache = new Proxy(this, this.getProxyProcessor());
      }
      return this.proxyCache
    }

    addToError (error) {
      error.postcssNode = this;
      if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
        let s = this.source;
        error.stack = error.stack.replace(
          /\n\s{4}at /,
          `$&${s.input.from}:${s.start.line}:${s.start.column}$&`
        );
      }
      return error
    }

    markDirty () {
      if (this[isClean$2]) {
        this[isClean$2] = false;
        let next = this;
        while ((next = next.parent)) {
          next[isClean$2] = false;
        }
      }
    }

    get proxyOf () {
      return this
    }
  }

  var node_1 = Node;
  Node.default = Node;

  class Declaration$1 extends node_1 {
    constructor (defaults) {
      if (
        defaults &&
        typeof defaults.value !== 'undefined' &&
        typeof defaults.value !== 'string'
      ) {
        defaults = { ...defaults, value: String(defaults.value) };
      }
      super(defaults);
      this.type = 'decl';
    }

    get variable () {
      return this.prop.startsWith('--') || this.prop[0] === '$'
    }
  }

  var declaration$1 = Declaration$1;
  Declaration$1.default = Declaration$1;

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup[i] = code[i];
      revLookup[code.charCodeAt(i)] = i;
    }

    revLookup['-'.charCodeAt(0)] = 62;
    revLookup['_'.charCodeAt(0)] = 63;
  }

  function toByteArray (b64) {
    if (!inited) {
      init();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    if (!inited) {
      init();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup[tmp >> 2];
      output += lookup[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup[tmp >> 10];
      output += lookup[(tmp >> 4) & 0x3F];
      output += lookup[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray$1 = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  function kMaxLength () {
    return Buffer.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer (arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
      return new Buffer(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from(this, arg, encodingOrOffset, length)
  }

  Buffer.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer._augment = function (arr) {
    arr.__proto__ = Buffer.prototype;
    return arr
  };

  function from (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length)
  };

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike(that, obj)
      }

      if (obj.type === 'Buffer' && isArray$1(obj.data)) {
        return fromArrayLike(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer.isBuffer = isBuffer;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer.concat = function concat (list, length) {
    if (!isArray$1(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer.byteLength = byteLength;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer.prototype._isBuffer = true;

  function swap$1 (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap$1(this, i, i + 1);
    }
    return this
  };

  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap$1(this, i, i + 3);
      swap$1(this, i + 1, i + 2);
    }
    return this
  };

  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap$1(this, i, i + 7);
      swap$1(this, i + 1, i + 6);
      swap$1(this, i + 2, i + 5);
      swap$1(this, i + 3, i + 4);
    }
    return this
  };

  Buffer.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  };

  Buffer.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray(buf)
    } else {
      return fromByteArray(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes(new Buffer(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  // resolves . and .. elements in a path array with directory names there
  // must be no slashes, empty elements, or device names (c:\) in the array
  // (so also no leading and trailing slashes - it does not distinguish
  // relative and absolute paths)
  function normalizeArray(parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === '.') {
        parts.splice(i, 1);
      } else if (last === '..') {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift('..');
      }
    }

    return parts;
  }

  // Split a filename into [root, dir, basename, ext], unix version
  // 'root' is just a slash, or nothing.
  var splitPathRe =
      /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var splitPath = function(filename) {
    return splitPathRe.exec(filename).slice(1);
  };

  // path.resolve([from ...], to)
  // posix version
  function resolve$3() {
    var resolvedPath = '',
        resolvedAbsolute = false;

    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path = (i >= 0) ? arguments[i] : '/';

      // Skip empty and invalid entries
      if (typeof path !== 'string') {
        throw new TypeError('Arguments to path.resolve must be strings');
      } else if (!path) {
        continue;
      }

      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charAt(0) === '/';
    }

    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)

    // Normalize the path
    resolvedPath = normalizeArray(filter$1(resolvedPath.split('/'), function(p) {
      return !!p;
    }), !resolvedAbsolute).join('/');

    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  }
  // path.normalize(path)
  // posix version
  function normalize$1(path) {
    var isPathAbsolute = isAbsolute$1(path),
        trailingSlash = substr(path, -1) === '/';

    // Normalize the path
    path = normalizeArray(filter$1(path.split('/'), function(p) {
      return !!p;
    }), !isPathAbsolute).join('/');

    if (!path && !isPathAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }

    return (isPathAbsolute ? '/' : '') + path;
  }
  // posix version
  function isAbsolute$1(path) {
    return path.charAt(0) === '/';
  }

  // posix version
  function join$1() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize$1(filter$1(paths, function(p, index) {
      if (typeof p !== 'string') {
        throw new TypeError('Arguments to path.join must be strings');
      }
      return p;
    }).join('/'));
  }


  // path.relative(from, to)
  // posix version
  function relative$1(from, to) {
    from = resolve$3(from).substr(1);
    to = resolve$3(to).substr(1);

    function trim(arr) {
      var start = 0;
      for (; start < arr.length; start++) {
        if (arr[start] !== '') break;
      }

      var end = arr.length - 1;
      for (; end >= 0; end--) {
        if (arr[end] !== '') break;
      }

      if (start > end) return [];
      return arr.slice(start, end - start + 1);
    }

    var fromParts = trim(from.split('/'));
    var toParts = trim(to.split('/'));

    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }

    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push('..');
    }

    outputParts = outputParts.concat(toParts.slice(samePartsLength));

    return outputParts.join('/');
  }

  var sep$1 = '/';
  var delimiter$1 = ':';

  function dirname$2(path) {
    var result = splitPath(path),
        root = result[0],
        dir = result[1];

    if (!root && !dir) {
      // No dirname whatsoever
      return '.';
    }

    if (dir) {
      // It has a dirname, strip trailing slash
      dir = dir.substr(0, dir.length - 1);
    }

    return root + dir;
  }

  function basename(path, ext) {
    var f = splitPath(path)[2];
    // TODO: make this comparison case-insensitive on windows?
    if (ext && f.substr(-1 * ext.length) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  }


  function extname(path) {
    return splitPath(path)[3];
  }
  var path = {
    extname: extname,
    basename: basename,
    dirname: dirname$2,
    sep: sep$1,
    delimiter: delimiter$1,
    relative: relative$1,
    join: join$1,
    isAbsolute: isAbsolute$1,
    normalize: normalize$1,
    resolve: resolve$3
  };
  function filter$1 (xs, f) {
      if (xs.filter) return xs.filter(f);
      var res = [];
      for (var i = 0; i < xs.length; i++) {
          if (f(xs[i], i, xs)) res.push(xs[i]);
      }
      return res;
  }

  // String.prototype.substr - negative index don't work in IE8
  var substr = 'ab'.substr(-1) === 'b' ?
      function (str, start, len) { return str.substr(start, len) } :
      function (str, start, len) {
          if (start < 0) start = str.length + start;
          return str.substr(start, len);
      }
  ;

  var path$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    resolve: resolve$3,
    normalize: normalize$1,
    isAbsolute: isAbsolute$1,
    join: join$1,
    relative: relative$1,
    sep: sep$1,
    delimiter: delimiter$1,
    dirname: dirname$2,
    basename: basename,
    extname: extname,
    'default': path
  });

  /** Highest positive signed 32-bit float value */
  const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  const base = 36;
  const tMin = 1;
  const tMax = 26;
  const skew = 38;
  const damp = 700;
  const initialBias = 72;
  const initialN = 128; // 0x80
  const delimiter = '-'; // '\x2D'

  /** Regular expressions */
  const regexPunycode = /^xn--/;
  const regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
  const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

  /** Error messages */
  const errors = {
  	'overflow': 'Overflow: input needs wider integers to process',
  	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  	'invalid-input': 'Invalid input'
  };

  /** Convenience shortcuts */
  const baseMinusTMin = base - tMin;
  const floor = Math.floor;
  const stringFromCharCode = String.fromCharCode;

  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */
  function error$2(type) {
  	throw new RangeError(errors[type]);
  }

  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */
  function map$1(array, fn) {
  	const result = [];
  	let length = array.length;
  	while (length--) {
  		result[length] = fn(array[length]);
  	}
  	return result;
  }

  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */
  function mapDomain(string, fn) {
  	const parts = string.split('@');
  	let result = '';
  	if (parts.length > 1) {
  		// In email addresses, only the domain name should be punycoded. Leave
  		// the local part (i.e. everything up to `@`) intact.
  		result = parts[0] + '@';
  		string = parts[1];
  	}
  	// Avoid `split(regex)` for IE8 compatibility. See #17.
  	string = string.replace(regexSeparators, '\x2E');
  	const labels = string.split('.');
  	const encoded = map$1(labels, fn).join('.');
  	return result + encoded;
  }

  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */
  function ucs2decode(string) {
  	const output = [];
  	let counter = 0;
  	const length = string.length;
  	while (counter < length) {
  		const value = string.charCodeAt(counter++);
  		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
  			// It's a high surrogate, and there is a next character.
  			const extra = string.charCodeAt(counter++);
  			if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
  				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
  			} else {
  				// It's an unmatched surrogate; only append this code unit, in case the
  				// next code unit is the high surrogate of a surrogate pair.
  				output.push(value);
  				counter--;
  			}
  		} else {
  			output.push(value);
  		}
  	}
  	return output;
  }

  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */
  const ucs2encode = array => String.fromCodePoint(...array);

  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */
  const basicToDigit = function(codePoint) {
  	if (codePoint - 0x30 < 0x0A) {
  		return codePoint - 0x16;
  	}
  	if (codePoint - 0x41 < 0x1A) {
  		return codePoint - 0x41;
  	}
  	if (codePoint - 0x61 < 0x1A) {
  		return codePoint - 0x61;
  	}
  	return base;
  };

  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */
  const digitToBasic = function(digit, flag) {
  	//  0..25 map to ASCII a..z or A..Z
  	// 26..35 map to ASCII 0..9
  	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  };

  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */
  const adapt = function(delta, numPoints, firstTime) {
  	let k = 0;
  	delta = firstTime ? floor(delta / damp) : delta >> 1;
  	delta += floor(delta / numPoints);
  	for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
  		delta = floor(delta / baseMinusTMin);
  	}
  	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  };

  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */
  const decode$2 = function(input) {
  	// Don't use UCS-2.
  	const output = [];
  	const inputLength = input.length;
  	let i = 0;
  	let n = initialN;
  	let bias = initialBias;

  	// Handle the basic code points: let `basic` be the number of input code
  	// points before the last delimiter, or `0` if there is none, then copy
  	// the first basic code points to the output.

  	let basic = input.lastIndexOf(delimiter);
  	if (basic < 0) {
  		basic = 0;
  	}

  	for (let j = 0; j < basic; ++j) {
  		// if it's not a basic code point
  		if (input.charCodeAt(j) >= 0x80) {
  			error$2('not-basic');
  		}
  		output.push(input.charCodeAt(j));
  	}

  	// Main decoding loop: start just after the last delimiter if any basic code
  	// points were copied; start at the beginning otherwise.

  	for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

  		// `index` is the index of the next character to be consumed.
  		// Decode a generalized variable-length integer into `delta`,
  		// which gets added to `i`. The overflow checking is easier
  		// if we increase `i` as we go, then subtract off its starting
  		// value at the end to obtain `delta`.
  		let oldi = i;
  		for (let w = 1, k = base; /* no condition */; k += base) {

  			if (index >= inputLength) {
  				error$2('invalid-input');
  			}

  			const digit = basicToDigit(input.charCodeAt(index++));

  			if (digit >= base || digit > floor((maxInt - i) / w)) {
  				error$2('overflow');
  			}

  			i += digit * w;
  			const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

  			if (digit < t) {
  				break;
  			}

  			const baseMinusT = base - t;
  			if (w > floor(maxInt / baseMinusT)) {
  				error$2('overflow');
  			}

  			w *= baseMinusT;

  		}

  		const out = output.length + 1;
  		bias = adapt(i - oldi, out, oldi == 0);

  		// `i` was supposed to wrap around from `out` to `0`,
  		// incrementing `n` each time, so we'll fix that now:
  		if (floor(i / out) > maxInt - n) {
  			error$2('overflow');
  		}

  		n += floor(i / out);
  		i %= out;

  		// Insert `n` at position `i` of the output.
  		output.splice(i++, 0, n);

  	}

  	return String.fromCodePoint(...output);
  };

  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */
  const encode$2 = function(input) {
  	const output = [];

  	// Convert the input in UCS-2 to an array of Unicode code points.
  	input = ucs2decode(input);

  	// Cache the length.
  	let inputLength = input.length;

  	// Initialize the state.
  	let n = initialN;
  	let delta = 0;
  	let bias = initialBias;

  	// Handle the basic code points.
  	for (const currentValue of input) {
  		if (currentValue < 0x80) {
  			output.push(stringFromCharCode(currentValue));
  		}
  	}

  	let basicLength = output.length;
  	let handledCPCount = basicLength;

  	// `handledCPCount` is the number of code points that have been handled;
  	// `basicLength` is the number of basic code points.

  	// Finish the basic string with a delimiter unless it's empty.
  	if (basicLength) {
  		output.push(delimiter);
  	}

  	// Main encoding loop:
  	while (handledCPCount < inputLength) {

  		// All non-basic code points < n have been handled already. Find the next
  		// larger one:
  		let m = maxInt;
  		for (const currentValue of input) {
  			if (currentValue >= n && currentValue < m) {
  				m = currentValue;
  			}
  		}

  		// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
  		// but guard against overflow.
  		const handledCPCountPlusOne = handledCPCount + 1;
  		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
  			error$2('overflow');
  		}

  		delta += (m - n) * handledCPCountPlusOne;
  		n = m;

  		for (const currentValue of input) {
  			if (currentValue < n && ++delta > maxInt) {
  				error$2('overflow');
  			}
  			if (currentValue == n) {
  				// Represent delta as a generalized variable-length integer.
  				let q = delta;
  				for (let k = base; /* no condition */; k += base) {
  					const t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
  					if (q < t) {
  						break;
  					}
  					const qMinusT = q - t;
  					const baseMinusT = base - t;
  					output.push(
  						stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
  					);
  					q = floor(qMinusT / baseMinusT);
  				}

  				output.push(stringFromCharCode(digitToBasic(q, 0)));
  				bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
  				delta = 0;
  				++handledCPCount;
  			}
  		}

  		++delta;
  		++n;

  	}
  	return output.join('');
  };

  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */
  const toUnicode$1 = function(input) {
  	return mapDomain(input, function(string) {
  		return regexPunycode.test(string)
  			? decode$2(string.slice(4).toLowerCase())
  			: string;
  	});
  };

  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */
  const toASCII$1 = function(input) {
  	return mapDomain(input, function(string) {
  		return regexNonASCII.test(string)
  			? 'xn--' + encode$2(string)
  			: string;
  	});
  };

  /*--------------------------------------------------------------------------*/

  /** Define the public API */
  const punycode$1 = {
  	/**
  	 * A string representing the current Punycode.js version number.
  	 * @memberOf punycode
  	 * @type String
  	 */
  	'version': '2.1.0',
  	/**
  	 * An object of methods to convert from JavaScript's internal character
  	 * representation (UCS-2) to Unicode code points, and back.
  	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
  	 * @memberOf punycode
  	 * @type Object
  	 */
  	'ucs2': {
  		'decode': ucs2decode,
  		'encode': ucs2encode
  	},
  	'decode': decode$2,
  	'encode': encode$2,
  	'toASCII': toASCII$1,
  	'toUnicode': toUnicode$1
  };

  var punycode_es6 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ucs2decode: ucs2decode,
    ucs2encode: ucs2encode,
    decode: decode$2,
    encode: encode$2,
    toASCII: toASCII$1,
    toUnicode: toUnicode$1,
    'default': punycode$1
  });

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.


  // If obj.hasOwnProperty has been overridden, then calling
  // obj.hasOwnProperty(prop) will break.
  // See: https://github.com/joyent/node/issues/1707
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
  };
  function stringifyPrimitive(v) {
    switch (typeof v) {
      case 'string':
        return v;

      case 'boolean':
        return v ? 'true' : 'false';

      case 'number':
        return isFinite(v) ? v : '';

      default:
        return '';
    }
  }

  function stringify$1 (obj, sep, eq, name) {
    sep = sep || '&';
    eq = eq || '=';
    if (obj === null) {
      obj = undefined;
    }

    if (typeof obj === 'object') {
      return map(objectKeys(obj), function(k) {
        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
        if (isArray(obj[k])) {
          return map(obj[k], function(v) {
            return ks + encodeURIComponent(stringifyPrimitive(v));
          }).join(sep);
        } else {
          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
        }
      }).join(sep);

    }

    if (!name) return '';
    return encodeURIComponent(stringifyPrimitive(name)) + eq +
           encodeURIComponent(stringifyPrimitive(obj));
  }
  function map (xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      res.push(f(xs[i], i));
    }
    return res;
  }

  var objectKeys = Object.keys || function (obj) {
    var res = [];
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    }
    return res;
  };

  function parse$7(qs, sep, eq, options) {
    sep = sep || '&';
    eq = eq || '=';
    var obj = {};

    if (typeof qs !== 'string' || qs.length === 0) {
      return obj;
    }

    var regexp = /\+/g;
    qs = qs.split(sep);

    var maxKeys = 1000;
    if (options && typeof options.maxKeys === 'number') {
      maxKeys = options.maxKeys;
    }

    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) {
      len = maxKeys;
    }

    for (var i = 0; i < len; ++i) {
      var x = qs[i].replace(regexp, '%20'),
          idx = x.indexOf(eq),
          kstr, vstr, k, v;

      if (idx >= 0) {
        kstr = x.substr(0, idx);
        vstr = x.substr(idx + 1);
      } else {
        kstr = x;
        vstr = '';
      }

      k = decodeURIComponent(kstr);
      v = decodeURIComponent(vstr);

      if (!hasOwnProperty(obj, k)) {
        obj[k] = v;
      } else if (isArray(obj[k])) {
        obj[k].push(v);
      } else {
        obj[k] = [obj[k], v];
      }
    }

    return obj;
  }

  // Copyright Joyent, Inc. and other Node contributors.
  var url$1 = {
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    Url: Url
  };
  function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }

  // Reference: RFC 3986, RFC 1808, RFC 2396

  // define these here so at least they only have to be
  // compiled once on the first module load.
  var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };

  function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && isObject(url) && url instanceof Url) return url;

    var u = new Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
  }
  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    return parse$6(this, url, parseQueryString, slashesDenoteHost);
  };

  function parse$6(self, url, parseQueryString, slashesDenoteHost) {
    if (!isString(url)) {
      throw new TypeError('Parameter \'url\' must be a string, not ' + typeof url);
    }

    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf('?'),
      splitter =
      (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, '/');
    url = uSplit.join(splitter);

    var rest = url;

    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();

    if (!slashesDenoteHost && url.split('#').length === 1) {
      // Try fast path regexp
      var simplePath = simplePathPattern.exec(rest);
      if (simplePath) {
        self.path = rest;
        self.href = rest;
        self.pathname = simplePath[1];
        if (simplePath[2]) {
          self.search = simplePath[2];
          if (parseQueryString) {
            self.query = parse$7(self.search.substr(1));
          } else {
            self.query = self.search.substr(1);
          }
        } else if (parseQueryString) {
          self.search = '';
          self.query = {};
        }
        return self;
      }
    }

    var proto = protocolPattern.exec(rest);
    if (proto) {
      proto = proto[0];
      var lowerProto = proto.toLowerCase();
      self.protocol = lowerProto;
      rest = rest.substr(proto.length);
    }

    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var slashes = rest.substr(0, 2) === '//';
      if (slashes && !(proto && hostlessProtocol[proto])) {
        rest = rest.substr(2);
        self.slashes = true;
      }
    }
    var i, hec, l, p;
    if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

      // there's a hostname.
      // the first instance of /, ?, ;, or # ends the host.
      //
      // If there is an @ in the hostname, then non-host chars *are* allowed
      // to the left of the last @ sign, unless some host-ending character
      // comes *before* the @-sign.
      // URLs are obnoxious.
      //
      // ex:
      // http://a@b@c/ => user:a@b host:c
      // http://a@b?@c => user:a host:c path:/?@c

      // v0.12 TODO(isaacs): This is not quite how Chrome does things.
      // Review our test case against browsers more comprehensively.

      // find the first instance of any hostEndingChars
      var hostEnd = -1;
      for (i = 0; i < hostEndingChars.length; i++) {
        hec = rest.indexOf(hostEndingChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }

      // at this point, either we have an explicit point where the
      // auth portion cannot go past, or the last @ char is the decider.
      var auth, atSign;
      if (hostEnd === -1) {
        // atSign can be anywhere.
        atSign = rest.lastIndexOf('@');
      } else {
        // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf('@', hostEnd);
      }

      // Now we have a portion which is definitely the auth.
      // Pull that off.
      if (atSign !== -1) {
        auth = rest.slice(0, atSign);
        rest = rest.slice(atSign + 1);
        self.auth = decodeURIComponent(auth);
      }

      // the host is the remaining to the left of the first non-host char
      hostEnd = -1;
      for (i = 0; i < nonHostChars.length; i++) {
        hec = rest.indexOf(nonHostChars[i]);
        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
          hostEnd = hec;
      }
      // if we still have not hit it, then the entire thing is a host.
      if (hostEnd === -1)
        hostEnd = rest.length;

      self.host = rest.slice(0, hostEnd);
      rest = rest.slice(hostEnd);

      // pull out port.
      parseHost(self);

      // we've indicated that there is a hostname,
      // so even if it's empty, it has to be present.
      self.hostname = self.hostname || '';

      // if hostname begins with [ and ends with ]
      // assume that it's an IPv6 address.
      var ipv6Hostname = self.hostname[0] === '[' &&
        self.hostname[self.hostname.length - 1] === ']';

      // validate a little.
      if (!ipv6Hostname) {
        var hostparts = self.hostname.split(/\./);
        for (i = 0, l = hostparts.length; i < l; i++) {
          var part = hostparts[i];
          if (!part) continue;
          if (!part.match(hostnamePartPattern)) {
            var newpart = '';
            for (var j = 0, k = part.length; j < k; j++) {
              if (part.charCodeAt(j) > 127) {
                // we replace non-ASCII char with a temporary placeholder
                // we need this to make sure size of hostname is not
                // broken by replacing non-ASCII by nothing
                newpart += 'x';
              } else {
                newpart += part[j];
              }
            }
            // we test again with ASCII char only
            if (!newpart.match(hostnamePartPattern)) {
              var validParts = hostparts.slice(0, i);
              var notHost = hostparts.slice(i + 1);
              var bit = part.match(hostnamePartStart);
              if (bit) {
                validParts.push(bit[1]);
                notHost.unshift(bit[2]);
              }
              if (notHost.length) {
                rest = '/' + notHost.join('.') + rest;
              }
              self.hostname = validParts.join('.');
              break;
            }
          }
        }
      }

      if (self.hostname.length > hostnameMaxLen) {
        self.hostname = '';
      } else {
        // hostnames are always lower case.
        self.hostname = self.hostname.toLowerCase();
      }

      if (!ipv6Hostname) {
        // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        self.hostname = toASCII$1(self.hostname);
      }

      p = self.port ? ':' + self.port : '';
      var h = self.hostname || '';
      self.host = h + p;
      self.href += self.host;

      // strip [ and ] from the hostname
      // the host field still retains them, though
      if (ipv6Hostname) {
        self.hostname = self.hostname.substr(1, self.hostname.length - 2);
        if (rest[0] !== '/') {
          rest = '/' + rest;
        }
      }
    }

    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!unsafeProtocol[lowerProto]) {

      // First, make 100% sure that any "autoEscape" chars get
      // escaped, even if encodeURIComponent doesn't think they
      // need to be.
      for (i = 0, l = autoEscape.length; i < l; i++) {
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1)
          continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) {
          esc = escape(ae);
        }
        rest = rest.split(ae).join(esc);
      }
    }


    // chop off from the tail first.
    var hash = rest.indexOf('#');
    if (hash !== -1) {
      // got a fragment string.
      self.hash = rest.substr(hash);
      rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf('?');
    if (qm !== -1) {
      self.search = rest.substr(qm);
      self.query = rest.substr(qm + 1);
      if (parseQueryString) {
        self.query = parse$7(self.query);
      }
      rest = rest.slice(0, qm);
    } else if (parseQueryString) {
      // no query string, but parseQueryString still requested
      self.search = '';
      self.query = {};
    }
    if (rest) self.pathname = rest;
    if (slashedProtocol[lowerProto] &&
      self.hostname && !self.pathname) {
      self.pathname = '/';
    }

    //to support http.request
    if (self.pathname || self.search) {
      p = self.pathname || '';
      var s = self.search || '';
      self.path = p + s;
    }

    // finally, reconstruct the href based on what has been validated.
    self.href = format(self);
    return self;
  }

  // format a parsed object into a url string
  function urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if (isString(obj)) obj = parse$6({}, obj);
    return format(obj);
  }

  function format(self) {
    var auth = self.auth || '';
    if (auth) {
      auth = encodeURIComponent(auth);
      auth = auth.replace(/%3A/i, ':');
      auth += '@';
    }

    var protocol = self.protocol || '',
      pathname = self.pathname || '',
      hash = self.hash || '',
      host = false,
      query = '';

    if (self.host) {
      host = auth + self.host;
    } else if (self.hostname) {
      host = auth + (self.hostname.indexOf(':') === -1 ?
        self.hostname :
        '[' + this.hostname + ']');
      if (self.port) {
        host += ':' + self.port;
      }
    }

    if (self.query &&
      isObject(self.query) &&
      Object.keys(self.query).length) {
      query = stringify$1(self.query);
    }

    var search = self.search || (query && ('?' + query)) || '';

    if (protocol && protocol.substr(-1) !== ':') protocol += ':';

    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (self.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
      host = '//' + (host || '');
      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
    } else if (!host) {
      host = '';
    }

    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
    if (search && search.charAt(0) !== '?') search = '?' + search;

    pathname = pathname.replace(/[?#]/g, function(match) {
      return encodeURIComponent(match);
    });
    search = search.replace('#', '%23');

    return protocol + host + pathname + search + hash;
  }

  Url.prototype.format = function() {
    return format(this);
  };

  function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
  }

  Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
  };

  function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
  }

  Url.prototype.resolveObject = function(relative) {
    if (isString(relative)) {
      var rel = new Url();
      rel.parse(relative, false, true);
      relative = rel;
    }

    var result = new Url();
    var tkeys = Object.keys(this);
    for (var tk = 0; tk < tkeys.length; tk++) {
      var tkey = tkeys[tk];
      result[tkey] = this[tkey];
    }

    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;

    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === '') {
      result.href = result.format();
      return result;
    }

    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
      // take everything except the protocol from relative
      var rkeys = Object.keys(relative);
      for (var rk = 0; rk < rkeys.length; rk++) {
        var rkey = rkeys[rk];
        if (rkey !== 'protocol')
          result[rkey] = relative[rkey];
      }

      //urlParse appends trailing / to urls like http://www.example.com
      if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
        result.path = result.pathname = '/';
      }

      result.href = result.format();
      return result;
    }
    var relPath;
    if (relative.protocol && relative.protocol !== result.protocol) {
      // if it's a known url protocol, then changing
      // the protocol does weird things
      // first, if it's not file:, then we MUST have a host,
      // and if there was a path
      // to begin with, then we MUST have a path.
      // if it is file:, then the host is dropped,
      // because that's known to be hostless.
      // anything else is assumed to be absolute.
      if (!slashedProtocol[relative.protocol]) {
        var keys = Object.keys(relative);
        for (var v = 0; v < keys.length; v++) {
          var k = keys[v];
          result[k] = relative[k];
        }
        result.href = result.format();
        return result;
      }

      result.protocol = relative.protocol;
      if (!relative.host && !hostlessProtocol[relative.protocol]) {
        relPath = (relative.pathname || '').split('/');
        while (relPath.length && !(relative.host = relPath.shift()));
        if (!relative.host) relative.host = '';
        if (!relative.hostname) relative.hostname = '';
        if (relPath[0] !== '') relPath.unshift('');
        if (relPath.length < 2) relPath.unshift('');
        result.pathname = relPath.join('/');
      } else {
        result.pathname = relative.pathname;
      }
      result.search = relative.search;
      result.query = relative.query;
      result.host = relative.host || '';
      result.auth = relative.auth;
      result.hostname = relative.hostname || relative.host;
      result.port = relative.port;
      // to support http.request
      if (result.pathname || result.search) {
        var p = result.pathname || '';
        var s = result.search || '';
        result.path = p + s;
      }
      result.slashes = result.slashes || relative.slashes;
      result.href = result.format();
      return result;
    }

    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
        relative.host ||
        relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
        (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];
    relPath = relative.pathname && relative.pathname.split('/') || [];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
      result.hostname = '';
      result.port = null;
      if (result.host) {
        if (srcPath[0] === '') srcPath[0] = result.host;
        else srcPath.unshift(result.host);
      }
      result.host = '';
      if (relative.protocol) {
        relative.hostname = null;
        relative.port = null;
        if (relative.host) {
          if (relPath[0] === '') relPath[0] = relative.host;
          else relPath.unshift(relative.host);
        }
        relative.host = null;
      }
      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
    }
    var authInHost;
    if (isRelAbs) {
      // it's absolute.
      result.host = (relative.host || relative.host === '') ?
        relative.host : result.host;
      result.hostname = (relative.hostname || relative.hostname === '') ?
        relative.hostname : result.hostname;
      result.search = relative.search;
      result.query = relative.query;
      srcPath = relPath;
      // fall through to the dot-handling below.
    } else if (relPath.length) {
      // it's relative
      // throw away the existing file, and take the new path instead.
      if (!srcPath) srcPath = [];
      srcPath.pop();
      srcPath = srcPath.concat(relPath);
      result.search = relative.search;
      result.query = relative.query;
    } else if (!isNullOrUndefined(relative.search)) {
      // just pull out the search.
      // like href='?foo'.
      // Put this after the other two cases because it simplifies the booleans
      if (psychotic) {
        result.hostname = result.host = srcPath.shift();
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        authInHost = result.host && result.host.indexOf('@') > 0 ?
          result.host.split('@') : false;
        if (authInHost) {
          result.auth = authInHost.shift();
          result.host = result.hostname = authInHost.shift();
        }
      }
      result.search = relative.search;
      result.query = relative.query;
      //to support http.request
      if (!isNull(result.pathname) || !isNull(result.search)) {
        result.path = (result.pathname ? result.pathname : '') +
          (result.search ? result.search : '');
      }
      result.href = result.format();
      return result;
    }

    if (!srcPath.length) {
      // no path at all.  easy.
      // we've already handled the other stuff above.
      result.pathname = null;
      //to support http.request
      if (result.search) {
        result.path = '/' + result.search;
      } else {
        result.path = null;
      }
      result.href = result.format();
      return result;
    }

    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for (var i = srcPath.length; i >= 0; i--) {
      last = srcPath[i];
      if (last === '.') {
        srcPath.splice(i, 1);
      } else if (last === '..') {
        srcPath.splice(i, 1);
        up++;
      } else if (up) {
        srcPath.splice(i, 1);
        up--;
      }
    }

    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) {
      for (; up--; up) {
        srcPath.unshift('..');
      }
    }

    if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
      srcPath.unshift('');
    }

    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
      srcPath.push('');
    }

    var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

    // put the host back
    if (psychotic) {
      result.hostname = result.host = isAbsolute ? '' :
        srcPath.length ? srcPath.shift() : '';
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      authInHost = result.host && result.host.indexOf('@') > 0 ?
        result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    mustEndAbs = mustEndAbs || (result.host && srcPath.length);

    if (mustEndAbs && !isAbsolute) {
      srcPath.unshift('');
    }

    if (!srcPath.length) {
      result.pathname = null;
      result.path = null;
    } else {
      result.pathname = srcPath.join('/');
    }

    //to support request.http
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
        (result.search ? result.search : '');
    }
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  };

  Url.prototype.parseHost = function() {
    return parseHost(this);
  };

  function parseHost(self) {
    var host = self.host;
    var port = portPattern.exec(host);
    if (port) {
      port = port[0];
      if (port !== ':') {
        self.port = port.substr(1);
      }
      host = host.substr(0, host.length - port.length);
    }
    if (host) self.hostname = host;
  }

  var url$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    parse: urlParse,
    resolve: urlResolve,
    resolveObject: urlResolveObject,
    format: urlFormat,
    'default': url$1,
    Url: Url
  });

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(url$2);

  var url = Object.assign(
    {},
    require$$0,
    {
      pathToFileURL: (path)=> { return `file:///${encodeURIComponent(path)}` },
      fileURLToPath: (fileURL)=> { return decodeURIComponent(fileURL.toString().replace(/^file:\/\/\//, '')) }
    }
  );

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

  /**
   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
   */
  var encode$1 = function (number) {
    if (0 <= number && number < intToCharMap.length) {
      return intToCharMap[number];
    }
    throw new TypeError("Must be between 0 and 63: " + number);
  };

  /**
   * Decode a single base 64 character code digit to an integer. Returns -1 on
   * failure.
   */
  var decode$1 = function (charCode) {
    var bigA = 65;     // 'A'
    var bigZ = 90;     // 'Z'

    var littleA = 97;  // 'a'
    var littleZ = 122; // 'z'

    var zero = 48;     // '0'
    var nine = 57;     // '9'

    var plus = 43;     // '+'
    var slash = 47;    // '/'

    var littleOffset = 26;
    var numberOffset = 52;

    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
    if (bigA <= charCode && charCode <= bigZ) {
      return (charCode - bigA);
    }

    // 26 - 51: abcdefghijklmnopqrstuvwxyz
    if (littleA <= charCode && charCode <= littleZ) {
      return (charCode - littleA + littleOffset);
    }

    // 52 - 61: 0123456789
    if (zero <= charCode && charCode <= nine) {
      return (charCode - zero + numberOffset);
    }

    // 62: +
    if (charCode == plus) {
      return 62;
    }

    // 63: /
    if (charCode == slash) {
      return 63;
    }

    // Invalid base64 digit.
    return -1;
  };

  var base64 = {
  	encode: encode$1,
  	decode: decode$1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */

  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   *
   * Based on the Base 64 VLQ implementation in Closure Compiler:
   * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
   *
   * Copyright 2011 The Closure Compiler Authors. All rights reserved.
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are
   * met:
   *
   *  * Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   *  * Redistributions in binary form must reproduce the above
   *    copyright notice, this list of conditions and the following
   *    disclaimer in the documentation and/or other materials provided
   *    with the distribution.
   *  * Neither the name of Google Inc. nor the names of its
   *    contributors may be used to endorse or promote products derived
   *    from this software without specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */



  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
  // length quantities we use in the source map spec, the first bit is the sign,
  // the next four bits are the actual value, and the 6th bit is the
  // continuation bit. The continuation bit tells us whether there are more
  // digits in this value following this digit.
  //
  //   Continuation
  //   |    Sign
  //   |    |
  //   V    V
  //   101011

  var VLQ_BASE_SHIFT = 5;

  // binary: 100000
  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

  // binary: 011111
  var VLQ_BASE_MASK = VLQ_BASE - 1;

  // binary: 100000
  var VLQ_CONTINUATION_BIT = VLQ_BASE;

  /**
   * Converts from a two-complement value to a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
   */
  function toVLQSigned(aValue) {
    return aValue < 0
      ? ((-aValue) << 1) + 1
      : (aValue << 1) + 0;
  }

  /**
   * Converts to a two-complement value from a value where the sign bit is
   * placed in the least significant bit.  For example, as decimals:
   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
   */
  function fromVLQSigned(aValue) {
    var isNegative = (aValue & 1) === 1;
    var shifted = aValue >> 1;
    return isNegative
      ? -shifted
      : shifted;
  }

  /**
   * Returns the base 64 VLQ encoded value.
   */
  var encode = function base64VLQ_encode(aValue) {
    var encoded = "";
    var digit;

    var vlq = toVLQSigned(aValue);

    do {
      digit = vlq & VLQ_BASE_MASK;
      vlq >>>= VLQ_BASE_SHIFT;
      if (vlq > 0) {
        // There are still more digits in this value, so we must make sure the
        // continuation bit is marked.
        digit |= VLQ_CONTINUATION_BIT;
      }
      encoded += base64.encode(digit);
    } while (vlq > 0);

    return encoded;
  };

  /**
   * Decodes the next base 64 VLQ value from the given string and returns the
   * value and the rest of the string via the out parameter.
   */
  var decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
    var strLen = aStr.length;
    var result = 0;
    var shift = 0;
    var continuation, digit;

    do {
      if (aIndex >= strLen) {
        throw new Error("Expected more digits in base 64 VLQ value.");
      }

      digit = base64.decode(aStr.charCodeAt(aIndex++));
      if (digit === -1) {
        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
      }

      continuation = !!(digit & VLQ_CONTINUATION_BIT);
      digit &= VLQ_BASE_MASK;
      result = result + (digit << shift);
      shift += VLQ_BASE_SHIFT;
    } while (continuation);

    aOutParam.value = fromVLQSigned(result);
    aOutParam.rest = aIndex;
  };

  var base64Vlq = {
  	encode: encode,
  	decode: decode
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */

  var util = createCommonjsModule(function (module, exports) {
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  /**
   * This is a helper function for getting values from parameter/options
   * objects.
   *
   * @param args The object we are extracting values from
   * @param name The name of the property we are getting.
   * @param defaultValue An optional value to return if the property is missing
   * from the object. If this is not specified and the property is missing, an
   * error will be thrown.
   */
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;

  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;

  function urlParse(aUrl) {
    var match = aUrl.match(urlRegexp);
    if (!match) {
      return null;
    }
    return {
      scheme: match[1],
      auth: match[2],
      host: match[3],
      port: match[4],
      path: match[5]
    };
  }
  exports.urlParse = urlParse;

  function urlGenerate(aParsedUrl) {
    var url = '';
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ':';
    }
    url += '//';
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + '@';
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port;
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;

  /**
   * Normalizes a path, or the path portion of a URL:
   *
   * - Replaces consecutive slashes with one slash.
   * - Removes unnecessary '.' parts.
   * - Removes unnecessary '<dir>/..' parts.
   *
   * Based on code in the Node.js 'path' core module.
   *
   * @param aPath The path or url to normalize.
   */
  function normalize(aPath) {
    var path = aPath;
    var url = urlParse(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path = url.path;
    }
    var isAbsolute = exports.isAbsolute(path);

    var parts = path.split(/\/+/);
    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
      part = parts[i];
      if (part === '.') {
        parts.splice(i, 1);
      } else if (part === '..') {
        up++;
      } else if (up > 0) {
        if (part === '') {
          // The first part is blank if the path is absolute. Trying to go
          // above the root is a no-op. Therefore we can remove all '..' parts
          // directly after the root.
          parts.splice(i + 1, up);
          up = 0;
        } else {
          parts.splice(i, 2);
          up--;
        }
      }
    }
    path = parts.join('/');

    if (path === '') {
      path = isAbsolute ? '/' : '.';
    }

    if (url) {
      url.path = path;
      return urlGenerate(url);
    }
    return path;
  }
  exports.normalize = normalize;

  /**
   * Joins two paths/URLs.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be joined with the root.
   *
   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
   *   first.
   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
   *   is updated with the result and aRoot is returned. Otherwise the result
   *   is returned.
   *   - If aPath is absolute, the result is aPath.
   *   - Otherwise the two paths are joined with a slash.
   * - Joining for example 'http://' and 'www.example.com' is also supported.
   */
  function join(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse(aPath);
    var aRootUrl = urlParse(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || '/';
    }

    // `join(foo, '//www.example.org')`
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }

    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }

    // `join('http://', 'www.example.com')`
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }

    var joined = aPath.charAt(0) === '/'
      ? aPath
      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join;

  exports.isAbsolute = function (aPath) {
    return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
  };

  /**
   * Make a path relative to a URL or another path.
   *
   * @param aRoot The root path or URL.
   * @param aPath The path or URL to be made relative to aRoot.
   */
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }

    aRoot = aRoot.replace(/\/$/, '');

    // It is possible for the path to be above the root. In this case, simply
    // checking whether the root is a prefix of the path won't work. Instead, we
    // need to remove components from the root one by one, until either we find
    // a prefix that fits, or we run out of components to remove.
    var level = 0;
    while (aPath.indexOf(aRoot + '/') !== 0) {
      var index = aRoot.lastIndexOf("/");
      if (index < 0) {
        return aPath;
      }

      // If the only part of the root that is left is the scheme (i.e. http://,
      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
      // have exhausted all components, so the path is not relative to the root.
      aRoot = aRoot.slice(0, index);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }

      ++level;
    }

    // Make sure we add a "../" for each component we removed from the root.
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  }
  exports.relative = relative;

  var supportsNullProto = (function () {
    var obj = Object.create(null);
    return !('__proto__' in obj);
  }());

  function identity (s) {
    return s;
  }

  /**
   * Because behavior goes wacky when you set `__proto__` on objects, we
   * have to prefix all the strings in our set with an arbitrary character.
   *
   * See https://github.com/mozilla/source-map/pull/31 and
   * https://github.com/mozilla/source-map/issues/30
   *
   * @param String aStr
   */
  function toSetString(aStr) {
    if (isProtoString(aStr)) {
      return '$' + aStr;
    }

    return aStr;
  }
  exports.toSetString = supportsNullProto ? identity : toSetString;

  function fromSetString(aStr) {
    if (isProtoString(aStr)) {
      return aStr.slice(1);
    }

    return aStr;
  }
  exports.fromSetString = supportsNullProto ? identity : fromSetString;

  function isProtoString(s) {
    if (!s) {
      return false;
    }

    var length = s.length;

    if (length < 9 /* "__proto__".length */) {
      return false;
    }

    if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
        s.charCodeAt(length - 2) !== 95  /* '_' */ ||
        s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
        s.charCodeAt(length - 4) !== 116 /* 't' */ ||
        s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
        s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
        s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
        s.charCodeAt(length - 8) !== 95  /* '_' */ ||
        s.charCodeAt(length - 9) !== 95  /* '_' */) {
      return false;
    }

    for (var i = length - 10; i >= 0; i--) {
      if (s.charCodeAt(i) !== 36 /* '$' */) {
        return false;
      }
    }

    return true;
  }

  /**
   * Comparator between two mappings where the original positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same original source/line/column, but different generated
   * line and column the same. Useful when searching for a mapping with a
   * stubbed out mapping.
   */
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByOriginalPositions = compareByOriginalPositions;

  /**
   * Comparator between two mappings with deflated source and name indices where
   * the generated positions are compared.
   *
   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
   * mappings with the same generated line and column, but different
   * source/name/original line and column the same. Useful when searching for a
   * mapping with a stubbed out mapping.
   */
  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }

    if (aStr1 === null) {
      return 1; // aStr2 !== null
    }

    if (aStr2 === null) {
      return -1; // aStr1 !== null
    }

    if (aStr1 > aStr2) {
      return 1;
    }

    return -1;
  }

  /**
   * Comparator between two mappings with inflated source and name strings where
   * the generated positions are compared.
   */
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }

    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }

    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

  /**
   * Strip any JSON XSSI avoidance prefix from the string (as documented
   * in the source maps specification), and then parse the string as
   * JSON.
   */
  function parseSourceMapInput(str) {
    return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
  }
  exports.parseSourceMapInput = parseSourceMapInput;

  /**
   * Compute the URL of a source given the the source root, the source's
   * URL, and the source map's URL.
   */
  function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    sourceURL = sourceURL || '';

    if (sourceRoot) {
      // This follows what Chrome does.
      if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
        sourceRoot += '/';
      }
      // The spec says:
      //   Line 4: An optional source root, useful for relocating source
      //   files on a server or removing repeated values in the
      //   “sources” entry.  This value is prepended to the individual
      //   entries in the “source” field.
      sourceURL = sourceRoot + sourceURL;
    }

    // Historically, SourceMapConsumer did not take the sourceMapURL as
    // a parameter.  This mode is still somewhat supported, which is why
    // this code block is conditional.  However, it's preferable to pass
    // the source map URL to SourceMapConsumer, so that this function
    // can implement the source URL resolution algorithm as outlined in
    // the spec.  This block is basically the equivalent of:
    //    new URL(sourceURL, sourceMapURL).toString()
    // ... except it avoids using URL, which wasn't available in the
    // older releases of node still supported by this library.
    //
    // The spec says:
    //   If the sources are not absolute URLs after prepending of the
    //   “sourceRoot”, the sources are resolved relative to the
    //   SourceMap (like resolving script src in a html document).
    if (sourceMapURL) {
      var parsed = urlParse(sourceMapURL);
      if (!parsed) {
        throw new Error("sourceMapURL could not be parsed");
      }
      if (parsed.path) {
        // Strip the last path component, but keep the "/".
        var index = parsed.path.lastIndexOf('/');
        if (index >= 0) {
          parsed.path = parsed.path.substring(0, index + 1);
        }
      }
      sourceURL = join(urlGenerate(parsed), sourceURL);
    }

    return normalize(sourceURL);
  }
  exports.computeSourceURL = computeSourceURL;
  });

  /* -*- Mode: js; js-indent-level: 2; -*- */

  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */


  var has = Object.prototype.hasOwnProperty;
  var hasNativeMap = typeof Map !== "undefined";

  /**
   * A data structure which is a combination of an array and a set. Adding a new
   * member is O(1), testing for membership is O(1), and finding the index of an
   * element is O(1). Removing elements from the set is not supported. Only
   * strings are supported for membership.
   */
  function ArraySet$2() {
    this._array = [];
    this._set = hasNativeMap ? new Map() : Object.create(null);
  }

  /**
   * Static method for creating ArraySet instances from an existing array.
   */
  ArraySet$2.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
    var set = new ArraySet$2();
    for (var i = 0, len = aArray.length; i < len; i++) {
      set.add(aArray[i], aAllowDuplicates);
    }
    return set;
  };

  /**
   * Return how many unique items are in this ArraySet. If duplicates have been
   * added, than those do not count towards the size.
   *
   * @returns Number
   */
  ArraySet$2.prototype.size = function ArraySet_size() {
    return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
  };

  /**
   * Add the given string to this set.
   *
   * @param String aStr
   */
  ArraySet$2.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
    var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
    var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
    var idx = this._array.length;
    if (!isDuplicate || aAllowDuplicates) {
      this._array.push(aStr);
    }
    if (!isDuplicate) {
      if (hasNativeMap) {
        this._set.set(aStr, idx);
      } else {
        this._set[sStr] = idx;
      }
    }
  };

  /**
   * Is the given string a member of this set?
   *
   * @param String aStr
   */
  ArraySet$2.prototype.has = function ArraySet_has(aStr) {
    if (hasNativeMap) {
      return this._set.has(aStr);
    } else {
      var sStr = util.toSetString(aStr);
      return has.call(this._set, sStr);
    }
  };

  /**
   * What is the index of the given string in the array?
   *
   * @param String aStr
   */
  ArraySet$2.prototype.indexOf = function ArraySet_indexOf(aStr) {
    if (hasNativeMap) {
      var idx = this._set.get(aStr);
      if (idx >= 0) {
          return idx;
      }
    } else {
      var sStr = util.toSetString(aStr);
      if (has.call(this._set, sStr)) {
        return this._set[sStr];
      }
    }

    throw new Error('"' + aStr + '" is not in the set.');
  };

  /**
   * What is the element at the given index?
   *
   * @param Number aIdx
   */
  ArraySet$2.prototype.at = function ArraySet_at(aIdx) {
    if (aIdx >= 0 && aIdx < this._array.length) {
      return this._array[aIdx];
    }
    throw new Error('No element indexed by ' + aIdx);
  };

  /**
   * Returns the array representation of this set (which has the proper indices
   * indicated by indexOf). Note that this is a copy of the internal array used
   * for storing the members so that no one can mess with internal state.
   */
  ArraySet$2.prototype.toArray = function ArraySet_toArray() {
    return this._array.slice();
  };

  var ArraySet_1 = ArraySet$2;

  var arraySet = {
  	ArraySet: ArraySet_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */

  /*
   * Copyright 2014 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */



  /**
   * Determine whether mappingB is after mappingA with respect to generated
   * position.
   */
  function generatedPositionAfter(mappingA, mappingB) {
    // Optimized for most common case
    var lineA = mappingA.generatedLine;
    var lineB = mappingB.generatedLine;
    var columnA = mappingA.generatedColumn;
    var columnB = mappingB.generatedColumn;
    return lineB > lineA || lineB == lineA && columnB >= columnA ||
           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
  }

  /**
   * A data structure to provide a sorted view of accumulated mappings in a
   * performance conscious manner. It trades a neglibable overhead in general
   * case for a large speedup in case of mappings being added in order.
   */
  function MappingList$1() {
    this._array = [];
    this._sorted = true;
    // Serves as infimum
    this._last = {generatedLine: -1, generatedColumn: 0};
  }

  /**
   * Iterate through internal items. This method takes the same arguments that
   * `Array.prototype.forEach` takes.
   *
   * NOTE: The order of the mappings is NOT guaranteed.
   */
  MappingList$1.prototype.unsortedForEach =
    function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };

  /**
   * Add the given source mapping.
   *
   * @param Object aMapping
   */
  MappingList$1.prototype.add = function MappingList_add(aMapping) {
    if (generatedPositionAfter(this._last, aMapping)) {
      this._last = aMapping;
      this._array.push(aMapping);
    } else {
      this._sorted = false;
      this._array.push(aMapping);
    }
  };

  /**
   * Returns the flat, sorted array of mappings. The mappings are sorted by
   * generated position.
   *
   * WARNING: This method returns internal data without copying, for
   * performance. The return value must NOT be mutated, and should be treated as
   * an immutable borrow. If you want to take ownership, you must make your own
   * copy.
   */
  MappingList$1.prototype.toArray = function MappingList_toArray() {
    if (!this._sorted) {
      this._array.sort(util.compareByGeneratedPositionsInflated);
      this._sorted = true;
    }
    return this._array;
  };

  var MappingList_1 = MappingList$1;

  var mappingList = {
  	MappingList: MappingList_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */

  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */



  var ArraySet$1 = arraySet.ArraySet;
  var MappingList = mappingList.MappingList;

  /**
   * An instance of the SourceMapGenerator represents a source map which is
   * being built incrementally. You may pass an object with the following
   * properties:
   *
   *   - file: The filename of the generated source.
   *   - sourceRoot: A root for all relative URLs in this source map.
   */
  function SourceMapGenerator$2(aArgs) {
    if (!aArgs) {
      aArgs = {};
    }
    this._file = util.getArg(aArgs, 'file', null);
    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
    this._sources = new ArraySet$1();
    this._names = new ArraySet$1();
    this._mappings = new MappingList();
    this._sourcesContents = null;
  }

  SourceMapGenerator$2.prototype._version = 3;

  /**
   * Creates a new SourceMapGenerator based on a SourceMapConsumer
   *
   * @param aSourceMapConsumer The SourceMap.
   */
  SourceMapGenerator$2.fromSourceMap =
    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator$2({
        file: aSourceMapConsumer.file,
        sourceRoot: sourceRoot
      });
      aSourceMapConsumer.eachMapping(function (mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };

        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }

          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };

          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }

        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util.relative(sourceRoot, sourceFile);
        }

        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }

        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };

  /**
   * Add a single mapping from original source line and column to the generated
   * source's line and column for this source map being created. The mapping
   * object should have the following properties:
   *
   *   - generated: An object with the generated line and column positions.
   *   - original: An object with the original line and column positions.
   *   - source: The original source file (relative to the sourceRoot).
   *   - name: An optional original token name for this mapping.
   */
  SourceMapGenerator$2.prototype.addMapping =
    function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, 'generated');
      var original = util.getArg(aArgs, 'original', null);
      var source = util.getArg(aArgs, 'source', null);
      var name = util.getArg(aArgs, 'name', null);

      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }

      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }

      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }

      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source: source,
        name: name
      });
    };

  /**
   * Set the source content for a source file.
   */
  SourceMapGenerator$2.prototype.setSourceContent =
    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }

      if (aSourceContent != null) {
        // Add the source content to the _sourcesContents map.
        // Create a new _sourcesContents map if the property is null.
        if (!this._sourcesContents) {
          this._sourcesContents = Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        // Remove the source file from the _sourcesContents map.
        // If the _sourcesContents map is empty, set the property to null.
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };

  /**
   * Applies the mappings of a sub-source-map for a specific source file to the
   * source map being generated. Each mapping to the supplied source file is
   * rewritten using the supplied source map. Note: The resolution for the
   * resulting mappings is the minimium of this map and the supplied map.
   *
   * @param aSourceMapConsumer The source map to be applied.
   * @param aSourceFile Optional. The filename of the source file.
   *        If omitted, SourceMapConsumer's file property will be used.
   * @param aSourceMapPath Optional. The dirname of the path to the source map
   *        to be applied. If relative, it is relative to the SourceMapConsumer.
   *        This parameter is needed when the two source maps aren't in the same
   *        directory, and the source map to be applied contains relative source
   *        paths. If so, those relative source paths need to be rewritten
   *        relative to the SourceMapGenerator.
   */
  SourceMapGenerator$2.prototype.applySourceMap =
    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      // If aSourceFile is omitted, we will use the file property of the SourceMap
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
            'or the source map\'s "file" property. Both were omitted.'
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      // Make "sourceFile" relative if an absolute Url is passed.
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      // Applying the SourceMap can add and remove items from the sources and
      // the names array.
      var newSources = new ArraySet$1();
      var newNames = new ArraySet$1();

      // Find mappings for the "sourceFile"
      this._mappings.unsortedForEach(function (mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          // Check if it can be mapped by the source map, then update the mapping.
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            // Copy mapping
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }

        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }

        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }

      }, this);
      this._sources = newSources;
      this._names = newNames;

      // Copy sourcesContents of applied map.
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile = util.join(aSourceMapPath, sourceFile);
          }
          if (sourceRoot != null) {
            sourceFile = util.relative(sourceRoot, sourceFile);
          }
          this.setSourceContent(sourceFile, content);
        }
      }, this);
    };

  /**
   * A mapping can have one of the three levels of data:
   *
   *   1. Just the generated position.
   *   2. The Generated position, original position, and original source.
   *   3. Generated and original position, original source, as well as a name
   *      token.
   *
   * To maintain consistency, we validate that any new mapping being added falls
   * in to one of these categories.
   */
  SourceMapGenerator$2.prototype._validateMapping =
    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                aName) {
      // When aOriginal is truthy but has empty values for .line and .column,
      // it is most likely a programmer error. In this case we throw a very
      // specific error message to try to guide them the right way.
      // For example: https://github.com/Polymer/polymer-bundler/pull/519
      if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
          throw new Error(
              'original.line and original.column are not numbers -- you probably meant to omit ' +
              'the original mapping entirely and only map the generated position. If so, pass ' +
              'null for the original mapping instead of an object with empty or null values.'
          );
      }

      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
          && aGenerated.line > 0 && aGenerated.column >= 0
          && !aOriginal && !aSource && !aName) {
        // Case 1.
        return;
      }
      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
               && aGenerated.line > 0 && aGenerated.column >= 0
               && aOriginal.line > 0 && aOriginal.column >= 0
               && aSource) {
        // Cases 2 and 3.
        return;
      }
      else {
        throw new Error('Invalid mapping: ' + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };

  /**
   * Serialize the accumulated mappings in to the stream of base 64 VLQs
   * specified by the source map format.
   */
  SourceMapGenerator$2.prototype._serializeMappings =
    function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = '';
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;

      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = '';

        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ';';
            previousGeneratedLine++;
          }
        }
        else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ',';
          }
        }

        next += base64Vlq.encode(mapping.generatedColumn
                                   - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;

        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64Vlq.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;

          // lines are stored 0-based in SourceMap spec version 3
          next += base64Vlq.encode(mapping.originalLine - 1
                                     - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;

          next += base64Vlq.encode(mapping.originalColumn
                                     - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;

          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64Vlq.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }

        result += next;
      }

      return result;
    };

  SourceMapGenerator$2.prototype._generateSourcesContent =
    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function (source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
          ? this._sourcesContents[key]
          : null;
      }, this);
    };

  /**
   * Externalize the source map.
   */
  SourceMapGenerator$2.prototype.toJSON =
    function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }

      return map;
    };

  /**
   * Render the source map being generated to a string.
   */
  SourceMapGenerator$2.prototype.toString =
    function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };

  var SourceMapGenerator_1 = SourceMapGenerator$2;

  var sourceMapGenerator = {
  	SourceMapGenerator: SourceMapGenerator_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */

  var binarySearch = createCommonjsModule(function (module, exports) {
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;

  /**
   * Recursive implementation of binary search.
   *
   * @param aLow Indices here and lower do not contain the needle.
   * @param aHigh Indices here and higher do not contain the needle.
   * @param aNeedle The element being searched for.
   * @param aHaystack The non-empty array being searched.
   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   */
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    // This function terminates when one of the following is true:
    //
    //   1. We find the exact element we are looking for.
    //
    //   2. We did not find the exact element, but we can return the index of
    //      the next-closest element.
    //
    //   3. We did not find the exact element, and there is no next-closest
    //      element than the one we are searching for, so we return -1.
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      // Found the element we are looking for.
      return mid;
    }
    else if (cmp > 0) {
      // Our needle is greater than aHaystack[mid].
      if (aHigh - mid > 1) {
        // The element is in the upper half.
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }

      // The exact needle element was not found in this haystack. Determine if
      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    }
    else {
      // Our needle is less than aHaystack[mid].
      if (mid - aLow > 1) {
        // The element is in the lower half.
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }

      // we are in termination case (3) or (2) and return the appropriate thing.
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  }

  /**
   * This is an implementation of binary search which will always try and return
   * the index of the closest element if there is no exact hit. This is because
   * mappings between original and generated line/col pairs are single points,
   * and there is an implicit region between each of them, so a miss just means
   * that you aren't on the very start of a region.
   *
   * @param aNeedle The element you are looking for.
   * @param aHaystack The array that is being searched.
   * @param aCompare A function which takes the needle and an element in the
   *     array and returns -1, 0, or 1 depending on whether the needle is less
   *     than, equal to, or greater than the element, respectively.
   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
   */
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }

    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
      return -1;
    }

    // We have found either the exact element, or the next-closest element than
    // the one we are searching for. However, there may be more than one such
    // element. Make sure we always return the smallest of these.
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break;
      }
      --index;
    }

    return index;
  };
  });

  /* -*- Mode: js; js-indent-level: 2; -*- */
  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  // It turns out that some (most?) JavaScript engines don't self-host
  // `Array.prototype.sort`. This makes sense because C++ will likely remain
  // faster than JS when doing raw CPU-intensive sorting. However, when using a
  // custom comparator function, calling back and forth between the VM's C++ and
  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
  // worse generated code for the comparator function than would be optimal. In
  // fact, when sorting with a comparator, these costs outweigh the benefits of
  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
  // a ~3500ms mean speed-up in `bench/bench.html`.

  /**
   * Swap the elements indexed by `x` and `y` in the array `ary`.
   *
   * @param {Array} ary
   *        The array.
   * @param {Number} x
   *        The index of the first item.
   * @param {Number} y
   *        The index of the second item.
   */
  function swap(ary, x, y) {
    var temp = ary[x];
    ary[x] = ary[y];
    ary[y] = temp;
  }

  /**
   * Returns a random integer within the range `low .. high` inclusive.
   *
   * @param {Number} low
   *        The lower bound on the range.
   * @param {Number} high
   *        The upper bound on the range.
   */
  function randomIntInRange(low, high) {
    return Math.round(low + (Math.random() * (high - low)));
  }

  /**
   * The Quick Sort algorithm.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   * @param {Number} p
   *        Start index of the array
   * @param {Number} r
   *        End index of the array
   */
  function doQuickSort(ary, comparator, p, r) {
    // If our lower bound is less than our upper bound, we (1) partition the
    // array into two pieces and (2) recurse on each half. If it is not, this is
    // the empty array and our base case.

    if (p < r) {
      // (1) Partitioning.
      //
      // The partitioning chooses a pivot between `p` and `r` and moves all
      // elements that are less than or equal to the pivot to the before it, and
      // all the elements that are greater than it after it. The effect is that
      // once partition is done, the pivot is in the exact place it will be when
      // the array is put in sorted order, and it will not need to be moved
      // again. This runs in O(n) time.

      // Always choose a random pivot so that an input array which is reverse
      // sorted does not cause O(n^2) running time.
      var pivotIndex = randomIntInRange(p, r);
      var i = p - 1;

      swap(ary, pivotIndex, r);
      var pivot = ary[r];

      // Immediately after `j` is incremented in this loop, the following hold
      // true:
      //
      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
      //
      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
      for (var j = p; j < r; j++) {
        if (comparator(ary[j], pivot) <= 0) {
          i += 1;
          swap(ary, i, j);
        }
      }

      swap(ary, i + 1, j);
      var q = i + 1;

      // (2) Recurse on each half.

      doQuickSort(ary, comparator, p, q - 1);
      doQuickSort(ary, comparator, q + 1, r);
    }
  }

  /**
   * Sort the given array in-place with the given comparator function.
   *
   * @param {Array} ary
   *        An array to sort.
   * @param {function} comparator
   *        Function to use to compare two items.
   */
  var quickSort_1 = function (ary, comparator) {
    doQuickSort(ary, comparator, 0, ary.length - 1);
  };

  var quickSort$1 = {
  	quickSort: quickSort_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */

  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */



  var ArraySet = arraySet.ArraySet;

  var quickSort = quickSort$1.quickSort;

  function SourceMapConsumer$1(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }

    return sourceMap.sections != null
      ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
      : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
  }

  SourceMapConsumer$1.fromSourceMap = function(aSourceMap, aSourceMapURL) {
    return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
  };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  SourceMapConsumer$1.prototype._version = 3;

  // `__generatedMappings` and `__originalMappings` are arrays that hold the
  // parsed mapping coordinates from the source map's "mappings" attribute. They
  // are lazily instantiated, accessed via the `_generatedMappings` and
  // `_originalMappings` getters respectively, and we only parse the mappings
  // and create these arrays once queried for a source location. We jump through
  // these hoops because there can be many thousands of mappings, and parsing
  // them is expensive, so we only want to do it if we must.
  //
  // Each object in the arrays is of the form:
  //
  //     {
  //       generatedLine: The line number in the generated code,
  //       generatedColumn: The column number in the generated code,
  //       source: The path to the original source file that generated this
  //               chunk of code,
  //       originalLine: The line number in the original source that
  //                     corresponds to this chunk of generated code,
  //       originalColumn: The column number in the original source that
  //                       corresponds to this chunk of generated code,
  //       name: The name of the original symbol which generated this chunk of
  //             code.
  //     }
  //
  // All properties except for `generatedLine` and `generatedColumn` can be
  // `null`.
  //
  // `_generatedMappings` is ordered by the generated positions.
  //
  // `_originalMappings` is ordered by the original positions.

  SourceMapConsumer$1.prototype.__generatedMappings = null;
  Object.defineProperty(SourceMapConsumer$1.prototype, '_generatedMappings', {
    configurable: true,
    enumerable: true,
    get: function () {
      if (!this.__generatedMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__generatedMappings;
    }
  });

  SourceMapConsumer$1.prototype.__originalMappings = null;
  Object.defineProperty(SourceMapConsumer$1.prototype, '_originalMappings', {
    configurable: true,
    enumerable: true,
    get: function () {
      if (!this.__originalMappings) {
        this._parseMappings(this._mappings, this.sourceRoot);
      }

      return this.__originalMappings;
    }
  });

  SourceMapConsumer$1.prototype._charIsMappingSeparator =
    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
      var c = aStr.charAt(index);
      return c === ";" || c === ",";
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  SourceMapConsumer$1.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      throw new Error("Subclasses must implement _parseMappings");
    };

  SourceMapConsumer$1.GENERATED_ORDER = 1;
  SourceMapConsumer$1.ORIGINAL_ORDER = 2;

  SourceMapConsumer$1.GREATEST_LOWER_BOUND = 1;
  SourceMapConsumer$1.LEAST_UPPER_BOUND = 2;

  /**
   * Iterate over each mapping between an original source/line/column and a
   * generated line/column in this source map.
   *
   * @param Function aCallback
   *        The function that is called with each mapping.
   * @param Object aContext
   *        Optional. If specified, this object will be the value of `this` every
   *        time that `aCallback` is called.
   * @param aOrder
   *        Either `SourceMapConsumer.GENERATED_ORDER` or
   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
   *        iterate over the mappings sorted by the generated file's line/column
   *        order or the original's source/line/column order, respectively. Defaults to
   *        `SourceMapConsumer.GENERATED_ORDER`.
   */
  SourceMapConsumer$1.prototype.eachMapping =
    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
      var context = aContext || null;
      var order = aOrder || SourceMapConsumer$1.GENERATED_ORDER;

      var mappings;
      switch (order) {
      case SourceMapConsumer$1.GENERATED_ORDER:
        mappings = this._generatedMappings;
        break;
      case SourceMapConsumer$1.ORIGINAL_ORDER:
        mappings = this._originalMappings;
        break;
      default:
        throw new Error("Unknown order of iteration.");
      }

      var sourceRoot = this.sourceRoot;
      mappings.map(function (mapping) {
        var source = mapping.source === null ? null : this._sources.at(mapping.source);
        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
        return {
          source: source,
          generatedLine: mapping.generatedLine,
          generatedColumn: mapping.generatedColumn,
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: mapping.name === null ? null : this._names.at(mapping.name)
        };
      }, this).forEach(aCallback, context);
    };

  /**
   * Returns all generated line and column information for the original source,
   * line, and column provided. If no column is provided, returns all mappings
   * corresponding to a either the line we are searching for or the next
   * closest line that has any mappings. Otherwise, returns all mappings
   * corresponding to the given line and either the column we are searching for
   * or the next closest column that has any offsets.
   *
   * The only argument is an object with the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number is 1-based.
   *   - column: Optional. the column number in the original source.
   *    The column number is 0-based.
   *
   * and an array of objects is returned, each with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *    line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *    The column number is 0-based.
   */
  SourceMapConsumer$1.prototype.allGeneratedPositionsFor =
    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
      var line = util.getArg(aArgs, 'line');

      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
      // returns the index of the closest mapping less than the needle. By
      // setting needle.originalColumn to 0, we thus find the last mapping for
      // the given line, provided such a mapping exists.
      var needle = {
        source: util.getArg(aArgs, 'source'),
        originalLine: line,
        originalColumn: util.getArg(aArgs, 'column', 0)
      };

      needle.source = this._findSourceIndex(needle.source);
      if (needle.source < 0) {
        return [];
      }

      var mappings = [];

      var index = this._findMapping(needle,
                                    this._originalMappings,
                                    "originalLine",
                                    "originalColumn",
                                    util.compareByOriginalPositions,
                                    binarySearch.LEAST_UPPER_BOUND);
      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (aArgs.column === undefined) {
          var originalLine = mapping.originalLine;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we found. Since
          // mappings are sorted, this is guaranteed to find all mappings for
          // the line we found.
          while (mapping && mapping.originalLine === originalLine) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        } else {
          var originalColumn = mapping.originalColumn;

          // Iterate until either we run out of mappings, or we run into
          // a mapping for a different line than the one we were searching for.
          // Since mappings are sorted, this is guaranteed to find all mappings for
          // the line we are searching for.
          while (mapping &&
                 mapping.originalLine === line &&
                 mapping.originalColumn == originalColumn) {
            mappings.push({
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            });

            mapping = this._originalMappings[++index];
          }
        }
      }

      return mappings;
    };

  var SourceMapConsumer_1 = SourceMapConsumer$1;

  /**
   * A BasicSourceMapConsumer instance represents a parsed source map which we can
   * query for information about the original file positions by giving it a file
   * position in the generated source.
   *
   * The first parameter is the raw source map (either as a JSON string, or
   * already parsed to an object). According to the spec, source maps have the
   * following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - sources: An array of URLs to the original source files.
   *   - names: An array of identifiers which can be referrenced by individual mappings.
   *   - sourceRoot: Optional. The URL root from which all sources are relative.
   *   - sourcesContent: Optional. An array of contents of the original source files.
   *   - mappings: A string of base64 VLQs which contain the actual mappings.
   *   - file: Optional. The generated file this source map is associated with.
   *
   * Here is an example source map, taken from the source map spec[0]:
   *
   *     {
   *       version : 3,
   *       file: "out.js",
   *       sourceRoot : "",
   *       sources: ["foo.js", "bar.js"],
   *       names: ["src", "maps", "are", "fun"],
   *       mappings: "AA,AB;;ABCDE;"
   *     }
   *
   * The second parameter, if given, is a string whose value is the URL
   * at which the source map was found.  This URL is used to compute the
   * sources array.
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
   */
  function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }

    var version = util.getArg(sourceMap, 'version');
    var sources = util.getArg(sourceMap, 'sources');
    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
    // requires the array) to play nice here.
    var names = util.getArg(sourceMap, 'names', []);
    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
    var mappings = util.getArg(sourceMap, 'mappings');
    var file = util.getArg(sourceMap, 'file', null);

    // Once again, Sass deviates from the spec and supplies the version as a
    // string rather than a number, so we use loose equality checking here.
    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    if (sourceRoot) {
      sourceRoot = util.normalize(sourceRoot);
    }

    sources = sources
      .map(String)
      // Some source maps produce relative source paths like "./foo.js" instead of
      // "foo.js".  Normalize these first so that future comparisons will succeed.
      // See bugzil.la/1090768.
      .map(util.normalize)
      // Always ensure that absolute sources are internally stored relative to
      // the source root, if the source root is absolute. Not doing this would
      // be particularly problematic when the source root is a prefix of the
      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
      .map(function (source) {
        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
          ? util.relative(sourceRoot, source)
          : source;
      });

    // Pass `true` below to allow duplicate names and sources. While source maps
    // are intended to be compressed and deduplicated, the TypeScript compiler
    // sometimes generates source maps with duplicates in them. See Github issue
    // #72 and bugzil.la/889492.
    this._names = ArraySet.fromArray(names.map(String), true);
    this._sources = ArraySet.fromArray(sources, true);

    this._absoluteSources = this._sources.toArray().map(function (s) {
      return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
    });

    this.sourceRoot = sourceRoot;
    this.sourcesContent = sourcesContent;
    this._mappings = mappings;
    this._sourceMapURL = aSourceMapURL;
    this.file = file;
  }

  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer$1;

  /**
   * Utility function to find the index of a source.  Returns -1 if not
   * found.
   */
  BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    if (this._sources.has(relativeSource)) {
      return this._sources.indexOf(relativeSource);
    }

    // Maybe aSource is an absolute URL as returned by |sources|.  In
    // this case we can't simply undo the transform.
    var i;
    for (i = 0; i < this._absoluteSources.length; ++i) {
      if (this._absoluteSources[i] == aSource) {
        return i;
      }
    }

    return -1;
  };

  /**
   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
   *
   * @param SourceMapGenerator aSourceMap
   *        The source map that will be consumed.
   * @param String aSourceMapURL
   *        The URL at which the source map can be found (optional)
   * @returns BasicSourceMapConsumer
   */
  BasicSourceMapConsumer.fromSourceMap =
    function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
      var smc = Object.create(BasicSourceMapConsumer.prototype);

      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
      smc.sourceRoot = aSourceMap._sourceRoot;
      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                              smc.sourceRoot);
      smc.file = aSourceMap._file;
      smc._sourceMapURL = aSourceMapURL;
      smc._absoluteSources = smc._sources.toArray().map(function (s) {
        return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
      });

      // Because we are modifying the entries (by converting string sources and
      // names to indices into the sources and names ArraySets), we have to make
      // a copy of the entry or else bad things happen. Shared mutable state
      // strikes again! See github issue #191.

      var generatedMappings = aSourceMap._mappings.toArray().slice();
      var destGeneratedMappings = smc.__generatedMappings = [];
      var destOriginalMappings = smc.__originalMappings = [];

      for (var i = 0, length = generatedMappings.length; i < length; i++) {
        var srcMapping = generatedMappings[i];
        var destMapping = new Mapping;
        destMapping.generatedLine = srcMapping.generatedLine;
        destMapping.generatedColumn = srcMapping.generatedColumn;

        if (srcMapping.source) {
          destMapping.source = sources.indexOf(srcMapping.source);
          destMapping.originalLine = srcMapping.originalLine;
          destMapping.originalColumn = srcMapping.originalColumn;

          if (srcMapping.name) {
            destMapping.name = names.indexOf(srcMapping.name);
          }

          destOriginalMappings.push(destMapping);
        }

        destGeneratedMappings.push(destMapping);
      }

      quickSort(smc.__originalMappings, util.compareByOriginalPositions);

      return smc;
    };

  /**
   * The version of the source mapping spec that we are consuming.
   */
  BasicSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
    get: function () {
      return this._absoluteSources.slice();
    }
  });

  /**
   * Provide the JIT with a nice shape / hidden class.
   */
  function Mapping() {
    this.generatedLine = 0;
    this.generatedColumn = 0;
    this.source = null;
    this.originalLine = null;
    this.originalColumn = null;
    this.name = null;
  }

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  BasicSourceMapConsumer.prototype._parseMappings =
    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      var generatedLine = 1;
      var previousGeneratedColumn = 0;
      var previousOriginalLine = 0;
      var previousOriginalColumn = 0;
      var previousSource = 0;
      var previousName = 0;
      var length = aStr.length;
      var index = 0;
      var cachedSegments = {};
      var temp = {};
      var originalMappings = [];
      var generatedMappings = [];
      var mapping, str, segment, end, value;

      while (index < length) {
        if (aStr.charAt(index) === ';') {
          generatedLine++;
          index++;
          previousGeneratedColumn = 0;
        }
        else if (aStr.charAt(index) === ',') {
          index++;
        }
        else {
          mapping = new Mapping();
          mapping.generatedLine = generatedLine;

          // Because each offset is encoded relative to the previous one,
          // many segments often have the same encoding. We can exploit this
          // fact by caching the parsed variable length fields of each segment,
          // allowing us to avoid a second parse if we encounter the same
          // segment again.
          for (end = index; end < length; end++) {
            if (this._charIsMappingSeparator(aStr, end)) {
              break;
            }
          }
          str = aStr.slice(index, end);

          segment = cachedSegments[str];
          if (segment) {
            index += str.length;
          } else {
            segment = [];
            while (index < end) {
              base64Vlq.decode(aStr, index, temp);
              value = temp.value;
              index = temp.rest;
              segment.push(value);
            }

            if (segment.length === 2) {
              throw new Error('Found a source, but no line and column');
            }

            if (segment.length === 3) {
              throw new Error('Found a source and line, but no column');
            }

            cachedSegments[str] = segment;
          }

          // Generated column.
          mapping.generatedColumn = previousGeneratedColumn + segment[0];
          previousGeneratedColumn = mapping.generatedColumn;

          if (segment.length > 1) {
            // Original source.
            mapping.source = previousSource + segment[1];
            previousSource += segment[1];

            // Original line.
            mapping.originalLine = previousOriginalLine + segment[2];
            previousOriginalLine = mapping.originalLine;
            // Lines are stored 0-based
            mapping.originalLine += 1;

            // Original column.
            mapping.originalColumn = previousOriginalColumn + segment[3];
            previousOriginalColumn = mapping.originalColumn;

            if (segment.length > 4) {
              // Original name.
              mapping.name = previousName + segment[4];
              previousName += segment[4];
            }
          }

          generatedMappings.push(mapping);
          if (typeof mapping.originalLine === 'number') {
            originalMappings.push(mapping);
          }
        }
      }

      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
      this.__generatedMappings = generatedMappings;

      quickSort(originalMappings, util.compareByOriginalPositions);
      this.__originalMappings = originalMappings;
    };

  /**
   * Find the mapping that best matches the hypothetical "needle" mapping that
   * we are searching for in the given "haystack" of mappings.
   */
  BasicSourceMapConsumer.prototype._findMapping =
    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                           aColumnName, aComparator, aBias) {
      // To return the position we are searching for, we must first find the
      // mapping for the given position and then return the opposite position it
      // points to. Because the mappings are sorted, we can use binary search to
      // find the best mapping.

      if (aNeedle[aLineName] <= 0) {
        throw new TypeError('Line must be greater than or equal to 1, got '
                            + aNeedle[aLineName]);
      }
      if (aNeedle[aColumnName] < 0) {
        throw new TypeError('Column must be greater than or equal to 0, got '
                            + aNeedle[aColumnName]);
      }

      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
    };

  /**
   * Compute the last column for each generated mapping. The last column is
   * inclusive.
   */
  BasicSourceMapConsumer.prototype.computeColumnSpans =
    function SourceMapConsumer_computeColumnSpans() {
      for (var index = 0; index < this._generatedMappings.length; ++index) {
        var mapping = this._generatedMappings[index];

        // Mappings do not contain a field for the last generated columnt. We
        // can come up with an optimistic estimate, however, by assuming that
        // mappings are contiguous (i.e. given two consecutive mappings, the
        // first mapping ends where the second one starts).
        if (index + 1 < this._generatedMappings.length) {
          var nextMapping = this._generatedMappings[index + 1];

          if (mapping.generatedLine === nextMapping.generatedLine) {
            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
            continue;
          }
        }

        // The last mapping for each line spans the entire line.
        mapping.lastGeneratedColumn = Infinity;
      }
    };

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.  The line number
   *     is 1-based.
   *   - column: The column number in the generated source.  The column
   *     number is 0-based.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the original source, or null.  The
   *     column number is 0-based.
   *   - name: The original identifier, or null.
   */
  BasicSourceMapConsumer.prototype.originalPositionFor =
    function SourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._generatedMappings,
        "generatedLine",
        "generatedColumn",
        util.compareByGeneratedPositionsDeflated,
        util.getArg(aArgs, 'bias', SourceMapConsumer$1.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._generatedMappings[index];

        if (mapping.generatedLine === needle.generatedLine) {
          var source = util.getArg(mapping, 'source', null);
          if (source !== null) {
            source = this._sources.at(source);
            source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
          }
          var name = util.getArg(mapping, 'name', null);
          if (name !== null) {
            name = this._names.at(name);
          }
          return {
            source: source,
            line: util.getArg(mapping, 'originalLine', null),
            column: util.getArg(mapping, 'originalColumn', null),
            name: name
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
    function BasicSourceMapConsumer_hasContentsOfAllSources() {
      if (!this.sourcesContent) {
        return false;
      }
      return this.sourcesContent.length >= this._sources.size() &&
        !this.sourcesContent.some(function (sc) { return sc == null; });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  BasicSourceMapConsumer.prototype.sourceContentFor =
    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      if (!this.sourcesContent) {
        return null;
      }

      var index = this._findSourceIndex(aSource);
      if (index >= 0) {
        return this.sourcesContent[index];
      }

      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }

      var url;
      if (this.sourceRoot != null
          && (url = util.urlParse(this.sourceRoot))) {
        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
        // many users. We can help them out when they expect file:// URIs to
        // behave like it would if they were running a local HTTP server. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
        var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
        if (url.scheme == "file"
            && this._sources.has(fileUriAbsPath)) {
          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
        }

        if ((!url.path || url.path == "/")
            && this._sources.has("/" + relativeSource)) {
          return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
        }
      }

      // This function is used recursively from
      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
      // don't want to throw if we can't find the source - we just want to
      // return null, so we provide a flag to exit gracefully.
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + relativeSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number
   *     is 1-based.
   *   - column: The column number in the original source.  The column
   *     number is 0-based.
   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
   *     closest element that is smaller than or greater than the one we are
   *     searching for, respectively, if the exact element cannot be found.
   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the generated source, or null.
   *     The column number is 0-based.
   */
  BasicSourceMapConsumer.prototype.generatedPositionFor =
    function SourceMapConsumer_generatedPositionFor(aArgs) {
      var source = util.getArg(aArgs, 'source');
      source = this._findSourceIndex(source);
      if (source < 0) {
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      }

      var needle = {
        source: source,
        originalLine: util.getArg(aArgs, 'line'),
        originalColumn: util.getArg(aArgs, 'column')
      };

      var index = this._findMapping(
        needle,
        this._originalMappings,
        "originalLine",
        "originalColumn",
        util.compareByOriginalPositions,
        util.getArg(aArgs, 'bias', SourceMapConsumer$1.GREATEST_LOWER_BOUND)
      );

      if (index >= 0) {
        var mapping = this._originalMappings[index];

        if (mapping.source === needle.source) {
          return {
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          };
        }
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    };

  var BasicSourceMapConsumer_1 = BasicSourceMapConsumer;

  /**
   * An IndexedSourceMapConsumer instance represents a parsed source map which
   * we can query for information. It differs from BasicSourceMapConsumer in
   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
   * input.
   *
   * The first parameter is a raw source map (either as a JSON string, or already
   * parsed to an object). According to the spec for indexed source maps, they
   * have the following attributes:
   *
   *   - version: Which version of the source map spec this map is following.
   *   - file: Optional. The generated file this source map is associated with.
   *   - sections: A list of section definitions.
   *
   * Each value under the "sections" field has two fields:
   *   - offset: The offset into the original specified at which this section
   *       begins to apply, defined as an object with a "line" and "column"
   *       field.
   *   - map: A source map definition. This source map could also be indexed,
   *       but doesn't have to be.
   *
   * Instead of the "map" field, it's also possible to have a "url" field
   * specifying a URL to retrieve a source map from, but that's currently
   * unsupported.
   *
   * Here's an example source map, taken from the source map spec[0], but
   * modified to omit a section which uses the "url" field.
   *
   *  {
   *    version : 3,
   *    file: "app.js",
   *    sections: [{
   *      offset: {line:100, column:10},
   *      map: {
   *        version : 3,
   *        file: "section.js",
   *        sources: ["foo.js", "bar.js"],
   *        names: ["src", "maps", "are", "fun"],
   *        mappings: "AAAA,E;;ABCDE;"
   *      }
   *    }],
   *  }
   *
   * The second parameter, if given, is a string whose value is the URL
   * at which the source map was found.  This URL is used to compute the
   * sources array.
   *
   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
   */
  function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
    var sourceMap = aSourceMap;
    if (typeof aSourceMap === 'string') {
      sourceMap = util.parseSourceMapInput(aSourceMap);
    }

    var version = util.getArg(sourceMap, 'version');
    var sections = util.getArg(sourceMap, 'sections');

    if (version != this._version) {
      throw new Error('Unsupported version: ' + version);
    }

    this._sources = new ArraySet();
    this._names = new ArraySet();

    var lastOffset = {
      line: -1,
      column: 0
    };
    this._sections = sections.map(function (s) {
      if (s.url) {
        // The url field will require support for asynchronicity.
        // See https://github.com/mozilla/source-map/issues/16
        throw new Error('Support for url field in sections not implemented.');
      }
      var offset = util.getArg(s, 'offset');
      var offsetLine = util.getArg(offset, 'line');
      var offsetColumn = util.getArg(offset, 'column');

      if (offsetLine < lastOffset.line ||
          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
        throw new Error('Section offsets must be ordered and non-overlapping.');
      }
      lastOffset = offset;

      return {
        generatedOffset: {
          // The offset fields are 0-based, but we use 1-based indices when
          // encoding/decoding from VLQ.
          generatedLine: offsetLine + 1,
          generatedColumn: offsetColumn + 1
        },
        consumer: new SourceMapConsumer$1(util.getArg(s, 'map'), aSourceMapURL)
      }
    });
  }

  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer$1.prototype);
  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer$1;

  /**
   * The version of the source mapping spec that we are consuming.
   */
  IndexedSourceMapConsumer.prototype._version = 3;

  /**
   * The list of original sources.
   */
  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
    get: function () {
      var sources = [];
      for (var i = 0; i < this._sections.length; i++) {
        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
          sources.push(this._sections[i].consumer.sources[j]);
        }
      }
      return sources;
    }
  });

  /**
   * Returns the original source, line, and column information for the generated
   * source's line and column positions provided. The only argument is an object
   * with the following properties:
   *
   *   - line: The line number in the generated source.  The line number
   *     is 1-based.
   *   - column: The column number in the generated source.  The column
   *     number is 0-based.
   *
   * and an object is returned with the following properties:
   *
   *   - source: The original source file, or null.
   *   - line: The line number in the original source, or null.  The
   *     line number is 1-based.
   *   - column: The column number in the original source, or null.  The
   *     column number is 0-based.
   *   - name: The original identifier, or null.
   */
  IndexedSourceMapConsumer.prototype.originalPositionFor =
    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
      var needle = {
        generatedLine: util.getArg(aArgs, 'line'),
        generatedColumn: util.getArg(aArgs, 'column')
      };

      // Find the section containing the generated position we're trying to map
      // to an original position.
      var sectionIndex = binarySearch.search(needle, this._sections,
        function(needle, section) {
          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
          if (cmp) {
            return cmp;
          }

          return (needle.generatedColumn -
                  section.generatedOffset.generatedColumn);
        });
      var section = this._sections[sectionIndex];

      if (!section) {
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      }

      return section.consumer.originalPositionFor({
        line: needle.generatedLine -
          (section.generatedOffset.generatedLine - 1),
        column: needle.generatedColumn -
          (section.generatedOffset.generatedLine === needle.generatedLine
           ? section.generatedOffset.generatedColumn - 1
           : 0),
        bias: aArgs.bias
      });
    };

  /**
   * Return true if we have the source content for every source in the source
   * map, false otherwise.
   */
  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
      return this._sections.every(function (s) {
        return s.consumer.hasContentsOfAllSources();
      });
    };

  /**
   * Returns the original source content. The only argument is the url of the
   * original source file. Returns null if no original source content is
   * available.
   */
  IndexedSourceMapConsumer.prototype.sourceContentFor =
    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        var content = section.consumer.sourceContentFor(aSource, true);
        if (content) {
          return content;
        }
      }
      if (nullOnMissing) {
        return null;
      }
      else {
        throw new Error('"' + aSource + '" is not in the SourceMap.');
      }
    };

  /**
   * Returns the generated line and column information for the original source,
   * line, and column positions provided. The only argument is an object with
   * the following properties:
   *
   *   - source: The filename of the original source.
   *   - line: The line number in the original source.  The line number
   *     is 1-based.
   *   - column: The column number in the original source.  The column
   *     number is 0-based.
   *
   * and an object is returned with the following properties:
   *
   *   - line: The line number in the generated source, or null.  The
   *     line number is 1-based. 
   *   - column: The column number in the generated source, or null.
   *     The column number is 0-based.
   */
  IndexedSourceMapConsumer.prototype.generatedPositionFor =
    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];

        // Only consider this section if the requested source is in the list of
        // sources of the consumer.
        if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
          continue;
        }
        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
        if (generatedPosition) {
          var ret = {
            line: generatedPosition.line +
              (section.generatedOffset.generatedLine - 1),
            column: generatedPosition.column +
              (section.generatedOffset.generatedLine === generatedPosition.line
               ? section.generatedOffset.generatedColumn - 1
               : 0)
          };
          return ret;
        }
      }

      return {
        line: null,
        column: null
      };
    };

  /**
   * Parse the mappings in a string in to a data structure which we can easily
   * query (the ordered arrays in the `this.__generatedMappings` and
   * `this.__originalMappings` properties).
   */
  IndexedSourceMapConsumer.prototype._parseMappings =
    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
      this.__generatedMappings = [];
      this.__originalMappings = [];
      for (var i = 0; i < this._sections.length; i++) {
        var section = this._sections[i];
        var sectionMappings = section.consumer._generatedMappings;
        for (var j = 0; j < sectionMappings.length; j++) {
          var mapping = sectionMappings[j];

          var source = section.consumer._sources.at(mapping.source);
          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
          this._sources.add(source);
          source = this._sources.indexOf(source);

          var name = null;
          if (mapping.name) {
            name = section.consumer._names.at(mapping.name);
            this._names.add(name);
            name = this._names.indexOf(name);
          }

          // The mappings coming from the consumer for the section have
          // generated positions relative to the start of the section, so we
          // need to offset them to be relative to the start of the concatenated
          // generated file.
          var adjustedMapping = {
            source: source,
            generatedLine: mapping.generatedLine +
              (section.generatedOffset.generatedLine - 1),
            generatedColumn: mapping.generatedColumn +
              (section.generatedOffset.generatedLine === mapping.generatedLine
              ? section.generatedOffset.generatedColumn - 1
              : 0),
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: name
          };

          this.__generatedMappings.push(adjustedMapping);
          if (typeof adjustedMapping.originalLine === 'number') {
            this.__originalMappings.push(adjustedMapping);
          }
        }
      }

      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
      quickSort(this.__originalMappings, util.compareByOriginalPositions);
    };

  var IndexedSourceMapConsumer_1 = IndexedSourceMapConsumer;

  var sourceMapConsumer = {
  	SourceMapConsumer: SourceMapConsumer_1,
  	BasicSourceMapConsumer: BasicSourceMapConsumer_1,
  	IndexedSourceMapConsumer: IndexedSourceMapConsumer_1
  };

  /* -*- Mode: js; js-indent-level: 2; -*- */

  /*
   * Copyright 2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var SourceMapGenerator$1 = sourceMapGenerator.SourceMapGenerator;


  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
  // operating systems these days (capturing the result).
  var REGEX_NEWLINE = /(\r?\n)/;

  // Newline character code for charCodeAt() comparisons
  var NEWLINE_CODE = 10;

  // Private symbol for identifying `SourceNode`s when multiple versions of
  // the source-map library are loaded. This MUST NOT CHANGE across
  // versions!
  var isSourceNode = "$$$isSourceNode$$$";

  /**
   * SourceNodes provide a way to abstract over interpolating/concatenating
   * snippets of generated JavaScript source code while maintaining the line and
   * column information associated with the original source code.
   *
   * @param aLine The original line number.
   * @param aColumn The original column number.
   * @param aSource The original source's filename.
   * @param aChunks Optional. An array of strings which are snippets of
   *        generated JS, or other SourceNodes.
   * @param aName The original identifier.
   */
  function SourceNode$1(aLine, aColumn, aSource, aChunks, aName) {
    this.children = [];
    this.sourceContents = {};
    this.line = aLine == null ? null : aLine;
    this.column = aColumn == null ? null : aColumn;
    this.source = aSource == null ? null : aSource;
    this.name = aName == null ? null : aName;
    this[isSourceNode] = true;
    if (aChunks != null) this.add(aChunks);
  }

  /**
   * Creates a SourceNode from generated code and a SourceMapConsumer.
   *
   * @param aGeneratedCode The generated code
   * @param aSourceMapConsumer The SourceMap for the generated code
   * @param aRelativePath Optional. The path that relative sources in the
   *        SourceMapConsumer should be relative to.
   */
  SourceNode$1.fromStringWithSourceMap =
    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
      // The SourceNode we want to fill with the generated code
      // and the SourceMap
      var node = new SourceNode$1();

      // All even indices of this array are one line of the generated code,
      // while all odd indices are the newlines between two adjacent lines
      // (since `REGEX_NEWLINE` captures its match).
      // Processed fragments are accessed by calling `shiftNextLine`.
      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
      var remainingLinesIndex = 0;
      var shiftNextLine = function() {
        var lineContents = getNextLine();
        // The last line of a file might not have a newline.
        var newLine = getNextLine() || "";
        return lineContents + newLine;

        function getNextLine() {
          return remainingLinesIndex < remainingLines.length ?
              remainingLines[remainingLinesIndex++] : undefined;
        }
      };

      // We need to remember the position of "remainingLines"
      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

      // The generate SourceNodes we need a code range.
      // To extract it current and last mapping is used.
      // Here we store the last mapping.
      var lastMapping = null;

      aSourceMapConsumer.eachMapping(function (mapping) {
        if (lastMapping !== null) {
          // We add the code from "lastMapping" to "mapping":
          // First check if there is a new line in between.
          if (lastGeneratedLine < mapping.generatedLine) {
            // Associate first line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
            lastGeneratedLine++;
            lastGeneratedColumn = 0;
            // The remaining code is added without mapping
          } else {
            // There is no new line in between.
            // Associate the code between "lastGeneratedColumn" and
            // "mapping.generatedColumn" with "lastMapping"
            var nextLine = remainingLines[remainingLinesIndex] || '';
            var code = nextLine.substr(0, mapping.generatedColumn -
                                          lastGeneratedColumn);
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                                lastGeneratedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
            addMappingWithCode(lastMapping, code);
            // No more remaining code, continue
            lastMapping = mapping;
            return;
          }
        }
        // We add the generated code until the first mapping
        // to the SourceNode without any mapping.
        // Each line is added as separate string.
        while (lastGeneratedLine < mapping.generatedLine) {
          node.add(shiftNextLine());
          lastGeneratedLine++;
        }
        if (lastGeneratedColumn < mapping.generatedColumn) {
          var nextLine = remainingLines[remainingLinesIndex] || '';
          node.add(nextLine.substr(0, mapping.generatedColumn));
          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
          lastGeneratedColumn = mapping.generatedColumn;
        }
        lastMapping = mapping;
      }, this);
      // We have processed all mappings.
      if (remainingLinesIndex < remainingLines.length) {
        if (lastMapping) {
          // Associate the remaining code in the current line with "lastMapping"
          addMappingWithCode(lastMapping, shiftNextLine());
        }
        // and add the remaining lines without any mapping
        node.add(remainingLines.splice(remainingLinesIndex).join(""));
      }

      // Copy sourcesContent into SourceNode
      aSourceMapConsumer.sources.forEach(function (sourceFile) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          if (aRelativePath != null) {
            sourceFile = util.join(aRelativePath, sourceFile);
          }
          node.setSourceContent(sourceFile, content);
        }
      });

      return node;

      function addMappingWithCode(mapping, code) {
        if (mapping === null || mapping.source === undefined) {
          node.add(code);
        } else {
          var source = aRelativePath
            ? util.join(aRelativePath, mapping.source)
            : mapping.source;
          node.add(new SourceNode$1(mapping.originalLine,
                                  mapping.originalColumn,
                                  source,
                                  code,
                                  mapping.name));
        }
      }
    };

  /**
   * Add a chunk of generated JS to this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode$1.prototype.add = function SourceNode_add(aChunk) {
    if (Array.isArray(aChunk)) {
      aChunk.forEach(function (chunk) {
        this.add(chunk);
      }, this);
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      if (aChunk) {
        this.children.push(aChunk);
      }
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Add a chunk of generated JS to the beginning of this source node.
   *
   * @param aChunk A string snippet of generated JS code, another instance of
   *        SourceNode, or an array where each member is one of those things.
   */
  SourceNode$1.prototype.prepend = function SourceNode_prepend(aChunk) {
    if (Array.isArray(aChunk)) {
      for (var i = aChunk.length-1; i >= 0; i--) {
        this.prepend(aChunk[i]);
      }
    }
    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
      this.children.unshift(aChunk);
    }
    else {
      throw new TypeError(
        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
      );
    }
    return this;
  };

  /**
   * Walk over the tree of JS snippets in this node and its children. The
   * walking function is called once for each snippet of JS and is passed that
   * snippet and the its original associated source's line/column location.
   *
   * @param aFn The traversal function.
   */
  SourceNode$1.prototype.walk = function SourceNode_walk(aFn) {
    var chunk;
    for (var i = 0, len = this.children.length; i < len; i++) {
      chunk = this.children[i];
      if (chunk[isSourceNode]) {
        chunk.walk(aFn);
      }
      else {
        if (chunk !== '') {
          aFn(chunk, { source: this.source,
                       line: this.line,
                       column: this.column,
                       name: this.name });
        }
      }
    }
  };

  /**
   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
   * each of `this.children`.
   *
   * @param aSep The separator.
   */
  SourceNode$1.prototype.join = function SourceNode_join(aSep) {
    var newChildren;
    var i;
    var len = this.children.length;
    if (len > 0) {
      newChildren = [];
      for (i = 0; i < len-1; i++) {
        newChildren.push(this.children[i]);
        newChildren.push(aSep);
      }
      newChildren.push(this.children[i]);
      this.children = newChildren;
    }
    return this;
  };

  /**
   * Call String.prototype.replace on the very right-most source snippet. Useful
   * for trimming whitespace from the end of a source node, etc.
   *
   * @param aPattern The pattern to replace.
   * @param aReplacement The thing to replace the pattern with.
   */
  SourceNode$1.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
    var lastChild = this.children[this.children.length - 1];
    if (lastChild[isSourceNode]) {
      lastChild.replaceRight(aPattern, aReplacement);
    }
    else if (typeof lastChild === 'string') {
      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
    }
    else {
      this.children.push(''.replace(aPattern, aReplacement));
    }
    return this;
  };

  /**
   * Set the source content for a source file. This will be added to the SourceMapGenerator
   * in the sourcesContent field.
   *
   * @param aSourceFile The filename of the source file
   * @param aSourceContent The content of the source file
   */
  SourceNode$1.prototype.setSourceContent =
    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
    };

  /**
   * Walk over the tree of SourceNodes. The walking function is called for each
   * source file content and is passed the filename and source content.
   *
   * @param aFn The traversal function.
   */
  SourceNode$1.prototype.walkSourceContents =
    function SourceNode_walkSourceContents(aFn) {
      for (var i = 0, len = this.children.length; i < len; i++) {
        if (this.children[i][isSourceNode]) {
          this.children[i].walkSourceContents(aFn);
        }
      }

      var sources = Object.keys(this.sourceContents);
      for (var i = 0, len = sources.length; i < len; i++) {
        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
      }
    };

  /**
   * Return the string representation of this source node. Walks over the tree
   * and concatenates all the various snippets together to one string.
   */
  SourceNode$1.prototype.toString = function SourceNode_toString() {
    var str = "";
    this.walk(function (chunk) {
      str += chunk;
    });
    return str;
  };

  /**
   * Returns the string representation of this source node along with a source
   * map.
   */
  SourceNode$1.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
    var generated = {
      code: "",
      line: 1,
      column: 0
    };
    var map = new SourceMapGenerator$1(aArgs);
    var sourceMappingActive = false;
    var lastOriginalSource = null;
    var lastOriginalLine = null;
    var lastOriginalColumn = null;
    var lastOriginalName = null;
    this.walk(function (chunk, original) {
      generated.code += chunk;
      if (original.source !== null
          && original.line !== null
          && original.column !== null) {
        if(lastOriginalSource !== original.source
           || lastOriginalLine !== original.line
           || lastOriginalColumn !== original.column
           || lastOriginalName !== original.name) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
        lastOriginalSource = original.source;
        lastOriginalLine = original.line;
        lastOriginalColumn = original.column;
        lastOriginalName = original.name;
        sourceMappingActive = true;
      } else if (sourceMappingActive) {
        map.addMapping({
          generated: {
            line: generated.line,
            column: generated.column
          }
        });
        lastOriginalSource = null;
        sourceMappingActive = false;
      }
      for (var idx = 0, length = chunk.length; idx < length; idx++) {
        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
          generated.line++;
          generated.column = 0;
          // Mappings end at eol
          if (idx + 1 === length) {
            lastOriginalSource = null;
            sourceMappingActive = false;
          } else if (sourceMappingActive) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
        } else {
          generated.column++;
        }
      }
    });
    this.walkSourceContents(function (sourceFile, sourceContent) {
      map.setSourceContent(sourceFile, sourceContent);
    });

    return { code: generated.code, map: map };
  };

  var SourceNode_1 = SourceNode$1;

  var sourceNode = {
  	SourceNode: SourceNode_1
  };

  /*
   * Copyright 2009-2011 Mozilla Foundation and contributors
   * Licensed under the New BSD license. See LICENSE.txt or:
   * http://opensource.org/licenses/BSD-3-Clause
   */

  var SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
  var SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;
  var SourceNode = sourceNode.SourceNode;

  var sourceMap = {
  	SourceMapGenerator: SourceMapGenerator,
  	SourceMapConsumer: SourceMapConsumer,
  	SourceNode: SourceNode
  };

  var require$$1 = /*@__PURE__*/getAugmentedNamespace(path$1);

  let { dirname: dirname$1, resolve: resolve$2, relative, sep } = require$$1;
  let { pathToFileURL: pathToFileURL$1 } = url;


  class MapGenerator {
    constructor (stringify, root, opts) {
      this.stringify = stringify;
      this.mapOpts = opts.map || {};
      this.root = root;
      this.opts = opts;
    }

    isMap () {
      if (typeof this.opts.map !== 'undefined') {
        return !!this.opts.map
      }
      return this.previous().length > 0
    }

    previous () {
      if (!this.previousMaps) {
        this.previousMaps = [];
        this.root.walk(node => {
          if (node.source && node.source.input.map) {
            let map = node.source.input.map;
            if (!this.previousMaps.includes(map)) {
              this.previousMaps.push(map);
            }
          }
        });
      }

      return this.previousMaps
    }

    isInline () {
      if (typeof this.mapOpts.inline !== 'undefined') {
        return this.mapOpts.inline
      }

      let annotation = this.mapOpts.annotation;
      if (typeof annotation !== 'undefined' && annotation !== true) {
        return false
      }

      if (this.previous().length) {
        return this.previous().some(i => i.inline)
      }
      return true
    }

    isSourcesContent () {
      if (typeof this.mapOpts.sourcesContent !== 'undefined') {
        return this.mapOpts.sourcesContent
      }
      if (this.previous().length) {
        return this.previous().some(i => i.withContent())
      }
      return true
    }

    clearAnnotation () {
      if (this.mapOpts.annotation === false) return

      let node;
      for (let i = this.root.nodes.length - 1; i >= 0; i--) {
        node = this.root.nodes[i];
        if (node.type !== 'comment') continue
        if (node.text.indexOf('# sourceMappingURL=') === 0) {
          this.root.removeChild(i);
        }
      }
    }

    setSourcesContent () {
      let already = {};
      this.root.walk(node => {
        if (node.source) {
          let from = node.source.input.from;
          if (from && !already[from]) {
            already[from] = true;
            this.map.setSourceContent(
              this.toUrl(this.path(from)),
              node.source.input.css
            );
          }
        }
      });
    }

    applyPrevMaps () {
      for (let prev of this.previous()) {
        let from = this.toUrl(this.path(prev.file));
        let root = prev.root || dirname$1(prev.file);
        let map;

        if (this.mapOpts.sourcesContent === false) {
          map = new sourceMap.SourceMapConsumer(prev.text);
          if (map.sourcesContent) {
            map.sourcesContent = map.sourcesContent.map(() => null);
          }
        } else {
          map = prev.consumer();
        }

        this.map.applySourceMap(map, from, this.toUrl(this.path(root)));
      }
    }

    isAnnotation () {
      if (this.isInline()) {
        return true
      }
      if (typeof this.mapOpts.annotation !== 'undefined') {
        return this.mapOpts.annotation
      }
      if (this.previous().length) {
        return this.previous().some(i => i.annotation)
      }
      return true
    }

    toBase64 (str) {
      if (Buffer) {
        return Buffer.from(str).toString('base64')
      } else {
        // istanbul ignore next
        return window.btoa(unescape(encodeURIComponent(str)))
      }
    }

    addAnnotation () {
      let content;

      if (this.isInline()) {
        content =
          'data:application/json;base64,' + this.toBase64(this.map.toString());
      } else if (typeof this.mapOpts.annotation === 'string') {
        content = this.mapOpts.annotation;
      } else if (typeof this.mapOpts.annotation === 'function') {
        content = this.mapOpts.annotation(this.opts.to, this.root);
      } else {
        content = this.outputFile() + '.map';
      }

      let eol = '\n';
      if (this.css.includes('\r\n')) eol = '\r\n';

      this.css += eol + '/*# sourceMappingURL=' + content + ' */';
    }

    outputFile () {
      if (this.opts.to) {
        return this.path(this.opts.to)
      }
      if (this.opts.from) {
        return this.path(this.opts.from)
      }
      return 'to.css'
    }

    generateMap () {
      this.generateString();
      if (this.isSourcesContent()) this.setSourcesContent();
      if (this.previous().length > 0) this.applyPrevMaps();
      if (this.isAnnotation()) this.addAnnotation();

      if (this.isInline()) {
        return [this.css]
      }
      return [this.css, this.map]
    }

    path (file) {
      if (file.indexOf('<') === 0) return file
      if (/^\w+:\/\//.test(file)) return file
      if (this.mapOpts.absolute) return file

      let from = this.opts.to ? dirname$1(this.opts.to) : '.';

      if (typeof this.mapOpts.annotation === 'string') {
        from = dirname$1(resolve$2(from, this.mapOpts.annotation));
      }

      file = relative(from, file);
      return file
    }

    toUrl (path) {
      if (sep === '\\') {
        // istanbul ignore next
        path = path.replace(/\\/g, '/');
      }
      return encodeURI(path).replace(/[#?]/g, encodeURIComponent)
    }

    sourcePath (node) {
      if (this.mapOpts.from) {
        return this.toUrl(this.mapOpts.from)
      } else if (this.mapOpts.absolute) {
        return pathToFileURL$1(node.source.input.from).toString()
      } else {
        return this.toUrl(this.path(node.source.input.from))
      }
    }

    generateString () {
      this.css = '';
      this.map = new sourceMap.SourceMapGenerator({ file: this.outputFile() });

      let line = 1;
      let column = 1;

      let lines, last;
      this.stringify(this.root, (str, node, type) => {
        this.css += str;

        if (node && type !== 'end') {
          if (node.source && node.source.start) {
            this.map.addMapping({
              source: this.sourcePath(node),
              generated: { line, column: column - 1 },
              original: {
                line: node.source.start.line,
                column: node.source.start.column - 1
              }
            });
          } else {
            this.map.addMapping({
              source: '<no source>',
              original: { line: 1, column: 0 },
              generated: { line, column: column - 1 }
            });
          }
        }

        lines = str.match(/\n/g);
        if (lines) {
          line += lines.length;
          last = str.lastIndexOf('\n');
          column = str.length - last;
        } else {
          column += str.length;
        }

        if (node && type !== 'start') {
          let p = node.parent || { raws: {} };
          if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {
            if (node.source && node.source.end) {
              this.map.addMapping({
                source: this.sourcePath(node),
                generated: { line, column: column - 2 },
                original: {
                  line: node.source.end.line,
                  column: node.source.end.column - 1
                }
              });
            } else {
              this.map.addMapping({
                source: '<no source>',
                original: { line: 1, column: 0 },
                generated: { line, column: column - 1 }
              });
            }
          }
        }
      });
    }

    generate () {
      this.clearAnnotation();

      if (this.isMap()) {
        return this.generateMap()
      }

      let result = '';
      this.stringify(this.root, i => {
        result += i;
      });
      return [result]
    }
  }

  var mapGenerator = MapGenerator;

  let printed = {};

  var warnOnce = function warnOnce (message) {
    if (printed[message]) return
    printed[message] = true;

    if (typeof console !== 'undefined' && console.warn) {
      console.warn(message);
    }
  };

  class Warning {
    constructor (text, opts = {}) {
      this.type = 'warning';
      this.text = text;

      if (opts.node && opts.node.source) {
        let pos = opts.node.positionBy(opts);
        this.line = pos.line;
        this.column = pos.column;
      }

      for (let opt in opts) this[opt] = opts[opt];
    }

    toString () {
      if (this.node) {
        return this.node.error(this.text, {
          plugin: this.plugin,
          index: this.index,
          word: this.word
        }).message
      }

      if (this.plugin) {
        return this.plugin + ': ' + this.text
      }

      return this.text
    }
  }

  var warning = Warning;
  Warning.default = Warning;

  class Result {
    constructor (processor, root, opts) {
      this.processor = processor;
      this.messages = [];
      this.root = root;
      this.opts = opts;
      this.css = undefined;
      this.map = undefined;
    }

    toString () {
      return this.css
    }

    warn (text, opts = {}) {
      if (!opts.plugin) {
        if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
          opts.plugin = this.lastPlugin.postcssPlugin;
        }
      }

      let warning$1 = new warning(text, opts);
      this.messages.push(warning$1);

      return warning$1
    }

    warnings () {
      return this.messages.filter(i => i.type === 'warning')
    }

    get content () {
      return this.css
    }
  }

  var result$1 = Result;
  Result.default = Result;

  class Comment extends node_1 {
    constructor (defaults) {
      super(defaults);
      this.type = 'comment';
    }
  }

  var comment = Comment;
  Comment.default = Comment;

  let { isClean: isClean$1 } = symbols;



  let parse$5, Rule$1, AtRule$2;

  function cleanSource (nodes) {
    return nodes.map(i => {
      if (i.nodes) i.nodes = cleanSource(i.nodes);
      delete i.source;
      return i
    })
  }

  function markDirtyUp (node) {
    node[isClean$1] = false;
    if (node.proxyOf.nodes) {
      for (let i of node.proxyOf.nodes) {
        markDirtyUp(i);
      }
    }
  }

  // istanbul ignore next
  function rebuild (node) {
    if (node.type === 'atrule') {
      Object.setPrototypeOf(node, AtRule$2.prototype);
    } else if (node.type === 'rule') {
      Object.setPrototypeOf(node, Rule$1.prototype);
    } else if (node.type === 'decl') {
      Object.setPrototypeOf(node, declaration$1.prototype);
    } else if (node.type === 'comment') {
      Object.setPrototypeOf(node, comment.prototype);
    }

    if (node.nodes) {
      node.nodes.forEach(child => {
        rebuild(child);
      });
    }
  }

  class Container extends node_1 {
    push (child) {
      child.parent = this;
      this.proxyOf.nodes.push(child);
      return this
    }

    each (callback) {
      if (!this.proxyOf.nodes) return undefined
      let iterator = this.getIterator();

      let index, result;
      while (this.indexes[iterator] < this.proxyOf.nodes.length) {
        index = this.indexes[iterator];
        result = callback(this.proxyOf.nodes[index], index);
        if (result === false) break

        this.indexes[iterator] += 1;
      }

      delete this.indexes[iterator];
      return result
    }

    walk (callback) {
      return this.each((child, i) => {
        let result;
        try {
          result = callback(child, i);
        } catch (e) {
          throw child.addToError(e)
        }
        if (result !== false && child.walk) {
          result = child.walk(callback);
        }

        return result
      })
    }

    walkDecls (prop, callback) {
      if (!callback) {
        callback = prop;
        return this.walk((child, i) => {
          if (child.type === 'decl') {
            return callback(child, i)
          }
        })
      }
      if (prop instanceof RegExp) {
        return this.walk((child, i) => {
          if (child.type === 'decl' && prop.test(child.prop)) {
            return callback(child, i)
          }
        })
      }
      return this.walk((child, i) => {
        if (child.type === 'decl' && child.prop === prop) {
          return callback(child, i)
        }
      })
    }

    walkRules (selector, callback) {
      if (!callback) {
        callback = selector;

        return this.walk((child, i) => {
          if (child.type === 'rule') {
            return callback(child, i)
          }
        })
      }
      if (selector instanceof RegExp) {
        return this.walk((child, i) => {
          if (child.type === 'rule' && selector.test(child.selector)) {
            return callback(child, i)
          }
        })
      }
      return this.walk((child, i) => {
        if (child.type === 'rule' && child.selector === selector) {
          return callback(child, i)
        }
      })
    }

    walkAtRules (name, callback) {
      if (!callback) {
        callback = name;
        return this.walk((child, i) => {
          if (child.type === 'atrule') {
            return callback(child, i)
          }
        })
      }
      if (name instanceof RegExp) {
        return this.walk((child, i) => {
          if (child.type === 'atrule' && name.test(child.name)) {
            return callback(child, i)
          }
        })
      }
      return this.walk((child, i) => {
        if (child.type === 'atrule' && child.name === name) {
          return callback(child, i)
        }
      })
    }

    walkComments (callback) {
      return this.walk((child, i) => {
        if (child.type === 'comment') {
          return callback(child, i)
        }
      })
    }

    append (...children) {
      for (let child of children) {
        let nodes = this.normalize(child, this.last);
        for (let node of nodes) this.proxyOf.nodes.push(node);
      }

      this.markDirty();

      return this
    }

    prepend (...children) {
      children = children.reverse();
      for (let child of children) {
        let nodes = this.normalize(child, this.first, 'prepend').reverse();
        for (let node of nodes) this.proxyOf.nodes.unshift(node);
        for (let id in this.indexes) {
          this.indexes[id] = this.indexes[id] + nodes.length;
        }
      }

      this.markDirty();

      return this
    }

    cleanRaws (keepBetween) {
      super.cleanRaws(keepBetween);
      if (this.nodes) {
        for (let node of this.nodes) node.cleanRaws(keepBetween);
      }
    }

    insertBefore (exist, add) {
      exist = this.index(exist);

      let type = exist === 0 ? 'prepend' : false;
      let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse();
      for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node);

      let index;
      for (let id in this.indexes) {
        index = this.indexes[id];
        if (exist <= index) {
          this.indexes[id] = index + nodes.length;
        }
      }

      this.markDirty();

      return this
    }

    insertAfter (exist, add) {
      exist = this.index(exist);

      let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse();
      for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node);

      let index;
      for (let id in this.indexes) {
        index = this.indexes[id];
        if (exist < index) {
          this.indexes[id] = index + nodes.length;
        }
      }

      this.markDirty();

      return this
    }

    removeChild (child) {
      child = this.index(child);
      this.proxyOf.nodes[child].parent = undefined;
      this.proxyOf.nodes.splice(child, 1);

      let index;
      for (let id in this.indexes) {
        index = this.indexes[id];
        if (index >= child) {
          this.indexes[id] = index - 1;
        }
      }

      this.markDirty();

      return this
    }

    removeAll () {
      for (let node of this.proxyOf.nodes) node.parent = undefined;
      this.proxyOf.nodes = [];

      this.markDirty();

      return this
    }

    replaceValues (pattern, opts, callback) {
      if (!callback) {
        callback = opts;
        opts = {};
      }

      this.walkDecls(decl => {
        if (opts.props && !opts.props.includes(decl.prop)) return
        if (opts.fast && !decl.value.includes(opts.fast)) return

        decl.value = decl.value.replace(pattern, callback);
      });

      this.markDirty();

      return this
    }

    every (condition) {
      return this.nodes.every(condition)
    }

    some (condition) {
      return this.nodes.some(condition)
    }

    index (child) {
      if (typeof child === 'number') return child
      if (child.proxyOf) child = child.proxyOf;
      return this.proxyOf.nodes.indexOf(child)
    }

    get first () {
      if (!this.proxyOf.nodes) return undefined
      return this.proxyOf.nodes[0]
    }

    get last () {
      if (!this.proxyOf.nodes) return undefined
      return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]
    }

    normalize (nodes, sample) {
      if (typeof nodes === 'string') {
        nodes = cleanSource(parse$5(nodes).nodes);
      } else if (Array.isArray(nodes)) {
        nodes = nodes.slice(0);
        for (let i of nodes) {
          if (i.parent) i.parent.removeChild(i, 'ignore');
        }
      } else if (nodes.type === 'root') {
        nodes = nodes.nodes.slice(0);
        for (let i of nodes) {
          if (i.parent) i.parent.removeChild(i, 'ignore');
        }
      } else if (nodes.type) {
        nodes = [nodes];
      } else if (nodes.prop) {
        if (typeof nodes.value === 'undefined') {
          throw new Error('Value field is missed in node creation')
        } else if (typeof nodes.value !== 'string') {
          nodes.value = String(nodes.value);
        }
        nodes = [new declaration$1(nodes)];
      } else if (nodes.selector) {
        nodes = [new Rule$1(nodes)];
      } else if (nodes.name) {
        nodes = [new AtRule$2(nodes)];
      } else if (nodes.text) {
        nodes = [new comment(nodes)];
      } else {
        throw new Error('Unknown node type in node creation')
      }

      let processed = nodes.map(i => {
        // istanbul ignore next
        if (typeof i.markDirty !== 'function') rebuild(i);
        i = i.proxyOf;
        if (i.parent) i.parent.removeChild(i);
        if (i[isClean$1]) markDirtyUp(i);
        if (typeof i.raws.before === 'undefined') {
          if (sample && typeof sample.raws.before !== 'undefined') {
            i.raws.before = sample.raws.before.replace(/\S/g, '');
          }
        }
        i.parent = this;
        return i
      });

      return processed
    }

    getProxyProcessor () {
      return {
        set (node, prop, value) {
          if (node[prop] === value) return true
          node[prop] = value;
          if (prop === 'name' || prop === 'params' || prop === 'selector') {
            node.markDirty();
          }
          return true
        },

        get (node, prop) {
          if (prop === 'proxyOf') {
            return node
          } else if (!node[prop]) {
            return node[prop]
          } else if (
            prop === 'each' ||
            (typeof prop === 'string' && prop.startsWith('walk'))
          ) {
            return (...args) => {
              return node[prop](
                ...args.map(i => {
                  if (typeof i === 'function') {
                    return (child, index) => i(child.toProxy(), index)
                  } else {
                    return i
                  }
                })
              )
            }
          } else if (prop === 'every' || prop === 'some') {
            return cb => {
              return node[prop]((child, ...other) =>
                cb(child.toProxy(), ...other)
              )
            }
          } else if (prop === 'root') {
            return () => node.root().toProxy()
          } else if (prop === 'nodes') {
            return node.nodes.map(i => i.toProxy())
          } else if (prop === 'first' || prop === 'last') {
            return node[prop].toProxy()
          } else {
            return node[prop]
          }
        }
      }
    }

    getIterator () {
      if (!this.lastEach) this.lastEach = 0;
      if (!this.indexes) this.indexes = {};

      this.lastEach += 1;
      let iterator = this.lastEach;
      this.indexes[iterator] = 0;

      return iterator
    }
  }

  Container.registerParse = dependant => {
    parse$5 = dependant;
  };

  Container.registerRule = dependant => {
    Rule$1 = dependant;
  };

  Container.registerAtRule = dependant => {
    AtRule$2 = dependant;
  };

  var container = Container;
  Container.default = Container;

  const SINGLE_QUOTE = "'".charCodeAt(0);
  const DOUBLE_QUOTE = '"'.charCodeAt(0);
  const BACKSLASH = '\\'.charCodeAt(0);
  const SLASH = '/'.charCodeAt(0);
  const NEWLINE = '\n'.charCodeAt(0);
  const SPACE = ' '.charCodeAt(0);
  const FEED = '\f'.charCodeAt(0);
  const TAB = '\t'.charCodeAt(0);
  const CR = '\r'.charCodeAt(0);
  const OPEN_SQUARE = '['.charCodeAt(0);
  const CLOSE_SQUARE = ']'.charCodeAt(0);
  const OPEN_PARENTHESES = '('.charCodeAt(0);
  const CLOSE_PARENTHESES = ')'.charCodeAt(0);
  const OPEN_CURLY = '{'.charCodeAt(0);
  const CLOSE_CURLY = '}'.charCodeAt(0);
  const SEMICOLON = ';'.charCodeAt(0);
  const ASTERISK = '*'.charCodeAt(0);
  const COLON = ':'.charCodeAt(0);
  const AT = '@'.charCodeAt(0);

  const RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
  const RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
  const RE_BAD_BRACKET = /.[\n"'(/\\]/;
  const RE_HEX_ESCAPE = /[\da-f]/i;

  var tokenize = function tokenizer (input, options = {}) {
    let css = input.css.valueOf();
    let ignore = options.ignoreErrors;

    let code, next, quote, content, escape;
    let escaped, escapePos, prev, n, currentToken;

    let length = css.length;
    let pos = 0;
    let buffer = [];
    let returned = [];

    function position () {
      return pos
    }

    function unclosed (what) {
      throw input.error('Unclosed ' + what, pos)
    }

    function endOfFile () {
      return returned.length === 0 && pos >= length
    }

    function nextToken (opts) {
      if (returned.length) return returned.pop()
      if (pos >= length) return

      let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;

      code = css.charCodeAt(pos);

      switch (code) {
        case NEWLINE:
        case SPACE:
        case TAB:
        case CR:
        case FEED: {
          next = pos;
          do {
            next += 1;
            code = css.charCodeAt(next);
          } while (
            code === SPACE ||
            code === NEWLINE ||
            code === TAB ||
            code === CR ||
            code === FEED
          )

          currentToken = ['space', css.slice(pos, next)];
          pos = next - 1;
          break
        }

        case OPEN_SQUARE:
        case CLOSE_SQUARE:
        case OPEN_CURLY:
        case CLOSE_CURLY:
        case COLON:
        case SEMICOLON:
        case CLOSE_PARENTHESES: {
          let controlChar = String.fromCharCode(code);
          currentToken = [controlChar, controlChar, pos];
          break
        }

        case OPEN_PARENTHESES: {
          prev = buffer.length ? buffer.pop()[1] : '';
          n = css.charCodeAt(pos + 1);
          if (
            prev === 'url' &&
            n !== SINGLE_QUOTE &&
            n !== DOUBLE_QUOTE &&
            n !== SPACE &&
            n !== NEWLINE &&
            n !== TAB &&
            n !== FEED &&
            n !== CR
          ) {
            next = pos;
            do {
              escaped = false;
              next = css.indexOf(')', next + 1);
              if (next === -1) {
                if (ignore || ignoreUnclosed) {
                  next = pos;
                  break
                } else {
                  unclosed('bracket');
                }
              }
              escapePos = next;
              while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                escapePos -= 1;
                escaped = !escaped;
              }
            } while (escaped)

            currentToken = ['brackets', css.slice(pos, next + 1), pos, next];

            pos = next;
          } else {
            next = css.indexOf(')', pos + 1);
            content = css.slice(pos, next + 1);

            if (next === -1 || RE_BAD_BRACKET.test(content)) {
              currentToken = ['(', '(', pos];
            } else {
              currentToken = ['brackets', content, pos, next];
              pos = next;
            }
          }

          break
        }

        case SINGLE_QUOTE:
        case DOUBLE_QUOTE: {
          quote = code === SINGLE_QUOTE ? "'" : '"';
          next = pos;
          do {
            escaped = false;
            next = css.indexOf(quote, next + 1);
            if (next === -1) {
              if (ignore || ignoreUnclosed) {
                next = pos + 1;
                break
              } else {
                unclosed('string');
              }
            }
            escapePos = next;
            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
              escapePos -= 1;
              escaped = !escaped;
            }
          } while (escaped)

          currentToken = ['string', css.slice(pos, next + 1), pos, next];
          pos = next;
          break
        }

        case AT: {
          RE_AT_END.lastIndex = pos + 1;
          RE_AT_END.test(css);
          if (RE_AT_END.lastIndex === 0) {
            next = css.length - 1;
          } else {
            next = RE_AT_END.lastIndex - 2;
          }

          currentToken = ['at-word', css.slice(pos, next + 1), pos, next];

          pos = next;
          break
        }

        case BACKSLASH: {
          next = pos;
          escape = true;
          while (css.charCodeAt(next + 1) === BACKSLASH) {
            next += 1;
            escape = !escape;
          }
          code = css.charCodeAt(next + 1);
          if (
            escape &&
            code !== SLASH &&
            code !== SPACE &&
            code !== NEWLINE &&
            code !== TAB &&
            code !== CR &&
            code !== FEED
          ) {
            next += 1;
            if (RE_HEX_ESCAPE.test(css.charAt(next))) {
              while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
                next += 1;
              }
              if (css.charCodeAt(next + 1) === SPACE) {
                next += 1;
              }
            }
          }

          currentToken = ['word', css.slice(pos, next + 1), pos, next];

          pos = next;
          break
        }

        default: {
          if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
            next = css.indexOf('*/', pos + 2) + 1;
            if (next === 0) {
              if (ignore || ignoreUnclosed) {
                next = css.length;
              } else {
                unclosed('comment');
              }
            }

            currentToken = ['comment', css.slice(pos, next + 1), pos, next];
            pos = next;
          } else {
            RE_WORD_END.lastIndex = pos + 1;
            RE_WORD_END.test(css);
            if (RE_WORD_END.lastIndex === 0) {
              next = css.length - 1;
            } else {
              next = RE_WORD_END.lastIndex - 2;
            }

            currentToken = ['word', css.slice(pos, next + 1), pos, next];
            buffer.push(currentToken);
            pos = next;
          }

          break
        }
      }

      pos++;
      return currentToken
    }

    function back (token) {
      returned.push(token);
    }

    return {
      back,
      nextToken,
      endOfFile,
      position
    }
  };

  class AtRule$1 extends container {
    constructor (defaults) {
      super(defaults);
      this.type = 'atrule';
    }

    append (...children) {
      if (!this.proxyOf.nodes) this.nodes = [];
      return super.append(...children)
    }

    prepend (...children) {
      if (!this.proxyOf.nodes) this.nodes = [];
      return super.prepend(...children)
    }
  }

  var atRule$1 = AtRule$1;
  AtRule$1.default = AtRule$1;

  container.registerAtRule(AtRule$1);

  let LazyResult$1, Processor$2;

  class Root extends container {
    constructor (defaults) {
      super(defaults);
      this.type = 'root';
      if (!this.nodes) this.nodes = [];
    }

    removeChild (child, ignore) {
      let index = this.index(child);

      if (!ignore && index === 0 && this.nodes.length > 1) {
        this.nodes[1].raws.before = this.nodes[index].raws.before;
      }

      return super.removeChild(child)
    }

    normalize (child, sample, type) {
      let nodes = super.normalize(child);

      if (sample) {
        if (type === 'prepend') {
          if (this.nodes.length > 1) {
            sample.raws.before = this.nodes[1].raws.before;
          } else {
            delete sample.raws.before;
          }
        } else if (this.first !== sample) {
          for (let node of nodes) {
            node.raws.before = sample.raws.before;
          }
        }
      }

      return nodes
    }

    toResult (opts = {}) {
      let lazy = new LazyResult$1(new Processor$2(), this, opts);
      return lazy.stringify()
    }
  }

  Root.registerLazyResult = dependant => {
    LazyResult$1 = dependant;
  };

  Root.registerProcessor = dependant => {
    Processor$2 = dependant;
  };

  var root = Root;
  Root.default = Root;

  let list$6 = {
    split (string, separators, last) {
      let array = [];
      let current = '';
      let split = false;

      let func = 0;
      let quote = false;
      let escape = false;

      for (let letter of string) {
        if (quote) {
          if (escape) {
            escape = false;
          } else if (letter === '\\') {
            escape = true;
          } else if (letter === quote) {
            quote = false;
          }
        } else if (letter === '"' || letter === "'") {
          quote = letter;
        } else if (letter === '(') {
          func += 1;
        } else if (letter === ')') {
          if (func > 0) func -= 1;
        } else if (func === 0) {
          if (separators.includes(letter)) split = true;
        }

        if (split) {
          if (current !== '') array.push(current.trim());
          current = '';
          split = false;
        } else {
          current += letter;
        }
      }

      if (last || current !== '') array.push(current.trim());
      return array
    },

    space (string) {
      let spaces = [' ', '\n', '\t'];
      return list$6.split(string, spaces)
    },

    comma (string) {
      return list$6.split(string, [','], true)
    }
  };

  var list_1 = list$6;
  list$6.default = list$6;

  class Rule extends container {
    constructor (defaults) {
      super(defaults);
      this.type = 'rule';
      if (!this.nodes) this.nodes = [];
    }

    get selectors () {
      return list_1.comma(this.selector)
    }

    set selectors (values) {
      let match = this.selector ? this.selector.match(/,\s*/) : null;
      let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');
      this.selector = values.join(sep);
    }
  }

  var rule = Rule;
  Rule.default = Rule;

  container.registerRule(Rule);

  class Parser {
    constructor (input) {
      this.input = input;

      this.root = new root();
      this.current = this.root;
      this.spaces = '';
      this.semicolon = false;
      this.customProperty = false;

      this.createTokenizer();
      this.root.source = { input, start: { offset: 0, line: 1, column: 1 } };
    }

    createTokenizer () {
      this.tokenizer = tokenize(this.input);
    }

    parse () {
      let token;
      while (!this.tokenizer.endOfFile()) {
        token = this.tokenizer.nextToken();

        switch (token[0]) {
          case 'space':
            this.spaces += token[1];
            break

          case ';':
            this.freeSemicolon(token);
            break

          case '}':
            this.end(token);
            break

          case 'comment':
            this.comment(token);
            break

          case 'at-word':
            this.atrule(token);
            break

          case '{':
            this.emptyRule(token);
            break

          default:
            this.other(token);
            break
        }
      }
      this.endFile();
    }

    comment (token) {
      let node = new comment();
      this.init(node, token[2]);
      node.source.end = this.getPosition(token[3] || token[2]);

      let text = token[1].slice(2, -2);
      if (/^\s*$/.test(text)) {
        node.text = '';
        node.raws.left = text;
        node.raws.right = '';
      } else {
        let match = text.match(/^(\s*)([^]*\S)(\s*)$/);
        node.text = match[2];
        node.raws.left = match[1];
        node.raws.right = match[3];
      }
    }

    emptyRule (token) {
      let node = new rule();
      this.init(node, token[2]);
      node.selector = '';
      node.raws.between = '';
      this.current = node;
    }

    other (start) {
      let end = false;
      let type = null;
      let colon = false;
      let bracket = null;
      let brackets = [];
      let customProperty = start[1].startsWith('--');

      let tokens = [];
      let token = start;
      while (token) {
        type = token[0];
        tokens.push(token);

        if (type === '(' || type === '[') {
          if (!bracket) bracket = token;
          brackets.push(type === '(' ? ')' : ']');
        } else if (customProperty && colon && type === '{') {
          if (!bracket) bracket = token;
          brackets.push('}');
        } else if (brackets.length === 0) {
          if (type === ';') {
            if (colon) {
              this.decl(tokens, customProperty);
              return
            } else {
              break
            }
          } else if (type === '{') {
            this.rule(tokens);
            return
          } else if (type === '}') {
            this.tokenizer.back(tokens.pop());
            end = true;
            break
          } else if (type === ':') {
            colon = true;
          }
        } else if (type === brackets[brackets.length - 1]) {
          brackets.pop();
          if (brackets.length === 0) bracket = null;
        }

        token = this.tokenizer.nextToken();
      }

      if (this.tokenizer.endOfFile()) end = true;
      if (brackets.length > 0) this.unclosedBracket(bracket);

      if (end && colon) {
        while (tokens.length) {
          token = tokens[tokens.length - 1][0];
          if (token !== 'space' && token !== 'comment') break
          this.tokenizer.back(tokens.pop());
        }
        this.decl(tokens, customProperty);
      } else {
        this.unknownWord(tokens);
      }
    }

    rule (tokens) {
      tokens.pop();

      let node = new rule();
      this.init(node, tokens[0][2]);

      node.raws.between = this.spacesAndCommentsFromEnd(tokens);
      this.raw(node, 'selector', tokens);
      this.current = node;
    }

    decl (tokens, customProperty) {
      let node = new declaration$1();
      this.init(node, tokens[0][2]);

      let last = tokens[tokens.length - 1];
      if (last[0] === ';') {
        this.semicolon = true;
        tokens.pop();
      }
      node.source.end = this.getPosition(last[3] || last[2]);

      while (tokens[0][0] !== 'word') {
        if (tokens.length === 1) this.unknownWord(tokens);
        node.raws.before += tokens.shift()[1];
      }
      node.source.start = this.getPosition(tokens[0][2]);

      node.prop = '';
      while (tokens.length) {
        let type = tokens[0][0];
        if (type === ':' || type === 'space' || type === 'comment') {
          break
        }
        node.prop += tokens.shift()[1];
      }

      node.raws.between = '';

      let token;
      while (tokens.length) {
        token = tokens.shift();

        if (token[0] === ':') {
          node.raws.between += token[1];
          break
        } else {
          if (token[0] === 'word' && /\w/.test(token[1])) {
            this.unknownWord([token]);
          }
          node.raws.between += token[1];
        }
      }

      if (node.prop[0] === '_' || node.prop[0] === '*') {
        node.raws.before += node.prop[0];
        node.prop = node.prop.slice(1);
      }
      let firstSpaces = this.spacesAndCommentsFromStart(tokens);
      this.precheckMissedSemicolon(tokens);

      for (let i = tokens.length - 1; i >= 0; i--) {
        token = tokens[i];
        if (token[1].toLowerCase() === '!important') {
          node.important = true;
          let string = this.stringFrom(tokens, i);
          string = this.spacesFromEnd(tokens) + string;
          if (string !== ' !important') node.raws.important = string;
          break
        } else if (token[1].toLowerCase() === 'important') {
          let cache = tokens.slice(0);
          let str = '';
          for (let j = i; j > 0; j--) {
            let type = cache[j][0];
            if (str.trim().indexOf('!') === 0 && type !== 'space') {
              break
            }
            str = cache.pop()[1] + str;
          }
          if (str.trim().indexOf('!') === 0) {
            node.important = true;
            node.raws.important = str;
            tokens = cache;
          }
        }

        if (token[0] !== 'space' && token[0] !== 'comment') {
          break
        }
      }

      let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment');
      this.raw(node, 'value', tokens);
      if (hasWord) {
        node.raws.between += firstSpaces;
      } else {
        node.value = firstSpaces + node.value;
      }

      if (node.value.includes(':') && !customProperty) {
        this.checkMissedSemicolon(tokens);
      }
    }

    atrule (token) {
      let node = new atRule$1();
      node.name = token[1].slice(1);
      if (node.name === '') {
        this.unnamedAtrule(node, token);
      }
      this.init(node, token[2]);

      let type;
      let prev;
      let shift;
      let last = false;
      let open = false;
      let params = [];
      let brackets = [];

      while (!this.tokenizer.endOfFile()) {
        token = this.tokenizer.nextToken();
        type = token[0];

        if (type === '(' || type === '[') {
          brackets.push(type === '(' ? ')' : ']');
        } else if (type === '{' && brackets.length > 0) {
          brackets.push('}');
        } else if (type === brackets[brackets.length - 1]) {
          brackets.pop();
        }

        if (brackets.length === 0) {
          if (type === ';') {
            node.source.end = this.getPosition(token[2]);
            this.semicolon = true;
            break
          } else if (type === '{') {
            open = true;
            break
          } else if (type === '}') {
            if (params.length > 0) {
              shift = params.length - 1;
              prev = params[shift];
              while (prev && prev[0] === 'space') {
                prev = params[--shift];
              }
              if (prev) {
                node.source.end = this.getPosition(prev[3] || prev[2]);
              }
            }
            this.end(token);
            break
          } else {
            params.push(token);
          }
        } else {
          params.push(token);
        }

        if (this.tokenizer.endOfFile()) {
          last = true;
          break
        }
      }

      node.raws.between = this.spacesAndCommentsFromEnd(params);
      if (params.length) {
        node.raws.afterName = this.spacesAndCommentsFromStart(params);
        this.raw(node, 'params', params);
        if (last) {
          token = params[params.length - 1];
          node.source.end = this.getPosition(token[3] || token[2]);
          this.spaces = node.raws.between;
          node.raws.between = '';
        }
      } else {
        node.raws.afterName = '';
        node.params = '';
      }

      if (open) {
        node.nodes = [];
        this.current = node;
      }
    }

    end (token) {
      if (this.current.nodes && this.current.nodes.length) {
        this.current.raws.semicolon = this.semicolon;
      }
      this.semicolon = false;

      this.current.raws.after = (this.current.raws.after || '') + this.spaces;
      this.spaces = '';

      if (this.current.parent) {
        this.current.source.end = this.getPosition(token[2]);
        this.current = this.current.parent;
      } else {
        this.unexpectedClose(token);
      }
    }

    endFile () {
      if (this.current.parent) this.unclosedBlock();
      if (this.current.nodes && this.current.nodes.length) {
        this.current.raws.semicolon = this.semicolon;
      }
      this.current.raws.after = (this.current.raws.after || '') + this.spaces;
    }

    freeSemicolon (token) {
      this.spaces += token[1];
      if (this.current.nodes) {
        let prev = this.current.nodes[this.current.nodes.length - 1];
        if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {
          prev.raws.ownSemicolon = this.spaces;
          this.spaces = '';
        }
      }
    }

    // Helpers

    getPosition (offset) {
      let pos = this.input.fromOffset(offset);
      return {
        offset,
        line: pos.line,
        column: pos.col
      }
    }

    init (node, offset) {
      this.current.push(node);
      node.source = {
        start: this.getPosition(offset),
        input: this.input
      };
      node.raws.before = this.spaces;
      this.spaces = '';
      if (node.type !== 'comment') this.semicolon = false;
    }

    raw (node, prop, tokens) {
      let token, type;
      let length = tokens.length;
      let value = '';
      let clean = true;
      let next, prev;
      let pattern = /^([#.|])?(\w)+/i;

      for (let i = 0; i < length; i += 1) {
        token = tokens[i];
        type = token[0];

        if (type === 'comment' && node.type === 'rule') {
          prev = tokens[i - 1];
          next = tokens[i + 1];

          if (
            prev[0] !== 'space' &&
            next[0] !== 'space' &&
            pattern.test(prev[1]) &&
            pattern.test(next[1])
          ) {
            value += token[1];
          } else {
            clean = false;
          }

          continue
        }

        if (type === 'comment' || (type === 'space' && i === length - 1)) {
          clean = false;
        } else {
          value += token[1];
        }
      }
      if (!clean) {
        let raw = tokens.reduce((all, i) => all + i[1], '');
        node.raws[prop] = { value, raw };
      }
      node[prop] = value;
    }

    spacesAndCommentsFromEnd (tokens) {
      let lastTokenType;
      let spaces = '';
      while (tokens.length) {
        lastTokenType = tokens[tokens.length - 1][0];
        if (lastTokenType !== 'space' && lastTokenType !== 'comment') break
        spaces = tokens.pop()[1] + spaces;
      }
      return spaces
    }

    spacesAndCommentsFromStart (tokens) {
      let next;
      let spaces = '';
      while (tokens.length) {
        next = tokens[0][0];
        if (next !== 'space' && next !== 'comment') break
        spaces += tokens.shift()[1];
      }
      return spaces
    }

    spacesFromEnd (tokens) {
      let lastTokenType;
      let spaces = '';
      while (tokens.length) {
        lastTokenType = tokens[tokens.length - 1][0];
        if (lastTokenType !== 'space') break
        spaces = tokens.pop()[1] + spaces;
      }
      return spaces
    }

    stringFrom (tokens, from) {
      let result = '';
      for (let i = from; i < tokens.length; i++) {
        result += tokens[i][1];
      }
      tokens.splice(from, tokens.length - from);
      return result
    }

    colon (tokens) {
      let brackets = 0;
      let token, type, prev;
      for (let [i, element] of tokens.entries()) {
        token = element;
        type = token[0];

        if (type === '(') {
          brackets += 1;
        }
        if (type === ')') {
          brackets -= 1;
        }
        if (brackets === 0 && type === ':') {
          if (!prev) {
            this.doubleColon(token);
          } else if (prev[0] === 'word' && prev[1] === 'progid') {
            continue
          } else {
            return i
          }
        }

        prev = token;
      }
      return false
    }

    // Errors

    unclosedBracket (bracket) {
      throw this.input.error('Unclosed bracket', bracket[2])
    }

    unknownWord (tokens) {
      throw this.input.error('Unknown word', tokens[0][2])
    }

    unexpectedClose (token) {
      throw this.input.error('Unexpected }', token[2])
    }

    unclosedBlock () {
      let pos = this.current.source.start;
      throw this.input.error('Unclosed block', pos.line, pos.column)
    }

    doubleColon (token) {
      throw this.input.error('Double colon', token[2])
    }

    unnamedAtrule (node, token) {
      throw this.input.error('At-rule without name', token[2])
    }

    precheckMissedSemicolon (/* tokens */) {
      // Hook for Safe Parser
    }

    checkMissedSemicolon (tokens) {
      let colon = this.colon(tokens);
      if (colon === false) return

      let founded = 0;
      let token;
      for (let j = colon - 1; j >= 0; j--) {
        token = tokens[j];
        if (token[0] !== 'space') {
          founded += 1;
          if (founded === 2) break
        }
      }
      throw this.input.error('Missed semicolon', token[2])
    }
  }

  var parser = Parser;

  var lib$1 = createCommonjsModule(function (module, exports) {

  function makeException(ErrorType, message, opts = {}) {
      if (opts.globals) {
          ErrorType = opts.globals[ErrorType.name];
      }
      return new ErrorType(`${opts.context ? opts.context : "Value"} ${message}.`);
  }

  function toNumber(value, opts = {}) {
      if (!opts.globals) {
          return +value;
      }
      if (typeof value === "bigint") {
          throw opts.globals.TypeError("Cannot convert a BigInt value to a number");
      }
      return opts.globals.Number(value);
  }

  function type(V) {
      if (V === null) {
          return "Null";
      }
      switch (typeof V) {
          case "undefined":
              return "Undefined";
          case "boolean":
              return "Boolean";
          case "number":
              return "Number";
          case "string":
              return "String";
          case "symbol":
              return "Symbol";
          case "bigint":
              return "BigInt";
          case "object":
              // Falls through
          case "function":
              // Falls through
          default:
              // Per ES spec, typeof returns an implemention-defined value that is not any of the existing ones for
              // uncallable non-standard exotic objects. Yet Type() which the Web IDL spec depends on returns Object for
              // such cases. So treat the default case as an object.
              return "Object";
      }
  }

  // Round x to the nearest integer, choosing the even integer if it lies halfway between two.
  function evenRound(x) {
      // There are four cases for numbers with fractional part being .5:
      //
      // case |     x     | floor(x) | round(x) | expected | x <> 0 | x % 1 | x & 1 |   example
      //   1  |  2n + 0.5 |  2n      |  2n + 1  |  2n      |   >    |  0.5  |   0   |  0.5 ->  0
      //   2  |  2n + 1.5 |  2n + 1  |  2n + 2  |  2n + 2  |   >    |  0.5  |   1   |  1.5 ->  2
      //   3  | -2n - 0.5 | -2n - 1  | -2n      | -2n      |   <    | -0.5  |   0   | -0.5 ->  0
      //   4  | -2n - 1.5 | -2n - 2  | -2n - 1  | -2n - 2  |   <    | -0.5  |   1   | -1.5 -> -2
      // (where n is a non-negative integer)
      //
      // Branch here for cases 1 and 4
      if ((x > 0 && (x % 1) === +0.5 && (x & 1) === 0) ||
          (x < 0 && (x % 1) === -0.5 && (x & 1) === 1)) {
          return censorNegativeZero(Math.floor(x));
      }

      return censorNegativeZero(Math.round(x));
  }

  function integerPart(n) {
      return censorNegativeZero(Math.trunc(n));
  }

  function sign(x) {
      return x < 0 ? -1 : 1;
  }

  function modulo(x, y) {
      // https://tc39.github.io/ecma262/#eqn-modulo
      // Note that http://stackoverflow.com/a/4467559/3191 does NOT work for large modulos
      const signMightNotMatch = x % y;
      if (sign(y) !== sign(signMightNotMatch)) {
          return signMightNotMatch + y;
      }
      return signMightNotMatch;
  }

  function censorNegativeZero(x) {
      return x === 0 ? 0 : x;
  }

  function createIntegerConversion(bitLength, typeOpts) {
      const isSigned = !typeOpts.unsigned;

      let lowerBound;
      let upperBound;
      if (bitLength === 64) {
          upperBound = Number.MAX_SAFE_INTEGER;
          lowerBound = !isSigned ? 0 : Number.MIN_SAFE_INTEGER;
      } else if (!isSigned) {
          lowerBound = 0;
          upperBound = Math.pow(2, bitLength) - 1;
      } else {
          lowerBound = -Math.pow(2, bitLength - 1);
          upperBound = Math.pow(2, bitLength - 1) - 1;
      }

      const twoToTheBitLength = Math.pow(2, bitLength);
      const twoToOneLessThanTheBitLength = Math.pow(2, bitLength - 1);

      return (V, opts = {}) => {
          let x = toNumber(V, opts);
          x = censorNegativeZero(x);

          if (opts.enforceRange) {
              if (!Number.isFinite(x)) {
                  throw makeException(TypeError, "is not a finite number", opts);
              }

              x = integerPart(x);

              if (x < lowerBound || x > upperBound) {
                  throw makeException(TypeError,
                      `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`, opts);
              }

              return x;
          }

          if (!Number.isNaN(x) && opts.clamp) {
              x = Math.min(Math.max(x, lowerBound), upperBound);
              x = evenRound(x);
              return x;
          }

          if (!Number.isFinite(x) || x === 0) {
              return 0;
          }
          x = integerPart(x);

          // Math.pow(2, 64) is not accurately representable in JavaScript, so try to avoid these per-spec operations if
          // possible. Hopefully it's an optimization for the non-64-bitLength cases too.
          if (x >= lowerBound && x <= upperBound) {
              return x;
          }

          // These will not work great for bitLength of 64, but oh well. See the README for more details.
          x = modulo(x, twoToTheBitLength);
          if (isSigned && x >= twoToOneLessThanTheBitLength) {
              return x - twoToTheBitLength;
          }
          return x;
      };
  }

  function createLongLongConversion(bitLength, { unsigned }) {
      const upperBound = Number.MAX_SAFE_INTEGER;
      const lowerBound = unsigned ? 0 : Number.MIN_SAFE_INTEGER;
      const asBigIntN = unsigned ? BigInt.asUintN : BigInt.asIntN;

      return (V, opts = {}) => {
          if (opts === undefined) {
              opts = {};
          }

          let x = toNumber(V, opts);
          x = censorNegativeZero(x);

          if (opts.enforceRange) {
              if (!Number.isFinite(x)) {
                  throw makeException(TypeError, "is not a finite number", opts);
              }

              x = integerPart(x);

              if (x < lowerBound || x > upperBound) {
                  throw makeException(TypeError,
                      `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`, opts);
              }

              return x;
          }

          if (!Number.isNaN(x) && opts.clamp) {
              x = Math.min(Math.max(x, lowerBound), upperBound);
              x = evenRound(x);
              return x;
          }

          if (!Number.isFinite(x) || x === 0) {
              return 0;
          }

          let xBigInt = BigInt(integerPart(x));
          xBigInt = asBigIntN(bitLength, xBigInt);
          return Number(xBigInt);
      };
  }

  exports.any = V => {
      return V;
  };

  exports.void = function () {
      return undefined;
  };

  exports.boolean = function (val) {
      return !!val;
  };

  exports.byte = createIntegerConversion(8, { unsigned: false });
  exports.octet = createIntegerConversion(8, { unsigned: true });

  exports.short = createIntegerConversion(16, { unsigned: false });
  exports["unsigned short"] = createIntegerConversion(16, { unsigned: true });

  exports.long = createIntegerConversion(32, { unsigned: false });
  exports["unsigned long"] = createIntegerConversion(32, { unsigned: true });

  exports["long long"] = createLongLongConversion(64, { unsigned: false });
  exports["unsigned long long"] = createLongLongConversion(64, { unsigned: true });

  exports.double = (V, opts) => {
      const x = toNumber(V, opts);

      if (!Number.isFinite(x)) {
          throw makeException(TypeError, "is not a finite floating-point value", opts);
      }

      return x;
  };

  exports["unrestricted double"] = (V, opts) => {
      const x = toNumber(V, opts);

      return x;
  };

  exports.float = (V, opts) => {
      const x = toNumber(V, opts);

      if (!Number.isFinite(x)) {
          throw makeException(TypeError, "is not a finite floating-point value", opts);
      }

      if (Object.is(x, -0)) {
          return x;
      }

      const y = Math.fround(x);

      if (!Number.isFinite(y)) {
          throw makeException(TypeError, "is outside the range of a single-precision floating-point value", opts);
      }

      return y;
  };

  exports["unrestricted float"] = (V, opts) => {
      const x = toNumber(V, opts);

      if (isNaN(x)) {
          return x;
      }

      if (Object.is(x, -0)) {
          return x;
      }

      return Math.fround(x);
  };

  exports.DOMString = function (V, opts = {}) {
      if (opts.treatNullAsEmptyString && V === null) {
          return "";
      }

      if (typeof V === "symbol") {
          throw makeException(TypeError, "is a symbol, which cannot be converted to a string", opts);
      }

      const StringCtor = opts.globals ? opts.globals.String : String;
      return StringCtor(V);
  };

  exports.ByteString = (V, opts) => {
      const x = exports.DOMString(V, opts);
      let c;
      for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
          if (c > 255) {
              throw makeException(TypeError, "is not a valid ByteString", opts);
          }
      }

      return x;
  };

  exports.USVString = (V, opts) => {
      const S = exports.DOMString(V, opts);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
          const c = S.charCodeAt(i);
          if (c < 0xD800 || c > 0xDFFF) {
              U.push(String.fromCodePoint(c));
          } else if (0xDC00 <= c && c <= 0xDFFF) {
              U.push(String.fromCodePoint(0xFFFD));
          } else if (i === n - 1) {
              U.push(String.fromCodePoint(0xFFFD));
          } else {
              const d = S.charCodeAt(i + 1);
              if (0xDC00 <= d && d <= 0xDFFF) {
                  const a = c & 0x3FF;
                  const b = d & 0x3FF;
                  U.push(String.fromCodePoint((2 << 15) + ((2 << 9) * a) + b));
                  ++i;
              } else {
                  U.push(String.fromCodePoint(0xFFFD));
              }
          }
      }

      return U.join("");
  };

  exports.object = (V, opts) => {
      if (type(V) !== "Object") {
          throw makeException(TypeError, "is not an object", opts);
      }

      return V;
  };

  // Not exported, but used in Function and VoidFunction.

  // Neither Function nor VoidFunction is defined with [TreatNonObjectAsNull], so
  // handling for that is omitted.
  function convertCallbackFunction(V, opts) {
      if (typeof V !== "function") {
          throw makeException(TypeError, "is not a function", opts);
      }
      return V;
  }

  const abByteLengthGetter =
      Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
  const sabByteLengthGetter =
      Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, "byteLength").get;

  function isNonSharedArrayBuffer(V) {
      try {
          // This will throw on SharedArrayBuffers, but not detached ArrayBuffers.
          // (The spec says it should throw, but the spec conflicts with implementations: https://github.com/tc39/ecma262/issues/678)
          abByteLengthGetter.call(V);

          return true;
      } catch {
          return false;
      }
  }

  function isSharedArrayBuffer(V) {
      try {
          sabByteLengthGetter.call(V);
          return true;
      } catch {
          return false;
      }
  }

  function isArrayBufferDetached(V) {
      try {
          // eslint-disable-next-line no-new
          new Uint8Array(V);
          return false;
      } catch {
          return true;
      }
  }

  exports.ArrayBuffer = (V, opts = {}) => {
      if (!isNonSharedArrayBuffer(V)) {
          if (opts.allowShared && !isSharedArrayBuffer(V)) {
              throw makeException(TypeError, "is not an ArrayBuffer or SharedArrayBuffer", opts);
          }
          throw makeException(TypeError, "is not an ArrayBuffer", opts);
      }
      if (isArrayBufferDetached(V)) {
          throw makeException(TypeError, "is a detached ArrayBuffer", opts);
      }

      return V;
  };

  const dvByteLengthGetter =
      Object.getOwnPropertyDescriptor(DataView.prototype, "byteLength").get;
  exports.DataView = (V, opts = {}) => {
      try {
          dvByteLengthGetter.call(V);
      } catch (e) {
          throw makeException(TypeError, "is not a DataView", opts);
      }

      if (!opts.allowShared && isSharedArrayBuffer(V.buffer)) {
          throw makeException(TypeError, "is backed by a SharedArrayBuffer, which is not allowed", opts);
      }
      if (isArrayBufferDetached(V.buffer)) {
          throw makeException(TypeError, "is backed by a detached ArrayBuffer", opts);
      }

      return V;
  };

  // Returns the unforgeable `TypedArray` constructor name or `undefined`,
  // if the `this` value isn't a valid `TypedArray` object.
  //
  // https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag
  const typedArrayNameGetter = Object.getOwnPropertyDescriptor(
      Object.getPrototypeOf(Uint8Array).prototype,
      Symbol.toStringTag
  ).get;
  [
      Int8Array, Int16Array, Int32Array, Uint8Array,
      Uint16Array, Uint32Array, Uint8ClampedArray, Float32Array, Float64Array
  ].forEach(func => {
      const name = func.name;
      const article = /^[AEIOU]/.test(name) ? "an" : "a";
      exports[name] = (V, opts = {}) => {
          if (!ArrayBuffer.isView(V) || typedArrayNameGetter.call(V) !== name) {
              throw makeException(TypeError, `is not ${article} ${name} object`, opts);
          }
          if (!opts.allowShared && isSharedArrayBuffer(V.buffer)) {
              throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", opts);
          }
          if (isArrayBufferDetached(V.buffer)) {
              throw makeException(TypeError, "is a view on a detached ArrayBuffer", opts);
          }

          return V;
      };
  });

  // Common definitions

  exports.ArrayBufferView = (V, opts = {}) => {
      if (!ArrayBuffer.isView(V)) {
          throw makeException(TypeError, "is not a view on an ArrayBuffer or SharedArrayBuffer", opts);
      }

      if (!opts.allowShared && isSharedArrayBuffer(V.buffer)) {
          throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", opts);
      }

      if (isArrayBufferDetached(V.buffer)) {
          throw makeException(TypeError, "is a view on a detached ArrayBuffer", opts);
      }
      return V;
  };

  exports.BufferSource = (V, opts = {}) => {
      if (ArrayBuffer.isView(V)) {
          if (!opts.allowShared && isSharedArrayBuffer(V.buffer)) {
              throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", opts);
          }

          if (isArrayBufferDetached(V.buffer)) {
              throw makeException(TypeError, "is a view on a detached ArrayBuffer", opts);
          }
          return V;
      }

      if (!opts.allowShared && !isNonSharedArrayBuffer(V)) {
          throw makeException(TypeError, "is not an ArrayBuffer or a view on one", opts);
      }
      if (opts.allowShared && !isSharedArrayBuffer(V) && !isNonSharedArrayBuffer(V)) {
          throw makeException(TypeError, "is not an ArrayBuffer, SharedArrayBufer, or a view on one", opts);
      }
      if (isArrayBufferDetached(V)) {
          throw makeException(TypeError, "is a detached ArrayBuffer", opts);
      }

      return V;
  };

  exports.DOMTimeStamp = exports["unsigned long long"];

  exports.Function = convertCallbackFunction;

  exports.VoidFunction = convertCallbackFunction;
  });

  var utils$1 = createCommonjsModule(function (module, exports) {

  // Returns "Type(value) is Object" in ES terminology.
  function isObject(value) {
    return typeof value === "object" && value !== null || typeof value === "function";
  }

  const hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);

  const wrapperSymbol = Symbol("wrapper");
  const implSymbol = Symbol("impl");
  const sameObjectCaches = Symbol("SameObject caches");
  const ctorRegistrySymbol = Symbol.for("[webidl2js]  constructor registry");

  function getSameObject(wrapper, prop, creator) {
    if (!wrapper[sameObjectCaches]) {
      wrapper[sameObjectCaches] = Object.create(null);
    }

    if (prop in wrapper[sameObjectCaches]) {
      return wrapper[sameObjectCaches][prop];
    }

    wrapper[sameObjectCaches][prop] = creator();
    return wrapper[sameObjectCaches][prop];
  }

  function wrapperForImpl(impl) {
    return impl ? impl[wrapperSymbol] : null;
  }

  function implForWrapper(wrapper) {
    return wrapper ? wrapper[implSymbol] : null;
  }

  function tryWrapperForImpl(impl) {
    const wrapper = wrapperForImpl(impl);
    return wrapper ? wrapper : impl;
  }

  function tryImplForWrapper(wrapper) {
    const impl = implForWrapper(wrapper);
    return impl ? impl : wrapper;
  }

  const iterInternalSymbol = Symbol("internal");
  const IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
  const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {}).prototype);

  function isArrayIndexPropName(P) {
    if (typeof P !== "string") {
      return false;
    }
    const i = P >>> 0;
    if (i === Math.pow(2, 32) - 1) {
      return false;
    }
    const s = `${i}`;
    if (P !== s) {
      return false;
    }
    return true;
  }

  const byteLengthGetter =
      Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
  function isArrayBuffer(value) {
    try {
      byteLengthGetter.call(value);
      return true;
    } catch (e) {
      return false;
    }
  }

  function iteratorResult([key, value], kind) {
    let result;
    switch (kind) {
      case "key":
        result = key;
        break;
      case "value":
        result = value;
        break;
      case "key+value":
        result = [key, value];
        break;
    }
    return { value: result, done: false };
  }

  const supportsPropertyIndex = Symbol("supports property index");
  const supportedPropertyIndices = Symbol("supported property indices");
  const supportsPropertyName = Symbol("supports property name");
  const supportedPropertyNames = Symbol("supported property names");
  const indexedGet = Symbol("indexed property get");
  const indexedSetNew = Symbol("indexed property set new");
  const indexedSetExisting = Symbol("indexed property set existing");
  const namedGet = Symbol("named property get");
  const namedSetNew = Symbol("named property set new");
  const namedSetExisting = Symbol("named property set existing");
  const namedDelete = Symbol("named property delete");

  const asyncIteratorNext = Symbol("async iterator get the next iteration result");
  const asyncIteratorReturn = Symbol("async iterator return steps");
  const asyncIteratorInit = Symbol("async iterator initialization steps");
  const asyncIteratorEOI = Symbol("async iterator end of iteration");

  module.exports = {
    isObject,
    hasOwn,
    wrapperSymbol,
    implSymbol,
    getSameObject,
    ctorRegistrySymbol,
    wrapperForImpl,
    implForWrapper,
    tryWrapperForImpl,
    tryImplForWrapper,
    iterInternalSymbol,
    IteratorPrototype,
    AsyncIteratorPrototype,
    isArrayBuffer,
    isArrayIndexPropName,
    supportsPropertyIndex,
    supportedPropertyIndices,
    supportsPropertyName,
    supportedPropertyNames,
    indexedGet,
    indexedSetNew,
    indexedSetExisting,
    namedGet,
    namedSetNew,
    namedSetExisting,
    namedDelete,
    asyncIteratorNext,
    asyncIteratorReturn,
    asyncIteratorInit,
    asyncIteratorEOI,
    iteratorResult
  };
  });

  const combiningMarks = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10F46}-\u{10F50}\u{11000}-\u{11002}\u{11038}-\u{11046}\u{1107F}-\u{11082}\u{110B0}-\u{110BA}\u{11100}-\u{11102}\u{11127}-\u{11134}\u{11145}\u{11146}\u{11173}\u{11180}-\u{11182}\u{111B3}-\u{111C0}\u{111C9}-\u{111CC}\u{111CE}\u{111CF}\u{1122C}-\u{11237}\u{1123E}\u{112DF}-\u{112EA}\u{11300}-\u{11303}\u{1133B}\u{1133C}\u{1133E}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11357}\u{11362}\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11435}-\u{11446}\u{1145E}\u{114B0}-\u{114C3}\u{115AF}-\u{115B5}\u{115B8}-\u{115C0}\u{115DC}\u{115DD}\u{11630}-\u{11640}\u{116AB}-\u{116B7}\u{1171D}-\u{1172B}\u{1182C}-\u{1183A}\u{11930}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{1193E}\u{11940}\u{11942}\u{11943}\u{119D1}-\u{119D7}\u{119DA}-\u{119E0}\u{119E4}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A39}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A5B}\u{11A8A}-\u{11A99}\u{11C2F}-\u{11C36}\u{11C38}-\u{11C3F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D8A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D97}\u{11EF3}-\u{11EF6}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F51}-\u{16F87}\u{16F8F}-\u{16F92}\u{16FE4}\u{16FF0}\u{16FF1}\u{1BC9D}\u{1BC9E}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D172}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E130}-\u{1E136}\u{1E2EC}-\u{1E2EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]/u;
  const combiningClassVirama = /[\u094D\u09CD\u0A4D\u0ACD\u0B4D\u0BCD\u0C4D\u0CCD\u0D3B\u0D3C\u0D4D\u0DCA\u0E3A\u0EBA\u0F84\u1039\u103A\u1714\u1734\u17D2\u1A60\u1B44\u1BAA\u1BAB\u1BF2\u1BF3\u2D7F\uA806\uA8C4\uA953\uA9C0\uAAF6\uABED\u{10A3F}\u{11046}\u{1107F}\u{110B9}\u{11133}\u{11134}\u{111C0}\u{11235}\u{112EA}\u{1134D}\u{11442}\u{114C2}\u{115BF}\u{1163F}\u{116B6}\u{1172B}\u{11839}\u{119E0}\u{11A34}\u{11A47}\u{11A99}\u{11C3F}\u{11D44}\u{11D45}\u{11D97}]/u;
  const validZWNJ = /[\u0620\u0626\u0628\u062A-\u062E\u0633-\u063F\u0641-\u0647\u0649\u064A\u066E\u066F\u0678-\u0687\u069A-\u06BF\u06C1\u06C2\u06CC\u06CE\u06D0\u06D1\u06FA-\u06FC\u06FF\u0712-\u0714\u071A-\u071D\u071F-\u0727\u0729\u072B\u072D\u072E\u074E-\u0758\u075C-\u076A\u076D-\u0770\u0772\u0775-\u0777\u077A-\u077F\u07CA-\u07EA\u0841-\u0845\u0848\u084A-\u0853\u0855\u0860\u0862-\u0865\u0868\u08A0-\u08A9\u08AF\u08B0\u08B3\u08B4\u08B6-\u08B8\u08BA-\u08BD\u1807\u1820-\u1878\u1887-\u18A8\u18AA\uA840-\uA872\u{10AC0}-\u{10AC4}\u{10ACD}\u{10AD3}-\u{10ADC}\u{10ADE}-\u{10AE0}\u{10AEB}-\u{10AEE}\u{10B80}\u{10B82}\u{10B86}-\u{10B88}\u{10B8A}\u{10B8B}\u{10B8D}\u{10B90}\u{10BAD}\u{10BAE}\u{10D00}-\u{10D21}\u{10D23}\u{10F30}-\u{10F32}\u{10F34}-\u{10F44}\u{10F51}-\u{10F53}\u{1E900}-\u{1E943}][\xAD\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u061C\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u070F\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200B\u200E\u200F\u202A-\u202E\u2060-\u2064\u206A-\u206F\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFEFF\uFFF9-\uFFFB\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10F46}-\u{10F50}\u{11001}\u{11038}-\u{11046}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C3F}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{13430}-\u{13438}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E130}-\u{1E136}\u{1E2EC}-\u{1E2EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94B}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*\u200C[\xAD\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u061C\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u070F\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200B\u200E\u200F\u202A-\u202E\u2060-\u2064\u206A-\u206F\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFEFF\uFFF9-\uFFFB\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10F46}-\u{10F50}\u{11001}\u{11038}-\u{11046}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C3F}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{13430}-\u{13438}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E130}-\u{1E136}\u{1E2EC}-\u{1E2EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94B}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*[\u0620\u0622-\u063F\u0641-\u064A\u066E\u066F\u0671-\u0673\u0675-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u077F\u07CA-\u07EA\u0840-\u0855\u0860\u0862-\u0865\u0867-\u086A\u08A0-\u08AC\u08AE-\u08B4\u08B6-\u08BD\u1807\u1820-\u1878\u1887-\u18A8\u18AA\uA840-\uA871\u{10AC0}-\u{10AC5}\u{10AC7}\u{10AC9}\u{10ACA}\u{10ACE}-\u{10AD6}\u{10AD8}-\u{10AE1}\u{10AE4}\u{10AEB}-\u{10AEF}\u{10B80}-\u{10B91}\u{10BA9}-\u{10BAE}\u{10D01}-\u{10D23}\u{10F30}-\u{10F44}\u{10F51}-\u{10F54}\u{1E900}-\u{1E943}]/u;
  const bidiDomain = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B\u061C\u061E-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08E2\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}]/u;
  const bidiS1LTR = /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1735\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4B\u1B50-\u1B6A\u1B74-\u1B7C\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u249C-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BF\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB69\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1013F}\u{1018D}\u{1018E}\u{101D0}-\u{101FC}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{11000}\u{11002}-\u{11037}\u{11047}-\u{1104D}\u{11066}-\u{1106F}\u{11082}-\u{110B2}\u{110B7}\u{110B8}\u{110BB}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11103}-\u{11126}\u{1112C}\u{11136}-\u{11147}\u{11150}-\u{11172}\u{11174}-\u{11176}\u{11182}-\u{111B5}\u{111BF}-\u{111C8}\u{111CD}\u{111CE}\u{111D0}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1122E}\u{11232}\u{11233}\u{11235}\u{11238}-\u{1123D}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112DE}\u{112E0}-\u{112E2}\u{112F0}-\u{112F9}\u{11302}\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}-\u{1133F}\u{11341}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11400}-\u{11437}\u{11440}\u{11441}\u{11445}\u{11447}-\u{1145B}\u{1145D}\u{1145F}-\u{11461}\u{11480}-\u{114B2}\u{114B9}\u{114BB}-\u{114BE}\u{114C1}\u{114C4}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B1}\u{115B8}-\u{115BB}\u{115BE}\u{115C1}-\u{115DB}\u{11600}-\u{11632}\u{1163B}\u{1163C}\u{1163E}\u{11641}-\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116AA}\u{116AC}\u{116AE}\u{116AF}\u{116B6}\u{116B8}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{11720}\u{11721}\u{11726}\u{11730}-\u{1173F}\u{11800}-\u{1182E}\u{11838}\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193D}\u{1193F}-\u{11942}\u{11944}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D3}\u{119DC}-\u{119DF}\u{119E1}-\u{119E4}\u{11A00}\u{11A07}\u{11A08}\u{11A0B}-\u{11A32}\u{11A39}\u{11A3A}\u{11A3F}-\u{11A46}\u{11A50}\u{11A57}\u{11A58}\u{11A5C}-\u{11A89}\u{11A97}\u{11A9A}-\u{11AA2}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2F}\u{11C3E}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11CA9}\u{11CB1}\u{11CB4}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D93}\u{11D94}\u{11D96}\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF2}\u{11EF5}-\u{11EF8}\u{11FB0}\u{11FC0}-\u{11FD4}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{13430}-\u{13438}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}\u{16A6F}\u{16AD0}-\u{16AED}\u{16AF5}\u{16B00}-\u{16B2F}\u{16B37}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F50}-\u{16F87}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}\u{1BC9F}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D166}\u{1D16A}-\u{1D172}\u{1D183}\u{1D184}\u{1D18C}-\u{1D1A9}\u{1D1AE}-\u{1D1E8}\u{1D2E0}-\u{1D2F3}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6DA}\u{1D6DC}-\u{1D714}\u{1D716}-\u{1D74E}\u{1D750}-\u{1D788}\u{1D78A}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D800}-\u{1D9FF}\u{1DA37}-\u{1DA3A}\u{1DA6D}-\u{1DA74}\u{1DA76}-\u{1DA83}\u{1DA85}-\u{1DA8B}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E2C0}-\u{1E2EB}\u{1E2F0}-\u{1E2F9}\u{1F110}-\u{1F12E}\u{1F130}-\u{1F169}\u{1F170}-\u{1F1AC}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}]/u;
  const bidiS1RTL = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0608\u060B\u060D\u061B\u061C\u061E-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}]/u;
  const bidiS2 = /^[\0-\x08\x0E-\x1B!-@\[-`\{-\x84\x86-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02B9\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u036F\u0374\u0375\u037E\u0384\u0385\u0387\u03F6\u0483-\u0489\u058A\u058D-\u058F\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\u0600-\u061C\u061E-\u070D\u070F-\u074A\u074D-\u07B1\u07C0-\u07FA\u07FD-\u082D\u0830-\u083E\u0840-\u085B\u085E\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08D3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09F2\u09F3\u09FB\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF1\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0BF3-\u0BFA\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C78-\u0C7E\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E3F\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1390-\u1399\u1400\u169B\u169C\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DB\u17DD\u17F0-\u17F9\u1800-\u180E\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1940\u1944\u1945\u19DE-\u19FF\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u200B-\u200D\u200F-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BF\u20D0-\u20F0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189-\u218B\u2190-\u2335\u237B-\u2394\u2396-\u2426\u2440-\u244A\u2460-\u249B\u24EA-\u26AB\u26AD-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2CEF-\u2CF1\u2CF9-\u2CFF\u2D7F\u2DE0-\u2E52\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3001-\u3004\u3008-\u3020\u302A-\u302D\u3030\u3036\u3037\u303D-\u303F\u3099-\u309C\u30A0\u30FB\u31C0-\u31E3\u321D\u321E\u3250-\u325F\u327C-\u327E\u32B1-\u32BF\u32CC-\u32CF\u3377-\u337A\u33DE\u33DF\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA60D-\uA60F\uA66F-\uA67F\uA69E\uA69F\uA6F0\uA6F1\uA700-\uA721\uA788\uA802\uA806\uA80B\uA825\uA826\uA828-\uA82C\uA838\uA839\uA874-\uA877\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uAB6A\uAB6B\uABE5\uABE8\uABED\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC1\uFBD3-\uFD3F\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE00-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFE70-\uFE74\uFE76-\uFEFC\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD\u{10101}\u{10140}-\u{1018C}\u{10190}-\u{1019C}\u{101A0}\u{101FD}\u{102E0}-\u{102FB}\u{10376}-\u{1037A}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{1091F}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A38}-\u{10A3A}\u{10A3F}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE6}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B39}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D27}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAB}-\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F59}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{11001}\u{11038}-\u{11046}\u{11052}-\u{11065}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{11660}-\u{1166C}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11FD5}-\u{11FF1}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE2}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D200}-\u{1D245}\u{1D300}-\u{1D356}\u{1D6DB}\u{1D715}\u{1D74F}\u{1D789}\u{1D7C3}\u{1D7CE}-\u{1D7FF}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E130}-\u{1E136}\u{1E2EC}-\u{1E2EF}\u{1E2FF}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8D6}\u{1E900}-\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1EEF0}\u{1EEF1}\u{1F000}-\u{1F02B}\u{1F030}-\u{1F093}\u{1F0A0}-\u{1F0AE}\u{1F0B1}-\u{1F0BF}\u{1F0C1}-\u{1F0CF}\u{1F0D1}-\u{1F0F5}\u{1F100}-\u{1F10F}\u{1F12F}\u{1F16A}-\u{1F16F}\u{1F1AD}\u{1F260}-\u{1F265}\u{1F300}-\u{1F6D7}\u{1F6E0}-\u{1F6EC}\u{1F6F0}-\u{1F6FC}\u{1F700}-\u{1F773}\u{1F780}-\u{1F7D8}\u{1F7E0}-\u{1F7EB}\u{1F800}-\u{1F80B}\u{1F810}-\u{1F847}\u{1F850}-\u{1F859}\u{1F860}-\u{1F887}\u{1F890}-\u{1F8AD}\u{1F8B0}\u{1F8B1}\u{1F900}-\u{1F978}\u{1F97A}-\u{1F9CB}\u{1F9CD}-\u{1FA53}\u{1FA60}-\u{1FA6D}\u{1FA70}-\u{1FA74}\u{1FA78}-\u{1FA7A}\u{1FA80}-\u{1FA86}\u{1FA90}-\u{1FAA8}\u{1FAB0}-\u{1FAB6}\u{1FAC0}-\u{1FAC2}\u{1FAD0}-\u{1FAD6}\u{1FB00}-\u{1FB92}\u{1FB94}-\u{1FBCA}\u{1FBF0}-\u{1FBF9}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*$/u;
  const bidiS3 = /[0-9\xB2\xB3\xB9\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B\u061C\u061E-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u08E2\u200F\u2070\u2074-\u2079\u2080-\u2089\u2488-\u249B\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\u{102E1}-\u{102FB}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1D7CE}-\u{1D7FF}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1F100}-\u{1F10A}\u{1FBF0}-\u{1FBF9}][\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10F46}-\u{10F50}\u{11001}\u{11038}-\u{11046}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1D167}-\u{1D169}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E130}-\u{1E136}\u{1E2EC}-\u{1E2EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]*$/u;
  const bidiS4EN = /[0-9\xB2\xB3\xB9\u06F0-\u06F9\u2070\u2074-\u2079\u2080-\u2089\u2488-\u249B\uFF10-\uFF19\u{102E1}-\u{102FB}\u{1D7CE}-\u{1D7FF}\u{1F100}-\u{1F10A}\u{1FBF0}-\u{1FBF9}]/u;
  const bidiS4AN = /[\u0600-\u0605\u0660-\u0669\u066B\u066C\u06DD\u08E2\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}]/u;
  const bidiS5 = /^[\0-\x08\x0E-\x1B!-\x84\x86-\u0377\u037A-\u037F\u0384-\u038A\u038C\u038E-\u03A1\u03A3-\u052F\u0531-\u0556\u0559-\u058A\u058D-\u058F\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0606\u0607\u0609\u060A\u060C\u060E-\u061A\u064B-\u065F\u066A\u0670\u06D6-\u06DC\u06DE-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F6-\u07F9\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E3A\u0E3F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FDA\u1000-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u13A0-\u13F5\u13F8-\u13FD\u1400-\u167F\u1681-\u169C\u16A0-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1736\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u1800-\u180E\u1810-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE-\u1A1B\u1A1E-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1AB0-\u1AC0\u1B00-\u1B4B\u1B50-\u1B7C\u1B80-\u1BF3\u1BFC-\u1C37\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD0-\u1CFA\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u200B-\u200E\u2010-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2071\u2074-\u208E\u2090-\u209C\u20A0-\u20BF\u20D0-\u20F0\u2100-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u2B73\u2B76-\u2B95\u2B97-\u2C2E\u2C30-\u2C5E\u2C60-\u2CF3\u2CF9-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2E52\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3001-\u303F\u3041-\u3096\u3099-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31E3\u31F0-\u321E\u3220-\u9FFC\uA000-\uA48C\uA490-\uA4C6\uA4D0-\uA62B\uA640-\uA6F7\uA700-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA82C\uA830-\uA839\uA840-\uA877\uA880-\uA8C5\uA8CE-\uA8D9\uA8E0-\uA953\uA95F-\uA97C\uA980-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAAC2\uAADB-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB6B\uAB70-\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1E\uFB29\uFD3E\uFD3F\uFDFD\uFE00-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}-\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1018E}\u{10190}-\u{1019C}\u{101A0}\u{101D0}-\u{101FD}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E0}-\u{102FB}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{1037A}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{1091F}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10B39}-\u{10B3F}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10F46}-\u{10F50}\u{11000}-\u{1104D}\u{11052}-\u{1106F}\u{1107F}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11100}-\u{11134}\u{11136}-\u{11147}\u{11150}-\u{11176}\u{11180}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1123E}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112EA}\u{112F0}-\u{112F9}\u{11300}-\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133B}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11400}-\u{1145B}\u{1145D}-\u{11461}\u{11480}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B5}\u{115B8}-\u{115DD}\u{11600}-\u{11644}\u{11650}-\u{11659}\u{11660}-\u{1166C}\u{11680}-\u{116B8}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{1171D}-\u{1172B}\u{11730}-\u{1173F}\u{11800}-\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D7}\u{119DA}-\u{119E4}\u{11A00}-\u{11A47}\u{11A50}-\u{11AA2}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C36}\u{11C38}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D47}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF8}\u{11FB0}\u{11FC0}-\u{11FF1}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{13430}-\u{13438}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}\u{16A6F}\u{16AD0}-\u{16AED}\u{16AF0}-\u{16AF5}\u{16B00}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F4F}-\u{16F87}\u{16F8F}-\u{16F9F}\u{16FE0}-\u{16FE4}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}-\u{1BCA3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D1E8}\u{1D200}-\u{1D245}\u{1D2E0}-\u{1D2F3}\u{1D300}-\u{1D356}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D7CB}\u{1D7CE}-\u{1DA8B}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E100}-\u{1E12C}\u{1E130}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E2C0}-\u{1E2F9}\u{1E2FF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{1EEF0}\u{1EEF1}\u{1F000}-\u{1F02B}\u{1F030}-\u{1F093}\u{1F0A0}-\u{1F0AE}\u{1F0B1}-\u{1F0BF}\u{1F0C1}-\u{1F0CF}\u{1F0D1}-\u{1F0F5}\u{1F100}-\u{1F1AD}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{1F260}-\u{1F265}\u{1F300}-\u{1F6D7}\u{1F6E0}-\u{1F6EC}\u{1F6F0}-\u{1F6FC}\u{1F700}-\u{1F773}\u{1F780}-\u{1F7D8}\u{1F7E0}-\u{1F7EB}\u{1F800}-\u{1F80B}\u{1F810}-\u{1F847}\u{1F850}-\u{1F859}\u{1F860}-\u{1F887}\u{1F890}-\u{1F8AD}\u{1F8B0}\u{1F8B1}\u{1F900}-\u{1F978}\u{1F97A}-\u{1F9CB}\u{1F9CD}-\u{1FA53}\u{1FA60}-\u{1FA6D}\u{1FA70}-\u{1FA74}\u{1FA78}-\u{1FA7A}\u{1FA80}-\u{1FA86}\u{1FA90}-\u{1FAA8}\u{1FAB0}-\u{1FAB6}\u{1FAC0}-\u{1FAC2}\u{1FAD0}-\u{1FAD6}\u{1FB00}-\u{1FB92}\u{1FB94}-\u{1FBCA}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}]*$/u;
  const bidiS6 = /[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u06F0-\u06F9\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1735\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4B\u1B50-\u1B6A\u1B74-\u1B7C\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u2488-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BF\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB69\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1013F}\u{1018D}\u{1018E}\u{101D0}-\u{101FC}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E1}-\u{102FB}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{11000}\u{11002}-\u{11037}\u{11047}-\u{1104D}\u{11066}-\u{1106F}\u{11082}-\u{110B2}\u{110B7}\u{110B8}\u{110BB}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11103}-\u{11126}\u{1112C}\u{11136}-\u{11147}\u{11150}-\u{11172}\u{11174}-\u{11176}\u{11182}-\u{111B5}\u{111BF}-\u{111C8}\u{111CD}\u{111CE}\u{111D0}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1122E}\u{11232}\u{11233}\u{11235}\u{11238}-\u{1123D}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112DE}\u{112E0}-\u{112E2}\u{112F0}-\u{112F9}\u{11302}\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}-\u{1133F}\u{11341}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11400}-\u{11437}\u{11440}\u{11441}\u{11445}\u{11447}-\u{1145B}\u{1145D}\u{1145F}-\u{11461}\u{11480}-\u{114B2}\u{114B9}\u{114BB}-\u{114BE}\u{114C1}\u{114C4}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B1}\u{115B8}-\u{115BB}\u{115BE}\u{115C1}-\u{115DB}\u{11600}-\u{11632}\u{1163B}\u{1163C}\u{1163E}\u{11641}-\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116AA}\u{116AC}\u{116AE}\u{116AF}\u{116B6}\u{116B8}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{11720}\u{11721}\u{11726}\u{11730}-\u{1173F}\u{11800}-\u{1182E}\u{11838}\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193D}\u{1193F}-\u{11942}\u{11944}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D3}\u{119DC}-\u{119DF}\u{119E1}-\u{119E4}\u{11A00}\u{11A07}\u{11A08}\u{11A0B}-\u{11A32}\u{11A39}\u{11A3A}\u{11A3F}-\u{11A46}\u{11A50}\u{11A57}\u{11A58}\u{11A5C}-\u{11A89}\u{11A97}\u{11A9A}-\u{11AA2}\u{11AC0}-\u{11AF8}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2F}\u{11C3E}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11CA9}\u{11CB1}\u{11CB4}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D93}\u{11D94}\u{11D96}\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF2}\u{11EF5}-\u{11EF8}\u{11FB0}\u{11FC0}-\u{11FD4}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{13000}-\u{1342E}\u{13430}-\u{13438}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}\u{16A6F}\u{16AD0}-\u{16AED}\u{16AF5}\u{16B00}-\u{16B2F}\u{16B37}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F50}-\u{16F87}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1B000}-\u{1B11E}\u{1B150}-\u{1B152}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}\u{1BC9F}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D166}\u{1D16A}-\u{1D172}\u{1D183}\u{1D184}\u{1D18C}-\u{1D1A9}\u{1D1AE}-\u{1D1E8}\u{1D2E0}-\u{1D2F3}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6DA}\u{1D6DC}-\u{1D714}\u{1D716}-\u{1D74E}\u{1D750}-\u{1D788}\u{1D78A}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D7CE}-\u{1D9FF}\u{1DA37}-\u{1DA3A}\u{1DA6D}-\u{1DA74}\u{1DA76}-\u{1DA83}\u{1DA85}-\u{1DA8B}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E2C0}-\u{1E2EB}\u{1E2F0}-\u{1E2F9}\u{1F100}-\u{1F10A}\u{1F110}-\u{1F12E}\u{1F130}-\u{1F169}\u{1F170}-\u{1F1AC}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DD}\u{2A700}-\u{2B734}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}][\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10F46}-\u{10F50}\u{11001}\u{11038}-\u{11046}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1D167}-\u{1D169}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E130}-\u{1E136}\u{1E2EC}-\u{1E2EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]*$/u;

  var regexes = {
    combiningMarks,
    combiningClassVirama,
    validZWNJ,
    bidiDomain,
    bidiS1LTR,
    bidiS1RTL,
    bidiS2,
    bidiS3,
    bidiS4EN,
    bidiS4AN,
    bidiS5,
    bidiS6
  };

  var mappingTable = [
  	[
  		[
  			0,
  			44
  		],
  		4
  	],
  	[
  		[
  			45,
  			46
  		],
  		2
  	],
  	[
  		47,
  		4
  	],
  	[
  		[
  			48,
  			57
  		],
  		2
  	],
  	[
  		[
  			58,
  			64
  		],
  		4
  	],
  	[
  		65,
  		1,
  		"a"
  	],
  	[
  		66,
  		1,
  		"b"
  	],
  	[
  		67,
  		1,
  		"c"
  	],
  	[
  		68,
  		1,
  		"d"
  	],
  	[
  		69,
  		1,
  		"e"
  	],
  	[
  		70,
  		1,
  		"f"
  	],
  	[
  		71,
  		1,
  		"g"
  	],
  	[
  		72,
  		1,
  		"h"
  	],
  	[
  		73,
  		1,
  		"i"
  	],
  	[
  		74,
  		1,
  		"j"
  	],
  	[
  		75,
  		1,
  		"k"
  	],
  	[
  		76,
  		1,
  		"l"
  	],
  	[
  		77,
  		1,
  		"m"
  	],
  	[
  		78,
  		1,
  		"n"
  	],
  	[
  		79,
  		1,
  		"o"
  	],
  	[
  		80,
  		1,
  		"p"
  	],
  	[
  		81,
  		1,
  		"q"
  	],
  	[
  		82,
  		1,
  		"r"
  	],
  	[
  		83,
  		1,
  		"s"
  	],
  	[
  		84,
  		1,
  		"t"
  	],
  	[
  		85,
  		1,
  		"u"
  	],
  	[
  		86,
  		1,
  		"v"
  	],
  	[
  		87,
  		1,
  		"w"
  	],
  	[
  		88,
  		1,
  		"x"
  	],
  	[
  		89,
  		1,
  		"y"
  	],
  	[
  		90,
  		1,
  		"z"
  	],
  	[
  		[
  			91,
  			96
  		],
  		4
  	],
  	[
  		[
  			97,
  			122
  		],
  		2
  	],
  	[
  		[
  			123,
  			127
  		],
  		4
  	],
  	[
  		[
  			128,
  			159
  		],
  		3
  	],
  	[
  		160,
  		5,
  		" "
  	],
  	[
  		[
  			161,
  			167
  		],
  		2
  	],
  	[
  		168,
  		5,
  		" ̈"
  	],
  	[
  		169,
  		2
  	],
  	[
  		170,
  		1,
  		"a"
  	],
  	[
  		[
  			171,
  			172
  		],
  		2
  	],
  	[
  		173,
  		7
  	],
  	[
  		174,
  		2
  	],
  	[
  		175,
  		5,
  		" ̄"
  	],
  	[
  		[
  			176,
  			177
  		],
  		2
  	],
  	[
  		178,
  		1,
  		"2"
  	],
  	[
  		179,
  		1,
  		"3"
  	],
  	[
  		180,
  		5,
  		" ́"
  	],
  	[
  		181,
  		1,
  		"μ"
  	],
  	[
  		182,
  		2
  	],
  	[
  		183,
  		2
  	],
  	[
  		184,
  		5,
  		" ̧"
  	],
  	[
  		185,
  		1,
  		"1"
  	],
  	[
  		186,
  		1,
  		"o"
  	],
  	[
  		187,
  		2
  	],
  	[
  		188,
  		1,
  		"1⁄4"
  	],
  	[
  		189,
  		1,
  		"1⁄2"
  	],
  	[
  		190,
  		1,
  		"3⁄4"
  	],
  	[
  		191,
  		2
  	],
  	[
  		192,
  		1,
  		"à"
  	],
  	[
  		193,
  		1,
  		"á"
  	],
  	[
  		194,
  		1,
  		"â"
  	],
  	[
  		195,
  		1,
  		"ã"
  	],
  	[
  		196,
  		1,
  		"ä"
  	],
  	[
  		197,
  		1,
  		"å"
  	],
  	[
  		198,
  		1,
  		"æ"
  	],
  	[
  		199,
  		1,
  		"ç"
  	],
  	[
  		200,
  		1,
  		"è"
  	],
  	[
  		201,
  		1,
  		"é"
  	],
  	[
  		202,
  		1,
  		"ê"
  	],
  	[
  		203,
  		1,
  		"ë"
  	],
  	[
  		204,
  		1,
  		"ì"
  	],
  	[
  		205,
  		1,
  		"í"
  	],
  	[
  		206,
  		1,
  		"î"
  	],
  	[
  		207,
  		1,
  		"ï"
  	],
  	[
  		208,
  		1,
  		"ð"
  	],
  	[
  		209,
  		1,
  		"ñ"
  	],
  	[
  		210,
  		1,
  		"ò"
  	],
  	[
  		211,
  		1,
  		"ó"
  	],
  	[
  		212,
  		1,
  		"ô"
  	],
  	[
  		213,
  		1,
  		"õ"
  	],
  	[
  		214,
  		1,
  		"ö"
  	],
  	[
  		215,
  		2
  	],
  	[
  		216,
  		1,
  		"ø"
  	],
  	[
  		217,
  		1,
  		"ù"
  	],
  	[
  		218,
  		1,
  		"ú"
  	],
  	[
  		219,
  		1,
  		"û"
  	],
  	[
  		220,
  		1,
  		"ü"
  	],
  	[
  		221,
  		1,
  		"ý"
  	],
  	[
  		222,
  		1,
  		"þ"
  	],
  	[
  		223,
  		6,
  		"ss"
  	],
  	[
  		[
  			224,
  			246
  		],
  		2
  	],
  	[
  		247,
  		2
  	],
  	[
  		[
  			248,
  			255
  		],
  		2
  	],
  	[
  		256,
  		1,
  		"ā"
  	],
  	[
  		257,
  		2
  	],
  	[
  		258,
  		1,
  		"ă"
  	],
  	[
  		259,
  		2
  	],
  	[
  		260,
  		1,
  		"ą"
  	],
  	[
  		261,
  		2
  	],
  	[
  		262,
  		1,
  		"ć"
  	],
  	[
  		263,
  		2
  	],
  	[
  		264,
  		1,
  		"ĉ"
  	],
  	[
  		265,
  		2
  	],
  	[
  		266,
  		1,
  		"ċ"
  	],
  	[
  		267,
  		2
  	],
  	[
  		268,
  		1,
  		"č"
  	],
  	[
  		269,
  		2
  	],
  	[
  		270,
  		1,
  		"ď"
  	],
  	[
  		271,
  		2
  	],
  	[
  		272,
  		1,
  		"đ"
  	],
  	[
  		273,
  		2
  	],
  	[
  		274,
  		1,
  		"ē"
  	],
  	[
  		275,
  		2
  	],
  	[
  		276,
  		1,
  		"ĕ"
  	],
  	[
  		277,
  		2
  	],
  	[
  		278,
  		1,
  		"ė"
  	],
  	[
  		279,
  		2
  	],
  	[
  		280,
  		1,
  		"ę"
  	],
  	[
  		281,
  		2
  	],
  	[
  		282,
  		1,
  		"ě"
  	],
  	[
  		283,
  		2
  	],
  	[
  		284,
  		1,
  		"ĝ"
  	],
  	[
  		285,
  		2
  	],
  	[
  		286,
  		1,
  		"ğ"
  	],
  	[
  		287,
  		2
  	],
  	[
  		288,
  		1,
  		"ġ"
  	],
  	[
  		289,
  		2
  	],
  	[
  		290,
  		1,
  		"ģ"
  	],
  	[
  		291,
  		2
  	],
  	[
  		292,
  		1,
  		"ĥ"
  	],
  	[
  		293,
  		2
  	],
  	[
  		294,
  		1,
  		"ħ"
  	],
  	[
  		295,
  		2
  	],
  	[
  		296,
  		1,
  		"ĩ"
  	],
  	[
  		297,
  		2
  	],
  	[
  		298,
  		1,
  		"ī"
  	],
  	[
  		299,
  		2
  	],
  	[
  		300,
  		1,
  		"ĭ"
  	],
  	[
  		301,
  		2
  	],
  	[
  		302,
  		1,
  		"į"
  	],
  	[
  		303,
  		2
  	],
  	[
  		304,
  		1,
  		"i̇"
  	],
  	[
  		305,
  		2
  	],
  	[
  		[
  			306,
  			307
  		],
  		1,
  		"ij"
  	],
  	[
  		308,
  		1,
  		"ĵ"
  	],
  	[
  		309,
  		2
  	],
  	[
  		310,
  		1,
  		"ķ"
  	],
  	[
  		[
  			311,
  			312
  		],
  		2
  	],
  	[
  		313,
  		1,
  		"ĺ"
  	],
  	[
  		314,
  		2
  	],
  	[
  		315,
  		1,
  		"ļ"
  	],
  	[
  		316,
  		2
  	],
  	[
  		317,
  		1,
  		"ľ"
  	],
  	[
  		318,
  		2
  	],
  	[
  		[
  			319,
  			320
  		],
  		1,
  		"l·"
  	],
  	[
  		321,
  		1,
  		"ł"
  	],
  	[
  		322,
  		2
  	],
  	[
  		323,
  		1,
  		"ń"
  	],
  	[
  		324,
  		2
  	],
  	[
  		325,
  		1,
  		"ņ"
  	],
  	[
  		326,
  		2
  	],
  	[
  		327,
  		1,
  		"ň"
  	],
  	[
  		328,
  		2
  	],
  	[
  		329,
  		1,
  		"ʼn"
  	],
  	[
  		330,
  		1,
  		"ŋ"
  	],
  	[
  		331,
  		2
  	],
  	[
  		332,
  		1,
  		"ō"
  	],
  	[
  		333,
  		2
  	],
  	[
  		334,
  		1,
  		"ŏ"
  	],
  	[
  		335,
  		2
  	],
  	[
  		336,
  		1,
  		"ő"
  	],
  	[
  		337,
  		2
  	],
  	[
  		338,
  		1,
  		"œ"
  	],
  	[
  		339,
  		2
  	],
  	[
  		340,
  		1,
  		"ŕ"
  	],
  	[
  		341,
  		2
  	],
  	[
  		342,
  		1,
  		"ŗ"
  	],
  	[
  		343,
  		2
  	],
  	[
  		344,
  		1,
  		"ř"
  	],
  	[
  		345,
  		2
  	],
  	[
  		346,
  		1,
  		"ś"
  	],
  	[
  		347,
  		2
  	],
  	[
  		348,
  		1,
  		"ŝ"
  	],
  	[
  		349,
  		2
  	],
  	[
  		350,
  		1,
  		"ş"
  	],
  	[
  		351,
  		2
  	],
  	[
  		352,
  		1,
  		"š"
  	],
  	[
  		353,
  		2
  	],
  	[
  		354,
  		1,
  		"ţ"
  	],
  	[
  		355,
  		2
  	],
  	[
  		356,
  		1,
  		"ť"
  	],
  	[
  		357,
  		2
  	],
  	[
  		358,
  		1,
  		"ŧ"
  	],
  	[
  		359,
  		2
  	],
  	[
  		360,
  		1,
  		"ũ"
  	],
  	[
  		361,
  		2
  	],
  	[
  		362,
  		1,
  		"ū"
  	],
  	[
  		363,
  		2
  	],
  	[
  		364,
  		1,
  		"ŭ"
  	],
  	[
  		365,
  		2
  	],
  	[
  		366,
  		1,
  		"ů"
  	],
  	[
  		367,
  		2
  	],
  	[
  		368,
  		1,
  		"ű"
  	],
  	[
  		369,
  		2
  	],
  	[
  		370,
  		1,
  		"ų"
  	],
  	[
  		371,
  		2
  	],
  	[
  		372,
  		1,
  		"ŵ"
  	],
  	[
  		373,
  		2
  	],
  	[
  		374,
  		1,
  		"ŷ"
  	],
  	[
  		375,
  		2
  	],
  	[
  		376,
  		1,
  		"ÿ"
  	],
  	[
  		377,
  		1,
  		"ź"
  	],
  	[
  		378,
  		2
  	],
  	[
  		379,
  		1,
  		"ż"
  	],
  	[
  		380,
  		2
  	],
  	[
  		381,
  		1,
  		"ž"
  	],
  	[
  		382,
  		2
  	],
  	[
  		383,
  		1,
  		"s"
  	],
  	[
  		384,
  		2
  	],
  	[
  		385,
  		1,
  		"ɓ"
  	],
  	[
  		386,
  		1,
  		"ƃ"
  	],
  	[
  		387,
  		2
  	],
  	[
  		388,
  		1,
  		"ƅ"
  	],
  	[
  		389,
  		2
  	],
  	[
  		390,
  		1,
  		"ɔ"
  	],
  	[
  		391,
  		1,
  		"ƈ"
  	],
  	[
  		392,
  		2
  	],
  	[
  		393,
  		1,
  		"ɖ"
  	],
  	[
  		394,
  		1,
  		"ɗ"
  	],
  	[
  		395,
  		1,
  		"ƌ"
  	],
  	[
  		[
  			396,
  			397
  		],
  		2
  	],
  	[
  		398,
  		1,
  		"ǝ"
  	],
  	[
  		399,
  		1,
  		"ə"
  	],
  	[
  		400,
  		1,
  		"ɛ"
  	],
  	[
  		401,
  		1,
  		"ƒ"
  	],
  	[
  		402,
  		2
  	],
  	[
  		403,
  		1,
  		"ɠ"
  	],
  	[
  		404,
  		1,
  		"ɣ"
  	],
  	[
  		405,
  		2
  	],
  	[
  		406,
  		1,
  		"ɩ"
  	],
  	[
  		407,
  		1,
  		"ɨ"
  	],
  	[
  		408,
  		1,
  		"ƙ"
  	],
  	[
  		[
  			409,
  			411
  		],
  		2
  	],
  	[
  		412,
  		1,
  		"ɯ"
  	],
  	[
  		413,
  		1,
  		"ɲ"
  	],
  	[
  		414,
  		2
  	],
  	[
  		415,
  		1,
  		"ɵ"
  	],
  	[
  		416,
  		1,
  		"ơ"
  	],
  	[
  		417,
  		2
  	],
  	[
  		418,
  		1,
  		"ƣ"
  	],
  	[
  		419,
  		2
  	],
  	[
  		420,
  		1,
  		"ƥ"
  	],
  	[
  		421,
  		2
  	],
  	[
  		422,
  		1,
  		"ʀ"
  	],
  	[
  		423,
  		1,
  		"ƨ"
  	],
  	[
  		424,
  		2
  	],
  	[
  		425,
  		1,
  		"ʃ"
  	],
  	[
  		[
  			426,
  			427
  		],
  		2
  	],
  	[
  		428,
  		1,
  		"ƭ"
  	],
  	[
  		429,
  		2
  	],
  	[
  		430,
  		1,
  		"ʈ"
  	],
  	[
  		431,
  		1,
  		"ư"
  	],
  	[
  		432,
  		2
  	],
  	[
  		433,
  		1,
  		"ʊ"
  	],
  	[
  		434,
  		1,
  		"ʋ"
  	],
  	[
  		435,
  		1,
  		"ƴ"
  	],
  	[
  		436,
  		2
  	],
  	[
  		437,
  		1,
  		"ƶ"
  	],
  	[
  		438,
  		2
  	],
  	[
  		439,
  		1,
  		"ʒ"
  	],
  	[
  		440,
  		1,
  		"ƹ"
  	],
  	[
  		[
  			441,
  			443
  		],
  		2
  	],
  	[
  		444,
  		1,
  		"ƽ"
  	],
  	[
  		[
  			445,
  			451
  		],
  		2
  	],
  	[
  		[
  			452,
  			454
  		],
  		1,
  		"dž"
  	],
  	[
  		[
  			455,
  			457
  		],
  		1,
  		"lj"
  	],
  	[
  		[
  			458,
  			460
  		],
  		1,
  		"nj"
  	],
  	[
  		461,
  		1,
  		"ǎ"
  	],
  	[
  		462,
  		2
  	],
  	[
  		463,
  		1,
  		"ǐ"
  	],
  	[
  		464,
  		2
  	],
  	[
  		465,
  		1,
  		"ǒ"
  	],
  	[
  		466,
  		2
  	],
  	[
  		467,
  		1,
  		"ǔ"
  	],
  	[
  		468,
  		2
  	],
  	[
  		469,
  		1,
  		"ǖ"
  	],
  	[
  		470,
  		2
  	],
  	[
  		471,
  		1,
  		"ǘ"
  	],
  	[
  		472,
  		2
  	],
  	[
  		473,
  		1,
  		"ǚ"
  	],
  	[
  		474,
  		2
  	],
  	[
  		475,
  		1,
  		"ǜ"
  	],
  	[
  		[
  			476,
  			477
  		],
  		2
  	],
  	[
  		478,
  		1,
  		"ǟ"
  	],
  	[
  		479,
  		2
  	],
  	[
  		480,
  		1,
  		"ǡ"
  	],
  	[
  		481,
  		2
  	],
  	[
  		482,
  		1,
  		"ǣ"
  	],
  	[
  		483,
  		2
  	],
  	[
  		484,
  		1,
  		"ǥ"
  	],
  	[
  		485,
  		2
  	],
  	[
  		486,
  		1,
  		"ǧ"
  	],
  	[
  		487,
  		2
  	],
  	[
  		488,
  		1,
  		"ǩ"
  	],
  	[
  		489,
  		2
  	],
  	[
  		490,
  		1,
  		"ǫ"
  	],
  	[
  		491,
  		2
  	],
  	[
  		492,
  		1,
  		"ǭ"
  	],
  	[
  		493,
  		2
  	],
  	[
  		494,
  		1,
  		"ǯ"
  	],
  	[
  		[
  			495,
  			496
  		],
  		2
  	],
  	[
  		[
  			497,
  			499
  		],
  		1,
  		"dz"
  	],
  	[
  		500,
  		1,
  		"ǵ"
  	],
  	[
  		501,
  		2
  	],
  	[
  		502,
  		1,
  		"ƕ"
  	],
  	[
  		503,
  		1,
  		"ƿ"
  	],
  	[
  		504,
  		1,
  		"ǹ"
  	],
  	[
  		505,
  		2
  	],
  	[
  		506,
  		1,
  		"ǻ"
  	],
  	[
  		507,
  		2
  	],
  	[
  		508,
  		1,
  		"ǽ"
  	],
  	[
  		509,
  		2
  	],
  	[
  		510,
  		1,
  		"ǿ"
  	],
  	[
  		511,
  		2
  	],
  	[
  		512,
  		1,
  		"ȁ"
  	],
  	[
  		513,
  		2
  	],
  	[
  		514,
  		1,
  		"ȃ"
  	],
  	[
  		515,
  		2
  	],
  	[
  		516,
  		1,
  		"ȅ"
  	],
  	[
  		517,
  		2
  	],
  	[
  		518,
  		1,
  		"ȇ"
  	],
  	[
  		519,
  		2
  	],
  	[
  		520,
  		1,
  		"ȉ"
  	],
  	[
  		521,
  		2
  	],
  	[
  		522,
  		1,
  		"ȋ"
  	],
  	[
  		523,
  		2
  	],
  	[
  		524,
  		1,
  		"ȍ"
  	],
  	[
  		525,
  		2
  	],
  	[
  		526,
  		1,
  		"ȏ"
  	],
  	[
  		527,
  		2
  	],
  	[
  		528,
  		1,
  		"ȑ"
  	],
  	[
  		529,
  		2
  	],
  	[
  		530,
  		1,
  		"ȓ"
  	],
  	[
  		531,
  		2
  	],
  	[
  		532,
  		1,
  		"ȕ"
  	],
  	[
  		533,
  		2
  	],
  	[
  		534,
  		1,
  		"ȗ"
  	],
  	[
  		535,
  		2
  	],
  	[
  		536,
  		1,
  		"ș"
  	],
  	[
  		537,
  		2
  	],
  	[
  		538,
  		1,
  		"ț"
  	],
  	[
  		539,
  		2
  	],
  	[
  		540,
  		1,
  		"ȝ"
  	],
  	[
  		541,
  		2
  	],
  	[
  		542,
  		1,
  		"ȟ"
  	],
  	[
  		543,
  		2
  	],
  	[
  		544,
  		1,
  		"ƞ"
  	],
  	[
  		545,
  		2
  	],
  	[
  		546,
  		1,
  		"ȣ"
  	],
  	[
  		547,
  		2
  	],
  	[
  		548,
  		1,
  		"ȥ"
  	],
  	[
  		549,
  		2
  	],
  	[
  		550,
  		1,
  		"ȧ"
  	],
  	[
  		551,
  		2
  	],
  	[
  		552,
  		1,
  		"ȩ"
  	],
  	[
  		553,
  		2
  	],
  	[
  		554,
  		1,
  		"ȫ"
  	],
  	[
  		555,
  		2
  	],
  	[
  		556,
  		1,
  		"ȭ"
  	],
  	[
  		557,
  		2
  	],
  	[
  		558,
  		1,
  		"ȯ"
  	],
  	[
  		559,
  		2
  	],
  	[
  		560,
  		1,
  		"ȱ"
  	],
  	[
  		561,
  		2
  	],
  	[
  		562,
  		1,
  		"ȳ"
  	],
  	[
  		563,
  		2
  	],
  	[
  		[
  			564,
  			566
  		],
  		2
  	],
  	[
  		[
  			567,
  			569
  		],
  		2
  	],
  	[
  		570,
  		1,
  		"ⱥ"
  	],
  	[
  		571,
  		1,
  		"ȼ"
  	],
  	[
  		572,
  		2
  	],
  	[
  		573,
  		1,
  		"ƚ"
  	],
  	[
  		574,
  		1,
  		"ⱦ"
  	],
  	[
  		[
  			575,
  			576
  		],
  		2
  	],
  	[
  		577,
  		1,
  		"ɂ"
  	],
  	[
  		578,
  		2
  	],
  	[
  		579,
  		1,
  		"ƀ"
  	],
  	[
  		580,
  		1,
  		"ʉ"
  	],
  	[
  		581,
  		1,
  		"ʌ"
  	],
  	[
  		582,
  		1,
  		"ɇ"
  	],
  	[
  		583,
  		2
  	],
  	[
  		584,
  		1,
  		"ɉ"
  	],
  	[
  		585,
  		2
  	],
  	[
  		586,
  		1,
  		"ɋ"
  	],
  	[
  		587,
  		2
  	],
  	[
  		588,
  		1,
  		"ɍ"
  	],
  	[
  		589,
  		2
  	],
  	[
  		590,
  		1,
  		"ɏ"
  	],
  	[
  		591,
  		2
  	],
  	[
  		[
  			592,
  			680
  		],
  		2
  	],
  	[
  		[
  			681,
  			685
  		],
  		2
  	],
  	[
  		[
  			686,
  			687
  		],
  		2
  	],
  	[
  		688,
  		1,
  		"h"
  	],
  	[
  		689,
  		1,
  		"ɦ"
  	],
  	[
  		690,
  		1,
  		"j"
  	],
  	[
  		691,
  		1,
  		"r"
  	],
  	[
  		692,
  		1,
  		"ɹ"
  	],
  	[
  		693,
  		1,
  		"ɻ"
  	],
  	[
  		694,
  		1,
  		"ʁ"
  	],
  	[
  		695,
  		1,
  		"w"
  	],
  	[
  		696,
  		1,
  		"y"
  	],
  	[
  		[
  			697,
  			705
  		],
  		2
  	],
  	[
  		[
  			706,
  			709
  		],
  		2
  	],
  	[
  		[
  			710,
  			721
  		],
  		2
  	],
  	[
  		[
  			722,
  			727
  		],
  		2
  	],
  	[
  		728,
  		5,
  		" ̆"
  	],
  	[
  		729,
  		5,
  		" ̇"
  	],
  	[
  		730,
  		5,
  		" ̊"
  	],
  	[
  		731,
  		5,
  		" ̨"
  	],
  	[
  		732,
  		5,
  		" ̃"
  	],
  	[
  		733,
  		5,
  		" ̋"
  	],
  	[
  		734,
  		2
  	],
  	[
  		735,
  		2
  	],
  	[
  		736,
  		1,
  		"ɣ"
  	],
  	[
  		737,
  		1,
  		"l"
  	],
  	[
  		738,
  		1,
  		"s"
  	],
  	[
  		739,
  		1,
  		"x"
  	],
  	[
  		740,
  		1,
  		"ʕ"
  	],
  	[
  		[
  			741,
  			745
  		],
  		2
  	],
  	[
  		[
  			746,
  			747
  		],
  		2
  	],
  	[
  		748,
  		2
  	],
  	[
  		749,
  		2
  	],
  	[
  		750,
  		2
  	],
  	[
  		[
  			751,
  			767
  		],
  		2
  	],
  	[
  		[
  			768,
  			831
  		],
  		2
  	],
  	[
  		832,
  		1,
  		"̀"
  	],
  	[
  		833,
  		1,
  		"́"
  	],
  	[
  		834,
  		2
  	],
  	[
  		835,
  		1,
  		"̓"
  	],
  	[
  		836,
  		1,
  		"̈́"
  	],
  	[
  		837,
  		1,
  		"ι"
  	],
  	[
  		[
  			838,
  			846
  		],
  		2
  	],
  	[
  		847,
  		7
  	],
  	[
  		[
  			848,
  			855
  		],
  		2
  	],
  	[
  		[
  			856,
  			860
  		],
  		2
  	],
  	[
  		[
  			861,
  			863
  		],
  		2
  	],
  	[
  		[
  			864,
  			865
  		],
  		2
  	],
  	[
  		866,
  		2
  	],
  	[
  		[
  			867,
  			879
  		],
  		2
  	],
  	[
  		880,
  		1,
  		"ͱ"
  	],
  	[
  		881,
  		2
  	],
  	[
  		882,
  		1,
  		"ͳ"
  	],
  	[
  		883,
  		2
  	],
  	[
  		884,
  		1,
  		"ʹ"
  	],
  	[
  		885,
  		2
  	],
  	[
  		886,
  		1,
  		"ͷ"
  	],
  	[
  		887,
  		2
  	],
  	[
  		[
  			888,
  			889
  		],
  		3
  	],
  	[
  		890,
  		5,
  		" ι"
  	],
  	[
  		[
  			891,
  			893
  		],
  		2
  	],
  	[
  		894,
  		5,
  		";"
  	],
  	[
  		895,
  		1,
  		"ϳ"
  	],
  	[
  		[
  			896,
  			899
  		],
  		3
  	],
  	[
  		900,
  		5,
  		" ́"
  	],
  	[
  		901,
  		5,
  		" ̈́"
  	],
  	[
  		902,
  		1,
  		"ά"
  	],
  	[
  		903,
  		1,
  		"·"
  	],
  	[
  		904,
  		1,
  		"έ"
  	],
  	[
  		905,
  		1,
  		"ή"
  	],
  	[
  		906,
  		1,
  		"ί"
  	],
  	[
  		907,
  		3
  	],
  	[
  		908,
  		1,
  		"ό"
  	],
  	[
  		909,
  		3
  	],
  	[
  		910,
  		1,
  		"ύ"
  	],
  	[
  		911,
  		1,
  		"ώ"
  	],
  	[
  		912,
  		2
  	],
  	[
  		913,
  		1,
  		"α"
  	],
  	[
  		914,
  		1,
  		"β"
  	],
  	[
  		915,
  		1,
  		"γ"
  	],
  	[
  		916,
  		1,
  		"δ"
  	],
  	[
  		917,
  		1,
  		"ε"
  	],
  	[
  		918,
  		1,
  		"ζ"
  	],
  	[
  		919,
  		1,
  		"η"
  	],
  	[
  		920,
  		1,
  		"θ"
  	],
  	[
  		921,
  		1,
  		"ι"
  	],
  	[
  		922,
  		1,
  		"κ"
  	],
  	[
  		923,
  		1,
  		"λ"
  	],
  	[
  		924,
  		1,
  		"μ"
  	],
  	[
  		925,
  		1,
  		"ν"
  	],
  	[
  		926,
  		1,
  		"ξ"
  	],
  	[
  		927,
  		1,
  		"ο"
  	],
  	[
  		928,
  		1,
  		"π"
  	],
  	[
  		929,
  		1,
  		"ρ"
  	],
  	[
  		930,
  		3
  	],
  	[
  		931,
  		1,
  		"σ"
  	],
  	[
  		932,
  		1,
  		"τ"
  	],
  	[
  		933,
  		1,
  		"υ"
  	],
  	[
  		934,
  		1,
  		"φ"
  	],
  	[
  		935,
  		1,
  		"χ"
  	],
  	[
  		936,
  		1,
  		"ψ"
  	],
  	[
  		937,
  		1,
  		"ω"
  	],
  	[
  		938,
  		1,
  		"ϊ"
  	],
  	[
  		939,
  		1,
  		"ϋ"
  	],
  	[
  		[
  			940,
  			961
  		],
  		2
  	],
  	[
  		962,
  		6,
  		"σ"
  	],
  	[
  		[
  			963,
  			974
  		],
  		2
  	],
  	[
  		975,
  		1,
  		"ϗ"
  	],
  	[
  		976,
  		1,
  		"β"
  	],
  	[
  		977,
  		1,
  		"θ"
  	],
  	[
  		978,
  		1,
  		"υ"
  	],
  	[
  		979,
  		1,
  		"ύ"
  	],
  	[
  		980,
  		1,
  		"ϋ"
  	],
  	[
  		981,
  		1,
  		"φ"
  	],
  	[
  		982,
  		1,
  		"π"
  	],
  	[
  		983,
  		2
  	],
  	[
  		984,
  		1,
  		"ϙ"
  	],
  	[
  		985,
  		2
  	],
  	[
  		986,
  		1,
  		"ϛ"
  	],
  	[
  		987,
  		2
  	],
  	[
  		988,
  		1,
  		"ϝ"
  	],
  	[
  		989,
  		2
  	],
  	[
  		990,
  		1,
  		"ϟ"
  	],
  	[
  		991,
  		2
  	],
  	[
  		992,
  		1,
  		"ϡ"
  	],
  	[
  		993,
  		2
  	],
  	[
  		994,
  		1,
  		"ϣ"
  	],
  	[
  		995,
  		2
  	],
  	[
  		996,
  		1,
  		"ϥ"
  	],
  	[
  		997,
  		2
  	],
  	[
  		998,
  		1,
  		"ϧ"
  	],
  	[
  		999,
  		2
  	],
  	[
  		1000,
  		1,
  		"ϩ"
  	],
  	[
  		1001,
  		2
  	],
  	[
  		1002,
  		1,
  		"ϫ"
  	],
  	[
  		1003,
  		2
  	],
  	[
  		1004,
  		1,
  		"ϭ"
  	],
  	[
  		1005,
  		2
  	],
  	[
  		1006,
  		1,
  		"ϯ"
  	],
  	[
  		1007,
  		2
  	],
  	[
  		1008,
  		1,
  		"κ"
  	],
  	[
  		1009,
  		1,
  		"ρ"
  	],
  	[
  		1010,
  		1,
  		"σ"
  	],
  	[
  		1011,
  		2
  	],
  	[
  		1012,
  		1,
  		"θ"
  	],
  	[
  		1013,
  		1,
  		"ε"
  	],
  	[
  		1014,
  		2
  	],
  	[
  		1015,
  		1,
  		"ϸ"
  	],
  	[
  		1016,
  		2
  	],
  	[
  		1017,
  		1,
  		"σ"
  	],
  	[
  		1018,
  		1,
  		"ϻ"
  	],
  	[
  		1019,
  		2
  	],
  	[
  		1020,
  		2
  	],
  	[
  		1021,
  		1,
  		"ͻ"
  	],
  	[
  		1022,
  		1,
  		"ͼ"
  	],
  	[
  		1023,
  		1,
  		"ͽ"
  	],
  	[
  		1024,
  		1,
  		"ѐ"
  	],
  	[
  		1025,
  		1,
  		"ё"
  	],
  	[
  		1026,
  		1,
  		"ђ"
  	],
  	[
  		1027,
  		1,
  		"ѓ"
  	],
  	[
  		1028,
  		1,
  		"є"
  	],
  	[
  		1029,
  		1,
  		"ѕ"
  	],
  	[
  		1030,
  		1,
  		"і"
  	],
  	[
  		1031,
  		1,
  		"ї"
  	],
  	[
  		1032,
  		1,
  		"ј"
  	],
  	[
  		1033,
  		1,
  		"љ"
  	],
  	[
  		1034,
  		1,
  		"њ"
  	],
  	[
  		1035,
  		1,
  		"ћ"
  	],
  	[
  		1036,
  		1,
  		"ќ"
  	],
  	[
  		1037,
  		1,
  		"ѝ"
  	],
  	[
  		1038,
  		1,
  		"ў"
  	],
  	[
  		1039,
  		1,
  		"џ"
  	],
  	[
  		1040,
  		1,
  		"а"
  	],
  	[
  		1041,
  		1,
  		"б"
  	],
  	[
  		1042,
  		1,
  		"в"
  	],
  	[
  		1043,
  		1,
  		"г"
  	],
  	[
  		1044,
  		1,
  		"д"
  	],
  	[
  		1045,
  		1,
  		"е"
  	],
  	[
  		1046,
  		1,
  		"ж"
  	],
  	[
  		1047,
  		1,
  		"з"
  	],
  	[
  		1048,
  		1,
  		"и"
  	],
  	[
  		1049,
  		1,
  		"й"
  	],
  	[
  		1050,
  		1,
  		"к"
  	],
  	[
  		1051,
  		1,
  		"л"
  	],
  	[
  		1052,
  		1,
  		"м"
  	],
  	[
  		1053,
  		1,
  		"н"
  	],
  	[
  		1054,
  		1,
  		"о"
  	],
  	[
  		1055,
  		1,
  		"п"
  	],
  	[
  		1056,
  		1,
  		"р"
  	],
  	[
  		1057,
  		1,
  		"с"
  	],
  	[
  		1058,
  		1,
  		"т"
  	],
  	[
  		1059,
  		1,
  		"у"
  	],
  	[
  		1060,
  		1,
  		"ф"
  	],
  	[
  		1061,
  		1,
  		"х"
  	],
  	[
  		1062,
  		1,
  		"ц"
  	],
  	[
  		1063,
  		1,
  		"ч"
  	],
  	[
  		1064,
  		1,
  		"ш"
  	],
  	[
  		1065,
  		1,
  		"щ"
  	],
  	[
  		1066,
  		1,
  		"ъ"
  	],
  	[
  		1067,
  		1,
  		"ы"
  	],
  	[
  		1068,
  		1,
  		"ь"
  	],
  	[
  		1069,
  		1,
  		"э"
  	],
  	[
  		1070,
  		1,
  		"ю"
  	],
  	[
  		1071,
  		1,
  		"я"
  	],
  	[
  		[
  			1072,
  			1103
  		],
  		2
  	],
  	[
  		1104,
  		2
  	],
  	[
  		[
  			1105,
  			1116
  		],
  		2
  	],
  	[
  		1117,
  		2
  	],
  	[
  		[
  			1118,
  			1119
  		],
  		2
  	],
  	[
  		1120,
  		1,
  		"ѡ"
  	],
  	[
  		1121,
  		2
  	],
  	[
  		1122,
  		1,
  		"ѣ"
  	],
  	[
  		1123,
  		2
  	],
  	[
  		1124,
  		1,
  		"ѥ"
  	],
  	[
  		1125,
  		2
  	],
  	[
  		1126,
  		1,
  		"ѧ"
  	],
  	[
  		1127,
  		2
  	],
  	[
  		1128,
  		1,
  		"ѩ"
  	],
  	[
  		1129,
  		2
  	],
  	[
  		1130,
  		1,
  		"ѫ"
  	],
  	[
  		1131,
  		2
  	],
  	[
  		1132,
  		1,
  		"ѭ"
  	],
  	[
  		1133,
  		2
  	],
  	[
  		1134,
  		1,
  		"ѯ"
  	],
  	[
  		1135,
  		2
  	],
  	[
  		1136,
  		1,
  		"ѱ"
  	],
  	[
  		1137,
  		2
  	],
  	[
  		1138,
  		1,
  		"ѳ"
  	],
  	[
  		1139,
  		2
  	],
  	[
  		1140,
  		1,
  		"ѵ"
  	],
  	[
  		1141,
  		2
  	],
  	[
  		1142,
  		1,
  		"ѷ"
  	],
  	[
  		1143,
  		2
  	],
  	[
  		1144,
  		1,
  		"ѹ"
  	],
  	[
  		1145,
  		2
  	],
  	[
  		1146,
  		1,
  		"ѻ"
  	],
  	[
  		1147,
  		2
  	],
  	[
  		1148,
  		1,
  		"ѽ"
  	],
  	[
  		1149,
  		2
  	],
  	[
  		1150,
  		1,
  		"ѿ"
  	],
  	[
  		1151,
  		2
  	],
  	[
  		1152,
  		1,
  		"ҁ"
  	],
  	[
  		1153,
  		2
  	],
  	[
  		1154,
  		2
  	],
  	[
  		[
  			1155,
  			1158
  		],
  		2
  	],
  	[
  		1159,
  		2
  	],
  	[
  		[
  			1160,
  			1161
  		],
  		2
  	],
  	[
  		1162,
  		1,
  		"ҋ"
  	],
  	[
  		1163,
  		2
  	],
  	[
  		1164,
  		1,
  		"ҍ"
  	],
  	[
  		1165,
  		2
  	],
  	[
  		1166,
  		1,
  		"ҏ"
  	],
  	[
  		1167,
  		2
  	],
  	[
  		1168,
  		1,
  		"ґ"
  	],
  	[
  		1169,
  		2
  	],
  	[
  		1170,
  		1,
  		"ғ"
  	],
  	[
  		1171,
  		2
  	],
  	[
  		1172,
  		1,
  		"ҕ"
  	],
  	[
  		1173,
  		2
  	],
  	[
  		1174,
  		1,
  		"җ"
  	],
  	[
  		1175,
  		2
  	],
  	[
  		1176,
  		1,
  		"ҙ"
  	],
  	[
  		1177,
  		2
  	],
  	[
  		1178,
  		1,
  		"қ"
  	],
  	[
  		1179,
  		2
  	],
  	[
  		1180,
  		1,
  		"ҝ"
  	],
  	[
  		1181,
  		2
  	],
  	[
  		1182,
  		1,
  		"ҟ"
  	],
  	[
  		1183,
  		2
  	],
  	[
  		1184,
  		1,
  		"ҡ"
  	],
  	[
  		1185,
  		2
  	],
  	[
  		1186,
  		1,
  		"ң"
  	],
  	[
  		1187,
  		2
  	],
  	[
  		1188,
  		1,
  		"ҥ"
  	],
  	[
  		1189,
  		2
  	],
  	[
  		1190,
  		1,
  		"ҧ"
  	],
  	[
  		1191,
  		2
  	],
  	[
  		1192,
  		1,
  		"ҩ"
  	],
  	[
  		1193,
  		2
  	],
  	[
  		1194,
  		1,
  		"ҫ"
  	],
  	[
  		1195,
  		2
  	],
  	[
  		1196,
  		1,
  		"ҭ"
  	],
  	[
  		1197,
  		2
  	],
  	[
  		1198,
  		1,
  		"ү"
  	],
  	[
  		1199,
  		2
  	],
  	[
  		1200,
  		1,
  		"ұ"
  	],
  	[
  		1201,
  		2
  	],
  	[
  		1202,
  		1,
  		"ҳ"
  	],
  	[
  		1203,
  		2
  	],
  	[
  		1204,
  		1,
  		"ҵ"
  	],
  	[
  		1205,
  		2
  	],
  	[
  		1206,
  		1,
  		"ҷ"
  	],
  	[
  		1207,
  		2
  	],
  	[
  		1208,
  		1,
  		"ҹ"
  	],
  	[
  		1209,
  		2
  	],
  	[
  		1210,
  		1,
  		"һ"
  	],
  	[
  		1211,
  		2
  	],
  	[
  		1212,
  		1,
  		"ҽ"
  	],
  	[
  		1213,
  		2
  	],
  	[
  		1214,
  		1,
  		"ҿ"
  	],
  	[
  		1215,
  		2
  	],
  	[
  		1216,
  		3
  	],
  	[
  		1217,
  		1,
  		"ӂ"
  	],
  	[
  		1218,
  		2
  	],
  	[
  		1219,
  		1,
  		"ӄ"
  	],
  	[
  		1220,
  		2
  	],
  	[
  		1221,
  		1,
  		"ӆ"
  	],
  	[
  		1222,
  		2
  	],
  	[
  		1223,
  		1,
  		"ӈ"
  	],
  	[
  		1224,
  		2
  	],
  	[
  		1225,
  		1,
  		"ӊ"
  	],
  	[
  		1226,
  		2
  	],
  	[
  		1227,
  		1,
  		"ӌ"
  	],
  	[
  		1228,
  		2
  	],
  	[
  		1229,
  		1,
  		"ӎ"
  	],
  	[
  		1230,
  		2
  	],
  	[
  		1231,
  		2
  	],
  	[
  		1232,
  		1,
  		"ӑ"
  	],
  	[
  		1233,
  		2
  	],
  	[
  		1234,
  		1,
  		"ӓ"
  	],
  	[
  		1235,
  		2
  	],
  	[
  		1236,
  		1,
  		"ӕ"
  	],
  	[
  		1237,
  		2
  	],
  	[
  		1238,
  		1,
  		"ӗ"
  	],
  	[
  		1239,
  		2
  	],
  	[
  		1240,
  		1,
  		"ә"
  	],
  	[
  		1241,
  		2
  	],
  	[
  		1242,
  		1,
  		"ӛ"
  	],
  	[
  		1243,
  		2
  	],
  	[
  		1244,
  		1,
  		"ӝ"
  	],
  	[
  		1245,
  		2
  	],
  	[
  		1246,
  		1,
  		"ӟ"
  	],
  	[
  		1247,
  		2
  	],
  	[
  		1248,
  		1,
  		"ӡ"
  	],
  	[
  		1249,
  		2
  	],
  	[
  		1250,
  		1,
  		"ӣ"
  	],
  	[
  		1251,
  		2
  	],
  	[
  		1252,
  		1,
  		"ӥ"
  	],
  	[
  		1253,
  		2
  	],
  	[
  		1254,
  		1,
  		"ӧ"
  	],
  	[
  		1255,
  		2
  	],
  	[
  		1256,
  		1,
  		"ө"
  	],
  	[
  		1257,
  		2
  	],
  	[
  		1258,
  		1,
  		"ӫ"
  	],
  	[
  		1259,
  		2
  	],
  	[
  		1260,
  		1,
  		"ӭ"
  	],
  	[
  		1261,
  		2
  	],
  	[
  		1262,
  		1,
  		"ӯ"
  	],
  	[
  		1263,
  		2
  	],
  	[
  		1264,
  		1,
  		"ӱ"
  	],
  	[
  		1265,
  		2
  	],
  	[
  		1266,
  		1,
  		"ӳ"
  	],
  	[
  		1267,
  		2
  	],
  	[
  		1268,
  		1,
  		"ӵ"
  	],
  	[
  		1269,
  		2
  	],
  	[
  		1270,
  		1,
  		"ӷ"
  	],
  	[
  		1271,
  		2
  	],
  	[
  		1272,
  		1,
  		"ӹ"
  	],
  	[
  		1273,
  		2
  	],
  	[
  		1274,
  		1,
  		"ӻ"
  	],
  	[
  		1275,
  		2
  	],
  	[
  		1276,
  		1,
  		"ӽ"
  	],
  	[
  		1277,
  		2
  	],
  	[
  		1278,
  		1,
  		"ӿ"
  	],
  	[
  		1279,
  		2
  	],
  	[
  		1280,
  		1,
  		"ԁ"
  	],
  	[
  		1281,
  		2
  	],
  	[
  		1282,
  		1,
  		"ԃ"
  	],
  	[
  		1283,
  		2
  	],
  	[
  		1284,
  		1,
  		"ԅ"
  	],
  	[
  		1285,
  		2
  	],
  	[
  		1286,
  		1,
  		"ԇ"
  	],
  	[
  		1287,
  		2
  	],
  	[
  		1288,
  		1,
  		"ԉ"
  	],
  	[
  		1289,
  		2
  	],
  	[
  		1290,
  		1,
  		"ԋ"
  	],
  	[
  		1291,
  		2
  	],
  	[
  		1292,
  		1,
  		"ԍ"
  	],
  	[
  		1293,
  		2
  	],
  	[
  		1294,
  		1,
  		"ԏ"
  	],
  	[
  		1295,
  		2
  	],
  	[
  		1296,
  		1,
  		"ԑ"
  	],
  	[
  		1297,
  		2
  	],
  	[
  		1298,
  		1,
  		"ԓ"
  	],
  	[
  		1299,
  		2
  	],
  	[
  		1300,
  		1,
  		"ԕ"
  	],
  	[
  		1301,
  		2
  	],
  	[
  		1302,
  		1,
  		"ԗ"
  	],
  	[
  		1303,
  		2
  	],
  	[
  		1304,
  		1,
  		"ԙ"
  	],
  	[
  		1305,
  		2
  	],
  	[
  		1306,
  		1,
  		"ԛ"
  	],
  	[
  		1307,
  		2
  	],
  	[
  		1308,
  		1,
  		"ԝ"
  	],
  	[
  		1309,
  		2
  	],
  	[
  		1310,
  		1,
  		"ԟ"
  	],
  	[
  		1311,
  		2
  	],
  	[
  		1312,
  		1,
  		"ԡ"
  	],
  	[
  		1313,
  		2
  	],
  	[
  		1314,
  		1,
  		"ԣ"
  	],
  	[
  		1315,
  		2
  	],
  	[
  		1316,
  		1,
  		"ԥ"
  	],
  	[
  		1317,
  		2
  	],
  	[
  		1318,
  		1,
  		"ԧ"
  	],
  	[
  		1319,
  		2
  	],
  	[
  		1320,
  		1,
  		"ԩ"
  	],
  	[
  		1321,
  		2
  	],
  	[
  		1322,
  		1,
  		"ԫ"
  	],
  	[
  		1323,
  		2
  	],
  	[
  		1324,
  		1,
  		"ԭ"
  	],
  	[
  		1325,
  		2
  	],
  	[
  		1326,
  		1,
  		"ԯ"
  	],
  	[
  		1327,
  		2
  	],
  	[
  		1328,
  		3
  	],
  	[
  		1329,
  		1,
  		"ա"
  	],
  	[
  		1330,
  		1,
  		"բ"
  	],
  	[
  		1331,
  		1,
  		"գ"
  	],
  	[
  		1332,
  		1,
  		"դ"
  	],
  	[
  		1333,
  		1,
  		"ե"
  	],
  	[
  		1334,
  		1,
  		"զ"
  	],
  	[
  		1335,
  		1,
  		"է"
  	],
  	[
  		1336,
  		1,
  		"ը"
  	],
  	[
  		1337,
  		1,
  		"թ"
  	],
  	[
  		1338,
  		1,
  		"ժ"
  	],
  	[
  		1339,
  		1,
  		"ի"
  	],
  	[
  		1340,
  		1,
  		"լ"
  	],
  	[
  		1341,
  		1,
  		"խ"
  	],
  	[
  		1342,
  		1,
  		"ծ"
  	],
  	[
  		1343,
  		1,
  		"կ"
  	],
  	[
  		1344,
  		1,
  		"հ"
  	],
  	[
  		1345,
  		1,
  		"ձ"
  	],
  	[
  		1346,
  		1,
  		"ղ"
  	],
  	[
  		1347,
  		1,
  		"ճ"
  	],
  	[
  		1348,
  		1,
  		"մ"
  	],
  	[
  		1349,
  		1,
  		"յ"
  	],
  	[
  		1350,
  		1,
  		"ն"
  	],
  	[
  		1351,
  		1,
  		"շ"
  	],
  	[
  		1352,
  		1,
  		"ո"
  	],
  	[
  		1353,
  		1,
  		"չ"
  	],
  	[
  		1354,
  		1,
  		"պ"
  	],
  	[
  		1355,
  		1,
  		"ջ"
  	],
  	[
  		1356,
  		1,
  		"ռ"
  	],
  	[
  		1357,
  		1,
  		"ս"
  	],
  	[
  		1358,
  		1,
  		"վ"
  	],
  	[
  		1359,
  		1,
  		"տ"
  	],
  	[
  		1360,
  		1,
  		"ր"
  	],
  	[
  		1361,
  		1,
  		"ց"
  	],
  	[
  		1362,
  		1,
  		"ւ"
  	],
  	[
  		1363,
  		1,
  		"փ"
  	],
  	[
  		1364,
  		1,
  		"ք"
  	],
  	[
  		1365,
  		1,
  		"օ"
  	],
  	[
  		1366,
  		1,
  		"ֆ"
  	],
  	[
  		[
  			1367,
  			1368
  		],
  		3
  	],
  	[
  		1369,
  		2
  	],
  	[
  		[
  			1370,
  			1375
  		],
  		2
  	],
  	[
  		1376,
  		2
  	],
  	[
  		[
  			1377,
  			1414
  		],
  		2
  	],
  	[
  		1415,
  		1,
  		"եւ"
  	],
  	[
  		1416,
  		2
  	],
  	[
  		1417,
  		2
  	],
  	[
  		1418,
  		2
  	],
  	[
  		[
  			1419,
  			1420
  		],
  		3
  	],
  	[
  		[
  			1421,
  			1422
  		],
  		2
  	],
  	[
  		1423,
  		2
  	],
  	[
  		1424,
  		3
  	],
  	[
  		[
  			1425,
  			1441
  		],
  		2
  	],
  	[
  		1442,
  		2
  	],
  	[
  		[
  			1443,
  			1455
  		],
  		2
  	],
  	[
  		[
  			1456,
  			1465
  		],
  		2
  	],
  	[
  		1466,
  		2
  	],
  	[
  		[
  			1467,
  			1469
  		],
  		2
  	],
  	[
  		1470,
  		2
  	],
  	[
  		1471,
  		2
  	],
  	[
  		1472,
  		2
  	],
  	[
  		[
  			1473,
  			1474
  		],
  		2
  	],
  	[
  		1475,
  		2
  	],
  	[
  		1476,
  		2
  	],
  	[
  		1477,
  		2
  	],
  	[
  		1478,
  		2
  	],
  	[
  		1479,
  		2
  	],
  	[
  		[
  			1480,
  			1487
  		],
  		3
  	],
  	[
  		[
  			1488,
  			1514
  		],
  		2
  	],
  	[
  		[
  			1515,
  			1518
  		],
  		3
  	],
  	[
  		1519,
  		2
  	],
  	[
  		[
  			1520,
  			1524
  		],
  		2
  	],
  	[
  		[
  			1525,
  			1535
  		],
  		3
  	],
  	[
  		[
  			1536,
  			1539
  		],
  		3
  	],
  	[
  		1540,
  		3
  	],
  	[
  		1541,
  		3
  	],
  	[
  		[
  			1542,
  			1546
  		],
  		2
  	],
  	[
  		1547,
  		2
  	],
  	[
  		1548,
  		2
  	],
  	[
  		[
  			1549,
  			1551
  		],
  		2
  	],
  	[
  		[
  			1552,
  			1557
  		],
  		2
  	],
  	[
  		[
  			1558,
  			1562
  		],
  		2
  	],
  	[
  		1563,
  		2
  	],
  	[
  		1564,
  		3
  	],
  	[
  		1565,
  		3
  	],
  	[
  		1566,
  		2
  	],
  	[
  		1567,
  		2
  	],
  	[
  		1568,
  		2
  	],
  	[
  		[
  			1569,
  			1594
  		],
  		2
  	],
  	[
  		[
  			1595,
  			1599
  		],
  		2
  	],
  	[
  		1600,
  		2
  	],
  	[
  		[
  			1601,
  			1618
  		],
  		2
  	],
  	[
  		[
  			1619,
  			1621
  		],
  		2
  	],
  	[
  		[
  			1622,
  			1624
  		],
  		2
  	],
  	[
  		[
  			1625,
  			1630
  		],
  		2
  	],
  	[
  		1631,
  		2
  	],
  	[
  		[
  			1632,
  			1641
  		],
  		2
  	],
  	[
  		[
  			1642,
  			1645
  		],
  		2
  	],
  	[
  		[
  			1646,
  			1647
  		],
  		2
  	],
  	[
  		[
  			1648,
  			1652
  		],
  		2
  	],
  	[
  		1653,
  		1,
  		"اٴ"
  	],
  	[
  		1654,
  		1,
  		"وٴ"
  	],
  	[
  		1655,
  		1,
  		"ۇٴ"
  	],
  	[
  		1656,
  		1,
  		"يٴ"
  	],
  	[
  		[
  			1657,
  			1719
  		],
  		2
  	],
  	[
  		[
  			1720,
  			1721
  		],
  		2
  	],
  	[
  		[
  			1722,
  			1726
  		],
  		2
  	],
  	[
  		1727,
  		2
  	],
  	[
  		[
  			1728,
  			1742
  		],
  		2
  	],
  	[
  		1743,
  		2
  	],
  	[
  		[
  			1744,
  			1747
  		],
  		2
  	],
  	[
  		1748,
  		2
  	],
  	[
  		[
  			1749,
  			1756
  		],
  		2
  	],
  	[
  		1757,
  		3
  	],
  	[
  		1758,
  		2
  	],
  	[
  		[
  			1759,
  			1768
  		],
  		2
  	],
  	[
  		1769,
  		2
  	],
  	[
  		[
  			1770,
  			1773
  		],
  		2
  	],
  	[
  		[
  			1774,
  			1775
  		],
  		2
  	],
  	[
  		[
  			1776,
  			1785
  		],
  		2
  	],
  	[
  		[
  			1786,
  			1790
  		],
  		2
  	],
  	[
  		1791,
  		2
  	],
  	[
  		[
  			1792,
  			1805
  		],
  		2
  	],
  	[
  		1806,
  		3
  	],
  	[
  		1807,
  		3
  	],
  	[
  		[
  			1808,
  			1836
  		],
  		2
  	],
  	[
  		[
  			1837,
  			1839
  		],
  		2
  	],
  	[
  		[
  			1840,
  			1866
  		],
  		2
  	],
  	[
  		[
  			1867,
  			1868
  		],
  		3
  	],
  	[
  		[
  			1869,
  			1871
  		],
  		2
  	],
  	[
  		[
  			1872,
  			1901
  		],
  		2
  	],
  	[
  		[
  			1902,
  			1919
  		],
  		2
  	],
  	[
  		[
  			1920,
  			1968
  		],
  		2
  	],
  	[
  		1969,
  		2
  	],
  	[
  		[
  			1970,
  			1983
  		],
  		3
  	],
  	[
  		[
  			1984,
  			2037
  		],
  		2
  	],
  	[
  		[
  			2038,
  			2042
  		],
  		2
  	],
  	[
  		[
  			2043,
  			2044
  		],
  		3
  	],
  	[
  		2045,
  		2
  	],
  	[
  		[
  			2046,
  			2047
  		],
  		2
  	],
  	[
  		[
  			2048,
  			2093
  		],
  		2
  	],
  	[
  		[
  			2094,
  			2095
  		],
  		3
  	],
  	[
  		[
  			2096,
  			2110
  		],
  		2
  	],
  	[
  		2111,
  		3
  	],
  	[
  		[
  			2112,
  			2139
  		],
  		2
  	],
  	[
  		[
  			2140,
  			2141
  		],
  		3
  	],
  	[
  		2142,
  		2
  	],
  	[
  		2143,
  		3
  	],
  	[
  		[
  			2144,
  			2154
  		],
  		2
  	],
  	[
  		[
  			2155,
  			2207
  		],
  		3
  	],
  	[
  		2208,
  		2
  	],
  	[
  		2209,
  		2
  	],
  	[
  		[
  			2210,
  			2220
  		],
  		2
  	],
  	[
  		[
  			2221,
  			2226
  		],
  		2
  	],
  	[
  		[
  			2227,
  			2228
  		],
  		2
  	],
  	[
  		2229,
  		3
  	],
  	[
  		[
  			2230,
  			2237
  		],
  		2
  	],
  	[
  		[
  			2238,
  			2247
  		],
  		2
  	],
  	[
  		[
  			2248,
  			2258
  		],
  		3
  	],
  	[
  		2259,
  		2
  	],
  	[
  		[
  			2260,
  			2273
  		],
  		2
  	],
  	[
  		2274,
  		3
  	],
  	[
  		2275,
  		2
  	],
  	[
  		[
  			2276,
  			2302
  		],
  		2
  	],
  	[
  		2303,
  		2
  	],
  	[
  		2304,
  		2
  	],
  	[
  		[
  			2305,
  			2307
  		],
  		2
  	],
  	[
  		2308,
  		2
  	],
  	[
  		[
  			2309,
  			2361
  		],
  		2
  	],
  	[
  		[
  			2362,
  			2363
  		],
  		2
  	],
  	[
  		[
  			2364,
  			2381
  		],
  		2
  	],
  	[
  		2382,
  		2
  	],
  	[
  		2383,
  		2
  	],
  	[
  		[
  			2384,
  			2388
  		],
  		2
  	],
  	[
  		2389,
  		2
  	],
  	[
  		[
  			2390,
  			2391
  		],
  		2
  	],
  	[
  		2392,
  		1,
  		"क़"
  	],
  	[
  		2393,
  		1,
  		"ख़"
  	],
  	[
  		2394,
  		1,
  		"ग़"
  	],
  	[
  		2395,
  		1,
  		"ज़"
  	],
  	[
  		2396,
  		1,
  		"ड़"
  	],
  	[
  		2397,
  		1,
  		"ढ़"
  	],
  	[
  		2398,
  		1,
  		"फ़"
  	],
  	[
  		2399,
  		1,
  		"य़"
  	],
  	[
  		[
  			2400,
  			2403
  		],
  		2
  	],
  	[
  		[
  			2404,
  			2405
  		],
  		2
  	],
  	[
  		[
  			2406,
  			2415
  		],
  		2
  	],
  	[
  		2416,
  		2
  	],
  	[
  		[
  			2417,
  			2418
  		],
  		2
  	],
  	[
  		[
  			2419,
  			2423
  		],
  		2
  	],
  	[
  		2424,
  		2
  	],
  	[
  		[
  			2425,
  			2426
  		],
  		2
  	],
  	[
  		[
  			2427,
  			2428
  		],
  		2
  	],
  	[
  		2429,
  		2
  	],
  	[
  		[
  			2430,
  			2431
  		],
  		2
  	],
  	[
  		2432,
  		2
  	],
  	[
  		[
  			2433,
  			2435
  		],
  		2
  	],
  	[
  		2436,
  		3
  	],
  	[
  		[
  			2437,
  			2444
  		],
  		2
  	],
  	[
  		[
  			2445,
  			2446
  		],
  		3
  	],
  	[
  		[
  			2447,
  			2448
  		],
  		2
  	],
  	[
  		[
  			2449,
  			2450
  		],
  		3
  	],
  	[
  		[
  			2451,
  			2472
  		],
  		2
  	],
  	[
  		2473,
  		3
  	],
  	[
  		[
  			2474,
  			2480
  		],
  		2
  	],
  	[
  		2481,
  		3
  	],
  	[
  		2482,
  		2
  	],
  	[
  		[
  			2483,
  			2485
  		],
  		3
  	],
  	[
  		[
  			2486,
  			2489
  		],
  		2
  	],
  	[
  		[
  			2490,
  			2491
  		],
  		3
  	],
  	[
  		2492,
  		2
  	],
  	[
  		2493,
  		2
  	],
  	[
  		[
  			2494,
  			2500
  		],
  		2
  	],
  	[
  		[
  			2501,
  			2502
  		],
  		3
  	],
  	[
  		[
  			2503,
  			2504
  		],
  		2
  	],
  	[
  		[
  			2505,
  			2506
  		],
  		3
  	],
  	[
  		[
  			2507,
  			2509
  		],
  		2
  	],
  	[
  		2510,
  		2
  	],
  	[
  		[
  			2511,
  			2518
  		],
  		3
  	],
  	[
  		2519,
  		2
  	],
  	[
  		[
  			2520,
  			2523
  		],
  		3
  	],
  	[
  		2524,
  		1,
  		"ড়"
  	],
  	[
  		2525,
  		1,
  		"ঢ়"
  	],
  	[
  		2526,
  		3
  	],
  	[
  		2527,
  		1,
  		"য়"
  	],
  	[
  		[
  			2528,
  			2531
  		],
  		2
  	],
  	[
  		[
  			2532,
  			2533
  		],
  		3
  	],
  	[
  		[
  			2534,
  			2545
  		],
  		2
  	],
  	[
  		[
  			2546,
  			2554
  		],
  		2
  	],
  	[
  		2555,
  		2
  	],
  	[
  		2556,
  		2
  	],
  	[
  		2557,
  		2
  	],
  	[
  		2558,
  		2
  	],
  	[
  		[
  			2559,
  			2560
  		],
  		3
  	],
  	[
  		2561,
  		2
  	],
  	[
  		2562,
  		2
  	],
  	[
  		2563,
  		2
  	],
  	[
  		2564,
  		3
  	],
  	[
  		[
  			2565,
  			2570
  		],
  		2
  	],
  	[
  		[
  			2571,
  			2574
  		],
  		3
  	],
  	[
  		[
  			2575,
  			2576
  		],
  		2
  	],
  	[
  		[
  			2577,
  			2578
  		],
  		3
  	],
  	[
  		[
  			2579,
  			2600
  		],
  		2
  	],
  	[
  		2601,
  		3
  	],
  	[
  		[
  			2602,
  			2608
  		],
  		2
  	],
  	[
  		2609,
  		3
  	],
  	[
  		2610,
  		2
  	],
  	[
  		2611,
  		1,
  		"ਲ਼"
  	],
  	[
  		2612,
  		3
  	],
  	[
  		2613,
  		2
  	],
  	[
  		2614,
  		1,
  		"ਸ਼"
  	],
  	[
  		2615,
  		3
  	],
  	[
  		[
  			2616,
  			2617
  		],
  		2
  	],
  	[
  		[
  			2618,
  			2619
  		],
  		3
  	],
  	[
  		2620,
  		2
  	],
  	[
  		2621,
  		3
  	],
  	[
  		[
  			2622,
  			2626
  		],
  		2
  	],
  	[
  		[
  			2627,
  			2630
  		],
  		3
  	],
  	[
  		[
  			2631,
  			2632
  		],
  		2
  	],
  	[
  		[
  			2633,
  			2634
  		],
  		3
  	],
  	[
  		[
  			2635,
  			2637
  		],
  		2
  	],
  	[
  		[
  			2638,
  			2640
  		],
  		3
  	],
  	[
  		2641,
  		2
  	],
  	[
  		[
  			2642,
  			2648
  		],
  		3
  	],
  	[
  		2649,
  		1,
  		"ਖ਼"
  	],
  	[
  		2650,
  		1,
  		"ਗ਼"
  	],
  	[
  		2651,
  		1,
  		"ਜ਼"
  	],
  	[
  		2652,
  		2
  	],
  	[
  		2653,
  		3
  	],
  	[
  		2654,
  		1,
  		"ਫ਼"
  	],
  	[
  		[
  			2655,
  			2661
  		],
  		3
  	],
  	[
  		[
  			2662,
  			2676
  		],
  		2
  	],
  	[
  		2677,
  		2
  	],
  	[
  		2678,
  		2
  	],
  	[
  		[
  			2679,
  			2688
  		],
  		3
  	],
  	[
  		[
  			2689,
  			2691
  		],
  		2
  	],
  	[
  		2692,
  		3
  	],
  	[
  		[
  			2693,
  			2699
  		],
  		2
  	],
  	[
  		2700,
  		2
  	],
  	[
  		2701,
  		2
  	],
  	[
  		2702,
  		3
  	],
  	[
  		[
  			2703,
  			2705
  		],
  		2
  	],
  	[
  		2706,
  		3
  	],
  	[
  		[
  			2707,
  			2728
  		],
  		2
  	],
  	[
  		2729,
  		3
  	],
  	[
  		[
  			2730,
  			2736
  		],
  		2
  	],
  	[
  		2737,
  		3
  	],
  	[
  		[
  			2738,
  			2739
  		],
  		2
  	],
  	[
  		2740,
  		3
  	],
  	[
  		[
  			2741,
  			2745
  		],
  		2
  	],
  	[
  		[
  			2746,
  			2747
  		],
  		3
  	],
  	[
  		[
  			2748,
  			2757
  		],
  		2
  	],
  	[
  		2758,
  		3
  	],
  	[
  		[
  			2759,
  			2761
  		],
  		2
  	],
  	[
  		2762,
  		3
  	],
  	[
  		[
  			2763,
  			2765
  		],
  		2
  	],
  	[
  		[
  			2766,
  			2767
  		],
  		3
  	],
  	[
  		2768,
  		2
  	],
  	[
  		[
  			2769,
  			2783
  		],
  		3
  	],
  	[
  		2784,
  		2
  	],
  	[
  		[
  			2785,
  			2787
  		],
  		2
  	],
  	[
  		[
  			2788,
  			2789
  		],
  		3
  	],
  	[
  		[
  			2790,
  			2799
  		],
  		2
  	],
  	[
  		2800,
  		2
  	],
  	[
  		2801,
  		2
  	],
  	[
  		[
  			2802,
  			2808
  		],
  		3
  	],
  	[
  		2809,
  		2
  	],
  	[
  		[
  			2810,
  			2815
  		],
  		2
  	],
  	[
  		2816,
  		3
  	],
  	[
  		[
  			2817,
  			2819
  		],
  		2
  	],
  	[
  		2820,
  		3
  	],
  	[
  		[
  			2821,
  			2828
  		],
  		2
  	],
  	[
  		[
  			2829,
  			2830
  		],
  		3
  	],
  	[
  		[
  			2831,
  			2832
  		],
  		2
  	],
  	[
  		[
  			2833,
  			2834
  		],
  		3
  	],
  	[
  		[
  			2835,
  			2856
  		],
  		2
  	],
  	[
  		2857,
  		3
  	],
  	[
  		[
  			2858,
  			2864
  		],
  		2
  	],
  	[
  		2865,
  		3
  	],
  	[
  		[
  			2866,
  			2867
  		],
  		2
  	],
  	[
  		2868,
  		3
  	],
  	[
  		2869,
  		2
  	],
  	[
  		[
  			2870,
  			2873
  		],
  		2
  	],
  	[
  		[
  			2874,
  			2875
  		],
  		3
  	],
  	[
  		[
  			2876,
  			2883
  		],
  		2
  	],
  	[
  		2884,
  		2
  	],
  	[
  		[
  			2885,
  			2886
  		],
  		3
  	],
  	[
  		[
  			2887,
  			2888
  		],
  		2
  	],
  	[
  		[
  			2889,
  			2890
  		],
  		3
  	],
  	[
  		[
  			2891,
  			2893
  		],
  		2
  	],
  	[
  		[
  			2894,
  			2900
  		],
  		3
  	],
  	[
  		2901,
  		2
  	],
  	[
  		[
  			2902,
  			2903
  		],
  		2
  	],
  	[
  		[
  			2904,
  			2907
  		],
  		3
  	],
  	[
  		2908,
  		1,
  		"ଡ଼"
  	],
  	[
  		2909,
  		1,
  		"ଢ଼"
  	],
  	[
  		2910,
  		3
  	],
  	[
  		[
  			2911,
  			2913
  		],
  		2
  	],
  	[
  		[
  			2914,
  			2915
  		],
  		2
  	],
  	[
  		[
  			2916,
  			2917
  		],
  		3
  	],
  	[
  		[
  			2918,
  			2927
  		],
  		2
  	],
  	[
  		2928,
  		2
  	],
  	[
  		2929,
  		2
  	],
  	[
  		[
  			2930,
  			2935
  		],
  		2
  	],
  	[
  		[
  			2936,
  			2945
  		],
  		3
  	],
  	[
  		[
  			2946,
  			2947
  		],
  		2
  	],
  	[
  		2948,
  		3
  	],
  	[
  		[
  			2949,
  			2954
  		],
  		2
  	],
  	[
  		[
  			2955,
  			2957
  		],
  		3
  	],
  	[
  		[
  			2958,
  			2960
  		],
  		2
  	],
  	[
  		2961,
  		3
  	],
  	[
  		[
  			2962,
  			2965
  		],
  		2
  	],
  	[
  		[
  			2966,
  			2968
  		],
  		3
  	],
  	[
  		[
  			2969,
  			2970
  		],
  		2
  	],
  	[
  		2971,
  		3
  	],
  	[
  		2972,
  		2
  	],
  	[
  		2973,
  		3
  	],
  	[
  		[
  			2974,
  			2975
  		],
  		2
  	],
  	[
  		[
  			2976,
  			2978
  		],
  		3
  	],
  	[
  		[
  			2979,
  			2980
  		],
  		2
  	],
  	[
  		[
  			2981,
  			2983
  		],
  		3
  	],
  	[
  		[
  			2984,
  			2986
  		],
  		2
  	],
  	[
  		[
  			2987,
  			2989
  		],
  		3
  	],
  	[
  		[
  			2990,
  			2997
  		],
  		2
  	],
  	[
  		2998,
  		2
  	],
  	[
  		[
  			2999,
  			3001
  		],
  		2
  	],
  	[
  		[
  			3002,
  			3005
  		],
  		3
  	],
  	[
  		[
  			3006,
  			3010
  		],
  		2
  	],
  	[
  		[
  			3011,
  			3013
  		],
  		3
  	],
  	[
  		[
  			3014,
  			3016
  		],
  		2
  	],
  	[
  		3017,
  		3
  	],
  	[
  		[
  			3018,
  			3021
  		],
  		2
  	],
  	[
  		[
  			3022,
  			3023
  		],
  		3
  	],
  	[
  		3024,
  		2
  	],
  	[
  		[
  			3025,
  			3030
  		],
  		3
  	],
  	[
  		3031,
  		2
  	],
  	[
  		[
  			3032,
  			3045
  		],
  		3
  	],
  	[
  		3046,
  		2
  	],
  	[
  		[
  			3047,
  			3055
  		],
  		2
  	],
  	[
  		[
  			3056,
  			3058
  		],
  		2
  	],
  	[
  		[
  			3059,
  			3066
  		],
  		2
  	],
  	[
  		[
  			3067,
  			3071
  		],
  		3
  	],
  	[
  		3072,
  		2
  	],
  	[
  		[
  			3073,
  			3075
  		],
  		2
  	],
  	[
  		3076,
  		2
  	],
  	[
  		[
  			3077,
  			3084
  		],
  		2
  	],
  	[
  		3085,
  		3
  	],
  	[
  		[
  			3086,
  			3088
  		],
  		2
  	],
  	[
  		3089,
  		3
  	],
  	[
  		[
  			3090,
  			3112
  		],
  		2
  	],
  	[
  		3113,
  		3
  	],
  	[
  		[
  			3114,
  			3123
  		],
  		2
  	],
  	[
  		3124,
  		2
  	],
  	[
  		[
  			3125,
  			3129
  		],
  		2
  	],
  	[
  		[
  			3130,
  			3132
  		],
  		3
  	],
  	[
  		3133,
  		2
  	],
  	[
  		[
  			3134,
  			3140
  		],
  		2
  	],
  	[
  		3141,
  		3
  	],
  	[
  		[
  			3142,
  			3144
  		],
  		2
  	],
  	[
  		3145,
  		3
  	],
  	[
  		[
  			3146,
  			3149
  		],
  		2
  	],
  	[
  		[
  			3150,
  			3156
  		],
  		3
  	],
  	[
  		[
  			3157,
  			3158
  		],
  		2
  	],
  	[
  		3159,
  		3
  	],
  	[
  		[
  			3160,
  			3161
  		],
  		2
  	],
  	[
  		3162,
  		2
  	],
  	[
  		[
  			3163,
  			3167
  		],
  		3
  	],
  	[
  		[
  			3168,
  			3169
  		],
  		2
  	],
  	[
  		[
  			3170,
  			3171
  		],
  		2
  	],
  	[
  		[
  			3172,
  			3173
  		],
  		3
  	],
  	[
  		[
  			3174,
  			3183
  		],
  		2
  	],
  	[
  		[
  			3184,
  			3190
  		],
  		3
  	],
  	[
  		3191,
  		2
  	],
  	[
  		[
  			3192,
  			3199
  		],
  		2
  	],
  	[
  		3200,
  		2
  	],
  	[
  		3201,
  		2
  	],
  	[
  		[
  			3202,
  			3203
  		],
  		2
  	],
  	[
  		3204,
  		2
  	],
  	[
  		[
  			3205,
  			3212
  		],
  		2
  	],
  	[
  		3213,
  		3
  	],
  	[
  		[
  			3214,
  			3216
  		],
  		2
  	],
  	[
  		3217,
  		3
  	],
  	[
  		[
  			3218,
  			3240
  		],
  		2
  	],
  	[
  		3241,
  		3
  	],
  	[
  		[
  			3242,
  			3251
  		],
  		2
  	],
  	[
  		3252,
  		3
  	],
  	[
  		[
  			3253,
  			3257
  		],
  		2
  	],
  	[
  		[
  			3258,
  			3259
  		],
  		3
  	],
  	[
  		[
  			3260,
  			3261
  		],
  		2
  	],
  	[
  		[
  			3262,
  			3268
  		],
  		2
  	],
  	[
  		3269,
  		3
  	],
  	[
  		[
  			3270,
  			3272
  		],
  		2
  	],
  	[
  		3273,
  		3
  	],
  	[
  		[
  			3274,
  			3277
  		],
  		2
  	],
  	[
  		[
  			3278,
  			3284
  		],
  		3
  	],
  	[
  		[
  			3285,
  			3286
  		],
  		2
  	],
  	[
  		[
  			3287,
  			3293
  		],
  		3
  	],
  	[
  		3294,
  		2
  	],
  	[
  		3295,
  		3
  	],
  	[
  		[
  			3296,
  			3297
  		],
  		2
  	],
  	[
  		[
  			3298,
  			3299
  		],
  		2
  	],
  	[
  		[
  			3300,
  			3301
  		],
  		3
  	],
  	[
  		[
  			3302,
  			3311
  		],
  		2
  	],
  	[
  		3312,
  		3
  	],
  	[
  		[
  			3313,
  			3314
  		],
  		2
  	],
  	[
  		[
  			3315,
  			3327
  		],
  		3
  	],
  	[
  		3328,
  		2
  	],
  	[
  		3329,
  		2
  	],
  	[
  		[
  			3330,
  			3331
  		],
  		2
  	],
  	[
  		3332,
  		2
  	],
  	[
  		[
  			3333,
  			3340
  		],
  		2
  	],
  	[
  		3341,
  		3
  	],
  	[
  		[
  			3342,
  			3344
  		],
  		2
  	],
  	[
  		3345,
  		3
  	],
  	[
  		[
  			3346,
  			3368
  		],
  		2
  	],
  	[
  		3369,
  		2
  	],
  	[
  		[
  			3370,
  			3385
  		],
  		2
  	],
  	[
  		3386,
  		2
  	],
  	[
  		[
  			3387,
  			3388
  		],
  		2
  	],
  	[
  		3389,
  		2
  	],
  	[
  		[
  			3390,
  			3395
  		],
  		2
  	],
  	[
  		3396,
  		2
  	],
  	[
  		3397,
  		3
  	],
  	[
  		[
  			3398,
  			3400
  		],
  		2
  	],
  	[
  		3401,
  		3
  	],
  	[
  		[
  			3402,
  			3405
  		],
  		2
  	],
  	[
  		3406,
  		2
  	],
  	[
  		3407,
  		2
  	],
  	[
  		[
  			3408,
  			3411
  		],
  		3
  	],
  	[
  		[
  			3412,
  			3414
  		],
  		2
  	],
  	[
  		3415,
  		2
  	],
  	[
  		[
  			3416,
  			3422
  		],
  		2
  	],
  	[
  		3423,
  		2
  	],
  	[
  		[
  			3424,
  			3425
  		],
  		2
  	],
  	[
  		[
  			3426,
  			3427
  		],
  		2
  	],
  	[
  		[
  			3428,
  			3429
  		],
  		3
  	],
  	[
  		[
  			3430,
  			3439
  		],
  		2
  	],
  	[
  		[
  			3440,
  			3445
  		],
  		2
  	],
  	[
  		[
  			3446,
  			3448
  		],
  		2
  	],
  	[
  		3449,
  		2
  	],
  	[
  		[
  			3450,
  			3455
  		],
  		2
  	],
  	[
  		3456,
  		3
  	],
  	[
  		3457,
  		2
  	],
  	[
  		[
  			3458,
  			3459
  		],
  		2
  	],
  	[
  		3460,
  		3
  	],
  	[
  		[
  			3461,
  			3478
  		],
  		2
  	],
  	[
  		[
  			3479,
  			3481
  		],
  		3
  	],
  	[
  		[
  			3482,
  			3505
  		],
  		2
  	],
  	[
  		3506,
  		3
  	],
  	[
  		[
  			3507,
  			3515
  		],
  		2
  	],
  	[
  		3516,
  		3
  	],
  	[
  		3517,
  		2
  	],
  	[
  		[
  			3518,
  			3519
  		],
  		3
  	],
  	[
  		[
  			3520,
  			3526
  		],
  		2
  	],
  	[
  		[
  			3527,
  			3529
  		],
  		3
  	],
  	[
  		3530,
  		2
  	],
  	[
  		[
  			3531,
  			3534
  		],
  		3
  	],
  	[
  		[
  			3535,
  			3540
  		],
  		2
  	],
  	[
  		3541,
  		3
  	],
  	[
  		3542,
  		2
  	],
  	[
  		3543,
  		3
  	],
  	[
  		[
  			3544,
  			3551
  		],
  		2
  	],
  	[
  		[
  			3552,
  			3557
  		],
  		3
  	],
  	[
  		[
  			3558,
  			3567
  		],
  		2
  	],
  	[
  		[
  			3568,
  			3569
  		],
  		3
  	],
  	[
  		[
  			3570,
  			3571
  		],
  		2
  	],
  	[
  		3572,
  		2
  	],
  	[
  		[
  			3573,
  			3584
  		],
  		3
  	],
  	[
  		[
  			3585,
  			3634
  		],
  		2
  	],
  	[
  		3635,
  		1,
  		"ํา"
  	],
  	[
  		[
  			3636,
  			3642
  		],
  		2
  	],
  	[
  		[
  			3643,
  			3646
  		],
  		3
  	],
  	[
  		3647,
  		2
  	],
  	[
  		[
  			3648,
  			3662
  		],
  		2
  	],
  	[
  		3663,
  		2
  	],
  	[
  		[
  			3664,
  			3673
  		],
  		2
  	],
  	[
  		[
  			3674,
  			3675
  		],
  		2
  	],
  	[
  		[
  			3676,
  			3712
  		],
  		3
  	],
  	[
  		[
  			3713,
  			3714
  		],
  		2
  	],
  	[
  		3715,
  		3
  	],
  	[
  		3716,
  		2
  	],
  	[
  		3717,
  		3
  	],
  	[
  		3718,
  		2
  	],
  	[
  		[
  			3719,
  			3720
  		],
  		2
  	],
  	[
  		3721,
  		2
  	],
  	[
  		3722,
  		2
  	],
  	[
  		3723,
  		3
  	],
  	[
  		3724,
  		2
  	],
  	[
  		3725,
  		2
  	],
  	[
  		[
  			3726,
  			3731
  		],
  		2
  	],
  	[
  		[
  			3732,
  			3735
  		],
  		2
  	],
  	[
  		3736,
  		2
  	],
  	[
  		[
  			3737,
  			3743
  		],
  		2
  	],
  	[
  		3744,
  		2
  	],
  	[
  		[
  			3745,
  			3747
  		],
  		2
  	],
  	[
  		3748,
  		3
  	],
  	[
  		3749,
  		2
  	],
  	[
  		3750,
  		3
  	],
  	[
  		3751,
  		2
  	],
  	[
  		[
  			3752,
  			3753
  		],
  		2
  	],
  	[
  		[
  			3754,
  			3755
  		],
  		2
  	],
  	[
  		3756,
  		2
  	],
  	[
  		[
  			3757,
  			3762
  		],
  		2
  	],
  	[
  		3763,
  		1,
  		"ໍາ"
  	],
  	[
  		[
  			3764,
  			3769
  		],
  		2
  	],
  	[
  		3770,
  		2
  	],
  	[
  		[
  			3771,
  			3773
  		],
  		2
  	],
  	[
  		[
  			3774,
  			3775
  		],
  		3
  	],
  	[
  		[
  			3776,
  			3780
  		],
  		2
  	],
  	[
  		3781,
  		3
  	],
  	[
  		3782,
  		2
  	],
  	[
  		3783,
  		3
  	],
  	[
  		[
  			3784,
  			3789
  		],
  		2
  	],
  	[
  		[
  			3790,
  			3791
  		],
  		3
  	],
  	[
  		[
  			3792,
  			3801
  		],
  		2
  	],
  	[
  		[
  			3802,
  			3803
  		],
  		3
  	],
  	[
  		3804,
  		1,
  		"ຫນ"
  	],
  	[
  		3805,
  		1,
  		"ຫມ"
  	],
  	[
  		[
  			3806,
  			3807
  		],
  		2
  	],
  	[
  		[
  			3808,
  			3839
  		],
  		3
  	],
  	[
  		3840,
  		2
  	],
  	[
  		[
  			3841,
  			3850
  		],
  		2
  	],
  	[
  		3851,
  		2
  	],
  	[
  		3852,
  		1,
  		"་"
  	],
  	[
  		[
  			3853,
  			3863
  		],
  		2
  	],
  	[
  		[
  			3864,
  			3865
  		],
  		2
  	],
  	[
  		[
  			3866,
  			3871
  		],
  		2
  	],
  	[
  		[
  			3872,
  			3881
  		],
  		2
  	],
  	[
  		[
  			3882,
  			3892
  		],
  		2
  	],
  	[
  		3893,
  		2
  	],
  	[
  		3894,
  		2
  	],
  	[
  		3895,
  		2
  	],
  	[
  		3896,
  		2
  	],
  	[
  		3897,
  		2
  	],
  	[
  		[
  			3898,
  			3901
  		],
  		2
  	],
  	[
  		[
  			3902,
  			3906
  		],
  		2
  	],
  	[
  		3907,
  		1,
  		"གྷ"
  	],
  	[
  		[
  			3908,
  			3911
  		],
  		2
  	],
  	[
  		3912,
  		3
  	],
  	[
  		[
  			3913,
  			3916
  		],
  		2
  	],
  	[
  		3917,
  		1,
  		"ཌྷ"
  	],
  	[
  		[
  			3918,
  			3921
  		],
  		2
  	],
  	[
  		3922,
  		1,
  		"དྷ"
  	],
  	[
  		[
  			3923,
  			3926
  		],
  		2
  	],
  	[
  		3927,
  		1,
  		"བྷ"
  	],
  	[
  		[
  			3928,
  			3931
  		],
  		2
  	],
  	[
  		3932,
  		1,
  		"ཛྷ"
  	],
  	[
  		[
  			3933,
  			3944
  		],
  		2
  	],
  	[
  		3945,
  		1,
  		"ཀྵ"
  	],
  	[
  		3946,
  		2
  	],
  	[
  		[
  			3947,
  			3948
  		],
  		2
  	],
  	[
  		[
  			3949,
  			3952
  		],
  		3
  	],
  	[
  		[
  			3953,
  			3954
  		],
  		2
  	],
  	[
  		3955,
  		1,
  		"ཱི"
  	],
  	[
  		3956,
  		2
  	],
  	[
  		3957,
  		1,
  		"ཱུ"
  	],
  	[
  		3958,
  		1,
  		"ྲྀ"
  	],
  	[
  		3959,
  		1,
  		"ྲཱྀ"
  	],
  	[
  		3960,
  		1,
  		"ླྀ"
  	],
  	[
  		3961,
  		1,
  		"ླཱྀ"
  	],
  	[
  		[
  			3962,
  			3968
  		],
  		2
  	],
  	[
  		3969,
  		1,
  		"ཱྀ"
  	],
  	[
  		[
  			3970,
  			3972
  		],
  		2
  	],
  	[
  		3973,
  		2
  	],
  	[
  		[
  			3974,
  			3979
  		],
  		2
  	],
  	[
  		[
  			3980,
  			3983
  		],
  		2
  	],
  	[
  		[
  			3984,
  			3986
  		],
  		2
  	],
  	[
  		3987,
  		1,
  		"ྒྷ"
  	],
  	[
  		[
  			3988,
  			3989
  		],
  		2
  	],
  	[
  		3990,
  		2
  	],
  	[
  		3991,
  		2
  	],
  	[
  		3992,
  		3
  	],
  	[
  		[
  			3993,
  			3996
  		],
  		2
  	],
  	[
  		3997,
  		1,
  		"ྜྷ"
  	],
  	[
  		[
  			3998,
  			4001
  		],
  		2
  	],
  	[
  		4002,
  		1,
  		"ྡྷ"
  	],
  	[
  		[
  			4003,
  			4006
  		],
  		2
  	],
  	[
  		4007,
  		1,
  		"ྦྷ"
  	],
  	[
  		[
  			4008,
  			4011
  		],
  		2
  	],
  	[
  		4012,
  		1,
  		"ྫྷ"
  	],
  	[
  		4013,
  		2
  	],
  	[
  		[
  			4014,
  			4016
  		],
  		2
  	],
  	[
  		[
  			4017,
  			4023
  		],
  		2
  	],
  	[
  		4024,
  		2
  	],
  	[
  		4025,
  		1,
  		"ྐྵ"
  	],
  	[
  		[
  			4026,
  			4028
  		],
  		2
  	],
  	[
  		4029,
  		3
  	],
  	[
  		[
  			4030,
  			4037
  		],
  		2
  	],
  	[
  		4038,
  		2
  	],
  	[
  		[
  			4039,
  			4044
  		],
  		2
  	],
  	[
  		4045,
  		3
  	],
  	[
  		4046,
  		2
  	],
  	[
  		4047,
  		2
  	],
  	[
  		[
  			4048,
  			4049
  		],
  		2
  	],
  	[
  		[
  			4050,
  			4052
  		],
  		2
  	],
  	[
  		[
  			4053,
  			4056
  		],
  		2
  	],
  	[
  		[
  			4057,
  			4058
  		],
  		2
  	],
  	[
  		[
  			4059,
  			4095
  		],
  		3
  	],
  	[
  		[
  			4096,
  			4129
  		],
  		2
  	],
  	[
  		4130,
  		2
  	],
  	[
  		[
  			4131,
  			4135
  		],
  		2
  	],
  	[
  		4136,
  		2
  	],
  	[
  		[
  			4137,
  			4138
  		],
  		2
  	],
  	[
  		4139,
  		2
  	],
  	[
  		[
  			4140,
  			4146
  		],
  		2
  	],
  	[
  		[
  			4147,
  			4149
  		],
  		2
  	],
  	[
  		[
  			4150,
  			4153
  		],
  		2
  	],
  	[
  		[
  			4154,
  			4159
  		],
  		2
  	],
  	[
  		[
  			4160,
  			4169
  		],
  		2
  	],
  	[
  		[
  			4170,
  			4175
  		],
  		2
  	],
  	[
  		[
  			4176,
  			4185
  		],
  		2
  	],
  	[
  		[
  			4186,
  			4249
  		],
  		2
  	],
  	[
  		[
  			4250,
  			4253
  		],
  		2
  	],
  	[
  		[
  			4254,
  			4255
  		],
  		2
  	],
  	[
  		[
  			4256,
  			4293
  		],
  		3
  	],
  	[
  		4294,
  		3
  	],
  	[
  		4295,
  		1,
  		"ⴧ"
  	],
  	[
  		[
  			4296,
  			4300
  		],
  		3
  	],
  	[
  		4301,
  		1,
  		"ⴭ"
  	],
  	[
  		[
  			4302,
  			4303
  		],
  		3
  	],
  	[
  		[
  			4304,
  			4342
  		],
  		2
  	],
  	[
  		[
  			4343,
  			4344
  		],
  		2
  	],
  	[
  		[
  			4345,
  			4346
  		],
  		2
  	],
  	[
  		4347,
  		2
  	],
  	[
  		4348,
  		1,
  		"ნ"
  	],
  	[
  		[
  			4349,
  			4351
  		],
  		2
  	],
  	[
  		[
  			4352,
  			4441
  		],
  		2
  	],
  	[
  		[
  			4442,
  			4446
  		],
  		2
  	],
  	[
  		[
  			4447,
  			4448
  		],
  		3
  	],
  	[
  		[
  			4449,
  			4514
  		],
  		2
  	],
  	[
  		[
  			4515,
  			4519
  		],
  		2
  	],
  	[
  		[
  			4520,
  			4601
  		],
  		2
  	],
  	[
  		[
  			4602,
  			4607
  		],
  		2
  	],
  	[
  		[
  			4608,
  			4614
  		],
  		2
  	],
  	[
  		4615,
  		2
  	],
  	[
  		[
  			4616,
  			4678
  		],
  		2
  	],
  	[
  		4679,
  		2
  	],
  	[
  		4680,
  		2
  	],
  	[
  		4681,
  		3
  	],
  	[
  		[
  			4682,
  			4685
  		],
  		2
  	],
  	[
  		[
  			4686,
  			4687
  		],
  		3
  	],
  	[
  		[
  			4688,
  			4694
  		],
  		2
  	],
  	[
  		4695,
  		3
  	],
  	[
  		4696,
  		2
  	],
  	[
  		4697,
  		3
  	],
  	[
  		[
  			4698,
  			4701
  		],
  		2
  	],
  	[
  		[
  			4702,
  			4703
  		],
  		3
  	],
  	[
  		[
  			4704,
  			4742
  		],
  		2
  	],
  	[
  		4743,
  		2
  	],
  	[
  		4744,
  		2
  	],
  	[
  		4745,
  		3
  	],
  	[
  		[
  			4746,
  			4749
  		],
  		2
  	],
  	[
  		[
  			4750,
  			4751
  		],
  		3
  	],
  	[
  		[
  			4752,
  			4782
  		],
  		2
  	],
  	[
  		4783,
  		2
  	],
  	[
  		4784,
  		2
  	],
  	[
  		4785,
  		3
  	],
  	[
  		[
  			4786,
  			4789
  		],
  		2
  	],
  	[
  		[
  			4790,
  			4791
  		],
  		3
  	],
  	[
  		[
  			4792,
  			4798
  		],
  		2
  	],
  	[
  		4799,
  		3
  	],
  	[
  		4800,
  		2
  	],
  	[
  		4801,
  		3
  	],
  	[
  		[
  			4802,
  			4805
  		],
  		2
  	],
  	[
  		[
  			4806,
  			4807
  		],
  		3
  	],
  	[
  		[
  			4808,
  			4814
  		],
  		2
  	],
  	[
  		4815,
  		2
  	],
  	[
  		[
  			4816,
  			4822
  		],
  		2
  	],
  	[
  		4823,
  		3
  	],
  	[
  		[
  			4824,
  			4846
  		],
  		2
  	],
  	[
  		4847,
  		2
  	],
  	[
  		[
  			4848,
  			4878
  		],
  		2
  	],
  	[
  		4879,
  		2
  	],
  	[
  		4880,
  		2
  	],
  	[
  		4881,
  		3
  	],
  	[
  		[
  			4882,
  			4885
  		],
  		2
  	],
  	[
  		[
  			4886,
  			4887
  		],
  		3
  	],
  	[
  		[
  			4888,
  			4894
  		],
  		2
  	],
  	[
  		4895,
  		2
  	],
  	[
  		[
  			4896,
  			4934
  		],
  		2
  	],
  	[
  		4935,
  		2
  	],
  	[
  		[
  			4936,
  			4954
  		],
  		2
  	],
  	[
  		[
  			4955,
  			4956
  		],
  		3
  	],
  	[
  		[
  			4957,
  			4958
  		],
  		2
  	],
  	[
  		4959,
  		2
  	],
  	[
  		4960,
  		2
  	],
  	[
  		[
  			4961,
  			4988
  		],
  		2
  	],
  	[
  		[
  			4989,
  			4991
  		],
  		3
  	],
  	[
  		[
  			4992,
  			5007
  		],
  		2
  	],
  	[
  		[
  			5008,
  			5017
  		],
  		2
  	],
  	[
  		[
  			5018,
  			5023
  		],
  		3
  	],
  	[
  		[
  			5024,
  			5108
  		],
  		2
  	],
  	[
  		5109,
  		2
  	],
  	[
  		[
  			5110,
  			5111
  		],
  		3
  	],
  	[
  		5112,
  		1,
  		"Ᏸ"
  	],
  	[
  		5113,
  		1,
  		"Ᏹ"
  	],
  	[
  		5114,
  		1,
  		"Ᏺ"
  	],
  	[
  		5115,
  		1,
  		"Ᏻ"
  	],
  	[
  		5116,
  		1,
  		"Ᏼ"
  	],
  	[
  		5117,
  		1,
  		"Ᏽ"
  	],
  	[
  		[
  			5118,
  			5119
  		],
  		3
  	],
  	[
  		5120,
  		2
  	],
  	[
  		[
  			5121,
  			5740
  		],
  		2
  	],
  	[
  		[
  			5741,
  			5742
  		],
  		2
  	],
  	[
  		[
  			5743,
  			5750
  		],
  		2
  	],
  	[
  		[
  			5751,
  			5759
  		],
  		2
  	],
  	[
  		5760,
  		3
  	],
  	[
  		[
  			5761,
  			5786
  		],
  		2
  	],
  	[
  		[
  			5787,
  			5788
  		],
  		2
  	],
  	[
  		[
  			5789,
  			5791
  		],
  		3
  	],
  	[
  		[
  			5792,
  			5866
  		],
  		2
  	],
  	[
  		[
  			5867,
  			5872
  		],
  		2
  	],
  	[
  		[
  			5873,
  			5880
  		],
  		2
  	],
  	[
  		[
  			5881,
  			5887
  		],
  		3
  	],
  	[
  		[
  			5888,
  			5900
  		],
  		2
  	],
  	[
  		5901,
  		3
  	],
  	[
  		[
  			5902,
  			5908
  		],
  		2
  	],
  	[
  		[
  			5909,
  			5919
  		],
  		3
  	],
  	[
  		[
  			5920,
  			5940
  		],
  		2
  	],
  	[
  		[
  			5941,
  			5942
  		],
  		2
  	],
  	[
  		[
  			5943,
  			5951
  		],
  		3
  	],
  	[
  		[
  			5952,
  			5971
  		],
  		2
  	],
  	[
  		[
  			5972,
  			5983
  		],
  		3
  	],
  	[
  		[
  			5984,
  			5996
  		],
  		2
  	],
  	[
  		5997,
  		3
  	],
  	[
  		[
  			5998,
  			6000
  		],
  		2
  	],
  	[
  		6001,
  		3
  	],
  	[
  		[
  			6002,
  			6003
  		],
  		2
  	],
  	[
  		[
  			6004,
  			6015
  		],
  		3
  	],
  	[
  		[
  			6016,
  			6067
  		],
  		2
  	],
  	[
  		[
  			6068,
  			6069
  		],
  		3
  	],
  	[
  		[
  			6070,
  			6099
  		],
  		2
  	],
  	[
  		[
  			6100,
  			6102
  		],
  		2
  	],
  	[
  		6103,
  		2
  	],
  	[
  		[
  			6104,
  			6107
  		],
  		2
  	],
  	[
  		6108,
  		2
  	],
  	[
  		6109,
  		2
  	],
  	[
  		[
  			6110,
  			6111
  		],
  		3
  	],
  	[
  		[
  			6112,
  			6121
  		],
  		2
  	],
  	[
  		[
  			6122,
  			6127
  		],
  		3
  	],
  	[
  		[
  			6128,
  			6137
  		],
  		2
  	],
  	[
  		[
  			6138,
  			6143
  		],
  		3
  	],
  	[
  		[
  			6144,
  			6149
  		],
  		2
  	],
  	[
  		6150,
  		3
  	],
  	[
  		[
  			6151,
  			6154
  		],
  		2
  	],
  	[
  		[
  			6155,
  			6157
  		],
  		7
  	],
  	[
  		6158,
  		3
  	],
  	[
  		6159,
  		3
  	],
  	[
  		[
  			6160,
  			6169
  		],
  		2
  	],
  	[
  		[
  			6170,
  			6175
  		],
  		3
  	],
  	[
  		[
  			6176,
  			6263
  		],
  		2
  	],
  	[
  		6264,
  		2
  	],
  	[
  		[
  			6265,
  			6271
  		],
  		3
  	],
  	[
  		[
  			6272,
  			6313
  		],
  		2
  	],
  	[
  		6314,
  		2
  	],
  	[
  		[
  			6315,
  			6319
  		],
  		3
  	],
  	[
  		[
  			6320,
  			6389
  		],
  		2
  	],
  	[
  		[
  			6390,
  			6399
  		],
  		3
  	],
  	[
  		[
  			6400,
  			6428
  		],
  		2
  	],
  	[
  		[
  			6429,
  			6430
  		],
  		2
  	],
  	[
  		6431,
  		3
  	],
  	[
  		[
  			6432,
  			6443
  		],
  		2
  	],
  	[
  		[
  			6444,
  			6447
  		],
  		3
  	],
  	[
  		[
  			6448,
  			6459
  		],
  		2
  	],
  	[
  		[
  			6460,
  			6463
  		],
  		3
  	],
  	[
  		6464,
  		2
  	],
  	[
  		[
  			6465,
  			6467
  		],
  		3
  	],
  	[
  		[
  			6468,
  			6469
  		],
  		2
  	],
  	[
  		[
  			6470,
  			6509
  		],
  		2
  	],
  	[
  		[
  			6510,
  			6511
  		],
  		3
  	],
  	[
  		[
  			6512,
  			6516
  		],
  		2
  	],
  	[
  		[
  			6517,
  			6527
  		],
  		3
  	],
  	[
  		[
  			6528,
  			6569
  		],
  		2
  	],
  	[
  		[
  			6570,
  			6571
  		],
  		2
  	],
  	[
  		[
  			6572,
  			6575
  		],
  		3
  	],
  	[
  		[
  			6576,
  			6601
  		],
  		2
  	],
  	[
  		[
  			6602,
  			6607
  		],
  		3
  	],
  	[
  		[
  			6608,
  			6617
  		],
  		2
  	],
  	[
  		6618,
  		2
  	],
  	[
  		[
  			6619,
  			6621
  		],
  		3
  	],
  	[
  		[
  			6622,
  			6623
  		],
  		2
  	],
  	[
  		[
  			6624,
  			6655
  		],
  		2
  	],
  	[
  		[
  			6656,
  			6683
  		],
  		2
  	],
  	[
  		[
  			6684,
  			6685
  		],
  		3
  	],
  	[
  		[
  			6686,
  			6687
  		],
  		2
  	],
  	[
  		[
  			6688,
  			6750
  		],
  		2
  	],
  	[
  		6751,
  		3
  	],
  	[
  		[
  			6752,
  			6780
  		],
  		2
  	],
  	[
  		[
  			6781,
  			6782
  		],
  		3
  	],
  	[
  		[
  			6783,
  			6793
  		],
  		2
  	],
  	[
  		[
  			6794,
  			6799
  		],
  		3
  	],
  	[
  		[
  			6800,
  			6809
  		],
  		2
  	],
  	[
  		[
  			6810,
  			6815
  		],
  		3
  	],
  	[
  		[
  			6816,
  			6822
  		],
  		2
  	],
  	[
  		6823,
  		2
  	],
  	[
  		[
  			6824,
  			6829
  		],
  		2
  	],
  	[
  		[
  			6830,
  			6831
  		],
  		3
  	],
  	[
  		[
  			6832,
  			6845
  		],
  		2
  	],
  	[
  		6846,
  		2
  	],
  	[
  		[
  			6847,
  			6848
  		],
  		2
  	],
  	[
  		[
  			6849,
  			6911
  		],
  		3
  	],
  	[
  		[
  			6912,
  			6987
  		],
  		2
  	],
  	[
  		[
  			6988,
  			6991
  		],
  		3
  	],
  	[
  		[
  			6992,
  			7001
  		],
  		2
  	],
  	[
  		[
  			7002,
  			7018
  		],
  		2
  	],
  	[
  		[
  			7019,
  			7027
  		],
  		2
  	],
  	[
  		[
  			7028,
  			7036
  		],
  		2
  	],
  	[
  		[
  			7037,
  			7039
  		],
  		3
  	],
  	[
  		[
  			7040,
  			7082
  		],
  		2
  	],
  	[
  		[
  			7083,
  			7085
  		],
  		2
  	],
  	[
  		[
  			7086,
  			7097
  		],
  		2
  	],
  	[
  		[
  			7098,
  			7103
  		],
  		2
  	],
  	[
  		[
  			7104,
  			7155
  		],
  		2
  	],
  	[
  		[
  			7156,
  			7163
  		],
  		3
  	],
  	[
  		[
  			7164,
  			7167
  		],
  		2
  	],
  	[
  		[
  			7168,
  			7223
  		],
  		2
  	],
  	[
  		[
  			7224,
  			7226
  		],
  		3
  	],
  	[
  		[
  			7227,
  			7231
  		],
  		2
  	],
  	[
  		[
  			7232,
  			7241
  		],
  		2
  	],
  	[
  		[
  			7242,
  			7244
  		],
  		3
  	],
  	[
  		[
  			7245,
  			7293
  		],
  		2
  	],
  	[
  		[
  			7294,
  			7295
  		],
  		2
  	],
  	[
  		7296,
  		1,
  		"в"
  	],
  	[
  		7297,
  		1,
  		"д"
  	],
  	[
  		7298,
  		1,
  		"о"
  	],
  	[
  		7299,
  		1,
  		"с"
  	],
  	[
  		[
  			7300,
  			7301
  		],
  		1,
  		"т"
  	],
  	[
  		7302,
  		1,
  		"ъ"
  	],
  	[
  		7303,
  		1,
  		"ѣ"
  	],
  	[
  		7304,
  		1,
  		"ꙋ"
  	],
  	[
  		[
  			7305,
  			7311
  		],
  		3
  	],
  	[
  		7312,
  		1,
  		"ა"
  	],
  	[
  		7313,
  		1,
  		"ბ"
  	],
  	[
  		7314,
  		1,
  		"გ"
  	],
  	[
  		7315,
  		1,
  		"დ"
  	],
  	[
  		7316,
  		1,
  		"ე"
  	],
  	[
  		7317,
  		1,
  		"ვ"
  	],
  	[
  		7318,
  		1,
  		"ზ"
  	],
  	[
  		7319,
  		1,
  		"თ"
  	],
  	[
  		7320,
  		1,
  		"ი"
  	],
  	[
  		7321,
  		1,
  		"კ"
  	],
  	[
  		7322,
  		1,
  		"ლ"
  	],
  	[
  		7323,
  		1,
  		"მ"
  	],
  	[
  		7324,
  		1,
  		"ნ"
  	],
  	[
  		7325,
  		1,
  		"ო"
  	],
  	[
  		7326,
  		1,
  		"პ"
  	],
  	[
  		7327,
  		1,
  		"ჟ"
  	],
  	[
  		7328,
  		1,
  		"რ"
  	],
  	[
  		7329,
  		1,
  		"ს"
  	],
  	[
  		7330,
  		1,
  		"ტ"
  	],
  	[
  		7331,
  		1,
  		"უ"
  	],
  	[
  		7332,
  		1,
  		"ფ"
  	],
  	[
  		7333,
  		1,
  		"ქ"
  	],
  	[
  		7334,
  		1,
  		"ღ"
  	],
  	[
  		7335,
  		1,
  		"ყ"
  	],
  	[
  		7336,
  		1,
  		"შ"
  	],
  	[
  		7337,
  		1,
  		"ჩ"
  	],
  	[
  		7338,
  		1,
  		"ც"
  	],
  	[
  		7339,
  		1,
  		"ძ"
  	],
  	[
  		7340,
  		1,
  		"წ"
  	],
  	[
  		7341,
  		1,
  		"ჭ"
  	],
  	[
  		7342,
  		1,
  		"ხ"
  	],
  	[
  		7343,
  		1,
  		"ჯ"
  	],
  	[
  		7344,
  		1,
  		"ჰ"
  	],
  	[
  		7345,
  		1,
  		"ჱ"
  	],
  	[
  		7346,
  		1,
  		"ჲ"
  	],
  	[
  		7347,
  		1,
  		"ჳ"
  	],
  	[
  		7348,
  		1,
  		"ჴ"
  	],
  	[
  		7349,
  		1,
  		"ჵ"
  	],
  	[
  		7350,
  		1,
  		"ჶ"
  	],
  	[
  		7351,
  		1,
  		"ჷ"
  	],
  	[
  		7352,
  		1,
  		"ჸ"
  	],
  	[
  		7353,
  		1,
  		"ჹ"
  	],
  	[
  		7354,
  		1,
  		"ჺ"
  	],
  	[
  		[
  			7355,
  			7356
  		],
  		3
  	],
  	[
  		7357,
  		1,
  		"ჽ"
  	],
  	[
  		7358,
  		1,
  		"ჾ"
  	],
  	[
  		7359,
  		1,
  		"ჿ"
  	],
  	[
  		[
  			7360,
  			7367
  		],
  		2
  	],
  	[
  		[
  			7368,
  			7375
  		],
  		3
  	],
  	[
  		[
  			7376,
  			7378
  		],
  		2
  	],
  	[
  		7379,
  		2
  	],
  	[
  		[
  			7380,
  			7410
  		],
  		2
  	],
  	[
  		[
  			7411,
  			7414
  		],
  		2
  	],
  	[
  		7415,
  		2
  	],
  	[
  		[
  			7416,
  			7417
  		],
  		2
  	],
  	[
  		7418,
  		2
  	],
  	[
  		[
  			7419,
  			7423
  		],
  		3
  	],
  	[
  		[
  			7424,
  			7467
  		],
  		2
  	],
  	[
  		7468,
  		1,
  		"a"
  	],
  	[
  		7469,
  		1,
  		"æ"
  	],
  	[
  		7470,
  		1,
  		"b"
  	],
  	[
  		7471,
  		2
  	],
  	[
  		7472,
  		1,
  		"d"
  	],
  	[
  		7473,
  		1,
  		"e"
  	],
  	[
  		7474,
  		1,
  		"ǝ"
  	],
  	[
  		7475,
  		1,
  		"g"
  	],
  	[
  		7476,
  		1,
  		"h"
  	],
  	[
  		7477,
  		1,
  		"i"
  	],
  	[
  		7478,
  		1,
  		"j"
  	],
  	[
  		7479,
  		1,
  		"k"
  	],
  	[
  		7480,
  		1,
  		"l"
  	],
  	[
  		7481,
  		1,
  		"m"
  	],
  	[
  		7482,
  		1,
  		"n"
  	],
  	[
  		7483,
  		2
  	],
  	[
  		7484,
  		1,
  		"o"
  	],
  	[
  		7485,
  		1,
  		"ȣ"
  	],
  	[
  		7486,
  		1,
  		"p"
  	],
  	[
  		7487,
  		1,
  		"r"
  	],
  	[
  		7488,
  		1,
  		"t"
  	],
  	[
  		7489,
  		1,
  		"u"
  	],
  	[
  		7490,
  		1,
  		"w"
  	],
  	[
  		7491,
  		1,
  		"a"
  	],
  	[
  		7492,
  		1,
  		"ɐ"
  	],
  	[
  		7493,
  		1,
  		"ɑ"
  	],
  	[
  		7494,
  		1,
  		"ᴂ"
  	],
  	[
  		7495,
  		1,
  		"b"
  	],
  	[
  		7496,
  		1,
  		"d"
  	],
  	[
  		7497,
  		1,
  		"e"
  	],
  	[
  		7498,
  		1,
  		"ə"
  	],
  	[
  		7499,
  		1,
  		"ɛ"
  	],
  	[
  		7500,
  		1,
  		"ɜ"
  	],
  	[
  		7501,
  		1,
  		"g"
  	],
  	[
  		7502,
  		2
  	],
  	[
  		7503,
  		1,
  		"k"
  	],
  	[
  		7504,
  		1,
  		"m"
  	],
  	[
  		7505,
  		1,
  		"ŋ"
  	],
  	[
  		7506,
  		1,
  		"o"
  	],
  	[
  		7507,
  		1,
  		"ɔ"
  	],
  	[
  		7508,
  		1,
  		"ᴖ"
  	],
  	[
  		7509,
  		1,
  		"ᴗ"
  	],
  	[
  		7510,
  		1,
  		"p"
  	],
  	[
  		7511,
  		1,
  		"t"
  	],
  	[
  		7512,
  		1,
  		"u"
  	],
  	[
  		7513,
  		1,
  		"ᴝ"
  	],
  	[
  		7514,
  		1,
  		"ɯ"
  	],
  	[
  		7515,
  		1,
  		"v"
  	],
  	[
  		7516,
  		1,
  		"ᴥ"
  	],
  	[
  		7517,
  		1,
  		"β"
  	],
  	[
  		7518,
  		1,
  		"γ"
  	],
  	[
  		7519,
  		1,
  		"δ"
  	],
  	[
  		7520,
  		1,
  		"φ"
  	],
  	[
  		7521,
  		1,
  		"χ"
  	],
  	[
  		7522,
  		1,
  		"i"
  	],
  	[
  		7523,
  		1,
  		"r"
  	],
  	[
  		7524,
  		1,
  		"u"
  	],
  	[
  		7525,
  		1,
  		"v"
  	],
  	[
  		7526,
  		1,
  		"β"
  	],
  	[
  		7527,
  		1,
  		"γ"
  	],
  	[
  		7528,
  		1,
  		"ρ"
  	],
  	[
  		7529,
  		1,
  		"φ"
  	],
  	[
  		7530,
  		1,
  		"χ"
  	],
  	[
  		7531,
  		2
  	],
  	[
  		[
  			7532,
  			7543
  		],
  		2
  	],
  	[
  		7544,
  		1,
  		"н"
  	],
  	[
  		[
  			7545,
  			7578
  		],
  		2
  	],
  	[
  		7579,
  		1,
  		"ɒ"
  	],
  	[
  		7580,
  		1,
  		"c"
  	],
  	[
  		7581,
  		1,
  		"ɕ"
  	],
  	[
  		7582,
  		1,
  		"ð"
  	],
  	[
  		7583,
  		1,
  		"ɜ"
  	],
  	[
  		7584,
  		1,
  		"f"
  	],
  	[
  		7585,
  		1,
  		"ɟ"
  	],
  	[
  		7586,
  		1,
  		"ɡ"
  	],
  	[
  		7587,
  		1,
  		"ɥ"
  	],
  	[
  		7588,
  		1,
  		"ɨ"
  	],
  	[
  		7589,
  		1,
  		"ɩ"
  	],
  	[
  		7590,
  		1,
  		"ɪ"
  	],
  	[
  		7591,
  		1,
  		"ᵻ"
  	],
  	[
  		7592,
  		1,
  		"ʝ"
  	],
  	[
  		7593,
  		1,
  		"ɭ"
  	],
  	[
  		7594,
  		1,
  		"ᶅ"
  	],
  	[
  		7595,
  		1,
  		"ʟ"
  	],
  	[
  		7596,
  		1,
  		"ɱ"
  	],
  	[
  		7597,
  		1,
  		"ɰ"
  	],
  	[
  		7598,
  		1,
  		"ɲ"
  	],
  	[
  		7599,
  		1,
  		"ɳ"
  	],
  	[
  		7600,
  		1,
  		"ɴ"
  	],
  	[
  		7601,
  		1,
  		"ɵ"
  	],
  	[
  		7602,
  		1,
  		"ɸ"
  	],
  	[
  		7603,
  		1,
  		"ʂ"
  	],
  	[
  		7604,
  		1,
  		"ʃ"
  	],
  	[
  		7605,
  		1,
  		"ƫ"
  	],
  	[
  		7606,
  		1,
  		"ʉ"
  	],
  	[
  		7607,
  		1,
  		"ʊ"
  	],
  	[
  		7608,
  		1,
  		"ᴜ"
  	],
  	[
  		7609,
  		1,
  		"ʋ"
  	],
  	[
  		7610,
  		1,
  		"ʌ"
  	],
  	[
  		7611,
  		1,
  		"z"
  	],
  	[
  		7612,
  		1,
  		"ʐ"
  	],
  	[
  		7613,
  		1,
  		"ʑ"
  	],
  	[
  		7614,
  		1,
  		"ʒ"
  	],
  	[
  		7615,
  		1,
  		"θ"
  	],
  	[
  		[
  			7616,
  			7619
  		],
  		2
  	],
  	[
  		[
  			7620,
  			7626
  		],
  		2
  	],
  	[
  		[
  			7627,
  			7654
  		],
  		2
  	],
  	[
  		[
  			7655,
  			7669
  		],
  		2
  	],
  	[
  		[
  			7670,
  			7673
  		],
  		2
  	],
  	[
  		7674,
  		3
  	],
  	[
  		7675,
  		2
  	],
  	[
  		7676,
  		2
  	],
  	[
  		7677,
  		2
  	],
  	[
  		[
  			7678,
  			7679
  		],
  		2
  	],
  	[
  		7680,
  		1,
  		"ḁ"
  	],
  	[
  		7681,
  		2
  	],
  	[
  		7682,
  		1,
  		"ḃ"
  	],
  	[
  		7683,
  		2
  	],
  	[
  		7684,
  		1,
  		"ḅ"
  	],
  	[
  		7685,
  		2
  	],
  	[
  		7686,
  		1,
  		"ḇ"
  	],
  	[
  		7687,
  		2
  	],
  	[
  		7688,
  		1,
  		"ḉ"
  	],
  	[
  		7689,
  		2
  	],
  	[
  		7690,
  		1,
  		"ḋ"
  	],
  	[
  		7691,
  		2
  	],
  	[
  		7692,
  		1,
  		"ḍ"
  	],
  	[
  		7693,
  		2
  	],
  	[
  		7694,
  		1,
  		"ḏ"
  	],
  	[
  		7695,
  		2
  	],
  	[
  		7696,
  		1,
  		"ḑ"
  	],
  	[
  		7697,
  		2
  	],
  	[
  		7698,
  		1,
  		"ḓ"
  	],
  	[
  		7699,
  		2
  	],
  	[
  		7700,
  		1,
  		"ḕ"
  	],
  	[
  		7701,
  		2
  	],
  	[
  		7702,
  		1,
  		"ḗ"
  	],
  	[
  		7703,
  		2
  	],
  	[
  		7704,
  		1,
  		"ḙ"
  	],
  	[
  		7705,
  		2
  	],
  	[
  		7706,
  		1,
  		"ḛ"
  	],
  	[
  		7707,
  		2
  	],
  	[
  		7708,
  		1,
  		"ḝ"
  	],
  	[
  		7709,
  		2
  	],
  	[
  		7710,
  		1,
  		"ḟ"
  	],
  	[
  		7711,
  		2
  	],
  	[
  		7712,
  		1,
  		"ḡ"
  	],
  	[
  		7713,
  		2
  	],
  	[
  		7714,
  		1,
  		"ḣ"
  	],
  	[
  		7715,
  		2
  	],
  	[
  		7716,
  		1,
  		"ḥ"
  	],
  	[
  		7717,
  		2
  	],
  	[
  		7718,
  		1,
  		"ḧ"
  	],
  	[
  		7719,
  		2
  	],
  	[
  		7720,
  		1,
  		"ḩ"
  	],
  	[
  		7721,
  		2
  	],
  	[
  		7722,
  		1,
  		"ḫ"
  	],
  	[
  		7723,
  		2
  	],
  	[
  		7724,
  		1,
  		"ḭ"
  	],
  	[
  		7725,
  		2
  	],
  	[
  		7726,
  		1,
  		"ḯ"
  	],
  	[
  		7727,
  		2
  	],
  	[
  		7728,
  		1,
  		"ḱ"
  	],
  	[
  		7729,
  		2
  	],
  	[
  		7730,
  		1,
  		"ḳ"
  	],
  	[
  		7731,
  		2
  	],
  	[
  		7732,
  		1,
  		"ḵ"
  	],
  	[
  		7733,
  		2
  	],
  	[
  		7734,
  		1,
  		"ḷ"
  	],
  	[
  		7735,
  		2
  	],
  	[
  		7736,
  		1,
  		"ḹ"
  	],
  	[
  		7737,
  		2
  	],
  	[
  		7738,
  		1,
  		"ḻ"
  	],
  	[
  		7739,
  		2
  	],
  	[
  		7740,
  		1,
  		"ḽ"
  	],
  	[
  		7741,
  		2
  	],
  	[
  		7742,
  		1,
  		"ḿ"
  	],
  	[
  		7743,
  		2
  	],
  	[
  		7744,
  		1,
  		"ṁ"
  	],
  	[
  		7745,
  		2
  	],
  	[
  		7746,
  		1,
  		"ṃ"
  	],
  	[
  		7747,
  		2
  	],
  	[
  		7748,
  		1,
  		"ṅ"
  	],
  	[
  		7749,
  		2
  	],
  	[
  		7750,
  		1,
  		"ṇ"
  	],
  	[
  		7751,
  		2
  	],
  	[
  		7752,
  		1,
  		"ṉ"
  	],
  	[
  		7753,
  		2
  	],
  	[
  		7754,
  		1,
  		"ṋ"
  	],
  	[
  		7755,
  		2
  	],
  	[
  		7756,
  		1,
  		"ṍ"
  	],
  	[
  		7757,
  		2
  	],
  	[
  		7758,
  		1,
  		"ṏ"
  	],
  	[
  		7759,
  		2
  	],
  	[
  		7760,
  		1,
  		"ṑ"
  	],
  	[
  		7761,
  		2
  	],
  	[
  		7762,
  		1,
  		"ṓ"
  	],
  	[
  		7763,
  		2
  	],
  	[
  		7764,
  		1,
  		"ṕ"
  	],
  	[
  		7765,
  		2
  	],
  	[
  		7766,
  		1,
  		"ṗ"
  	],
  	[
  		7767,
  		2
  	],
  	[
  		7768,
  		1,
  		"ṙ"
  	],
  	[
  		7769,
  		2
  	],
  	[
  		7770,
  		1,
  		"ṛ"
  	],
  	[
  		7771,
  		2
  	],
  	[
  		7772,
  		1,
  		"ṝ"
  	],
  	[
  		7773,
  		2
  	],
  	[
  		7774,
  		1,
  		"ṟ"
  	],
  	[
  		7775,
  		2
  	],
  	[
  		7776,
  		1,
  		"ṡ"
  	],
  	[
  		7777,
  		2
  	],
  	[
  		7778,
  		1,
  		"ṣ"
  	],
  	[
  		7779,
  		2
  	],
  	[
  		7780,
  		1,
  		"ṥ"
  	],
  	[
  		7781,
  		2
  	],
  	[
  		7782,
  		1,
  		"ṧ"
  	],
  	[
  		7783,
  		2
  	],
  	[
  		7784,
  		1,
  		"ṩ"
  	],
  	[
  		7785,
  		2
  	],
  	[
  		7786,
  		1,
  		"ṫ"
  	],
  	[
  		7787,
  		2
  	],
  	[
  		7788,
  		1,
  		"ṭ"
  	],
  	[
  		7789,
  		2
  	],
  	[
  		7790,
  		1,
  		"ṯ"
  	],
  	[
  		7791,
  		2
  	],
  	[
  		7792,
  		1,
  		"ṱ"
  	],
  	[
  		7793,
  		2
  	],
  	[
  		7794,
  		1,
  		"ṳ"
  	],
  	[
  		7795,
  		2
  	],
  	[
  		7796,
  		1,
  		"ṵ"
  	],
  	[
  		7797,
  		2
  	],
  	[
  		7798,
  		1,
  		"ṷ"
  	],
  	[
  		7799,
  		2
  	],
  	[
  		7800,
  		1,
  		"ṹ"
  	],
  	[
  		7801,
  		2
  	],
  	[
  		7802,
  		1,
  		"ṻ"
  	],
  	[
  		7803,
  		2
  	],
  	[
  		7804,
  		1,
  		"ṽ"
  	],
  	[
  		7805,
  		2
  	],
  	[
  		7806,
  		1,
  		"ṿ"
  	],
  	[
  		7807,
  		2
  	],
  	[
  		7808,
  		1,
  		"ẁ"
  	],
  	[
  		7809,
  		2
  	],
  	[
  		7810,
  		1,
  		"ẃ"
  	],
  	[
  		7811,
  		2
  	],
  	[
  		7812,
  		1,
  		"ẅ"
  	],
  	[
  		7813,
  		2
  	],
  	[
  		7814,
  		1,
  		"ẇ"
  	],
  	[
  		7815,
  		2
  	],
  	[
  		7816,
  		1,
  		"ẉ"
  	],
  	[
  		7817,
  		2
  	],
  	[
  		7818,
  		1,
  		"ẋ"
  	],
  	[
  		7819,
  		2
  	],
  	[
  		7820,
  		1,
  		"ẍ"
  	],
  	[
  		7821,
  		2
  	],
  	[
  		7822,
  		1,
  		"ẏ"
  	],
  	[
  		7823,
  		2
  	],
  	[
  		7824,
  		1,
  		"ẑ"
  	],
  	[
  		7825,
  		2
  	],
  	[
  		7826,
  		1,
  		"ẓ"
  	],
  	[
  		7827,
  		2
  	],
  	[
  		7828,
  		1,
  		"ẕ"
  	],
  	[
  		[
  			7829,
  			7833
  		],
  		2
  	],
  	[
  		7834,
  		1,
  		"aʾ"
  	],
  	[
  		7835,
  		1,
  		"ṡ"
  	],
  	[
  		[
  			7836,
  			7837
  		],
  		2
  	],
  	[
  		7838,
  		1,
  		"ss"
  	],
  	[
  		7839,
  		2
  	],
  	[
  		7840,
  		1,
  		"ạ"
  	],
  	[
  		7841,
  		2
  	],
  	[
  		7842,
  		1,
  		"ả"
  	],
  	[
  		7843,
  		2
  	],
  	[
  		7844,
  		1,
  		"ấ"
  	],
  	[
  		7845,
  		2
  	],
  	[
  		7846,
  		1,
  		"ầ"
  	],
  	[
  		7847,
  		2
  	],
  	[
  		7848,
  		1,
  		"ẩ"
  	],
  	[
  		7849,
  		2
  	],
  	[
  		7850,
  		1,
  		"ẫ"
  	],
  	[
  		7851,
  		2
  	],
  	[
  		7852,
  		1,
  		"ậ"
  	],
  	[
  		7853,
  		2
  	],
  	[
  		7854,
  		1,
  		"ắ"
  	],
  	[
  		7855,
  		2
  	],
  	[
  		7856,
  		1,
  		"ằ"
  	],
  	[
  		7857,
  		2
  	],
  	[
  		7858,
  		1,
  		"ẳ"
  	],
  	[
  		7859,
  		2
  	],
  	[
  		7860,
  		1,
  		"ẵ"
  	],
  	[
  		7861,
  		2
  	],
  	[
  		7862,
  		1,
  		"ặ"
  	],
  	[
  		7863,
  		2
  	],
  	[
  		7864,
  		1,
  		"ẹ"
  	],
  	[
  		7865,
  		2
  	],
  	[
  		7866,
  		1,
  		"ẻ"
  	],
  	[
  		7867,
  		2
  	],
  	[
  		7868,
  		1,
  		"ẽ"
  	],
  	[
  		7869,
  		2
  	],
  	[
  		7870,
  		1,
  		"ế"
  	],
  	[
  		7871,
  		2
  	],
  	[
  		7872,
  		1,
  		"ề"
  	],
  	[
  		7873,
  		2
  	],
  	[
  		7874,
  		1,
  		"ể"
  	],
  	[
  		7875,
  		2
  	],
  	[
  		7876,
  		1,
  		"ễ"
  	],
  	[
  		7877,
  		2
  	],
  	[
  		7878,
  		1,
  		"ệ"
  	],
  	[
  		7879,
  		2
  	],
  	[
  		7880,
  		1,
  		"ỉ"
  	],
  	[
  		7881,
  		2
  	],
  	[
  		7882,
  		1,
  		"ị"
  	],
  	[
  		7883,
  		2
  	],
  	[
  		7884,
  		1,
  		"ọ"
  	],
  	[
  		7885,
  		2
  	],
  	[
  		7886,
  		1,
  		"ỏ"
  	],
  	[
  		7887,
  		2
  	],
  	[
  		7888,
  		1,
  		"ố"
  	],
  	[
  		7889,
  		2
  	],
  	[
  		7890,
  		1,
  		"ồ"
  	],
  	[
  		7891,
  		2
  	],
  	[
  		7892,
  		1,
  		"ổ"
  	],
  	[
  		7893,
  		2
  	],
  	[
  		7894,
  		1,
  		"ỗ"
  	],
  	[
  		7895,
  		2
  	],
  	[
  		7896,
  		1,
  		"ộ"
  	],
  	[
  		7897,
  		2
  	],
  	[
  		7898,
  		1,
  		"ớ"
  	],
  	[
  		7899,
  		2
  	],
  	[
  		7900,
  		1,
  		"ờ"
  	],
  	[
  		7901,
  		2
  	],
  	[
  		7902,
  		1,
  		"ở"
  	],
  	[
  		7903,
  		2
  	],
  	[
  		7904,
  		1,
  		"ỡ"
  	],
  	[
  		7905,
  		2
  	],
  	[
  		7906,
  		1,
  		"ợ"
  	],
  	[
  		7907,
  		2
  	],
  	[
  		7908,
  		1,
  		"ụ"
  	],
  	[
  		7909,
  		2
  	],
  	[
  		7910,
  		1,
  		"ủ"
  	],
  	[
  		7911,
  		2
  	],
  	[
  		7912,
  		1,
  		"ứ"
  	],
  	[
  		7913,
  		2
  	],
  	[
  		7914,
  		1,
  		"ừ"
  	],
  	[
  		7915,
  		2
  	],
  	[
  		7916,
  		1,
  		"ử"
  	],
  	[
  		7917,
  		2
  	],
  	[
  		7918,
  		1,
  		"ữ"
  	],
  	[
  		7919,
  		2
  	],
  	[
  		7920,
  		1,
  		"ự"
  	],
  	[
  		7921,
  		2
  	],
  	[
  		7922,
  		1,
  		"ỳ"
  	],
  	[
  		7923,
  		2
  	],
  	[
  		7924,
  		1,
  		"ỵ"
  	],
  	[
  		7925,
  		2
  	],
  	[
  		7926,
  		1,
  		"ỷ"
  	],
  	[
  		7927,
  		2
  	],
  	[
  		7928,
  		1,
  		"ỹ"
  	],
  	[
  		7929,
  		2
  	],
  	[
  		7930,
  		1,
  		"ỻ"
  	],
  	[
  		7931,
  		2
  	],
  	[
  		7932,
  		1,
  		"ỽ"
  	],
  	[
  		7933,
  		2
  	],
  	[
  		7934,
  		1,
  		"ỿ"
  	],
  	[
  		7935,
  		2
  	],
  	[
  		[
  			7936,
  			7943
  		],
  		2
  	],
  	[
  		7944,
  		1,
  		"ἀ"
  	],
  	[
  		7945,
  		1,
  		"ἁ"
  	],
  	[
  		7946,
  		1,
  		"ἂ"
  	],
  	[
  		7947,
  		1,
  		"ἃ"
  	],
  	[
  		7948,
  		1,
  		"ἄ"
  	],
  	[
  		7949,
  		1,
  		"ἅ"
  	],
  	[
  		7950,
  		1,
  		"ἆ"
  	],
  	[
  		7951,
  		1,
  		"ἇ"
  	],
  	[
  		[
  			7952,
  			7957
  		],
  		2
  	],
  	[
  		[
  			7958,
  			7959
  		],
  		3
  	],
  	[
  		7960,
  		1,
  		"ἐ"
  	],
  	[
  		7961,
  		1,
  		"ἑ"
  	],
  	[
  		7962,
  		1,
  		"ἒ"
  	],
  	[
  		7963,
  		1,
  		"ἓ"
  	],
  	[
  		7964,
  		1,
  		"ἔ"
  	],
  	[
  		7965,
  		1,
  		"ἕ"
  	],
  	[
  		[
  			7966,
  			7967
  		],
  		3
  	],
  	[
  		[
  			7968,
  			7975
  		],
  		2
  	],
  	[
  		7976,
  		1,
  		"ἠ"
  	],
  	[
  		7977,
  		1,
  		"ἡ"
  	],
  	[
  		7978,
  		1,
  		"ἢ"
  	],
  	[
  		7979,
  		1,
  		"ἣ"
  	],
  	[
  		7980,
  		1,
  		"ἤ"
  	],
  	[
  		7981,
  		1,
  		"ἥ"
  	],
  	[
  		7982,
  		1,
  		"ἦ"
  	],
  	[
  		7983,
  		1,
  		"ἧ"
  	],
  	[
  		[
  			7984,
  			7991
  		],
  		2
  	],
  	[
  		7992,
  		1,
  		"ἰ"
  	],
  	[
  		7993,
  		1,
  		"ἱ"
  	],
  	[
  		7994,
  		1,
  		"ἲ"
  	],
  	[
  		7995,
  		1,
  		"ἳ"
  	],
  	[
  		7996,
  		1,
  		"ἴ"
  	],
  	[
  		7997,
  		1,
  		"ἵ"
  	],
  	[
  		7998,
  		1,
  		"ἶ"
  	],
  	[
  		7999,
  		1,
  		"ἷ"
  	],
  	[
  		[
  			8000,
  			8005
  		],
  		2
  	],
  	[
  		[
  			8006,
  			8007
  		],
  		3
  	],
  	[
  		8008,
  		1,
  		"ὀ"
  	],
  	[
  		8009,
  		1,
  		"ὁ"
  	],
  	[
  		8010,
  		1,
  		"ὂ"
  	],
  	[
  		8011,
  		1,
  		"ὃ"
  	],
  	[
  		8012,
  		1,
  		"ὄ"
  	],
  	[
  		8013,
  		1,
  		"ὅ"
  	],
  	[
  		[
  			8014,
  			8015
  		],
  		3
  	],
  	[
  		[
  			8016,
  			8023
  		],
  		2
  	],
  	[
  		8024,
  		3
  	],
  	[
  		8025,
  		1,
  		"ὑ"
  	],
  	[
  		8026,
  		3
  	],
  	[
  		8027,
  		1,
  		"ὓ"
  	],
  	[
  		8028,
  		3
  	],
  	[
  		8029,
  		1,
  		"ὕ"
  	],
  	[
  		8030,
  		3
  	],
  	[
  		8031,
  		1,
  		"ὗ"
  	],
  	[
  		[
  			8032,
  			8039
  		],
  		2
  	],
  	[
  		8040,
  		1,
  		"ὠ"
  	],
  	[
  		8041,
  		1,
  		"ὡ"
  	],
  	[
  		8042,
  		1,
  		"ὢ"
  	],
  	[
  		8043,
  		1,
  		"ὣ"
  	],
  	[
  		8044,
  		1,
  		"ὤ"
  	],
  	[
  		8045,
  		1,
  		"ὥ"
  	],
  	[
  		8046,
  		1,
  		"ὦ"
  	],
  	[
  		8047,
  		1,
  		"ὧ"
  	],
  	[
  		8048,
  		2
  	],
  	[
  		8049,
  		1,
  		"ά"
  	],
  	[
  		8050,
  		2
  	],
  	[
  		8051,
  		1,
  		"έ"
  	],
  	[
  		8052,
  		2
  	],
  	[
  		8053,
  		1,
  		"ή"
  	],
  	[
  		8054,
  		2
  	],
  	[
  		8055,
  		1,
  		"ί"
  	],
  	[
  		8056,
  		2
  	],
  	[
  		8057,
  		1,
  		"ό"
  	],
  	[
  		8058,
  		2
  	],
  	[
  		8059,
  		1,
  		"ύ"
  	],
  	[
  		8060,
  		2
  	],
  	[
  		8061,
  		1,
  		"ώ"
  	],
  	[
  		[
  			8062,
  			8063
  		],
  		3
  	],
  	[
  		8064,
  		1,
  		"ἀι"
  	],
  	[
  		8065,
  		1,
  		"ἁι"
  	],
  	[
  		8066,
  		1,
  		"ἂι"
  	],
  	[
  		8067,
  		1,
  		"ἃι"
  	],
  	[
  		8068,
  		1,
  		"ἄι"
  	],
  	[
  		8069,
  		1,
  		"ἅι"
  	],
  	[
  		8070,
  		1,
  		"ἆι"
  	],
  	[
  		8071,
  		1,
  		"ἇι"
  	],
  	[
  		8072,
  		1,
  		"ἀι"
  	],
  	[
  		8073,
  		1,
  		"ἁι"
  	],
  	[
  		8074,
  		1,
  		"ἂι"
  	],
  	[
  		8075,
  		1,
  		"ἃι"
  	],
  	[
  		8076,
  		1,
  		"ἄι"
  	],
  	[
  		8077,
  		1,
  		"ἅι"
  	],
  	[
  		8078,
  		1,
  		"ἆι"
  	],
  	[
  		8079,
  		1,
  		"ἇι"
  	],
  	[
  		8080,
  		1,
  		"ἠι"
  	],
  	[
  		8081,
  		1,
  		"ἡι"
  	],
  	[
  		8082,
  		1,
  		"ἢι"
  	],
  	[
  		8083,
  		1,
  		"ἣι"
  	],
  	[
  		8084,
  		1,
  		"ἤι"
  	],
  	[
  		8085,
  		1,
  		"ἥι"
  	],
  	[
  		8086,
  		1,
  		"ἦι"
  	],
  	[
  		8087,
  		1,
  		"ἧι"
  	],
  	[
  		8088,
  		1,
  		"ἠι"
  	],
  	[
  		8089,
  		1,
  		"ἡι"
  	],
  	[
  		8090,
  		1,
  		"ἢι"
  	],
  	[
  		8091,
  		1,
  		"ἣι"
  	],
  	[
  		8092,
  		1,
  		"ἤι"
  	],
  	[
  		8093,
  		1,
  		"ἥι"
  	],
  	[
  		8094,
  		1,
  		"ἦι"
  	],
  	[
  		8095,
  		1,
  		"ἧι"
  	],
  	[
  		8096,
  		1,
  		"ὠι"
  	],
  	[
  		8097,
  		1,
  		"ὡι"
  	],
  	[
  		8098,
  		1,
  		"ὢι"
  	],
  	[
  		8099,
  		1,
  		"ὣι"
  	],
  	[
  		8100,
  		1,
  		"ὤι"
  	],
  	[
  		8101,
  		1,
  		"ὥι"
  	],
  	[
  		8102,
  		1,
  		"ὦι"
  	],
  	[
  		8103,
  		1,
  		"ὧι"
  	],
  	[
  		8104,
  		1,
  		"ὠι"
  	],
  	[
  		8105,
  		1,
  		"ὡι"
  	],
  	[
  		8106,
  		1,
  		"ὢι"
  	],
  	[
  		8107,
  		1,
  		"ὣι"
  	],
  	[
  		8108,
  		1,
  		"ὤι"
  	],
  	[
  		8109,
  		1,
  		"ὥι"
  	],
  	[
  		8110,
  		1,
  		"ὦι"
  	],
  	[
  		8111,
  		1,
  		"ὧι"
  	],
  	[
  		[
  			8112,
  			8113
  		],
  		2
  	],
  	[
  		8114,
  		1,
  		"ὰι"
  	],
  	[
  		8115,
  		1,
  		"αι"
  	],
  	[
  		8116,
  		1,
  		"άι"
  	],
  	[
  		8117,
  		3
  	],
  	[
  		8118,
  		2
  	],
  	[
  		8119,
  		1,
  		"ᾶι"
  	],
  	[
  		8120,
  		1,
  		"ᾰ"
  	],
  	[
  		8121,
  		1,
  		"ᾱ"
  	],
  	[
  		8122,
  		1,
  		"ὰ"
  	],
  	[
  		8123,
  		1,
  		"ά"
  	],
  	[
  		8124,
  		1,
  		"αι"
  	],
  	[
  		8125,
  		5,
  		" ̓"
  	],
  	[
  		8126,
  		1,
  		"ι"
  	],
  	[
  		8127,
  		5,
  		" ̓"
  	],
  	[
  		8128,
  		5,
  		" ͂"
  	],
  	[
  		8129,
  		5,
  		" ̈͂"
  	],
  	[
  		8130,
  		1,
  		"ὴι"
  	],
  	[
  		8131,
  		1,
  		"ηι"
  	],
  	[
  		8132,
  		1,
  		"ήι"
  	],
  	[
  		8133,
  		3
  	],
  	[
  		8134,
  		2
  	],
  	[
  		8135,
  		1,
  		"ῆι"
  	],
  	[
  		8136,
  		1,
  		"ὲ"
  	],
  	[
  		8137,
  		1,
  		"έ"
  	],
  	[
  		8138,
  		1,
  		"ὴ"
  	],
  	[
  		8139,
  		1,
  		"ή"
  	],
  	[
  		8140,
  		1,
  		"ηι"
  	],
  	[
  		8141,
  		5,
  		" ̓̀"
  	],
  	[
  		8142,
  		5,
  		" ̓́"
  	],
  	[
  		8143,
  		5,
  		" ̓͂"
  	],
  	[
  		[
  			8144,
  			8146
  		],
  		2
  	],
  	[
  		8147,
  		1,
  		"ΐ"
  	],
  	[
  		[
  			8148,
  			8149
  		],
  		3
  	],
  	[
  		[
  			8150,
  			8151
  		],
  		2
  	],
  	[
  		8152,
  		1,
  		"ῐ"
  	],
  	[
  		8153,
  		1,
  		"ῑ"
  	],
  	[
  		8154,
  		1,
  		"ὶ"
  	],
  	[
  		8155,
  		1,
  		"ί"
  	],
  	[
  		8156,
  		3
  	],
  	[
  		8157,
  		5,
  		" ̔̀"
  	],
  	[
  		8158,
  		5,
  		" ̔́"
  	],
  	[
  		8159,
  		5,
  		" ̔͂"
  	],
  	[
  		[
  			8160,
  			8162
  		],
  		2
  	],
  	[
  		8163,
  		1,
  		"ΰ"
  	],
  	[
  		[
  			8164,
  			8167
  		],
  		2
  	],
  	[
  		8168,
  		1,
  		"ῠ"
  	],
  	[
  		8169,
  		1,
  		"ῡ"
  	],
  	[
  		8170,
  		1,
  		"ὺ"
  	],
  	[
  		8171,
  		1,
  		"ύ"
  	],
  	[
  		8172,
  		1,
  		"ῥ"
  	],
  	[
  		8173,
  		5,
  		" ̈̀"
  	],
  	[
  		8174,
  		5,
  		" ̈́"
  	],
  	[
  		8175,
  		5,
  		"`"
  	],
  	[
  		[
  			8176,
  			8177
  		],
  		3
  	],
  	[
  		8178,
  		1,
  		"ὼι"
  	],
  	[
  		8179,
  		1,
  		"ωι"
  	],
  	[
  		8180,
  		1,
  		"ώι"
  	],
  	[
  		8181,
  		3
  	],
  	[
  		8182,
  		2
  	],
  	[
  		8183,
  		1,
  		"ῶι"
  	],
  	[
  		8184,
  		1,
  		"ὸ"
  	],
  	[
  		8185,
  		1,
  		"ό"
  	],
  	[
  		8186,
  		1,
  		"ὼ"
  	],
  	[
  		8187,
  		1,
  		"ώ"
  	],
  	[
  		8188,
  		1,
  		"ωι"
  	],
  	[
  		8189,
  		5,
  		" ́"
  	],
  	[
  		8190,
  		5,
  		" ̔"
  	],
  	[
  		8191,
  		3
  	],
  	[
  		[
  			8192,
  			8202
  		],
  		5,
  		" "
  	],
  	[
  		8203,
  		7
  	],
  	[
  		[
  			8204,
  			8205
  		],
  		6,
  		""
  	],
  	[
  		[
  			8206,
  			8207
  		],
  		3
  	],
  	[
  		8208,
  		2
  	],
  	[
  		8209,
  		1,
  		"‐"
  	],
  	[
  		[
  			8210,
  			8214
  		],
  		2
  	],
  	[
  		8215,
  		5,
  		" ̳"
  	],
  	[
  		[
  			8216,
  			8227
  		],
  		2
  	],
  	[
  		[
  			8228,
  			8230
  		],
  		3
  	],
  	[
  		8231,
  		2
  	],
  	[
  		[
  			8232,
  			8238
  		],
  		3
  	],
  	[
  		8239,
  		5,
  		" "
  	],
  	[
  		[
  			8240,
  			8242
  		],
  		2
  	],
  	[
  		8243,
  		1,
  		"′′"
  	],
  	[
  		8244,
  		1,
  		"′′′"
  	],
  	[
  		8245,
  		2
  	],
  	[
  		8246,
  		1,
  		"‵‵"
  	],
  	[
  		8247,
  		1,
  		"‵‵‵"
  	],
  	[
  		[
  			8248,
  			8251
  		],
  		2
  	],
  	[
  		8252,
  		5,
  		"!!"
  	],
  	[
  		8253,
  		2
  	],
  	[
  		8254,
  		5,
  		" ̅"
  	],
  	[
  		[
  			8255,
  			8262
  		],
  		2
  	],
  	[
  		8263,
  		5,
  		"??"
  	],
  	[
  		8264,
  		5,
  		"?!"
  	],
  	[
  		8265,
  		5,
  		"!?"
  	],
  	[
  		[
  			8266,
  			8269
  		],
  		2
  	],
  	[
  		[
  			8270,
  			8274
  		],
  		2
  	],
  	[
  		[
  			8275,
  			8276
  		],
  		2
  	],
  	[
  		[
  			8277,
  			8278
  		],
  		2
  	],
  	[
  		8279,
  		1,
  		"′′′′"
  	],
  	[
  		[
  			8280,
  			8286
  		],
  		2
  	],
  	[
  		8287,
  		5,
  		" "
  	],
  	[
  		8288,
  		7
  	],
  	[
  		[
  			8289,
  			8291
  		],
  		3
  	],
  	[
  		8292,
  		7
  	],
  	[
  		8293,
  		3
  	],
  	[
  		[
  			8294,
  			8297
  		],
  		3
  	],
  	[
  		[
  			8298,
  			8303
  		],
  		3
  	],
  	[
  		8304,
  		1,
  		"0"
  	],
  	[
  		8305,
  		1,
  		"i"
  	],
  	[
  		[
  			8306,
  			8307
  		],
  		3
  	],
  	[
  		8308,
  		1,
  		"4"
  	],
  	[
  		8309,
  		1,
  		"5"
  	],
  	[
  		8310,
  		1,
  		"6"
  	],
  	[
  		8311,
  		1,
  		"7"
  	],
  	[
  		8312,
  		1,
  		"8"
  	],
  	[
  		8313,
  		1,
  		"9"
  	],
  	[
  		8314,
  		5,
  		"+"
  	],
  	[
  		8315,
  		1,
  		"−"
  	],
  	[
  		8316,
  		5,
  		"="
  	],
  	[
  		8317,
  		5,
  		"("
  	],
  	[
  		8318,
  		5,
  		")"
  	],
  	[
  		8319,
  		1,
  		"n"
  	],
  	[
  		8320,
  		1,
  		"0"
  	],
  	[
  		8321,
  		1,
  		"1"
  	],
  	[
  		8322,
  		1,
  		"2"
  	],
  	[
  		8323,
  		1,
  		"3"
  	],
  	[
  		8324,
  		1,
  		"4"
  	],
  	[
  		8325,
  		1,
  		"5"
  	],
  	[
  		8326,
  		1,
  		"6"
  	],
  	[
  		8327,
  		1,
  		"7"
  	],
  	[
  		8328,
  		1,
  		"8"
  	],
  	[
  		8329,
  		1,
  		"9"
  	],
  	[
  		8330,
  		5,
  		"+"
  	],
  	[
  		8331,
  		1,
  		"−"
  	],
  	[
  		8332,
  		5,
  		"="
  	],
  	[
  		8333,
  		5,
  		"("
  	],
  	[
  		8334,
  		5,
  		")"
  	],
  	[
  		8335,
  		3
  	],
  	[
  		8336,
  		1,
  		"a"
  	],
  	[
  		8337,
  		1,
  		"e"
  	],
  	[
  		8338,
  		1,
  		"o"
  	],
  	[
  		8339,
  		1,
  		"x"
  	],
  	[
  		8340,
  		1,
  		"ə"
  	],
  	[
  		8341,
  		1,
  		"h"
  	],
  	[
  		8342,
  		1,
  		"k"
  	],
  	[
  		8343,
  		1,
  		"l"
  	],
  	[
  		8344,
  		1,
  		"m"
  	],
  	[
  		8345,
  		1,
  		"n"
  	],
  	[
  		8346,
  		1,
  		"p"
  	],
  	[
  		8347,
  		1,
  		"s"
  	],
  	[
  		8348,
  		1,
  		"t"
  	],
  	[
  		[
  			8349,
  			8351
  		],
  		3
  	],
  	[
  		[
  			8352,
  			8359
  		],
  		2
  	],
  	[
  		8360,
  		1,
  		"rs"
  	],
  	[
  		[
  			8361,
  			8362
  		],
  		2
  	],
  	[
  		8363,
  		2
  	],
  	[
  		8364,
  		2
  	],
  	[
  		[
  			8365,
  			8367
  		],
  		2
  	],
  	[
  		[
  			8368,
  			8369
  		],
  		2
  	],
  	[
  		[
  			8370,
  			8373
  		],
  		2
  	],
  	[
  		[
  			8374,
  			8376
  		],
  		2
  	],
  	[
  		8377,
  		2
  	],
  	[
  		8378,
  		2
  	],
  	[
  		[
  			8379,
  			8381
  		],
  		2
  	],
  	[
  		8382,
  		2
  	],
  	[
  		8383,
  		2
  	],
  	[
  		[
  			8384,
  			8399
  		],
  		3
  	],
  	[
  		[
  			8400,
  			8417
  		],
  		2
  	],
  	[
  		[
  			8418,
  			8419
  		],
  		2
  	],
  	[
  		[
  			8420,
  			8426
  		],
  		2
  	],
  	[
  		8427,
  		2
  	],
  	[
  		[
  			8428,
  			8431
  		],
  		2
  	],
  	[
  		8432,
  		2
  	],
  	[
  		[
  			8433,
  			8447
  		],
  		3
  	],
  	[
  		8448,
  		5,
  		"a/c"
  	],
  	[
  		8449,
  		5,
  		"a/s"
  	],
  	[
  		8450,
  		1,
  		"c"
  	],
  	[
  		8451,
  		1,
  		"°c"
  	],
  	[
  		8452,
  		2
  	],
  	[
  		8453,
  		5,
  		"c/o"
  	],
  	[
  		8454,
  		5,
  		"c/u"
  	],
  	[
  		8455,
  		1,
  		"ɛ"
  	],
  	[
  		8456,
  		2
  	],
  	[
  		8457,
  		1,
  		"°f"
  	],
  	[
  		8458,
  		1,
  		"g"
  	],
  	[
  		[
  			8459,
  			8462
  		],
  		1,
  		"h"
  	],
  	[
  		8463,
  		1,
  		"ħ"
  	],
  	[
  		[
  			8464,
  			8465
  		],
  		1,
  		"i"
  	],
  	[
  		[
  			8466,
  			8467
  		],
  		1,
  		"l"
  	],
  	[
  		8468,
  		2
  	],
  	[
  		8469,
  		1,
  		"n"
  	],
  	[
  		8470,
  		1,
  		"no"
  	],
  	[
  		[
  			8471,
  			8472
  		],
  		2
  	],
  	[
  		8473,
  		1,
  		"p"
  	],
  	[
  		8474,
  		1,
  		"q"
  	],
  	[
  		[
  			8475,
  			8477
  		],
  		1,
  		"r"
  	],
  	[
  		[
  			8478,
  			8479
  		],
  		2
  	],
  	[
  		8480,
  		1,
  		"sm"
  	],
  	[
  		8481,
  		1,
  		"tel"
  	],
  	[
  		8482,
  		1,
  		"tm"
  	],
  	[
  		8483,
  		2
  	],
  	[
  		8484,
  		1,
  		"z"
  	],
  	[
  		8485,
  		2
  	],
  	[
  		8486,
  		1,
  		"ω"
  	],
  	[
  		8487,
  		2
  	],
  	[
  		8488,
  		1,
  		"z"
  	],
  	[
  		8489,
  		2
  	],
  	[
  		8490,
  		1,
  		"k"
  	],
  	[
  		8491,
  		1,
  		"å"
  	],
  	[
  		8492,
  		1,
  		"b"
  	],
  	[
  		8493,
  		1,
  		"c"
  	],
  	[
  		8494,
  		2
  	],
  	[
  		[
  			8495,
  			8496
  		],
  		1,
  		"e"
  	],
  	[
  		8497,
  		1,
  		"f"
  	],
  	[
  		8498,
  		3
  	],
  	[
  		8499,
  		1,
  		"m"
  	],
  	[
  		8500,
  		1,
  		"o"
  	],
  	[
  		8501,
  		1,
  		"א"
  	],
  	[
  		8502,
  		1,
  		"ב"
  	],
  	[
  		8503,
  		1,
  		"ג"
  	],
  	[
  		8504,
  		1,
  		"ד"
  	],
  	[
  		8505,
  		1,
  		"i"
  	],
  	[
  		8506,
  		2
  	],
  	[
  		8507,
  		1,
  		"fax"
  	],
  	[
  		8508,
  		1,
  		"π"
  	],
  	[
  		[
  			8509,
  			8510
  		],
  		1,
  		"γ"
  	],
  	[
  		8511,
  		1,
  		"π"
  	],
  	[
  		8512,
  		1,
  		"∑"
  	],
  	[
  		[
  			8513,
  			8516
  		],
  		2
  	],
  	[
  		[
  			8517,
  			8518
  		],
  		1,
  		"d"
  	],
  	[
  		8519,
  		1,
  		"e"
  	],
  	[
  		8520,
  		1,
  		"i"
  	],
  	[
  		8521,
  		1,
  		"j"
  	],
  	[
  		[
  			8522,
  			8523
  		],
  		2
  	],
  	[
  		8524,
  		2
  	],
  	[
  		8525,
  		2
  	],
  	[
  		8526,
  		2
  	],
  	[
  		8527,
  		2
  	],
  	[
  		8528,
  		1,
  		"1⁄7"
  	],
  	[
  		8529,
  		1,
  		"1⁄9"
  	],
  	[
  		8530,
  		1,
  		"1⁄10"
  	],
  	[
  		8531,
  		1,
  		"1⁄3"
  	],
  	[
  		8532,
  		1,
  		"2⁄3"
  	],
  	[
  		8533,
  		1,
  		"1⁄5"
  	],
  	[
  		8534,
  		1,
  		"2⁄5"
  	],
  	[
  		8535,
  		1,
  		"3⁄5"
  	],
  	[
  		8536,
  		1,
  		"4⁄5"
  	],
  	[
  		8537,
  		1,
  		"1⁄6"
  	],
  	[
  		8538,
  		1,
  		"5⁄6"
  	],
  	[
  		8539,
  		1,
  		"1⁄8"
  	],
  	[
  		8540,
  		1,
  		"3⁄8"
  	],
  	[
  		8541,
  		1,
  		"5⁄8"
  	],
  	[
  		8542,
  		1,
  		"7⁄8"
  	],
  	[
  		8543,
  		1,
  		"1⁄"
  	],
  	[
  		8544,
  		1,
  		"i"
  	],
  	[
  		8545,
  		1,
  		"ii"
  	],
  	[
  		8546,
  		1,
  		"iii"
  	],
  	[
  		8547,
  		1,
  		"iv"
  	],
  	[
  		8548,
  		1,
  		"v"
  	],
  	[
  		8549,
  		1,
  		"vi"
  	],
  	[
  		8550,
  		1,
  		"vii"
  	],
  	[
  		8551,
  		1,
  		"viii"
  	],
  	[
  		8552,
  		1,
  		"ix"
  	],
  	[
  		8553,
  		1,
  		"x"
  	],
  	[
  		8554,
  		1,
  		"xi"
  	],
  	[
  		8555,
  		1,
  		"xii"
  	],
  	[
  		8556,
  		1,
  		"l"
  	],
  	[
  		8557,
  		1,
  		"c"
  	],
  	[
  		8558,
  		1,
  		"d"
  	],
  	[
  		8559,
  		1,
  		"m"
  	],
  	[
  		8560,
  		1,
  		"i"
  	],
  	[
  		8561,
  		1,
  		"ii"
  	],
  	[
  		8562,
  		1,
  		"iii"
  	],
  	[
  		8563,
  		1,
  		"iv"
  	],
  	[
  		8564,
  		1,
  		"v"
  	],
  	[
  		8565,
  		1,
  		"vi"
  	],
  	[
  		8566,
  		1,
  		"vii"
  	],
  	[
  		8567,
  		1,
  		"viii"
  	],
  	[
  		8568,
  		1,
  		"ix"
  	],
  	[
  		8569,
  		1,
  		"x"
  	],
  	[
  		8570,
  		1,
  		"xi"
  	],
  	[
  		8571,
  		1,
  		"xii"
  	],
  	[
  		8572,
  		1,
  		"l"
  	],
  	[
  		8573,
  		1,
  		"c"
  	],
  	[
  		8574,
  		1,
  		"d"
  	],
  	[
  		8575,
  		1,
  		"m"
  	],
  	[
  		[
  			8576,
  			8578
  		],
  		2
  	],
  	[
  		8579,
  		3
  	],
  	[
  		8580,
  		2
  	],
  	[
  		[
  			8581,
  			8584
  		],
  		2
  	],
  	[
  		8585,
  		1,
  		"0⁄3"
  	],
  	[
  		[
  			8586,
  			8587
  		],
  		2
  	],
  	[
  		[
  			8588,
  			8591
  		],
  		3
  	],
  	[
  		[
  			8592,
  			8682
  		],
  		2
  	],
  	[
  		[
  			8683,
  			8691
  		],
  		2
  	],
  	[
  		[
  			8692,
  			8703
  		],
  		2
  	],
  	[
  		[
  			8704,
  			8747
  		],
  		2
  	],
  	[
  		8748,
  		1,
  		"∫∫"
  	],
  	[
  		8749,
  		1,
  		"∫∫∫"
  	],
  	[
  		8750,
  		2
  	],
  	[
  		8751,
  		1,
  		"∮∮"
  	],
  	[
  		8752,
  		1,
  		"∮∮∮"
  	],
  	[
  		[
  			8753,
  			8799
  		],
  		2
  	],
  	[
  		8800,
  		4
  	],
  	[
  		[
  			8801,
  			8813
  		],
  		2
  	],
  	[
  		[
  			8814,
  			8815
  		],
  		4
  	],
  	[
  		[
  			8816,
  			8945
  		],
  		2
  	],
  	[
  		[
  			8946,
  			8959
  		],
  		2
  	],
  	[
  		8960,
  		2
  	],
  	[
  		8961,
  		2
  	],
  	[
  		[
  			8962,
  			9000
  		],
  		2
  	],
  	[
  		9001,
  		1,
  		"〈"
  	],
  	[
  		9002,
  		1,
  		"〉"
  	],
  	[
  		[
  			9003,
  			9082
  		],
  		2
  	],
  	[
  		9083,
  		2
  	],
  	[
  		9084,
  		2
  	],
  	[
  		[
  			9085,
  			9114
  		],
  		2
  	],
  	[
  		[
  			9115,
  			9166
  		],
  		2
  	],
  	[
  		[
  			9167,
  			9168
  		],
  		2
  	],
  	[
  		[
  			9169,
  			9179
  		],
  		2
  	],
  	[
  		[
  			9180,
  			9191
  		],
  		2
  	],
  	[
  		9192,
  		2
  	],
  	[
  		[
  			9193,
  			9203
  		],
  		2
  	],
  	[
  		[
  			9204,
  			9210
  		],
  		2
  	],
  	[
  		[
  			9211,
  			9214
  		],
  		2
  	],
  	[
  		9215,
  		2
  	],
  	[
  		[
  			9216,
  			9252
  		],
  		2
  	],
  	[
  		[
  			9253,
  			9254
  		],
  		2
  	],
  	[
  		[
  			9255,
  			9279
  		],
  		3
  	],
  	[
  		[
  			9280,
  			9290
  		],
  		2
  	],
  	[
  		[
  			9291,
  			9311
  		],
  		3
  	],
  	[
  		9312,
  		1,
  		"1"
  	],
  	[
  		9313,
  		1,
  		"2"
  	],
  	[
  		9314,
  		1,
  		"3"
  	],
  	[
  		9315,
  		1,
  		"4"
  	],
  	[
  		9316,
  		1,
  		"5"
  	],
  	[
  		9317,
  		1,
  		"6"
  	],
  	[
  		9318,
  		1,
  		"7"
  	],
  	[
  		9319,
  		1,
  		"8"
  	],
  	[
  		9320,
  		1,
  		"9"
  	],
  	[
  		9321,
  		1,
  		"10"
  	],
  	[
  		9322,
  		1,
  		"11"
  	],
  	[
  		9323,
  		1,
  		"12"
  	],
  	[
  		9324,
  		1,
  		"13"
  	],
  	[
  		9325,
  		1,
  		"14"
  	],
  	[
  		9326,
  		1,
  		"15"
  	],
  	[
  		9327,
  		1,
  		"16"
  	],
  	[
  		9328,
  		1,
  		"17"
  	],
  	[
  		9329,
  		1,
  		"18"
  	],
  	[
  		9330,
  		1,
  		"19"
  	],
  	[
  		9331,
  		1,
  		"20"
  	],
  	[
  		9332,
  		5,
  		"(1)"
  	],
  	[
  		9333,
  		5,
  		"(2)"
  	],
  	[
  		9334,
  		5,
  		"(3)"
  	],
  	[
  		9335,
  		5,
  		"(4)"
  	],
  	[
  		9336,
  		5,
  		"(5)"
  	],
  	[
  		9337,
  		5,
  		"(6)"
  	],
  	[
  		9338,
  		5,
  		"(7)"
  	],
  	[
  		9339,
  		5,
  		"(8)"
  	],
  	[
  		9340,
  		5,
  		"(9)"
  	],
  	[
  		9341,
  		5,
  		"(10)"
  	],
  	[
  		9342,
  		5,
  		"(11)"
  	],
  	[
  		9343,
  		5,
  		"(12)"
  	],
  	[
  		9344,
  		5,
  		"(13)"
  	],
  	[
  		9345,
  		5,
  		"(14)"
  	],
  	[
  		9346,
  		5,
  		"(15)"
  	],
  	[
  		9347,
  		5,
  		"(16)"
  	],
  	[
  		9348,
  		5,
  		"(17)"
  	],
  	[
  		9349,
  		5,
  		"(18)"
  	],
  	[
  		9350,
  		5,
  		"(19)"
  	],
  	[
  		9351,
  		5,
  		"(20)"
  	],
  	[
  		[
  			9352,
  			9371
  		],
  		3
  	],
  	[
  		9372,
  		5,
  		"(a)"
  	],
  	[
  		9373,
  		5,
  		"(b)"
  	],
  	[
  		9374,
  		5,
  		"(c)"
  	],
  	[
  		9375,
  		5,
  		"(d)"
  	],
  	[
  		9376,
  		5,
  		"(e)"
  	],
  	[
  		9377,
  		5,
  		"(f)"
  	],
  	[
  		9378,
  		5,
  		"(g)"
  	],
  	[
  		9379,
  		5,
  		"(h)"
  	],
  	[
  		9380,
  		5,
  		"(i)"
  	],
  	[
  		9381,
  		5,
  		"(j)"
  	],
  	[
  		9382,
  		5,
  		"(k)"
  	],
  	[
  		9383,
  		5,
  		"(l)"
  	],
  	[
  		9384,
  		5,
  		"(m)"
  	],
  	[
  		9385,
  		5,
  		"(n)"
  	],
  	[
  		9386,
  		5,
  		"(o)"
  	],
  	[
  		9387,
  		5,
  		"(p)"
  	],
  	[
  		9388,
  		5,
  		"(q)"
  	],
  	[
  		9389,
  		5,
  		"(r)"
  	],
  	[
  		9390,
  		5,
  		"(s)"
  	],
  	[
  		9391,
  		5,
  		"(t)"
  	],
  	[
  		9392,
  		5,
  		"(u)"
  	],
  	[
  		9393,
  		5,
  		"(v)"
  	],
  	[
  		9394,
  		5,
  		"(w)"
  	],
  	[
  		9395,
  		5,
  		"(x)"
  	],
  	[
  		9396,
  		5,
  		"(y)"
  	],
  	[
  		9397,
  		5,
  		"(z)"
  	],
  	[
  		9398,
  		1,
  		"a"
  	],
  	[
  		9399,
  		1,
  		"b"
  	],
  	[
  		9400,
  		1,
  		"c"
  	],
  	[
  		9401,
  		1,
  		"d"
  	],
  	[
  		9402,
  		1,
  		"e"
  	],
  	[
  		9403,
  		1,
  		"f"
  	],
  	[
  		9404,
  		1,
  		"g"
  	],
  	[
  		9405,
  		1,
  		"h"
  	],
  	[
  		9406,
  		1,
  		"i"
  	],
  	[
  		9407,
  		1,
  		"j"
  	],
  	[
  		9408,
  		1,
  		"k"
  	],
  	[
  		9409,
  		1,
  		"l"
  	],
  	[
  		9410,
  		1,
  		"m"
  	],
  	[
  		9411,
  		1,
  		"n"
  	],
  	[
  		9412,
  		1,
  		"o"
  	],
  	[
  		9413,
  		1,
  		"p"
  	],
  	[
  		9414,
  		1,
  		"q"
  	],
  	[
  		9415,
  		1,
  		"r"
  	],
  	[
  		9416,
  		1,
  		"s"
  	],
  	[
  		9417,
  		1,
  		"t"
  	],
  	[
  		9418,
  		1,
  		"u"
  	],
  	[
  		9419,
  		1,
  		"v"
  	],
  	[
  		9420,
  		1,
  		"w"
  	],
  	[
  		9421,
  		1,
  		"x"
  	],
  	[
  		9422,
  		1,
  		"y"
  	],
  	[
  		9423,
  		1,
  		"z"
  	],
  	[
  		9424,
  		1,
  		"a"
  	],
  	[
  		9425,
  		1,
  		"b"
  	],
  	[
  		9426,
  		1,
  		"c"
  	],
  	[
  		9427,
  		1,
  		"d"
  	],
  	[
  		9428,
  		1,
  		"e"
  	],
  	[
  		9429,
  		1,
  		"f"
  	],
  	[
  		9430,
  		1,
  		"g"
  	],
  	[
  		9431,
  		1,
  		"h"
  	],
  	[
  		9432,
  		1,
  		"i"
  	],
  	[
  		9433,
  		1,
  		"j"
  	],
  	[
  		9434,
  		1,
  		"k"
  	],
  	[
  		9435,
  		1,
  		"l"
  	],
  	[
  		9436,
  		1,
  		"m"
  	],
  	[
  		9437,
  		1,
  		"n"
  	],
  	[
  		9438,
  		1,
  		"o"
  	],
  	[
  		9439,
  		1,
  		"p"
  	],
  	[
  		9440,
  		1,
  		"q"
  	],
  	[
  		9441,
  		1,
  		"r"
  	],
  	[
  		9442,
  		1,
  		"s"
  	],
  	[
  		9443,
  		1,
  		"t"
  	],
  	[
  		9444,
  		1,
  		"u"
  	],
  	[
  		9445,
  		1,
  		"v"
  	],
  	[
  		9446,
  		1,
  		"w"
  	],
  	[
  		9447,
  		1,
  		"x"
  	],
  	[
  		9448,
  		1,
  		"y"
  	],
  	[
  		9449,
  		1,
  		"z"
  	],
  	[
  		9450,
  		1,
  		"0"
  	],
  	[
  		[
  			9451,
  			9470
  		],
  		2
  	],
  	[
  		9471,
  		2
  	],
  	[
  		[
  			9472,
  			9621
  		],
  		2
  	],
  	[
  		[
  			9622,
  			9631
  		],
  		2
  	],
  	[
  		[
  			9632,
  			9711
  		],
  		2
  	],
  	[
  		[
  			9712,
  			9719
  		],
  		2
  	],
  	[
  		[
  			9720,
  			9727
  		],
  		2
  	],
  	[
  		[
  			9728,
  			9747
  		],
  		2
  	],
  	[
  		[
  			9748,
  			9749
  		],
  		2
  	],
  	[
  		[
  			9750,
  			9751
  		],
  		2
  	],
  	[
  		9752,
  		2
  	],
  	[
  		9753,
  		2
  	],
  	[
  		[
  			9754,
  			9839
  		],
  		2
  	],
  	[
  		[
  			9840,
  			9841
  		],
  		2
  	],
  	[
  		[
  			9842,
  			9853
  		],
  		2
  	],
  	[
  		[
  			9854,
  			9855
  		],
  		2
  	],
  	[
  		[
  			9856,
  			9865
  		],
  		2
  	],
  	[
  		[
  			9866,
  			9873
  		],
  		2
  	],
  	[
  		[
  			9874,
  			9884
  		],
  		2
  	],
  	[
  		9885,
  		2
  	],
  	[
  		[
  			9886,
  			9887
  		],
  		2
  	],
  	[
  		[
  			9888,
  			9889
  		],
  		2
  	],
  	[
  		[
  			9890,
  			9905
  		],
  		2
  	],
  	[
  		9906,
  		2
  	],
  	[
  		[
  			9907,
  			9916
  		],
  		2
  	],
  	[
  		[
  			9917,
  			9919
  		],
  		2
  	],
  	[
  		[
  			9920,
  			9923
  		],
  		2
  	],
  	[
  		[
  			9924,
  			9933
  		],
  		2
  	],
  	[
  		9934,
  		2
  	],
  	[
  		[
  			9935,
  			9953
  		],
  		2
  	],
  	[
  		9954,
  		2
  	],
  	[
  		9955,
  		2
  	],
  	[
  		[
  			9956,
  			9959
  		],
  		2
  	],
  	[
  		[
  			9960,
  			9983
  		],
  		2
  	],
  	[
  		9984,
  		2
  	],
  	[
  		[
  			9985,
  			9988
  		],
  		2
  	],
  	[
  		9989,
  		2
  	],
  	[
  		[
  			9990,
  			9993
  		],
  		2
  	],
  	[
  		[
  			9994,
  			9995
  		],
  		2
  	],
  	[
  		[
  			9996,
  			10023
  		],
  		2
  	],
  	[
  		10024,
  		2
  	],
  	[
  		[
  			10025,
  			10059
  		],
  		2
  	],
  	[
  		10060,
  		2
  	],
  	[
  		10061,
  		2
  	],
  	[
  		10062,
  		2
  	],
  	[
  		[
  			10063,
  			10066
  		],
  		2
  	],
  	[
  		[
  			10067,
  			10069
  		],
  		2
  	],
  	[
  		10070,
  		2
  	],
  	[
  		10071,
  		2
  	],
  	[
  		[
  			10072,
  			10078
  		],
  		2
  	],
  	[
  		[
  			10079,
  			10080
  		],
  		2
  	],
  	[
  		[
  			10081,
  			10087
  		],
  		2
  	],
  	[
  		[
  			10088,
  			10101
  		],
  		2
  	],
  	[
  		[
  			10102,
  			10132
  		],
  		2
  	],
  	[
  		[
  			10133,
  			10135
  		],
  		2
  	],
  	[
  		[
  			10136,
  			10159
  		],
  		2
  	],
  	[
  		10160,
  		2
  	],
  	[
  		[
  			10161,
  			10174
  		],
  		2
  	],
  	[
  		10175,
  		2
  	],
  	[
  		[
  			10176,
  			10182
  		],
  		2
  	],
  	[
  		[
  			10183,
  			10186
  		],
  		2
  	],
  	[
  		10187,
  		2
  	],
  	[
  		10188,
  		2
  	],
  	[
  		10189,
  		2
  	],
  	[
  		[
  			10190,
  			10191
  		],
  		2
  	],
  	[
  		[
  			10192,
  			10219
  		],
  		2
  	],
  	[
  		[
  			10220,
  			10223
  		],
  		2
  	],
  	[
  		[
  			10224,
  			10239
  		],
  		2
  	],
  	[
  		[
  			10240,
  			10495
  		],
  		2
  	],
  	[
  		[
  			10496,
  			10763
  		],
  		2
  	],
  	[
  		10764,
  		1,
  		"∫∫∫∫"
  	],
  	[
  		[
  			10765,
  			10867
  		],
  		2
  	],
  	[
  		10868,
  		5,
  		"::="
  	],
  	[
  		10869,
  		5,
  		"=="
  	],
  	[
  		10870,
  		5,
  		"==="
  	],
  	[
  		[
  			10871,
  			10971
  		],
  		2
  	],
  	[
  		10972,
  		1,
  		"⫝̸"
  	],
  	[
  		[
  			10973,
  			11007
  		],
  		2
  	],
  	[
  		[
  			11008,
  			11021
  		],
  		2
  	],
  	[
  		[
  			11022,
  			11027
  		],
  		2
  	],
  	[
  		[
  			11028,
  			11034
  		],
  		2
  	],
  	[
  		[
  			11035,
  			11039
  		],
  		2
  	],
  	[
  		[
  			11040,
  			11043
  		],
  		2
  	],
  	[
  		[
  			11044,
  			11084
  		],
  		2
  	],
  	[
  		[
  			11085,
  			11087
  		],
  		2
  	],
  	[
  		[
  			11088,
  			11092
  		],
  		2
  	],
  	[
  		[
  			11093,
  			11097
  		],
  		2
  	],
  	[
  		[
  			11098,
  			11123
  		],
  		2
  	],
  	[
  		[
  			11124,
  			11125
  		],
  		3
  	],
  	[
  		[
  			11126,
  			11157
  		],
  		2
  	],
  	[
  		11158,
  		3
  	],
  	[
  		11159,
  		2
  	],
  	[
  		[
  			11160,
  			11193
  		],
  		2
  	],
  	[
  		[
  			11194,
  			11196
  		],
  		2
  	],
  	[
  		[
  			11197,
  			11208
  		],
  		2
  	],
  	[
  		11209,
  		2
  	],
  	[
  		[
  			11210,
  			11217
  		],
  		2
  	],
  	[
  		11218,
  		2
  	],
  	[
  		[
  			11219,
  			11243
  		],
  		2
  	],
  	[
  		[
  			11244,
  			11247
  		],
  		2
  	],
  	[
  		[
  			11248,
  			11262
  		],
  		2
  	],
  	[
  		11263,
  		2
  	],
  	[
  		11264,
  		1,
  		"ⰰ"
  	],
  	[
  		11265,
  		1,
  		"ⰱ"
  	],
  	[
  		11266,
  		1,
  		"ⰲ"
  	],
  	[
  		11267,
  		1,
  		"ⰳ"
  	],
  	[
  		11268,
  		1,
  		"ⰴ"
  	],
  	[
  		11269,
  		1,
  		"ⰵ"
  	],
  	[
  		11270,
  		1,
  		"ⰶ"
  	],
  	[
  		11271,
  		1,
  		"ⰷ"
  	],
  	[
  		11272,
  		1,
  		"ⰸ"
  	],
  	[
  		11273,
  		1,
  		"ⰹ"
  	],
  	[
  		11274,
  		1,
  		"ⰺ"
  	],
  	[
  		11275,
  		1,
  		"ⰻ"
  	],
  	[
  		11276,
  		1,
  		"ⰼ"
  	],
  	[
  		11277,
  		1,
  		"ⰽ"
  	],
  	[
  		11278,
  		1,
  		"ⰾ"
  	],
  	[
  		11279,
  		1,
  		"ⰿ"
  	],
  	[
  		11280,
  		1,
  		"ⱀ"
  	],
  	[
  		11281,
  		1,
  		"ⱁ"
  	],
  	[
  		11282,
  		1,
  		"ⱂ"
  	],
  	[
  		11283,
  		1,
  		"ⱃ"
  	],
  	[
  		11284,
  		1,
  		"ⱄ"
  	],
  	[
  		11285,
  		1,
  		"ⱅ"
  	],
  	[
  		11286,
  		1,
  		"ⱆ"
  	],
  	[
  		11287,
  		1,
  		"ⱇ"
  	],
  	[
  		11288,
  		1,
  		"ⱈ"
  	],
  	[
  		11289,
  		1,
  		"ⱉ"
  	],
  	[
  		11290,
  		1,
  		"ⱊ"
  	],
  	[
  		11291,
  		1,
  		"ⱋ"
  	],
  	[
  		11292,
  		1,
  		"ⱌ"
  	],
  	[
  		11293,
  		1,
  		"ⱍ"
  	],
  	[
  		11294,
  		1,
  		"ⱎ"
  	],
  	[
  		11295,
  		1,
  		"ⱏ"
  	],
  	[
  		11296,
  		1,
  		"ⱐ"
  	],
  	[
  		11297,
  		1,
  		"ⱑ"
  	],
  	[
  		11298,
  		1,
  		"ⱒ"
  	],
  	[
  		11299,
  		1,
  		"ⱓ"
  	],
  	[
  		11300,
  		1,
  		"ⱔ"
  	],
  	[
  		11301,
  		1,
  		"ⱕ"
  	],
  	[
  		11302,
  		1,
  		"ⱖ"
  	],
  	[
  		11303,
  		1,
  		"ⱗ"
  	],
  	[
  		11304,
  		1,
  		"ⱘ"
  	],
  	[
  		11305,
  		1,
  		"ⱙ"
  	],
  	[
  		11306,
  		1,
  		"ⱚ"
  	],
  	[
  		11307,
  		1,
  		"ⱛ"
  	],
  	[
  		11308,
  		1,
  		"ⱜ"
  	],
  	[
  		11309,
  		1,
  		"ⱝ"
  	],
  	[
  		11310,
  		1,
  		"ⱞ"
  	],
  	[
  		11311,
  		3
  	],
  	[
  		[
  			11312,
  			11358
  		],
  		2
  	],
  	[
  		11359,
  		3
  	],
  	[
  		11360,
  		1,
  		"ⱡ"
  	],
  	[
  		11361,
  		2
  	],
  	[
  		11362,
  		1,
  		"ɫ"
  	],
  	[
  		11363,
  		1,
  		"ᵽ"
  	],
  	[
  		11364,
  		1,
  		"ɽ"
  	],
  	[
  		[
  			11365,
  			11366
  		],
  		2
  	],
  	[
  		11367,
  		1,
  		"ⱨ"
  	],
  	[
  		11368,
  		2
  	],
  	[
  		11369,
  		1,
  		"ⱪ"
  	],
  	[
  		11370,
  		2
  	],
  	[
  		11371,
  		1,
  		"ⱬ"
  	],
  	[
  		11372,
  		2
  	],
  	[
  		11373,
  		1,
  		"ɑ"
  	],
  	[
  		11374,
  		1,
  		"ɱ"
  	],
  	[
  		11375,
  		1,
  		"ɐ"
  	],
  	[
  		11376,
  		1,
  		"ɒ"
  	],
  	[
  		11377,
  		2
  	],
  	[
  		11378,
  		1,
  		"ⱳ"
  	],
  	[
  		11379,
  		2
  	],
  	[
  		11380,
  		2
  	],
  	[
  		11381,
  		1,
  		"ⱶ"
  	],
  	[
  		[
  			11382,
  			11383
  		],
  		2
  	],
  	[
  		[
  			11384,
  			11387
  		],
  		2
  	],
  	[
  		11388,
  		1,
  		"j"
  	],
  	[
  		11389,
  		1,
  		"v"
  	],
  	[
  		11390,
  		1,
  		"ȿ"
  	],
  	[
  		11391,
  		1,
  		"ɀ"
  	],
  	[
  		11392,
  		1,
  		"ⲁ"
  	],
  	[
  		11393,
  		2
  	],
  	[
  		11394,
  		1,
  		"ⲃ"
  	],
  	[
  		11395,
  		2
  	],
  	[
  		11396,
  		1,
  		"ⲅ"
  	],
  	[
  		11397,
  		2
  	],
  	[
  		11398,
  		1,
  		"ⲇ"
  	],
  	[
  		11399,
  		2
  	],
  	[
  		11400,
  		1,
  		"ⲉ"
  	],
  	[
  		11401,
  		2
  	],
  	[
  		11402,
  		1,
  		"ⲋ"
  	],
  	[
  		11403,
  		2
  	],
  	[
  		11404,
  		1,
  		"ⲍ"
  	],
  	[
  		11405,
  		2
  	],
  	[
  		11406,
  		1,
  		"ⲏ"
  	],
  	[
  		11407,
  		2
  	],
  	[
  		11408,
  		1,
  		"ⲑ"
  	],
  	[
  		11409,
  		2
  	],
  	[
  		11410,
  		1,
  		"ⲓ"
  	],
  	[
  		11411,
  		2
  	],
  	[
  		11412,
  		1,
  		"ⲕ"
  	],
  	[
  		11413,
  		2
  	],
  	[
  		11414,
  		1,
  		"ⲗ"
  	],
  	[
  		11415,
  		2
  	],
  	[
  		11416,
  		1,
  		"ⲙ"
  	],
  	[
  		11417,
  		2
  	],
  	[
  		11418,
  		1,
  		"ⲛ"
  	],
  	[
  		11419,
  		2
  	],
  	[
  		11420,
  		1,
  		"ⲝ"
  	],
  	[
  		11421,
  		2
  	],
  	[
  		11422,
  		1,
  		"ⲟ"
  	],
  	[
  		11423,
  		2
  	],
  	[
  		11424,
  		1,
  		"ⲡ"
  	],
  	[
  		11425,
  		2
  	],
  	[
  		11426,
  		1,
  		"ⲣ"
  	],
  	[
  		11427,
  		2
  	],
  	[
  		11428,
  		1,
  		"ⲥ"
  	],
  	[
  		11429,
  		2
  	],
  	[
  		11430,
  		1,
  		"ⲧ"
  	],
  	[
  		11431,
  		2
  	],
  	[
  		11432,
  		1,
  		"ⲩ"
  	],
  	[
  		11433,
  		2
  	],
  	[
  		11434,
  		1,
  		"ⲫ"
  	],
  	[
  		11435,
  		2
  	],
  	[
  		11436,
  		1,
  		"ⲭ"
  	],
  	[
  		11437,
  		2
  	],
  	[
  		11438,
  		1,
  		"ⲯ"
  	],
  	[
  		11439,
  		2
  	],
  	[
  		11440,
  		1,
  		"ⲱ"
  	],
  	[
  		11441,
  		2
  	],
  	[
  		11442,
  		1,
  		"ⲳ"
  	],
  	[
  		11443,
  		2
  	],
  	[
  		11444,
  		1,
  		"ⲵ"
  	],
  	[
  		11445,
  		2
  	],
  	[
  		11446,
  		1,
  		"ⲷ"
  	],
  	[
  		11447,
  		2
  	],
  	[
  		11448,
  		1,
  		"ⲹ"
  	],
  	[
  		11449,
  		2
  	],
  	[
  		11450,
  		1,
  		"ⲻ"
  	],
  	[
  		11451,
  		2
  	],
  	[
  		11452,
  		1,
  		"ⲽ"
  	],
  	[
  		11453,
  		2
  	],
  	[
  		11454,
  		1,
  		"ⲿ"
  	],
  	[
  		11455,
  		2
  	],
  	[
  		11456,
  		1,
  		"ⳁ"
  	],
  	[
  		11457,
  		2
  	],
  	[
  		11458,
  		1,
  		"ⳃ"
  	],
  	[
  		11459,
  		2
  	],
  	[
  		11460,
  		1,
  		"ⳅ"
  	],
  	[
  		11461,
  		2
  	],
  	[
  		11462,
  		1,
  		"ⳇ"
  	],
  	[
  		11463,
  		2
  	],
  	[
  		11464,
  		1,
  		"ⳉ"
  	],
  	[
  		11465,
  		2
  	],
  	[
  		11466,
  		1,
  		"ⳋ"
  	],
  	[
  		11467,
  		2
  	],
  	[
  		11468,
  		1,
  		"ⳍ"
  	],
  	[
  		11469,
  		2
  	],
  	[
  		11470,
  		1,
  		"ⳏ"
  	],
  	[
  		11471,
  		2
  	],
  	[
  		11472,
  		1,
  		"ⳑ"
  	],
  	[
  		11473,
  		2
  	],
  	[
  		11474,
  		1,
  		"ⳓ"
  	],
  	[
  		11475,
  		2
  	],
  	[
  		11476,
  		1,
  		"ⳕ"
  	],
  	[
  		11477,
  		2
  	],
  	[
  		11478,
  		1,
  		"ⳗ"
  	],
  	[
  		11479,
  		2
  	],
  	[
  		11480,
  		1,
  		"ⳙ"
  	],
  	[
  		11481,
  		2
  	],
  	[
  		11482,
  		1,
  		"ⳛ"
  	],
  	[
  		11483,
  		2
  	],
  	[
  		11484,
  		1,
  		"ⳝ"
  	],
  	[
  		11485,
  		2
  	],
  	[
  		11486,
  		1,
  		"ⳟ"
  	],
  	[
  		11487,
  		2
  	],
  	[
  		11488,
  		1,
  		"ⳡ"
  	],
  	[
  		11489,
  		2
  	],
  	[
  		11490,
  		1,
  		"ⳣ"
  	],
  	[
  		[
  			11491,
  			11492
  		],
  		2
  	],
  	[
  		[
  			11493,
  			11498
  		],
  		2
  	],
  	[
  		11499,
  		1,
  		"ⳬ"
  	],
  	[
  		11500,
  		2
  	],
  	[
  		11501,
  		1,
  		"ⳮ"
  	],
  	[
  		[
  			11502,
  			11505
  		],
  		2
  	],
  	[
  		11506,
  		1,
  		"ⳳ"
  	],
  	[
  		11507,
  		2
  	],
  	[
  		[
  			11508,
  			11512
  		],
  		3
  	],
  	[
  		[
  			11513,
  			11519
  		],
  		2
  	],
  	[
  		[
  			11520,
  			11557
  		],
  		2
  	],
  	[
  		11558,
  		3
  	],
  	[
  		11559,
  		2
  	],
  	[
  		[
  			11560,
  			11564
  		],
  		3
  	],
  	[
  		11565,
  		2
  	],
  	[
  		[
  			11566,
  			11567
  		],
  		3
  	],
  	[
  		[
  			11568,
  			11621
  		],
  		2
  	],
  	[
  		[
  			11622,
  			11623
  		],
  		2
  	],
  	[
  		[
  			11624,
  			11630
  		],
  		3
  	],
  	[
  		11631,
  		1,
  		"ⵡ"
  	],
  	[
  		11632,
  		2
  	],
  	[
  		[
  			11633,
  			11646
  		],
  		3
  	],
  	[
  		11647,
  		2
  	],
  	[
  		[
  			11648,
  			11670
  		],
  		2
  	],
  	[
  		[
  			11671,
  			11679
  		],
  		3
  	],
  	[
  		[
  			11680,
  			11686
  		],
  		2
  	],
  	[
  		11687,
  		3
  	],
  	[
  		[
  			11688,
  			11694
  		],
  		2
  	],
  	[
  		11695,
  		3
  	],
  	[
  		[
  			11696,
  			11702
  		],
  		2
  	],
  	[
  		11703,
  		3
  	],
  	[
  		[
  			11704,
  			11710
  		],
  		2
  	],
  	[
  		11711,
  		3
  	],
  	[
  		[
  			11712,
  			11718
  		],
  		2
  	],
  	[
  		11719,
  		3
  	],
  	[
  		[
  			11720,
  			11726
  		],
  		2
  	],
  	[
  		11727,
  		3
  	],
  	[
  		[
  			11728,
  			11734
  		],
  		2
  	],
  	[
  		11735,
  		3
  	],
  	[
  		[
  			11736,
  			11742
  		],
  		2
  	],
  	[
  		11743,
  		3
  	],
  	[
  		[
  			11744,
  			11775
  		],
  		2
  	],
  	[
  		[
  			11776,
  			11799
  		],
  		2
  	],
  	[
  		[
  			11800,
  			11803
  		],
  		2
  	],
  	[
  		[
  			11804,
  			11805
  		],
  		2
  	],
  	[
  		[
  			11806,
  			11822
  		],
  		2
  	],
  	[
  		11823,
  		2
  	],
  	[
  		11824,
  		2
  	],
  	[
  		11825,
  		2
  	],
  	[
  		[
  			11826,
  			11835
  		],
  		2
  	],
  	[
  		[
  			11836,
  			11842
  		],
  		2
  	],
  	[
  		[
  			11843,
  			11844
  		],
  		2
  	],
  	[
  		[
  			11845,
  			11849
  		],
  		2
  	],
  	[
  		[
  			11850,
  			11854
  		],
  		2
  	],
  	[
  		11855,
  		2
  	],
  	[
  		[
  			11856,
  			11858
  		],
  		2
  	],
  	[
  		[
  			11859,
  			11903
  		],
  		3
  	],
  	[
  		[
  			11904,
  			11929
  		],
  		2
  	],
  	[
  		11930,
  		3
  	],
  	[
  		[
  			11931,
  			11934
  		],
  		2
  	],
  	[
  		11935,
  		1,
  		"母"
  	],
  	[
  		[
  			11936,
  			12018
  		],
  		2
  	],
  	[
  		12019,
  		1,
  		"龟"
  	],
  	[
  		[
  			12020,
  			12031
  		],
  		3
  	],
  	[
  		12032,
  		1,
  		"一"
  	],
  	[
  		12033,
  		1,
  		"丨"
  	],
  	[
  		12034,
  		1,
  		"丶"
  	],
  	[
  		12035,
  		1,
  		"丿"
  	],
  	[
  		12036,
  		1,
  		"乙"
  	],
  	[
  		12037,
  		1,
  		"亅"
  	],
  	[
  		12038,
  		1,
  		"二"
  	],
  	[
  		12039,
  		1,
  		"亠"
  	],
  	[
  		12040,
  		1,
  		"人"
  	],
  	[
  		12041,
  		1,
  		"儿"
  	],
  	[
  		12042,
  		1,
  		"入"
  	],
  	[
  		12043,
  		1,
  		"八"
  	],
  	[
  		12044,
  		1,
  		"冂"
  	],
  	[
  		12045,
  		1,
  		"冖"
  	],
  	[
  		12046,
  		1,
  		"冫"
  	],
  	[
  		12047,
  		1,
  		"几"
  	],
  	[
  		12048,
  		1,
  		"凵"
  	],
  	[
  		12049,
  		1,
  		"刀"
  	],
  	[
  		12050,
  		1,
  		"力"
  	],
  	[
  		12051,
  		1,
  		"勹"
  	],
  	[
  		12052,
  		1,
  		"匕"
  	],
  	[
  		12053,
  		1,
  		"匚"
  	],
  	[
  		12054,
  		1,
  		"匸"
  	],
  	[
  		12055,
  		1,
  		"十"
  	],
  	[
  		12056,
  		1,
  		"卜"
  	],
  	[
  		12057,
  		1,
  		"卩"
  	],
  	[
  		12058,
  		1,
  		"厂"
  	],
  	[
  		12059,
  		1,
  		"厶"
  	],
  	[
  		12060,
  		1,
  		"又"
  	],
  	[
  		12061,
  		1,
  		"口"
  	],
  	[
  		12062,
  		1,
  		"囗"
  	],
  	[
  		12063,
  		1,
  		"土"
  	],
  	[
  		12064,
  		1,
  		"士"
  	],
  	[
  		12065,
  		1,
  		"夂"
  	],
  	[
  		12066,
  		1,
  		"夊"
  	],
  	[
  		12067,
  		1,
  		"夕"
  	],
  	[
  		12068,
  		1,
  		"大"
  	],
  	[
  		12069,
  		1,
  		"女"
  	],
  	[
  		12070,
  		1,
  		"子"
  	],
  	[
  		12071,
  		1,
  		"宀"
  	],
  	[
  		12072,
  		1,
  		"寸"
  	],
  	[
  		12073,
  		1,
  		"小"
  	],
  	[
  		12074,
  		1,
  		"尢"
  	],
  	[
  		12075,
  		1,
  		"尸"
  	],
  	[
  		12076,
  		1,
  		"屮"
  	],
  	[
  		12077,
  		1,
  		"山"
  	],
  	[
  		12078,
  		1,
  		"巛"
  	],
  	[
  		12079,
  		1,
  		"工"
  	],
  	[
  		12080,
  		1,
  		"己"
  	],
  	[
  		12081,
  		1,
  		"巾"
  	],
  	[
  		12082,
  		1,
  		"干"
  	],
  	[
  		12083,
  		1,
  		"幺"
  	],
  	[
  		12084,
  		1,
  		"广"
  	],
  	[
  		12085,
  		1,
  		"廴"
  	],
  	[
  		12086,
  		1,
  		"廾"
  	],
  	[
  		12087,
  		1,
  		"弋"
  	],
  	[
  		12088,
  		1,
  		"弓"
  	],
  	[
  		12089,
  		1,
  		"彐"
  	],
  	[
  		12090,
  		1,
  		"彡"
  	],
  	[
  		12091,
  		1,
  		"彳"
  	],
  	[
  		12092,
  		1,
  		"心"
  	],
  	[
  		12093,
  		1,
  		"戈"
  	],
  	[
  		12094,
  		1,
  		"戶"
  	],
  	[
  		12095,
  		1,
  		"手"
  	],
  	[
  		12096,
  		1,
  		"支"
  	],
  	[
  		12097,
  		1,
  		"攴"
  	],
  	[
  		12098,
  		1,
  		"文"
  	],
  	[
  		12099,
  		1,
  		"斗"
  	],
  	[
  		12100,
  		1,
  		"斤"
  	],
  	[
  		12101,
  		1,
  		"方"
  	],
  	[
  		12102,
  		1,
  		"无"
  	],
  	[
  		12103,
  		1,
  		"日"
  	],
  	[
  		12104,
  		1,
  		"曰"
  	],
  	[
  		12105,
  		1,
  		"月"
  	],
  	[
  		12106,
  		1,
  		"木"
  	],
  	[
  		12107,
  		1,
  		"欠"
  	],
  	[
  		12108,
  		1,
  		"止"
  	],
  	[
  		12109,
  		1,
  		"歹"
  	],
  	[
  		12110,
  		1,
  		"殳"
  	],
  	[
  		12111,
  		1,
  		"毋"
  	],
  	[
  		12112,
  		1,
  		"比"
  	],
  	[
  		12113,
  		1,
  		"毛"
  	],
  	[
  		12114,
  		1,
  		"氏"
  	],
  	[
  		12115,
  		1,
  		"气"
  	],
  	[
  		12116,
  		1,
  		"水"
  	],
  	[
  		12117,
  		1,
  		"火"
  	],
  	[
  		12118,
  		1,
  		"爪"
  	],
  	[
  		12119,
  		1,
  		"父"
  	],
  	[
  		12120,
  		1,
  		"爻"
  	],
  	[
  		12121,
  		1,
  		"爿"
  	],
  	[
  		12122,
  		1,
  		"片"
  	],
  	[
  		12123,
  		1,
  		"牙"
  	],
  	[
  		12124,
  		1,
  		"牛"
  	],
  	[
  		12125,
  		1,
  		"犬"
  	],
  	[
  		12126,
  		1,
  		"玄"
  	],
  	[
  		12127,
  		1,
  		"玉"
  	],
  	[
  		12128,
  		1,
  		"瓜"
  	],
  	[
  		12129,
  		1,
  		"瓦"
  	],
  	[
  		12130,
  		1,
  		"甘"
  	],
  	[
  		12131,
  		1,
  		"生"
  	],
  	[
  		12132,
  		1,
  		"用"
  	],
  	[
  		12133,
  		1,
  		"田"
  	],
  	[
  		12134,
  		1,
  		"疋"
  	],
  	[
  		12135,
  		1,
  		"疒"
  	],
  	[
  		12136,
  		1,
  		"癶"
  	],
  	[
  		12137,
  		1,
  		"白"
  	],
  	[
  		12138,
  		1,
  		"皮"
  	],
  	[
  		12139,
  		1,
  		"皿"
  	],
  	[
  		12140,
  		1,
  		"目"
  	],
  	[
  		12141,
  		1,
  		"矛"
  	],
  	[
  		12142,
  		1,
  		"矢"
  	],
  	[
  		12143,
  		1,
  		"石"
  	],
  	[
  		12144,
  		1,
  		"示"
  	],
  	[
  		12145,
  		1,
  		"禸"
  	],
  	[
  		12146,
  		1,
  		"禾"
  	],
  	[
  		12147,
  		1,
  		"穴"
  	],
  	[
  		12148,
  		1,
  		"立"
  	],
  	[
  		12149,
  		1,
  		"竹"
  	],
  	[
  		12150,
  		1,
  		"米"
  	],
  	[
  		12151,
  		1,
  		"糸"
  	],
  	[
  		12152,
  		1,
  		"缶"
  	],
  	[
  		12153,
  		1,
  		"网"
  	],
  	[
  		12154,
  		1,
  		"羊"
  	],
  	[
  		12155,
  		1,
  		"羽"
  	],
  	[
  		12156,
  		1,
  		"老"
  	],
  	[
  		12157,
  		1,
  		"而"
  	],
  	[
  		12158,
  		1,
  		"耒"
  	],
  	[
  		12159,
  		1,
  		"耳"
  	],
  	[
  		12160,
  		1,
  		"聿"
  	],
  	[
  		12161,
  		1,
  		"肉"
  	],
  	[
  		12162,
  		1,
  		"臣"
  	],
  	[
  		12163,
  		1,
  		"自"
  	],
  	[
  		12164,
  		1,
  		"至"
  	],
  	[
  		12165,
  		1,
  		"臼"
  	],
  	[
  		12166,
  		1,
  		"舌"
  	],
  	[
  		12167,
  		1,
  		"舛"
  	],
  	[
  		12168,
  		1,
  		"舟"
  	],
  	[
  		12169,
  		1,
  		"艮"
  	],
  	[
  		12170,
  		1,
  		"色"
  	],
  	[
  		12171,
  		1,
  		"艸"
  	],
  	[
  		12172,
  		1,
  		"虍"
  	],
  	[
  		12173,
  		1,
  		"虫"
  	],
  	[
  		12174,
  		1,
  		"血"
  	],
  	[
  		12175,
  		1,
  		"行"
  	],
  	[
  		12176,
  		1,
  		"衣"
  	],
  	[
  		12177,
  		1,
  		"襾"
  	],
  	[
  		12178,
  		1,
  		"見"
  	],
  	[
  		12179,
  		1,
  		"角"
  	],
  	[
  		12180,
  		1,
  		"言"
  	],
  	[
  		12181,
  		1,
  		"谷"
  	],
  	[
  		12182,
  		1,
  		"豆"
  	],
  	[
  		12183,
  		1,
  		"豕"
  	],
  	[
  		12184,
  		1,
  		"豸"
  	],
  	[
  		12185,
  		1,
  		"貝"
  	],
  	[
  		12186,
  		1,
  		"赤"
  	],
  	[
  		12187,
  		1,
  		"走"
  	],
  	[
  		12188,
  		1,
  		"足"
  	],
  	[
  		12189,
  		1,
  		"身"
  	],
  	[
  		12190,
  		1,
  		"車"
  	],
  	[
  		12191,
  		1,
  		"辛"
  	],
  	[
  		12192,
  		1,
  		"辰"
  	],
  	[
  		12193,
  		1,
  		"辵"
  	],
  	[
  		12194,
  		1,
  		"邑"
  	],
  	[
  		12195,
  		1,
  		"酉"
  	],
  	[
  		12196,
  		1,
  		"釆"
  	],
  	[
  		12197,
  		1,
  		"里"
  	],
  	[
  		12198,
  		1,
  		"金"
  	],
  	[
  		12199,
  		1,
  		"長"
  	],
  	[
  		12200,
  		1,
  		"門"
  	],
  	[
  		12201,
  		1,
  		"阜"
  	],
  	[
  		12202,
  		1,
  		"隶"
  	],
  	[
  		12203,
  		1,
  		"隹"
  	],
  	[
  		12204,
  		1,
  		"雨"
  	],
  	[
  		12205,
  		1,
  		"靑"
  	],
  	[
  		12206,
  		1,
  		"非"
  	],
  	[
  		12207,
  		1,
  		"面"
  	],
  	[
  		12208,
  		1,
  		"革"
  	],
  	[
  		12209,
  		1,
  		"韋"
  	],
  	[
  		12210,
  		1,
  		"韭"
  	],
  	[
  		12211,
  		1,
  		"音"
  	],
  	[
  		12212,
  		1,
  		"頁"
  	],
  	[
  		12213,
  		1,
  		"風"
  	],
  	[
  		12214,
  		1,
  		"飛"
  	],
  	[
  		12215,
  		1,
  		"食"
  	],
  	[
  		12216,
  		1,
  		"首"
  	],
  	[
  		12217,
  		1,
  		"香"
  	],
  	[
  		12218,
  		1,
  		"馬"
  	],
  	[
  		12219,
  		1,
  		"骨"
  	],
  	[
  		12220,
  		1,
  		"高"
  	],
  	[
  		12221,
  		1,
  		"髟"
  	],
  	[
  		12222,
  		1,
  		"鬥"
  	],
  	[
  		12223,
  		1,
  		"鬯"
  	],
  	[
  		12224,
  		1,
  		"鬲"
  	],
  	[
  		12225,
  		1,
  		"鬼"
  	],
  	[
  		12226,
  		1,
  		"魚"
  	],
  	[
  		12227,
  		1,
  		"鳥"
  	],
  	[
  		12228,
  		1,
  		"鹵"
  	],
  	[
  		12229,
  		1,
  		"鹿"
  	],
  	[
  		12230,
  		1,
  		"麥"
  	],
  	[
  		12231,
  		1,
  		"麻"
  	],
  	[
  		12232,
  		1,
  		"黃"
  	],
  	[
  		12233,
  		1,
  		"黍"
  	],
  	[
  		12234,
  		1,
  		"黑"
  	],
  	[
  		12235,
  		1,
  		"黹"
  	],
  	[
  		12236,
  		1,
  		"黽"
  	],
  	[
  		12237,
  		1,
  		"鼎"
  	],
  	[
  		12238,
  		1,
  		"鼓"
  	],
  	[
  		12239,
  		1,
  		"鼠"
  	],
  	[
  		12240,
  		1,
  		"鼻"
  	],
  	[
  		12241,
  		1,
  		"齊"
  	],
  	[
  		12242,
  		1,
  		"齒"
  	],
  	[
  		12243,
  		1,
  		"龍"
  	],
  	[
  		12244,
  		1,
  		"龜"
  	],
  	[
  		12245,
  		1,
  		"龠"
  	],
  	[
  		[
  			12246,
  			12271
  		],
  		3
  	],
  	[
  		[
  			12272,
  			12283
  		],
  		3
  	],
  	[
  		[
  			12284,
  			12287
  		],
  		3
  	],
  	[
  		12288,
  		5,
  		" "
  	],
  	[
  		12289,
  		2
  	],
  	[
  		12290,
  		1,
  		"."
  	],
  	[
  		[
  			12291,
  			12292
  		],
  		2
  	],
  	[
  		[
  			12293,
  			12295
  		],
  		2
  	],
  	[
  		[
  			12296,
  			12329
  		],
  		2
  	],
  	[
  		[
  			12330,
  			12333
  		],
  		2
  	],
  	[
  		[
  			12334,
  			12341
  		],
  		2
  	],
  	[
  		12342,
  		1,
  		"〒"
  	],
  	[
  		12343,
  		2
  	],
  	[
  		12344,
  		1,
  		"十"
  	],
  	[
  		12345,
  		1,
  		"卄"
  	],
  	[
  		12346,
  		1,
  		"卅"
  	],
  	[
  		12347,
  		2
  	],
  	[
  		12348,
  		2
  	],
  	[
  		12349,
  		2
  	],
  	[
  		12350,
  		2
  	],
  	[
  		12351,
  		2
  	],
  	[
  		12352,
  		3
  	],
  	[
  		[
  			12353,
  			12436
  		],
  		2
  	],
  	[
  		[
  			12437,
  			12438
  		],
  		2
  	],
  	[
  		[
  			12439,
  			12440
  		],
  		3
  	],
  	[
  		[
  			12441,
  			12442
  		],
  		2
  	],
  	[
  		12443,
  		5,
  		" ゙"
  	],
  	[
  		12444,
  		5,
  		" ゚"
  	],
  	[
  		[
  			12445,
  			12446
  		],
  		2
  	],
  	[
  		12447,
  		1,
  		"より"
  	],
  	[
  		12448,
  		2
  	],
  	[
  		[
  			12449,
  			12542
  		],
  		2
  	],
  	[
  		12543,
  		1,
  		"コト"
  	],
  	[
  		[
  			12544,
  			12548
  		],
  		3
  	],
  	[
  		[
  			12549,
  			12588
  		],
  		2
  	],
  	[
  		12589,
  		2
  	],
  	[
  		12590,
  		2
  	],
  	[
  		12591,
  		2
  	],
  	[
  		12592,
  		3
  	],
  	[
  		12593,
  		1,
  		"ᄀ"
  	],
  	[
  		12594,
  		1,
  		"ᄁ"
  	],
  	[
  		12595,
  		1,
  		"ᆪ"
  	],
  	[
  		12596,
  		1,
  		"ᄂ"
  	],
  	[
  		12597,
  		1,
  		"ᆬ"
  	],
  	[
  		12598,
  		1,
  		"ᆭ"
  	],
  	[
  		12599,
  		1,
  		"ᄃ"
  	],
  	[
  		12600,
  		1,
  		"ᄄ"
  	],
  	[
  		12601,
  		1,
  		"ᄅ"
  	],
  	[
  		12602,
  		1,
  		"ᆰ"
  	],
  	[
  		12603,
  		1,
  		"ᆱ"
  	],
  	[
  		12604,
  		1,
  		"ᆲ"
  	],
  	[
  		12605,
  		1,
  		"ᆳ"
  	],
  	[
  		12606,
  		1,
  		"ᆴ"
  	],
  	[
  		12607,
  		1,
  		"ᆵ"
  	],
  	[
  		12608,
  		1,
  		"ᄚ"
  	],
  	[
  		12609,
  		1,
  		"ᄆ"
  	],
  	[
  		12610,
  		1,
  		"ᄇ"
  	],
  	[
  		12611,
  		1,
  		"ᄈ"
  	],
  	[
  		12612,
  		1,
  		"ᄡ"
  	],
  	[
  		12613,
  		1,
  		"ᄉ"
  	],
  	[
  		12614,
  		1,
  		"ᄊ"
  	],
  	[
  		12615,
  		1,
  		"ᄋ"
  	],
  	[
  		12616,
  		1,
  		"ᄌ"
  	],
  	[
  		12617,
  		1,
  		"ᄍ"
  	],
  	[
  		12618,
  		1,
  		"ᄎ"
  	],
  	[
  		12619,
  		1,
  		"ᄏ"
  	],
  	[
  		12620,
  		1,
  		"ᄐ"
  	],
  	[
  		12621,
  		1,
  		"ᄑ"
  	],
  	[
  		12622,
  		1,
  		"ᄒ"
  	],
  	[
  		12623,
  		1,
  		"ᅡ"
  	],
  	[
  		12624,
  		1,
  		"ᅢ"
  	],
  	[
  		12625,
  		1,
  		"ᅣ"
  	],
  	[
  		12626,
  		1,
  		"ᅤ"
  	],
  	[
  		12627,
  		1,
  		"ᅥ"
  	],
  	[
  		12628,
  		1,
  		"ᅦ"
  	],
  	[
  		12629,
  		1,
  		"ᅧ"
  	],
  	[
  		12630,
  		1,
  		"ᅨ"
  	],
  	[
  		12631,
  		1,
  		"ᅩ"
  	],
  	[
  		12632,
  		1,
  		"ᅪ"
  	],
  	[
  		12633,
  		1,
  		"ᅫ"
  	],
  	[
  		12634,
  		1,
  		"ᅬ"
  	],
  	[
  		12635,
  		1,
  		"ᅭ"
  	],
  	[
  		12636,
  		1,
  		"ᅮ"
  	],
  	[
  		12637,
  		1,
  		"ᅯ"
  	],
  	[
  		12638,
  		1,
  		"ᅰ"
  	],
  	[
  		12639,
  		1,
  		"ᅱ"
  	],
  	[
  		12640,
  		1,
  		"ᅲ"
  	],
  	[
  		12641,
  		1,
  		"ᅳ"
  	],
  	[
  		12642,
  		1,
  		"ᅴ"
  	],
  	[
  		12643,
  		1,
  		"ᅵ"
  	],
  	[
  		12644,
  		3
  	],
  	[
  		12645,
  		1,
  		"ᄔ"
  	],
  	[
  		12646,
  		1,
  		"ᄕ"
  	],
  	[
  		12647,
  		1,
  		"ᇇ"
  	],
  	[
  		12648,
  		1,
  		"ᇈ"
  	],
  	[
  		12649,
  		1,
  		"ᇌ"
  	],
  	[
  		12650,
  		1,
  		"ᇎ"
  	],
  	[
  		12651,
  		1,
  		"ᇓ"
  	],
  	[
  		12652,
  		1,
  		"ᇗ"
  	],
  	[
  		12653,
  		1,
  		"ᇙ"
  	],
  	[
  		12654,
  		1,
  		"ᄜ"
  	],
  	[
  		12655,
  		1,
  		"ᇝ"
  	],
  	[
  		12656,
  		1,
  		"ᇟ"
  	],
  	[
  		12657,
  		1,
  		"ᄝ"
  	],
  	[
  		12658,
  		1,
  		"ᄞ"
  	],
  	[
  		12659,
  		1,
  		"ᄠ"
  	],
  	[
  		12660,
  		1,
  		"ᄢ"
  	],
  	[
  		12661,
  		1,
  		"ᄣ"
  	],
  	[
  		12662,
  		1,
  		"ᄧ"
  	],
  	[
  		12663,
  		1,
  		"ᄩ"
  	],
  	[
  		12664,
  		1,
  		"ᄫ"
  	],
  	[
  		12665,
  		1,
  		"ᄬ"
  	],
  	[
  		12666,
  		1,
  		"ᄭ"
  	],
  	[
  		12667,
  		1,
  		"ᄮ"
  	],
  	[
  		12668,
  		1,
  		"ᄯ"
  	],
  	[
  		12669,
  		1,
  		"ᄲ"
  	],
  	[
  		12670,
  		1,
  		"ᄶ"
  	],
  	[
  		12671,
  		1,
  		"ᅀ"
  	],
  	[
  		12672,
  		1,
  		"ᅇ"
  	],
  	[
  		12673,
  		1,
  		"ᅌ"
  	],
  	[
  		12674,
  		1,
  		"ᇱ"
  	],
  	[
  		12675,
  		1,
  		"ᇲ"
  	],
  	[
  		12676,
  		1,
  		"ᅗ"
  	],
  	[
  		12677,
  		1,
  		"ᅘ"
  	],
  	[
  		12678,
  		1,
  		"ᅙ"
  	],
  	[
  		12679,
  		1,
  		"ᆄ"
  	],
  	[
  		12680,
  		1,
  		"ᆅ"
  	],
  	[
  		12681,
  		1,
  		"ᆈ"
  	],
  	[
  		12682,
  		1,
  		"ᆑ"
  	],
  	[
  		12683,
  		1,
  		"ᆒ"
  	],
  	[
  		12684,
  		1,
  		"ᆔ"
  	],
  	[
  		12685,
  		1,
  		"ᆞ"
  	],
  	[
  		12686,
  		1,
  		"ᆡ"
  	],
  	[
  		12687,
  		3
  	],
  	[
  		[
  			12688,
  			12689
  		],
  		2
  	],
  	[
  		12690,
  		1,
  		"一"
  	],
  	[
  		12691,
  		1,
  		"二"
  	],
  	[
  		12692,
  		1,
  		"三"
  	],
  	[
  		12693,
  		1,
  		"四"
  	],
  	[
  		12694,
  		1,
  		"上"
  	],
  	[
  		12695,
  		1,
  		"中"
  	],
  	[
  		12696,
  		1,
  		"下"
  	],
  	[
  		12697,
  		1,
  		"甲"
  	],
  	[
  		12698,
  		1,
  		"乙"
  	],
  	[
  		12699,
  		1,
  		"丙"
  	],
  	[
  		12700,
  		1,
  		"丁"
  	],
  	[
  		12701,
  		1,
  		"天"
  	],
  	[
  		12702,
  		1,
  		"地"
  	],
  	[
  		12703,
  		1,
  		"人"
  	],
  	[
  		[
  			12704,
  			12727
  		],
  		2
  	],
  	[
  		[
  			12728,
  			12730
  		],
  		2
  	],
  	[
  		[
  			12731,
  			12735
  		],
  		2
  	],
  	[
  		[
  			12736,
  			12751
  		],
  		2
  	],
  	[
  		[
  			12752,
  			12771
  		],
  		2
  	],
  	[
  		[
  			12772,
  			12783
  		],
  		3
  	],
  	[
  		[
  			12784,
  			12799
  		],
  		2
  	],
  	[
  		12800,
  		5,
  		"(ᄀ)"
  	],
  	[
  		12801,
  		5,
  		"(ᄂ)"
  	],
  	[
  		12802,
  		5,
  		"(ᄃ)"
  	],
  	[
  		12803,
  		5,
  		"(ᄅ)"
  	],
  	[
  		12804,
  		5,
  		"(ᄆ)"
  	],
  	[
  		12805,
  		5,
  		"(ᄇ)"
  	],
  	[
  		12806,
  		5,
  		"(ᄉ)"
  	],
  	[
  		12807,
  		5,
  		"(ᄋ)"
  	],
  	[
  		12808,
  		5,
  		"(ᄌ)"
  	],
  	[
  		12809,
  		5,
  		"(ᄎ)"
  	],
  	[
  		12810,
  		5,
  		"(ᄏ)"
  	],
  	[
  		12811,
  		5,
  		"(ᄐ)"
  	],
  	[
  		12812,
  		5,
  		"(ᄑ)"
  	],
  	[
  		12813,
  		5,
  		"(ᄒ)"
  	],
  	[
  		12814,
  		5,
  		"(가)"
  	],
  	[
  		12815,
  		5,
  		"(나)"
  	],
  	[
  		12816,
  		5,
  		"(다)"
  	],
  	[
  		12817,
  		5,
  		"(라)"
  	],
  	[
  		12818,
  		5,
  		"(마)"
  	],
  	[
  		12819,
  		5,
  		"(바)"
  	],
  	[
  		12820,
  		5,
  		"(사)"
  	],
  	[
  		12821,
  		5,
  		"(아)"
  	],
  	[
  		12822,
  		5,
  		"(자)"
  	],
  	[
  		12823,
  		5,
  		"(차)"
  	],
  	[
  		12824,
  		5,
  		"(카)"
  	],
  	[
  		12825,
  		5,
  		"(타)"
  	],
  	[
  		12826,
  		5,
  		"(파)"
  	],
  	[
  		12827,
  		5,
  		"(하)"
  	],
  	[
  		12828,
  		5,
  		"(주)"
  	],
  	[
  		12829,
  		5,
  		"(오전)"
  	],
  	[
  		12830,
  		5,
  		"(오후)"
  	],
  	[
  		12831,
  		3
  	],
  	[
  		12832,
  		5,
  		"(一)"
  	],
  	[
  		12833,
  		5,
  		"(二)"
  	],
  	[
  		12834,
  		5,
  		"(三)"
  	],
  	[
  		12835,
  		5,
  		"(四)"
  	],
  	[
  		12836,
  		5,
  		"(五)"
  	],
  	[
  		12837,
  		5,
  		"(六)"
  	],
  	[
  		12838,
  		5,
  		"(七)"
  	],
  	[
  		12839,
  		5,
  		"(八)"
  	],
  	[
  		12840,
  		5,
  		"(九)"
  	],
  	[
  		12841,
  		5,
  		"(十)"
  	],
  	[
  		12842,
  		5,
  		"(月)"
  	],
  	[
  		12843,
  		5,
  		"(火)"
  	],
  	[
  		12844,
  		5,
  		"(水)"
  	],
  	[
  		12845,
  		5,
  		"(木)"
  	],
  	[
  		12846,
  		5,
  		"(金)"
  	],
  	[
  		12847,
  		5,
  		"(土)"
  	],
  	[
  		12848,
  		5,
  		"(日)"
  	],
  	[
  		12849,
  		5,
  		"(株)"
  	],
  	[
  		12850,
  		5,
  		"(有)"
  	],
  	[
  		12851,
  		5,
  		"(社)"
  	],
  	[
  		12852,
  		5,
  		"(名)"
  	],
  	[
  		12853,
  		5,
  		"(特)"
  	],
  	[
  		12854,
  		5,
  		"(財)"
  	],
  	[
  		12855,
  		5,
  		"(祝)"
  	],
  	[
  		12856,
  		5,
  		"(労)"
  	],
  	[
  		12857,
  		5,
  		"(代)"
  	],
  	[
  		12858,
  		5,
  		"(呼)"
  	],
  	[
  		12859,
  		5,
  		"(学)"
  	],
  	[
  		12860,
  		5,
  		"(監)"
  	],
  	[
  		12861,
  		5,
  		"(企)"
  	],
  	[
  		12862,
  		5,
  		"(資)"
  	],
  	[
  		12863,
  		5,
  		"(協)"
  	],
  	[
  		12864,
  		5,
  		"(祭)"
  	],
  	[
  		12865,
  		5,
  		"(休)"
  	],
  	[
  		12866,
  		5,
  		"(自)"
  	],
  	[
  		12867,
  		5,
  		"(至)"
  	],
  	[
  		12868,
  		1,
  		"問"
  	],
  	[
  		12869,
  		1,
  		"幼"
  	],
  	[
  		12870,
  		1,
  		"文"
  	],
  	[
  		12871,
  		1,
  		"箏"
  	],
  	[
  		[
  			12872,
  			12879
  		],
  		2
  	],
  	[
  		12880,
  		1,
  		"pte"
  	],
  	[
  		12881,
  		1,
  		"21"
  	],
  	[
  		12882,
  		1,
  		"22"
  	],
  	[
  		12883,
  		1,
  		"23"
  	],
  	[
  		12884,
  		1,
  		"24"
  	],
  	[
  		12885,
  		1,
  		"25"
  	],
  	[
  		12886,
  		1,
  		"26"
  	],
  	[
  		12887,
  		1,
  		"27"
  	],
  	[
  		12888,
  		1,
  		"28"
  	],
  	[
  		12889,
  		1,
  		"29"
  	],
  	[
  		12890,
  		1,
  		"30"
  	],
  	[
  		12891,
  		1,
  		"31"
  	],
  	[
  		12892,
  		1,
  		"32"
  	],
  	[
  		12893,
  		1,
  		"33"
  	],
  	[
  		12894,
  		1,
  		"34"
  	],
  	[
  		12895,
  		1,
  		"35"
  	],
  	[
  		12896,
  		1,
  		"ᄀ"
  	],
  	[
  		12897,
  		1,
  		"ᄂ"
  	],
  	[
  		12898,
  		1,
  		"ᄃ"
  	],
  	[
  		12899,
  		1,
  		"ᄅ"
  	],
  	[
  		12900,
  		1,
  		"ᄆ"
  	],
  	[
  		12901,
  		1,
  		"ᄇ"
  	],
  	[
  		12902,
  		1,
  		"ᄉ"
  	],
  	[
  		12903,
  		1,
  		"ᄋ"
  	],
  	[
  		12904,
  		1,
  		"ᄌ"
  	],
  	[
  		12905,
  		1,
  		"ᄎ"
  	],
  	[
  		12906,
  		1,
  		"ᄏ"
  	],
  	[
  		12907,
  		1,
  		"ᄐ"
  	],
  	[
  		12908,
  		1,
  		"ᄑ"
  	],
  	[
  		12909,
  		1,
  		"ᄒ"
  	],
  	[
  		12910,
  		1,
  		"가"
  	],
  	[
  		12911,
  		1,
  		"나"
  	],
  	[
  		12912,
  		1,
  		"다"
  	],
  	[
  		12913,
  		1,
  		"라"
  	],
  	[
  		12914,
  		1,
  		"마"
  	],
  	[
  		12915,
  		1,
  		"바"
  	],
  	[
  		12916,
  		1,
  		"사"
  	],
  	[
  		12917,
  		1,
  		"아"
  	],
  	[
  		12918,
  		1,
  		"자"
  	],
  	[
  		12919,
  		1,
  		"차"
  	],
  	[
  		12920,
  		1,
  		"카"
  	],
  	[
  		12921,
  		1,
  		"타"
  	],
  	[
  		12922,
  		1,
  		"파"
  	],
  	[
  		12923,
  		1,
  		"하"
  	],
  	[
  		12924,
  		1,
  		"참고"
  	],
  	[
  		12925,
  		1,
  		"주의"
  	],
  	[
  		12926,
  		1,
  		"우"
  	],
  	[
  		12927,
  		2
  	],
  	[
  		12928,
  		1,
  		"一"
  	],
  	[
  		12929,
  		1,
  		"二"
  	],
  	[
  		12930,
  		1,
  		"三"
  	],
  	[
  		12931,
  		1,
  		"四"
  	],
  	[
  		12932,
  		1,
  		"五"
  	],
  	[
  		12933,
  		1,
  		"六"
  	],
  	[
  		12934,
  		1,
  		"七"
  	],
  	[
  		12935,
  		1,
  		"八"
  	],
  	[
  		12936,
  		1,
  		"九"
  	],
  	[
  		12937,
  		1,
  		"十"
  	],
  	[
  		12938,
  		1,
  		"月"
  	],
  	[
  		12939,
  		1,
  		"火"
  	],
  	[
  		12940,
  		1,
  		"水"
  	],
  	[
  		12941,
  		1,
  		"木"
  	],
  	[
  		12942,
  		1,
  		"金"
  	],
  	[
  		12943,
  		1,
  		"土"
  	],
  	[
  		12944,
  		1,
  		"日"
  	],
  	[
  		12945,
  		1,
  		"株"
  	],
  	[
  		12946,
  		1,
  		"有"
  	],
  	[
  		12947,
  		1,
  		"社"
  	],
  	[
  		12948,
  		1,
  		"名"
  	],
  	[
  		12949,
  		1,
  		"特"
  	],
  	[
  		12950,
  		1,
  		"財"
  	],
  	[
  		12951,
  		1,
  		"祝"
  	],
  	[
  		12952,
  		1,
  		"労"
  	],
  	[
  		12953,
  		1,
  		"秘"
  	],
  	[
  		12954,
  		1,
  		"男"
  	],
  	[
  		12955,
  		1,
  		"女"
  	],
  	[
  		12956,
  		1,
  		"適"
  	],
  	[
  		12957,
  		1,
  		"優"
  	],
  	[
  		12958,
  		1,
  		"印"
  	],
  	[
  		12959,
  		1,
  		"注"
  	],
  	[
  		12960,
  		1,
  		"項"
  	],
  	[
  		12961,
  		1,
  		"休"
  	],
  	[
  		12962,
  		1,
  		"写"
  	],
  	[
  		12963,
  		1,
  		"正"
  	],
  	[
  		12964,
  		1,
  		"上"
  	],
  	[
  		12965,
  		1,
  		"中"
  	],
  	[
  		12966,
  		1,
  		"下"
  	],
  	[
  		12967,
  		1,
  		"左"
  	],
  	[
  		12968,
  		1,
  		"右"
  	],
  	[
  		12969,
  		1,
  		"医"
  	],
  	[
  		12970,
  		1,
  		"宗"
  	],
  	[
  		12971,
  		1,
  		"学"
  	],
  	[
  		12972,
  		1,
  		"監"
  	],
  	[
  		12973,
  		1,
  		"企"
  	],
  	[
  		12974,
  		1,
  		"資"
  	],
  	[
  		12975,
  		1,
  		"協"
  	],
  	[
  		12976,
  		1,
  		"夜"
  	],
  	[
  		12977,
  		1,
  		"36"
  	],
  	[
  		12978,
  		1,
  		"37"
  	],
  	[
  		12979,
  		1,
  		"38"
  	],
  	[
  		12980,
  		1,
  		"39"
  	],
  	[
  		12981,
  		1,
  		"40"
  	],
  	[
  		12982,
  		1,
  		"41"
  	],
  	[
  		12983,
  		1,
  		"42"
  	],
  	[
  		12984,
  		1,
  		"43"
  	],
  	[
  		12985,
  		1,
  		"44"
  	],
  	[
  		12986,
  		1,
  		"45"
  	],
  	[
  		12987,
  		1,
  		"46"
  	],
  	[
  		12988,
  		1,
  		"47"
  	],
  	[
  		12989,
  		1,
  		"48"
  	],
  	[
  		12990,
  		1,
  		"49"
  	],
  	[
  		12991,
  		1,
  		"50"
  	],
  	[
  		12992,
  		1,
  		"1月"
  	],
  	[
  		12993,
  		1,
  		"2月"
  	],
  	[
  		12994,
  		1,
  		"3月"
  	],
  	[
  		12995,
  		1,
  		"4月"
  	],
  	[
  		12996,
  		1,
  		"5月"
  	],
  	[
  		12997,
  		1,
  		"6月"
  	],
  	[
  		12998,
  		1,
  		"7月"
  	],
  	[
  		12999,
  		1,
  		"8月"
  	],
  	[
  		13000,
  		1,
  		"9月"
  	],
  	[
  		13001,
  		1,
  		"10月"
  	],
  	[
  		13002,
  		1,
  		"11月"
  	],
  	[
  		13003,
  		1,
  		"12月"
  	],
  	[
  		13004,
  		1,
  		"hg"
  	],
  	[
  		13005,
  		1,
  		"erg"
  	],
  	[
  		13006,
  		1,
  		"ev"
  	],
  	[
  		13007,
  		1,
  		"ltd"
  	],
  	[
  		13008,
  		1,
  		"ア"
  	],
  	[
  		13009,
  		1,
  		"イ"
  	],
  	[
  		13010,
  		1,
  		"ウ"
  	],
  	[
  		13011,
  		1,
  		"エ"
  	],
  	[
  		13012,
  		1,
  		"オ"
  	],
  	[
  		13013,
  		1,
  		"カ"
  	],
  	[
  		13014,
  		1,
  		"キ"
  	],
  	[
  		13015,
  		1,
  		"ク"
  	],
  	[
  		13016,
  		1,
  		"ケ"
  	],
  	[
  		13017,
  		1,
  		"コ"
  	],
  	[
  		13018,
  		1,
  		"サ"
  	],
  	[
  		13019,
  		1,
  		"シ"
  	],
  	[
  		13020,
  		1,
  		"ス"
  	],
  	[
  		13021,
  		1,
  		"セ"
  	],
  	[
  		13022,
  		1,
  		"ソ"
  	],
  	[
  		13023,
  		1,
  		"タ"
  	],
  	[
  		13024,
  		1,
  		"チ"
  	],
  	[
  		13025,
  		1,
  		"ツ"
  	],
  	[
  		13026,
  		1,
  		"テ"
  	],
  	[
  		13027,
  		1,
  		"ト"
  	],
  	[
  		13028,
  		1,
  		"ナ"
  	],
  	[
  		13029,
  		1,
  		"ニ"
  	],
  	[
  		13030,
  		1,
  		"ヌ"
  	],
  	[
  		13031,
  		1,
  		"ネ"
  	],
  	[
  		13032,
  		1,
  		"ノ"
  	],
  	[
  		13033,
  		1,
  		"ハ"
  	],
  	[
  		13034,
  		1,
  		"ヒ"
  	],
  	[
  		13035,
  		1,
  		"フ"
  	],
  	[
  		13036,
  		1,
  		"ヘ"
  	],
  	[
  		13037,
  		1,
  		"ホ"
  	],
  	[
  		13038,
  		1,
  		"マ"
  	],
  	[
  		13039,
  		1,
  		"ミ"
  	],
  	[
  		13040,
  		1,
  		"ム"
  	],
  	[
  		13041,
  		1,
  		"メ"
  	],
  	[
  		13042,
  		1,
  		"モ"
  	],
  	[
  		13043,
  		1,
  		"ヤ"
  	],
  	[
  		13044,
  		1,
  		"ユ"
  	],
  	[
  		13045,
  		1,
  		"ヨ"
  	],
  	[
  		13046,
  		1,
  		"ラ"
  	],
  	[
  		13047,
  		1,
  		"リ"
  	],
  	[
  		13048,
  		1,
  		"ル"
  	],
  	[
  		13049,
  		1,
  		"レ"
  	],
  	[
  		13050,
  		1,
  		"ロ"
  	],
  	[
  		13051,
  		1,
  		"ワ"
  	],
  	[
  		13052,
  		1,
  		"ヰ"
  	],
  	[
  		13053,
  		1,
  		"ヱ"
  	],
  	[
  		13054,
  		1,
  		"ヲ"
  	],
  	[
  		13055,
  		1,
  		"令和"
  	],
  	[
  		13056,
  		1,
  		"アパート"
  	],
  	[
  		13057,
  		1,
  		"アルファ"
  	],
  	[
  		13058,
  		1,
  		"アンペア"
  	],
  	[
  		13059,
  		1,
  		"アール"
  	],
  	[
  		13060,
  		1,
  		"イニング"
  	],
  	[
  		13061,
  		1,
  		"インチ"
  	],
  	[
  		13062,
  		1,
  		"ウォン"
  	],
  	[
  		13063,
  		1,
  		"エスクード"
  	],
  	[
  		13064,
  		1,
  		"エーカー"
  	],
  	[
  		13065,
  		1,
  		"オンス"
  	],
  	[
  		13066,
  		1,
  		"オーム"
  	],
  	[
  		13067,
  		1,
  		"カイリ"
  	],
  	[
  		13068,
  		1,
  		"カラット"
  	],
  	[
  		13069,
  		1,
  		"カロリー"
  	],
  	[
  		13070,
  		1,
  		"ガロン"
  	],
  	[
  		13071,
  		1,
  		"ガンマ"
  	],
  	[
  		13072,
  		1,
  		"ギガ"
  	],
  	[
  		13073,
  		1,
  		"ギニー"
  	],
  	[
  		13074,
  		1,
  		"キュリー"
  	],
  	[
  		13075,
  		1,
  		"ギルダー"
  	],
  	[
  		13076,
  		1,
  		"キロ"
  	],
  	[
  		13077,
  		1,
  		"キログラム"
  	],
  	[
  		13078,
  		1,
  		"キロメートル"
  	],
  	[
  		13079,
  		1,
  		"キロワット"
  	],
  	[
  		13080,
  		1,
  		"グラム"
  	],
  	[
  		13081,
  		1,
  		"グラムトン"
  	],
  	[
  		13082,
  		1,
  		"クルゼイロ"
  	],
  	[
  		13083,
  		1,
  		"クローネ"
  	],
  	[
  		13084,
  		1,
  		"ケース"
  	],
  	[
  		13085,
  		1,
  		"コルナ"
  	],
  	[
  		13086,
  		1,
  		"コーポ"
  	],
  	[
  		13087,
  		1,
  		"サイクル"
  	],
  	[
  		13088,
  		1,
  		"サンチーム"
  	],
  	[
  		13089,
  		1,
  		"シリング"
  	],
  	[
  		13090,
  		1,
  		"センチ"
  	],
  	[
  		13091,
  		1,
  		"セント"
  	],
  	[
  		13092,
  		1,
  		"ダース"
  	],
  	[
  		13093,
  		1,
  		"デシ"
  	],
  	[
  		13094,
  		1,
  		"ドル"
  	],
  	[
  		13095,
  		1,
  		"トン"
  	],
  	[
  		13096,
  		1,
  		"ナノ"
  	],
  	[
  		13097,
  		1,
  		"ノット"
  	],
  	[
  		13098,
  		1,
  		"ハイツ"
  	],
  	[
  		13099,
  		1,
  		"パーセント"
  	],
  	[
  		13100,
  		1,
  		"パーツ"
  	],
  	[
  		13101,
  		1,
  		"バーレル"
  	],
  	[
  		13102,
  		1,
  		"ピアストル"
  	],
  	[
  		13103,
  		1,
  		"ピクル"
  	],
  	[
  		13104,
  		1,
  		"ピコ"
  	],
  	[
  		13105,
  		1,
  		"ビル"
  	],
  	[
  		13106,
  		1,
  		"ファラッド"
  	],
  	[
  		13107,
  		1,
  		"フィート"
  	],
  	[
  		13108,
  		1,
  		"ブッシェル"
  	],
  	[
  		13109,
  		1,
  		"フラン"
  	],
  	[
  		13110,
  		1,
  		"ヘクタール"
  	],
  	[
  		13111,
  		1,
  		"ペソ"
  	],
  	[
  		13112,
  		1,
  		"ペニヒ"
  	],
  	[
  		13113,
  		1,
  		"ヘルツ"
  	],
  	[
  		13114,
  		1,
  		"ペンス"
  	],
  	[
  		13115,
  		1,
  		"ページ"
  	],
  	[
  		13116,
  		1,
  		"ベータ"
  	],
  	[
  		13117,
  		1,
  		"ポイント"
  	],
  	[
  		13118,
  		1,
  		"ボルト"
  	],
  	[
  		13119,
  		1,
  		"ホン"
  	],
  	[
  		13120,
  		1,
  		"ポンド"
  	],
  	[
  		13121,
  		1,
  		"ホール"
  	],
  	[
  		13122,
  		1,
  		"ホーン"
  	],
  	[
  		13123,
  		1,
  		"マイクロ"
  	],
  	[
  		13124,
  		1,
  		"マイル"
  	],
  	[
  		13125,
  		1,
  		"マッハ"
  	],
  	[
  		13126,
  		1,
  		"マルク"
  	],
  	[
  		13127,
  		1,
  		"マンション"
  	],
  	[
  		13128,
  		1,
  		"ミクロン"
  	],
  	[
  		13129,
  		1,
  		"ミリ"
  	],
  	[
  		13130,
  		1,
  		"ミリバール"
  	],
  	[
  		13131,
  		1,
  		"メガ"
  	],
  	[
  		13132,
  		1,
  		"メガトン"
  	],
  	[
  		13133,
  		1,
  		"メートル"
  	],
  	[
  		13134,
  		1,
  		"ヤード"
  	],
  	[
  		13135,
  		1,
  		"ヤール"
  	],
  	[
  		13136,
  		1,
  		"ユアン"
  	],
  	[
  		13137,
  		1,
  		"リットル"
  	],
  	[
  		13138,
  		1,
  		"リラ"
  	],
  	[
  		13139,
  		1,
  		"ルピー"
  	],
  	[
  		13140,
  		1,
  		"ルーブル"
  	],
  	[
  		13141,
  		1,
  		"レム"
  	],
  	[
  		13142,
  		1,
  		"レントゲン"
  	],
  	[
  		13143,
  		1,
  		"ワット"
  	],
  	[
  		13144,
  		1,
  		"0点"
  	],
  	[
  		13145,
  		1,
  		"1点"
  	],
  	[
  		13146,
  		1,
  		"2点"
  	],
  	[
  		13147,
  		1,
  		"3点"
  	],
  	[
  		13148,
  		1,
  		"4点"
  	],
  	[
  		13149,
  		1,
  		"5点"
  	],
  	[
  		13150,
  		1,
  		"6点"
  	],
  	[
  		13151,
  		1,
  		"7点"
  	],
  	[
  		13152,
  		1,
  		"8点"
  	],
  	[
  		13153,
  		1,
  		"9点"
  	],
  	[
  		13154,
  		1,
  		"10点"
  	],
  	[
  		13155,
  		1,
  		"11点"
  	],
  	[
  		13156,
  		1,
  		"12点"
  	],
  	[
  		13157,
  		1,
  		"13点"
  	],
  	[
  		13158,
  		1,
  		"14点"
  	],
  	[
  		13159,
  		1,
  		"15点"
  	],
  	[
  		13160,
  		1,
  		"16点"
  	],
  	[
  		13161,
  		1,
  		"17点"
  	],
  	[
  		13162,
  		1,
  		"18点"
  	],
  	[
  		13163,
  		1,
  		"19点"
  	],
  	[
  		13164,
  		1,
  		"20点"
  	],
  	[
  		13165,
  		1,
  		"21点"
  	],
  	[
  		13166,
  		1,
  		"22点"
  	],
  	[
  		13167,
  		1,
  		"23点"
  	],
  	[
  		13168,
  		1,
  		"24点"
  	],
  	[
  		13169,
  		1,
  		"hpa"
  	],
  	[
  		13170,
  		1,
  		"da"
  	],
  	[
  		13171,
  		1,
  		"au"
  	],
  	[
  		13172,
  		1,
  		"bar"
  	],
  	[
  		13173,
  		1,
  		"ov"
  	],
  	[
  		13174,
  		1,
  		"pc"
  	],
  	[
  		13175,
  		1,
  		"dm"
  	],
  	[
  		13176,
  		1,
  		"dm2"
  	],
  	[
  		13177,
  		1,
  		"dm3"
  	],
  	[
  		13178,
  		1,
  		"iu"
  	],
  	[
  		13179,
  		1,
  		"平成"
  	],
  	[
  		13180,
  		1,
  		"昭和"
  	],
  	[
  		13181,
  		1,
  		"大正"
  	],
  	[
  		13182,
  		1,
  		"明治"
  	],
  	[
  		13183,
  		1,
  		"株式会社"
  	],
  	[
  		13184,
  		1,
  		"pa"
  	],
  	[
  		13185,
  		1,
  		"na"
  	],
  	[
  		13186,
  		1,
  		"μa"
  	],
  	[
  		13187,
  		1,
  		"ma"
  	],
  	[
  		13188,
  		1,
  		"ka"
  	],
  	[
  		13189,
  		1,
  		"kb"
  	],
  	[
  		13190,
  		1,
  		"mb"
  	],
  	[
  		13191,
  		1,
  		"gb"
  	],
  	[
  		13192,
  		1,
  		"cal"
  	],
  	[
  		13193,
  		1,
  		"kcal"
  	],
  	[
  		13194,
  		1,
  		"pf"
  	],
  	[
  		13195,
  		1,
  		"nf"
  	],
  	[
  		13196,
  		1,
  		"μf"
  	],
  	[
  		13197,
  		1,
  		"μg"
  	],
  	[
  		13198,
  		1,
  		"mg"
  	],
  	[
  		13199,
  		1,
  		"kg"
  	],
  	[
  		13200,
  		1,
  		"hz"
  	],
  	[
  		13201,
  		1,
  		"khz"
  	],
  	[
  		13202,
  		1,
  		"mhz"
  	],
  	[
  		13203,
  		1,
  		"ghz"
  	],
  	[
  		13204,
  		1,
  		"thz"
  	],
  	[
  		13205,
  		1,
  		"μl"
  	],
  	[
  		13206,
  		1,
  		"ml"
  	],
  	[
  		13207,
  		1,
  		"dl"
  	],
  	[
  		13208,
  		1,
  		"kl"
  	],
  	[
  		13209,
  		1,
  		"fm"
  	],
  	[
  		13210,
  		1,
  		"nm"
  	],
  	[
  		13211,
  		1,
  		"μm"
  	],
  	[
  		13212,
  		1,
  		"mm"
  	],
  	[
  		13213,
  		1,
  		"cm"
  	],
  	[
  		13214,
  		1,
  		"km"
  	],
  	[
  		13215,
  		1,
  		"mm2"
  	],
  	[
  		13216,
  		1,
  		"cm2"
  	],
  	[
  		13217,
  		1,
  		"m2"
  	],
  	[
  		13218,
  		1,
  		"km2"
  	],
  	[
  		13219,
  		1,
  		"mm3"
  	],
  	[
  		13220,
  		1,
  		"cm3"
  	],
  	[
  		13221,
  		1,
  		"m3"
  	],
  	[
  		13222,
  		1,
  		"km3"
  	],
  	[
  		13223,
  		1,
  		"m∕s"
  	],
  	[
  		13224,
  		1,
  		"m∕s2"
  	],
  	[
  		13225,
  		1,
  		"pa"
  	],
  	[
  		13226,
  		1,
  		"kpa"
  	],
  	[
  		13227,
  		1,
  		"mpa"
  	],
  	[
  		13228,
  		1,
  		"gpa"
  	],
  	[
  		13229,
  		1,
  		"rad"
  	],
  	[
  		13230,
  		1,
  		"rad∕s"
  	],
  	[
  		13231,
  		1,
  		"rad∕s2"
  	],
  	[
  		13232,
  		1,
  		"ps"
  	],
  	[
  		13233,
  		1,
  		"ns"
  	],
  	[
  		13234,
  		1,
  		"μs"
  	],
  	[
  		13235,
  		1,
  		"ms"
  	],
  	[
  		13236,
  		1,
  		"pv"
  	],
  	[
  		13237,
  		1,
  		"nv"
  	],
  	[
  		13238,
  		1,
  		"μv"
  	],
  	[
  		13239,
  		1,
  		"mv"
  	],
  	[
  		13240,
  		1,
  		"kv"
  	],
  	[
  		13241,
  		1,
  		"mv"
  	],
  	[
  		13242,
  		1,
  		"pw"
  	],
  	[
  		13243,
  		1,
  		"nw"
  	],
  	[
  		13244,
  		1,
  		"μw"
  	],
  	[
  		13245,
  		1,
  		"mw"
  	],
  	[
  		13246,
  		1,
  		"kw"
  	],
  	[
  		13247,
  		1,
  		"mw"
  	],
  	[
  		13248,
  		1,
  		"kω"
  	],
  	[
  		13249,
  		1,
  		"mω"
  	],
  	[
  		13250,
  		3
  	],
  	[
  		13251,
  		1,
  		"bq"
  	],
  	[
  		13252,
  		1,
  		"cc"
  	],
  	[
  		13253,
  		1,
  		"cd"
  	],
  	[
  		13254,
  		1,
  		"c∕kg"
  	],
  	[
  		13255,
  		3
  	],
  	[
  		13256,
  		1,
  		"db"
  	],
  	[
  		13257,
  		1,
  		"gy"
  	],
  	[
  		13258,
  		1,
  		"ha"
  	],
  	[
  		13259,
  		1,
  		"hp"
  	],
  	[
  		13260,
  		1,
  		"in"
  	],
  	[
  		13261,
  		1,
  		"kk"
  	],
  	[
  		13262,
  		1,
  		"km"
  	],
  	[
  		13263,
  		1,
  		"kt"
  	],
  	[
  		13264,
  		1,
  		"lm"
  	],
  	[
  		13265,
  		1,
  		"ln"
  	],
  	[
  		13266,
  		1,
  		"log"
  	],
  	[
  		13267,
  		1,
  		"lx"
  	],
  	[
  		13268,
  		1,
  		"mb"
  	],
  	[
  		13269,
  		1,
  		"mil"
  	],
  	[
  		13270,
  		1,
  		"mol"
  	],
  	[
  		13271,
  		1,
  		"ph"
  	],
  	[
  		13272,
  		3
  	],
  	[
  		13273,
  		1,
  		"ppm"
  	],
  	[
  		13274,
  		1,
  		"pr"
  	],
  	[
  		13275,
  		1,
  		"sr"
  	],
  	[
  		13276,
  		1,
  		"sv"
  	],
  	[
  		13277,
  		1,
  		"wb"
  	],
  	[
  		13278,
  		1,
  		"v∕m"
  	],
  	[
  		13279,
  		1,
  		"a∕m"
  	],
  	[
  		13280,
  		1,
  		"1日"
  	],
  	[
  		13281,
  		1,
  		"2日"
  	],
  	[
  		13282,
  		1,
  		"3日"
  	],
  	[
  		13283,
  		1,
  		"4日"
  	],
  	[
  		13284,
  		1,
  		"5日"
  	],
  	[
  		13285,
  		1,
  		"6日"
  	],
  	[
  		13286,
  		1,
  		"7日"
  	],
  	[
  		13287,
  		1,
  		"8日"
  	],
  	[
  		13288,
  		1,
  		"9日"
  	],
  	[
  		13289,
  		1,
  		"10日"
  	],
  	[
  		13290,
  		1,
  		"11日"
  	],
  	[
  		13291,
  		1,
  		"12日"
  	],
  	[
  		13292,
  		1,
  		"13日"
  	],
  	[
  		13293,
  		1,
  		"14日"
  	],
  	[
  		13294,
  		1,
  		"15日"
  	],
  	[
  		13295,
  		1,
  		"16日"
  	],
  	[
  		13296,
  		1,
  		"17日"
  	],
  	[
  		13297,
  		1,
  		"18日"
  	],
  	[
  		13298,
  		1,
  		"19日"
  	],
  	[
  		13299,
  		1,
  		"20日"
  	],
  	[
  		13300,
  		1,
  		"21日"
  	],
  	[
  		13301,
  		1,
  		"22日"
  	],
  	[
  		13302,
  		1,
  		"23日"
  	],
  	[
  		13303,
  		1,
  		"24日"
  	],
  	[
  		13304,
  		1,
  		"25日"
  	],
  	[
  		13305,
  		1,
  		"26日"
  	],
  	[
  		13306,
  		1,
  		"27日"
  	],
  	[
  		13307,
  		1,
  		"28日"
  	],
  	[
  		13308,
  		1,
  		"29日"
  	],
  	[
  		13309,
  		1,
  		"30日"
  	],
  	[
  		13310,
  		1,
  		"31日"
  	],
  	[
  		13311,
  		1,
  		"gal"
  	],
  	[
  		[
  			13312,
  			19893
  		],
  		2
  	],
  	[
  		[
  			19894,
  			19903
  		],
  		2
  	],
  	[
  		[
  			19904,
  			19967
  		],
  		2
  	],
  	[
  		[
  			19968,
  			40869
  		],
  		2
  	],
  	[
  		[
  			40870,
  			40891
  		],
  		2
  	],
  	[
  		[
  			40892,
  			40899
  		],
  		2
  	],
  	[
  		[
  			40900,
  			40907
  		],
  		2
  	],
  	[
  		40908,
  		2
  	],
  	[
  		[
  			40909,
  			40917
  		],
  		2
  	],
  	[
  		[
  			40918,
  			40938
  		],
  		2
  	],
  	[
  		[
  			40939,
  			40943
  		],
  		2
  	],
  	[
  		[
  			40944,
  			40956
  		],
  		2
  	],
  	[
  		[
  			40957,
  			40959
  		],
  		3
  	],
  	[
  		[
  			40960,
  			42124
  		],
  		2
  	],
  	[
  		[
  			42125,
  			42127
  		],
  		3
  	],
  	[
  		[
  			42128,
  			42145
  		],
  		2
  	],
  	[
  		[
  			42146,
  			42147
  		],
  		2
  	],
  	[
  		[
  			42148,
  			42163
  		],
  		2
  	],
  	[
  		42164,
  		2
  	],
  	[
  		[
  			42165,
  			42176
  		],
  		2
  	],
  	[
  		42177,
  		2
  	],
  	[
  		[
  			42178,
  			42180
  		],
  		2
  	],
  	[
  		42181,
  		2
  	],
  	[
  		42182,
  		2
  	],
  	[
  		[
  			42183,
  			42191
  		],
  		3
  	],
  	[
  		[
  			42192,
  			42237
  		],
  		2
  	],
  	[
  		[
  			42238,
  			42239
  		],
  		2
  	],
  	[
  		[
  			42240,
  			42508
  		],
  		2
  	],
  	[
  		[
  			42509,
  			42511
  		],
  		2
  	],
  	[
  		[
  			42512,
  			42539
  		],
  		2
  	],
  	[
  		[
  			42540,
  			42559
  		],
  		3
  	],
  	[
  		42560,
  		1,
  		"ꙁ"
  	],
  	[
  		42561,
  		2
  	],
  	[
  		42562,
  		1,
  		"ꙃ"
  	],
  	[
  		42563,
  		2
  	],
  	[
  		42564,
  		1,
  		"ꙅ"
  	],
  	[
  		42565,
  		2
  	],
  	[
  		42566,
  		1,
  		"ꙇ"
  	],
  	[
  		42567,
  		2
  	],
  	[
  		42568,
  		1,
  		"ꙉ"
  	],
  	[
  		42569,
  		2
  	],
  	[
  		42570,
  		1,
  		"ꙋ"
  	],
  	[
  		42571,
  		2
  	],
  	[
  		42572,
  		1,
  		"ꙍ"
  	],
  	[
  		42573,
  		2
  	],
  	[
  		42574,
  		1,
  		"ꙏ"
  	],
  	[
  		42575,
  		2
  	],
  	[
  		42576,
  		1,
  		"ꙑ"
  	],
  	[
  		42577,
  		2
  	],
  	[
  		42578,
  		1,
  		"ꙓ"
  	],
  	[
  		42579,
  		2
  	],
  	[
  		42580,
  		1,
  		"ꙕ"
  	],
  	[
  		42581,
  		2
  	],
  	[
  		42582,
  		1,
  		"ꙗ"
  	],
  	[
  		42583,
  		2
  	],
  	[
  		42584,
  		1,
  		"ꙙ"
  	],
  	[
  		42585,
  		2
  	],
  	[
  		42586,
  		1,
  		"ꙛ"
  	],
  	[
  		42587,
  		2
  	],
  	[
  		42588,
  		1,
  		"ꙝ"
  	],
  	[
  		42589,
  		2
  	],
  	[
  		42590,
  		1,
  		"ꙟ"
  	],
  	[
  		42591,
  		2
  	],
  	[
  		42592,
  		1,
  		"ꙡ"
  	],
  	[
  		42593,
  		2
  	],
  	[
  		42594,
  		1,
  		"ꙣ"
  	],
  	[
  		42595,
  		2
  	],
  	[
  		42596,
  		1,
  		"ꙥ"
  	],
  	[
  		42597,
  		2
  	],
  	[
  		42598,
  		1,
  		"ꙧ"
  	],
  	[
  		42599,
  		2
  	],
  	[
  		42600,
  		1,
  		"ꙩ"
  	],
  	[
  		42601,
  		2
  	],
  	[
  		42602,
  		1,
  		"ꙫ"
  	],
  	[
  		42603,
  		2
  	],
  	[
  		42604,
  		1,
  		"ꙭ"
  	],
  	[
  		[
  			42605,
  			42607
  		],
  		2
  	],
  	[
  		[
  			42608,
  			42611
  		],
  		2
  	],
  	[
  		[
  			42612,
  			42619
  		],
  		2
  	],
  	[
  		[
  			42620,
  			42621
  		],
  		2
  	],
  	[
  		42622,
  		2
  	],
  	[
  		42623,
  		2
  	],
  	[
  		42624,
  		1,
  		"ꚁ"
  	],
  	[
  		42625,
  		2
  	],
  	[
  		42626,
  		1,
  		"ꚃ"
  	],
  	[
  		42627,
  		2
  	],
  	[
  		42628,
  		1,
  		"ꚅ"
  	],
  	[
  		42629,
  		2
  	],
  	[
  		42630,
  		1,
  		"ꚇ"
  	],
  	[
  		42631,
  		2
  	],
  	[
  		42632,
  		1,
  		"ꚉ"
  	],
  	[
  		42633,
  		2
  	],
  	[
  		42634,
  		1,
  		"ꚋ"
  	],
  	[
  		42635,
  		2
  	],
  	[
  		42636,
  		1,
  		"ꚍ"
  	],
  	[
  		42637,
  		2
  	],
  	[
  		42638,
  		1,
  		"ꚏ"
  	],
  	[
  		42639,
  		2
  	],
  	[
  		42640,
  		1,
  		"ꚑ"
  	],
  	[
  		42641,
  		2
  	],
  	[
  		42642,
  		1,
  		"ꚓ"
  	],
  	[
  		42643,
  		2
  	],
  	[
  		42644,
  		1,
  		"ꚕ"
  	],
  	[
  		42645,
  		2
  	],
  	[
  		42646,
  		1,
  		"ꚗ"
  	],
  	[
  		42647,
  		2
  	],
  	[
  		42648,
  		1,
  		"ꚙ"
  	],
  	[
  		42649,
  		2
  	],
  	[
  		42650,
  		1,
  		"ꚛ"
  	],
  	[
  		42651,
  		2
  	],
  	[
  		42652,
  		1,
  		"ъ"
  	],
  	[
  		42653,
  		1,
  		"ь"
  	],
  	[
  		42654,
  		2
  	],
  	[
  		42655,
  		2
  	],
  	[
  		[
  			42656,
  			42725
  		],
  		2
  	],
  	[
  		[
  			42726,
  			42735
  		],
  		2
  	],
  	[
  		[
  			42736,
  			42737
  		],
  		2
  	],
  	[
  		[
  			42738,
  			42743
  		],
  		2
  	],
  	[
  		[
  			42744,
  			42751
  		],
  		3
  	],
  	[
  		[
  			42752,
  			42774
  		],
  		2
  	],
  	[
  		[
  			42775,
  			42778
  		],
  		2
  	],
  	[
  		[
  			42779,
  			42783
  		],
  		2
  	],
  	[
  		[
  			42784,
  			42785
  		],
  		2
  	],
  	[
  		42786,
  		1,
  		"ꜣ"
  	],
  	[
  		42787,
  		2
  	],
  	[
  		42788,
  		1,
  		"ꜥ"
  	],
  	[
  		42789,
  		2
  	],
  	[
  		42790,
  		1,
  		"ꜧ"
  	],
  	[
  		42791,
  		2
  	],
  	[
  		42792,
  		1,
  		"ꜩ"
  	],
  	[
  		42793,
  		2
  	],
  	[
  		42794,
  		1,
  		"ꜫ"
  	],
  	[
  		42795,
  		2
  	],
  	[
  		42796,
  		1,
  		"ꜭ"
  	],
  	[
  		42797,
  		2
  	],
  	[
  		42798,
  		1,
  		"ꜯ"
  	],
  	[
  		[
  			42799,
  			42801
  		],
  		2
  	],
  	[
  		42802,
  		1,
  		"ꜳ"
  	],
  	[
  		42803,
  		2
  	],
  	[
  		42804,
  		1,
  		"ꜵ"
  	],
  	[
  		42805,
  		2
  	],
  	[
  		42806,
  		1,
  		"ꜷ"
  	],
  	[
  		42807,
  		2
  	],
  	[
  		42808,
  		1,
  		"ꜹ"
  	],
  	[
  		42809,
  		2
  	],
  	[
  		42810,
  		1,
  		"ꜻ"
  	],
  	[
  		42811,
  		2
  	],
  	[
  		42812,
  		1,
  		"ꜽ"
  	],
  	[
  		42813,
  		2
  	],
  	[
  		42814,
  		1,
  		"ꜿ"
  	],
  	[
  		42815,
  		2
  	],
  	[
  		42816,
  		1,
  		"ꝁ"
  	],
  	[
  		42817,
  		2
  	],
  	[
  		42818,
  		1,
  		"ꝃ"
  	],
  	[
  		42819,
  		2
  	],
  	[
  		42820,
  		1,
  		"ꝅ"
  	],
  	[
  		42821,
  		2
  	],
  	[
  		42822,
  		1,
  		"ꝇ"
  	],
  	[
  		42823,
  		2
  	],
  	[
  		42824,
  		1,
  		"ꝉ"
  	],
  	[
  		42825,
  		2
  	],
  	[
  		42826,
  		1,
  		"ꝋ"
  	],
  	[
  		42827,
  		2
  	],
  	[
  		42828,
  		1,
  		"ꝍ"
  	],
  	[
  		42829,
  		2
  	],
  	[
  		42830,
  		1,
  		"ꝏ"
  	],
  	[
  		42831,
  		2
  	],
  	[
  		42832,
  		1,
  		"ꝑ"
  	],
  	[
  		42833,
  		2
  	],
  	[
  		42834,
  		1,
  		"ꝓ"
  	],
  	[
  		42835,
  		2
  	],
  	[
  		42836,
  		1,
  		"ꝕ"
  	],
  	[
  		42837,
  		2
  	],
  	[
  		42838,
  		1,
  		"ꝗ"
  	],
  	[
  		42839,
  		2
  	],
  	[
  		42840,
  		1,
  		"ꝙ"
  	],
  	[
  		42841,
  		2
  	],
  	[
  		42842,
  		1,
  		"ꝛ"
  	],
  	[
  		42843,
  		2
  	],
  	[
  		42844,
  		1,
  		"ꝝ"
  	],
  	[
  		42845,
  		2
  	],
  	[
  		42846,
  		1,
  		"ꝟ"
  	],
  	[
  		42847,
  		2
  	],
  	[
  		42848,
  		1,
  		"ꝡ"
  	],
  	[
  		42849,
  		2
  	],
  	[
  		42850,
  		1,
  		"ꝣ"
  	],
  	[
  		42851,
  		2
  	],
  	[
  		42852,
  		1,
  		"ꝥ"
  	],
  	[
  		42853,
  		2
  	],
  	[
  		42854,
  		1,
  		"ꝧ"
  	],
  	[
  		42855,
  		2
  	],
  	[
  		42856,
  		1,
  		"ꝩ"
  	],
  	[
  		42857,
  		2
  	],
  	[
  		42858,
  		1,
  		"ꝫ"
  	],
  	[
  		42859,
  		2
  	],
  	[
  		42860,
  		1,
  		"ꝭ"
  	],
  	[
  		42861,
  		2
  	],
  	[
  		42862,
  		1,
  		"ꝯ"
  	],
  	[
  		42863,
  		2
  	],
  	[
  		42864,
  		1,
  		"ꝯ"
  	],
  	[
  		[
  			42865,
  			42872
  		],
  		2
  	],
  	[
  		42873,
  		1,
  		"ꝺ"
  	],
  	[
  		42874,
  		2
  	],
  	[
  		42875,
  		1,
  		"ꝼ"
  	],
  	[
  		42876,
  		2
  	],
  	[
  		42877,
  		1,
  		"ᵹ"
  	],
  	[
  		42878,
  		1,
  		"ꝿ"
  	],
  	[
  		42879,
  		2
  	],
  	[
  		42880,
  		1,
  		"ꞁ"
  	],
  	[
  		42881,
  		2
  	],
  	[
  		42882,
  		1,
  		"ꞃ"
  	],
  	[
  		42883,
  		2
  	],
  	[
  		42884,
  		1,
  		"ꞅ"
  	],
  	[
  		42885,
  		2
  	],
  	[
  		42886,
  		1,
  		"ꞇ"
  	],
  	[
  		[
  			42887,
  			42888
  		],
  		2
  	],
  	[
  		[
  			42889,
  			42890
  		],
  		2
  	],
  	[
  		42891,
  		1,
  		"ꞌ"
  	],
  	[
  		42892,
  		2
  	],
  	[
  		42893,
  		1,
  		"ɥ"
  	],
  	[
  		42894,
  		2
  	],
  	[
  		42895,
  		2
  	],
  	[
  		42896,
  		1,
  		"ꞑ"
  	],
  	[
  		42897,
  		2
  	],
  	[
  		42898,
  		1,
  		"ꞓ"
  	],
  	[
  		42899,
  		2
  	],
  	[
  		[
  			42900,
  			42901
  		],
  		2
  	],
  	[
  		42902,
  		1,
  		"ꞗ"
  	],
  	[
  		42903,
  		2
  	],
  	[
  		42904,
  		1,
  		"ꞙ"
  	],
  	[
  		42905,
  		2
  	],
  	[
  		42906,
  		1,
  		"ꞛ"
  	],
  	[
  		42907,
  		2
  	],
  	[
  		42908,
  		1,
  		"ꞝ"
  	],
  	[
  		42909,
  		2
  	],
  	[
  		42910,
  		1,
  		"ꞟ"
  	],
  	[
  		42911,
  		2
  	],
  	[
  		42912,
  		1,
  		"ꞡ"
  	],
  	[
  		42913,
  		2
  	],
  	[
  		42914,
  		1,
  		"ꞣ"
  	],
  	[
  		42915,
  		2
  	],
  	[
  		42916,
  		1,
  		"ꞥ"
  	],
  	[
  		42917,
  		2
  	],
  	[
  		42918,
  		1,
  		"ꞧ"
  	],
  	[
  		42919,
  		2
  	],
  	[
  		42920,
  		1,
  		"ꞩ"
  	],
  	[
  		42921,
  		2
  	],
  	[
  		42922,
  		1,
  		"ɦ"
  	],
  	[
  		42923,
  		1,
  		"ɜ"
  	],
  	[
  		42924,
  		1,
  		"ɡ"
  	],
  	[
  		42925,
  		1,
  		"ɬ"
  	],
  	[
  		42926,
  		1,
  		"ɪ"
  	],
  	[
  		42927,
  		2
  	],
  	[
  		42928,
  		1,
  		"ʞ"
  	],
  	[
  		42929,
  		1,
  		"ʇ"
  	],
  	[
  		42930,
  		1,
  		"ʝ"
  	],
  	[
  		42931,
  		1,
  		"ꭓ"
  	],
  	[
  		42932,
  		1,
  		"ꞵ"
  	],
  	[
  		42933,
  		2
  	],
  	[
  		42934,
  		1,
  		"ꞷ"
  	],
  	[
  		42935,
  		2
  	],
  	[
  		42936,
  		1,
  		"ꞹ"
  	],
  	[
  		42937,
  		2
  	],
  	[
  		42938,
  		1,
  		"ꞻ"
  	],
  	[
  		42939,
  		2
  	],
  	[
  		42940,
  		1,
  		"ꞽ"
  	],
  	[
  		42941,
  		2
  	],
  	[
  		42942,
  		1,
  		"ꞿ"
  	],
  	[
  		42943,
  		2
  	],
  	[
  		[
  			42944,
  			42945
  		],
  		3
  	],
  	[
  		42946,
  		1,
  		"ꟃ"
  	],
  	[
  		42947,
  		2
  	],
  	[
  		42948,
  		1,
  		"ꞔ"
  	],
  	[
  		42949,
  		1,
  		"ʂ"
  	],
  	[
  		42950,
  		1,
  		"ᶎ"
  	],
  	[
  		42951,
  		1,
  		"ꟈ"
  	],
  	[
  		42952,
  		2
  	],
  	[
  		42953,
  		1,
  		"ꟊ"
  	],
  	[
  		42954,
  		2
  	],
  	[
  		[
  			42955,
  			42996
  		],
  		3
  	],
  	[
  		42997,
  		1,
  		"ꟶ"
  	],
  	[
  		42998,
  		2
  	],
  	[
  		42999,
  		2
  	],
  	[
  		43000,
  		1,
  		"ħ"
  	],
  	[
  		43001,
  		1,
  		"œ"
  	],
  	[
  		43002,
  		2
  	],
  	[
  		[
  			43003,
  			43007
  		],
  		2
  	],
  	[
  		[
  			43008,
  			43047
  		],
  		2
  	],
  	[
  		[
  			43048,
  			43051
  		],
  		2
  	],
  	[
  		43052,
  		2
  	],
  	[
  		[
  			43053,
  			43055
  		],
  		3
  	],
  	[
  		[
  			43056,
  			43065
  		],
  		2
  	],
  	[
  		[
  			43066,
  			43071
  		],
  		3
  	],
  	[
  		[
  			43072,
  			43123
  		],
  		2
  	],
  	[
  		[
  			43124,
  			43127
  		],
  		2
  	],
  	[
  		[
  			43128,
  			43135
  		],
  		3
  	],
  	[
  		[
  			43136,
  			43204
  		],
  		2
  	],
  	[
  		43205,
  		2
  	],
  	[
  		[
  			43206,
  			43213
  		],
  		3
  	],
  	[
  		[
  			43214,
  			43215
  		],
  		2
  	],
  	[
  		[
  			43216,
  			43225
  		],
  		2
  	],
  	[
  		[
  			43226,
  			43231
  		],
  		3
  	],
  	[
  		[
  			43232,
  			43255
  		],
  		2
  	],
  	[
  		[
  			43256,
  			43258
  		],
  		2
  	],
  	[
  		43259,
  		2
  	],
  	[
  		43260,
  		2
  	],
  	[
  		43261,
  		2
  	],
  	[
  		[
  			43262,
  			43263
  		],
  		2
  	],
  	[
  		[
  			43264,
  			43309
  		],
  		2
  	],
  	[
  		[
  			43310,
  			43311
  		],
  		2
  	],
  	[
  		[
  			43312,
  			43347
  		],
  		2
  	],
  	[
  		[
  			43348,
  			43358
  		],
  		3
  	],
  	[
  		43359,
  		2
  	],
  	[
  		[
  			43360,
  			43388
  		],
  		2
  	],
  	[
  		[
  			43389,
  			43391
  		],
  		3
  	],
  	[
  		[
  			43392,
  			43456
  		],
  		2
  	],
  	[
  		[
  			43457,
  			43469
  		],
  		2
  	],
  	[
  		43470,
  		3
  	],
  	[
  		[
  			43471,
  			43481
  		],
  		2
  	],
  	[
  		[
  			43482,
  			43485
  		],
  		3
  	],
  	[
  		[
  			43486,
  			43487
  		],
  		2
  	],
  	[
  		[
  			43488,
  			43518
  		],
  		2
  	],
  	[
  		43519,
  		3
  	],
  	[
  		[
  			43520,
  			43574
  		],
  		2
  	],
  	[
  		[
  			43575,
  			43583
  		],
  		3
  	],
  	[
  		[
  			43584,
  			43597
  		],
  		2
  	],
  	[
  		[
  			43598,
  			43599
  		],
  		3
  	],
  	[
  		[
  			43600,
  			43609
  		],
  		2
  	],
  	[
  		[
  			43610,
  			43611
  		],
  		3
  	],
  	[
  		[
  			43612,
  			43615
  		],
  		2
  	],
  	[
  		[
  			43616,
  			43638
  		],
  		2
  	],
  	[
  		[
  			43639,
  			43641
  		],
  		2
  	],
  	[
  		[
  			43642,
  			43643
  		],
  		2
  	],
  	[
  		[
  			43644,
  			43647
  		],
  		2
  	],
  	[
  		[
  			43648,
  			43714
  		],
  		2
  	],
  	[
  		[
  			43715,
  			43738
  		],
  		3
  	],
  	[
  		[
  			43739,
  			43741
  		],
  		2
  	],
  	[
  		[
  			43742,
  			43743
  		],
  		2
  	],
  	[
  		[
  			43744,
  			43759
  		],
  		2
  	],
  	[
  		[
  			43760,
  			43761
  		],
  		2
  	],
  	[
  		[
  			43762,
  			43766
  		],
  		2
  	],
  	[
  		[
  			43767,
  			43776
  		],
  		3
  	],
  	[
  		[
  			43777,
  			43782
  		],
  		2
  	],
  	[
  		[
  			43783,
  			43784
  		],
  		3
  	],
  	[
  		[
  			43785,
  			43790
  		],
  		2
  	],
  	[
  		[
  			43791,
  			43792
  		],
  		3
  	],
  	[
  		[
  			43793,
  			43798
  		],
  		2
  	],
  	[
  		[
  			43799,
  			43807
  		],
  		3
  	],
  	[
  		[
  			43808,
  			43814
  		],
  		2
  	],
  	[
  		43815,
  		3
  	],
  	[
  		[
  			43816,
  			43822
  		],
  		2
  	],
  	[
  		43823,
  		3
  	],
  	[
  		[
  			43824,
  			43866
  		],
  		2
  	],
  	[
  		43867,
  		2
  	],
  	[
  		43868,
  		1,
  		"ꜧ"
  	],
  	[
  		43869,
  		1,
  		"ꬷ"
  	],
  	[
  		43870,
  		1,
  		"ɫ"
  	],
  	[
  		43871,
  		1,
  		"ꭒ"
  	],
  	[
  		[
  			43872,
  			43875
  		],
  		2
  	],
  	[
  		[
  			43876,
  			43877
  		],
  		2
  	],
  	[
  		[
  			43878,
  			43879
  		],
  		2
  	],
  	[
  		43880,
  		2
  	],
  	[
  		43881,
  		1,
  		"ʍ"
  	],
  	[
  		[
  			43882,
  			43883
  		],
  		2
  	],
  	[
  		[
  			43884,
  			43887
  		],
  		3
  	],
  	[
  		43888,
  		1,
  		"Ꭰ"
  	],
  	[
  		43889,
  		1,
  		"Ꭱ"
  	],
  	[
  		43890,
  		1,
  		"Ꭲ"
  	],
  	[
  		43891,
  		1,
  		"Ꭳ"
  	],
  	[
  		43892,
  		1,
  		"Ꭴ"
  	],
  	[
  		43893,
  		1,
  		"Ꭵ"
  	],
  	[
  		43894,
  		1,
  		"Ꭶ"
  	],
  	[
  		43895,
  		1,
  		"Ꭷ"
  	],
  	[
  		43896,
  		1,
  		"Ꭸ"
  	],
  	[
  		43897,
  		1,
  		"Ꭹ"
  	],
  	[
  		43898,
  		1,
  		"Ꭺ"
  	],
  	[
  		43899,
  		1,
  		"Ꭻ"
  	],
  	[
  		43900,
  		1,
  		"Ꭼ"
  	],
  	[
  		43901,
  		1,
  		"Ꭽ"
  	],
  	[
  		43902,
  		1,
  		"Ꭾ"
  	],
  	[
  		43903,
  		1,
  		"Ꭿ"
  	],
  	[
  		43904,
  		1,
  		"Ꮀ"
  	],
  	[
  		43905,
  		1,
  		"Ꮁ"
  	],
  	[
  		43906,
  		1,
  		"Ꮂ"
  	],
  	[
  		43907,
  		1,
  		"Ꮃ"
  	],
  	[
  		43908,
  		1,
  		"Ꮄ"
  	],
  	[
  		43909,
  		1,
  		"Ꮅ"
  	],
  	[
  		43910,
  		1,
  		"Ꮆ"
  	],
  	[
  		43911,
  		1,
  		"Ꮇ"
  	],
  	[
  		43912,
  		1,
  		"Ꮈ"
  	],
  	[
  		43913,
  		1,
  		"Ꮉ"
  	],
  	[
  		43914,
  		1,
  		"Ꮊ"
  	],
  	[
  		43915,
  		1,
  		"Ꮋ"
  	],
  	[
  		43916,
  		1,
  		"Ꮌ"
  	],
  	[
  		43917,
  		1,
  		"Ꮍ"
  	],
  	[
  		43918,
  		1,
  		"Ꮎ"
  	],
  	[
  		43919,
  		1,
  		"Ꮏ"
  	],
  	[
  		43920,
  		1,
  		"Ꮐ"
  	],
  	[
  		43921,
  		1,
  		"Ꮑ"
  	],
  	[
  		43922,
  		1,
  		"Ꮒ"
  	],
  	[
  		43923,
  		1,
  		"Ꮓ"
  	],
  	[
  		43924,
  		1,
  		"Ꮔ"
  	],
  	[
  		43925,
  		1,
  		"Ꮕ"
  	],
  	[
  		43926,
  		1,
  		"Ꮖ"
  	],
  	[
  		43927,
  		1,
  		"Ꮗ"
  	],
  	[
  		43928,
  		1,
  		"Ꮘ"
  	],
  	[
  		43929,
  		1,
  		"Ꮙ"
  	],
  	[
  		43930,
  		1,
  		"Ꮚ"
  	],
  	[
  		43931,
  		1,
  		"Ꮛ"
  	],
  	[
  		43932,
  		1,
  		"Ꮜ"
  	],
  	[
  		43933,
  		1,
  		"Ꮝ"
  	],
  	[
  		43934,
  		1,
  		"Ꮞ"
  	],
  	[
  		43935,
  		1,
  		"Ꮟ"
  	],
  	[
  		43936,
  		1,
  		"Ꮠ"
  	],
  	[
  		43937,
  		1,
  		"Ꮡ"
  	],
  	[
  		43938,
  		1,
  		"Ꮢ"
  	],
  	[
  		43939,
  		1,
  		"Ꮣ"
  	],
  	[
  		43940,
  		1,
  		"Ꮤ"
  	],
  	[
  		43941,
  		1,
  		"Ꮥ"
  	],
  	[
  		43942,
  		1,
  		"Ꮦ"
  	],
  	[
  		43943,
  		1,
  		"Ꮧ"
  	],
  	[
  		43944,
  		1,
  		"Ꮨ"
  	],
  	[
  		43945,
  		1,
  		"Ꮩ"
  	],
  	[
  		43946,
  		1,
  		"Ꮪ"
  	],
  	[
  		43947,
  		1,
  		"Ꮫ"
  	],
  	[
  		43948,
  		1,
  		"Ꮬ"
  	],
  	[
  		43949,
  		1,
  		"Ꮭ"
  	],
  	[
  		43950,
  		1,
  		"Ꮮ"
  	],
  	[
  		43951,
  		1,
  		"Ꮯ"
  	],
  	[
  		43952,
  		1,
  		"Ꮰ"
  	],
  	[
  		43953,
  		1,
  		"Ꮱ"
  	],
  	[
  		43954,
  		1,
  		"Ꮲ"
  	],
  	[
  		43955,
  		1,
  		"Ꮳ"
  	],
  	[
  		43956,
  		1,
  		"Ꮴ"
  	],
  	[
  		43957,
  		1,
  		"Ꮵ"
  	],
  	[
  		43958,
  		1,
  		"Ꮶ"
  	],
  	[
  		43959,
  		1,
  		"Ꮷ"
  	],
  	[
  		43960,
  		1,
  		"Ꮸ"
  	],
  	[
  		43961,
  		1,
  		"Ꮹ"
  	],
  	[
  		43962,
  		1,
  		"Ꮺ"
  	],
  	[
  		43963,
  		1,
  		"Ꮻ"
  	],
  	[
  		43964,
  		1,
  		"Ꮼ"
  	],
  	[
  		43965,
  		1,
  		"Ꮽ"
  	],
  	[
  		43966,
  		1,
  		"Ꮾ"
  	],
  	[
  		43967,
  		1,
  		"Ꮿ"
  	],
  	[
  		[
  			43968,
  			44010
  		],
  		2
  	],
  	[
  		44011,
  		2
  	],
  	[
  		[
  			44012,
  			44013
  		],
  		2
  	],
  	[
  		[
  			44014,
  			44015
  		],
  		3
  	],
  	[
  		[
  			44016,
  			44025
  		],
  		2
  	],
  	[
  		[
  			44026,
  			44031
  		],
  		3
  	],
  	[
  		[
  			44032,
  			55203
  		],
  		2
  	],
  	[
  		[
  			55204,
  			55215
  		],
  		3
  	],
  	[
  		[
  			55216,
  			55238
  		],
  		2
  	],
  	[
  		[
  			55239,
  			55242
  		],
  		3
  	],
  	[
  		[
  			55243,
  			55291
  		],
  		2
  	],
  	[
  		[
  			55292,
  			55295
  		],
  		3
  	],
  	[
  		[
  			55296,
  			57343
  		],
  		3
  	],
  	[
  		[
  			57344,
  			63743
  		],
  		3
  	],
  	[
  		63744,
  		1,
  		"豈"
  	],
  	[
  		63745,
  		1,
  		"更"
  	],
  	[
  		63746,
  		1,
  		"車"
  	],
  	[
  		63747,
  		1,
  		"賈"
  	],
  	[
  		63748,
  		1,
  		"滑"
  	],
  	[
  		63749,
  		1,
  		"串"
  	],
  	[
  		63750,
  		1,
  		"句"
  	],
  	[
  		[
  			63751,
  			63752
  		],
  		1,
  		"龜"
  	],
  	[
  		63753,
  		1,
  		"契"
  	],
  	[
  		63754,
  		1,
  		"金"
  	],
  	[
  		63755,
  		1,
  		"喇"
  	],
  	[
  		63756,
  		1,
  		"奈"
  	],
  	[
  		63757,
  		1,
  		"懶"
  	],
  	[
  		63758,
  		1,
  		"癩"
  	],
  	[
  		63759,
  		1,
  		"羅"
  	],
  	[
  		63760,
  		1,
  		"蘿"
  	],
  	[
  		63761,
  		1,
  		"螺"
  	],
  	[
  		63762,
  		1,
  		"裸"
  	],
  	[
  		63763,
  		1,
  		"邏"
  	],
  	[
  		63764,
  		1,
  		"樂"
  	],
  	[
  		63765,
  		1,
  		"洛"
  	],
  	[
  		63766,
  		1,
  		"烙"
  	],
  	[
  		63767,
  		1,
  		"珞"
  	],
  	[
  		63768,
  		1,
  		"落"
  	],
  	[
  		63769,
  		1,
  		"酪"
  	],
  	[
  		63770,
  		1,
  		"駱"
  	],
  	[
  		63771,
  		1,
  		"亂"
  	],
  	[
  		63772,
  		1,
  		"卵"
  	],
  	[
  		63773,
  		1,
  		"欄"
  	],
  	[
  		63774,
  		1,
  		"爛"
  	],
  	[
  		63775,
  		1,
  		"蘭"
  	],
  	[
  		63776,
  		1,
  		"鸞"
  	],
  	[
  		63777,
  		1,
  		"嵐"
  	],
  	[
  		63778,
  		1,
  		"濫"
  	],
  	[
  		63779,
  		1,
  		"藍"
  	],
  	[
  		63780,
  		1,
  		"襤"
  	],
  	[
  		63781,
  		1,
  		"拉"
  	],
  	[
  		63782,
  		1,
  		"臘"
  	],
  	[
  		63783,
  		1,
  		"蠟"
  	],
  	[
  		63784,
  		1,
  		"廊"
  	],
  	[
  		63785,
  		1,
  		"朗"
  	],
  	[
  		63786,
  		1,
  		"浪"
  	],
  	[
  		63787,
  		1,
  		"狼"
  	],
  	[
  		63788,
  		1,
  		"郎"
  	],
  	[
  		63789,
  		1,
  		"來"
  	],
  	[
  		63790,
  		1,
  		"冷"
  	],
  	[
  		63791,
  		1,
  		"勞"
  	],
  	[
  		63792,
  		1,
  		"擄"
  	],
  	[
  		63793,
  		1,
  		"櫓"
  	],
  	[
  		63794,
  		1,
  		"爐"
  	],
  	[
  		63795,
  		1,
  		"盧"
  	],
  	[
  		63796,
  		1,
  		"老"
  	],
  	[
  		63797,
  		1,
  		"蘆"
  	],
  	[
  		63798,
  		1,
  		"虜"
  	],
  	[
  		63799,
  		1,
  		"路"
  	],
  	[
  		63800,
  		1,
  		"露"
  	],
  	[
  		63801,
  		1,
  		"魯"
  	],
  	[
  		63802,
  		1,
  		"鷺"
  	],
  	[
  		63803,
  		1,
  		"碌"
  	],
  	[
  		63804,
  		1,
  		"祿"
  	],
  	[
  		63805,
  		1,
  		"綠"
  	],
  	[
  		63806,
  		1,
  		"菉"
  	],
  	[
  		63807,
  		1,
  		"錄"
  	],
  	[
  		63808,
  		1,
  		"鹿"
  	],
  	[
  		63809,
  		1,
  		"論"
  	],
  	[
  		63810,
  		1,
  		"壟"
  	],
  	[
  		63811,
  		1,
  		"弄"
  	],
  	[
  		63812,
  		1,
  		"籠"
  	],
  	[
  		63813,
  		1,
  		"聾"
  	],
  	[
  		63814,
  		1,
  		"牢"
  	],
  	[
  		63815,
  		1,
  		"磊"
  	],
  	[
  		63816,
  		1,
  		"賂"
  	],
  	[
  		63817,
  		1,
  		"雷"
  	],
  	[
  		63818,
  		1,
  		"壘"
  	],
  	[
  		63819,
  		1,
  		"屢"
  	],
  	[
  		63820,
  		1,
  		"樓"
  	],
  	[
  		63821,
  		1,
  		"淚"
  	],
  	[
  		63822,
  		1,
  		"漏"
  	],
  	[
  		63823,
  		1,
  		"累"
  	],
  	[
  		63824,
  		1,
  		"縷"
  	],
  	[
  		63825,
  		1,
  		"陋"
  	],
  	[
  		63826,
  		1,
  		"勒"
  	],
  	[
  		63827,
  		1,
  		"肋"
  	],
  	[
  		63828,
  		1,
  		"凜"
  	],
  	[
  		63829,
  		1,
  		"凌"
  	],
  	[
  		63830,
  		1,
  		"稜"
  	],
  	[
  		63831,
  		1,
  		"綾"
  	],
  	[
  		63832,
  		1,
  		"菱"
  	],
  	[
  		63833,
  		1,
  		"陵"
  	],
  	[
  		63834,
  		1,
  		"讀"
  	],
  	[
  		63835,
  		1,
  		"拏"
  	],
  	[
  		63836,
  		1,
  		"樂"
  	],
  	[
  		63837,
  		1,
  		"諾"
  	],
  	[
  		63838,
  		1,
  		"丹"
  	],
  	[
  		63839,
  		1,
  		"寧"
  	],
  	[
  		63840,
  		1,
  		"怒"
  	],
  	[
  		63841,
  		1,
  		"率"
  	],
  	[
  		63842,
  		1,
  		"異"
  	],
  	[
  		63843,
  		1,
  		"北"
  	],
  	[
  		63844,
  		1,
  		"磻"
  	],
  	[
  		63845,
  		1,
  		"便"
  	],
  	[
  		63846,
  		1,
  		"復"
  	],
  	[
  		63847,
  		1,
  		"不"
  	],
  	[
  		63848,
  		1,
  		"泌"
  	],
  	[
  		63849,
  		1,
  		"數"
  	],
  	[
  		63850,
  		1,
  		"索"
  	],
  	[
  		63851,
  		1,
  		"參"
  	],
  	[
  		63852,
  		1,
  		"塞"
  	],
  	[
  		63853,
  		1,
  		"省"
  	],
  	[
  		63854,
  		1,
  		"葉"
  	],
  	[
  		63855,
  		1,
  		"說"
  	],
  	[
  		63856,
  		1,
  		"殺"
  	],
  	[
  		63857,
  		1,
  		"辰"
  	],
  	[
  		63858,
  		1,
  		"沈"
  	],
  	[
  		63859,
  		1,
  		"拾"
  	],
  	[
  		63860,
  		1,
  		"若"
  	],
  	[
  		63861,
  		1,
  		"掠"
  	],
  	[
  		63862,
  		1,
  		"略"
  	],
  	[
  		63863,
  		1,
  		"亮"
  	],
  	[
  		63864,
  		1,
  		"兩"
  	],
  	[
  		63865,
  		1,
  		"凉"
  	],
  	[
  		63866,
  		1,
  		"梁"
  	],
  	[
  		63867,
  		1,
  		"糧"
  	],
  	[
  		63868,
  		1,
  		"良"
  	],
  	[
  		63869,
  		1,
  		"諒"
  	],
  	[
  		63870,
  		1,
  		"量"
  	],
  	[
  		63871,
  		1,
  		"勵"
  	],
  	[
  		63872,
  		1,
  		"呂"
  	],
  	[
  		63873,
  		1,
  		"女"
  	],
  	[
  		63874,
  		1,
  		"廬"
  	],
  	[
  		63875,
  		1,
  		"旅"
  	],
  	[
  		63876,
  		1,
  		"濾"
  	],
  	[
  		63877,
  		1,
  		"礪"
  	],
  	[
  		63878,
  		1,
  		"閭"
  	],
  	[
  		63879,
  		1,
  		"驪"
  	],
  	[
  		63880,
  		1,
  		"麗"
  	],
  	[
  		63881,
  		1,
  		"黎"
  	],
  	[
  		63882,
  		1,
  		"力"
  	],
  	[
  		63883,
  		1,
  		"曆"
  	],
  	[
  		63884,
  		1,
  		"歷"
  	],
  	[
  		63885,
  		1,
  		"轢"
  	],
  	[
  		63886,
  		1,
  		"年"
  	],
  	[
  		63887,
  		1,
  		"憐"
  	],
  	[
  		63888,
  		1,
  		"戀"
  	],
  	[
  		63889,
  		1,
  		"撚"
  	],
  	[
  		63890,
  		1,
  		"漣"
  	],
  	[
  		63891,
  		1,
  		"煉"
  	],
  	[
  		63892,
  		1,
  		"璉"
  	],
  	[
  		63893,
  		1,
  		"秊"
  	],
  	[
  		63894,
  		1,
  		"練"
  	],
  	[
  		63895,
  		1,
  		"聯"
  	],
  	[
  		63896,
  		1,
  		"輦"
  	],
  	[
  		63897,
  		1,
  		"蓮"
  	],
  	[
  		63898,
  		1,
  		"連"
  	],
  	[
  		63899,
  		1,
  		"鍊"
  	],
  	[
  		63900,
  		1,
  		"列"
  	],
  	[
  		63901,
  		1,
  		"劣"
  	],
  	[
  		63902,
  		1,
  		"咽"
  	],
  	[
  		63903,
  		1,
  		"烈"
  	],
  	[
  		63904,
  		1,
  		"裂"
  	],
  	[
  		63905,
  		1,
  		"說"
  	],
  	[
  		63906,
  		1,
  		"廉"
  	],
  	[
  		63907,
  		1,
  		"念"
  	],
  	[
  		63908,
  		1,
  		"捻"
  	],
  	[
  		63909,
  		1,
  		"殮"
  	],
  	[
  		63910,
  		1,
  		"簾"
  	],
  	[
  		63911,
  		1,
  		"獵"
  	],
  	[
  		63912,
  		1,
  		"令"
  	],
  	[
  		63913,
  		1,
  		"囹"
  	],
  	[
  		63914,
  		1,
  		"寧"
  	],
  	[
  		63915,
  		1,
  		"嶺"
  	],
  	[
  		63916,
  		1,
  		"怜"
  	],
  	[
  		63917,
  		1,
  		"玲"
  	],
  	[
  		63918,
  		1,
  		"瑩"
  	],
  	[
  		63919,
  		1,
  		"羚"
  	],
  	[
  		63920,
  		1,
  		"聆"
  	],
  	[
  		63921,
  		1,
  		"鈴"
  	],
  	[
  		63922,
  		1,
  		"零"
  	],
  	[
  		63923,
  		1,
  		"靈"
  	],
  	[
  		63924,
  		1,
  		"領"
  	],
  	[
  		63925,
  		1,
  		"例"
  	],
  	[
  		63926,
  		1,
  		"禮"
  	],
  	[
  		63927,
  		1,
  		"醴"
  	],
  	[
  		63928,
  		1,
  		"隸"
  	],
  	[
  		63929,
  		1,
  		"惡"
  	],
  	[
  		63930,
  		1,
  		"了"
  	],
  	[
  		63931,
  		1,
  		"僚"
  	],
  	[
  		63932,
  		1,
  		"寮"
  	],
  	[
  		63933,
  		1,
  		"尿"
  	],
  	[
  		63934,
  		1,
  		"料"
  	],
  	[
  		63935,
  		1,
  		"樂"
  	],
  	[
  		63936,
  		1,
  		"燎"
  	],
  	[
  		63937,
  		1,
  		"療"
  	],
  	[
  		63938,
  		1,
  		"蓼"
  	],
  	[
  		63939,
  		1,
  		"遼"
  	],
  	[
  		63940,
  		1,
  		"龍"
  	],
  	[
  		63941,
  		1,
  		"暈"
  	],
  	[
  		63942,
  		1,
  		"阮"
  	],
  	[
  		63943,
  		1,
  		"劉"
  	],
  	[
  		63944,
  		1,
  		"杻"
  	],
  	[
  		63945,
  		1,
  		"柳"
  	],
  	[
  		63946,
  		1,
  		"流"
  	],
  	[
  		63947,
  		1,
  		"溜"
  	],
  	[
  		63948,
  		1,
  		"琉"
  	],
  	[
  		63949,
  		1,
  		"留"
  	],
  	[
  		63950,
  		1,
  		"硫"
  	],
  	[
  		63951,
  		1,
  		"紐"
  	],
  	[
  		63952,
  		1,
  		"類"
  	],
  	[
  		63953,
  		1,
  		"六"
  	],
  	[
  		63954,
  		1,
  		"戮"
  	],
  	[
  		63955,
  		1,
  		"陸"
  	],
  	[
  		63956,
  		1,
  		"倫"
  	],
  	[
  		63957,
  		1,
  		"崙"
  	],
  	[
  		63958,
  		1,
  		"淪"
  	],
  	[
  		63959,
  		1,
  		"輪"
  	],
  	[
  		63960,
  		1,
  		"律"
  	],
  	[
  		63961,
  		1,
  		"慄"
  	],
  	[
  		63962,
  		1,
  		"栗"
  	],
  	[
  		63963,
  		1,
  		"率"
  	],
  	[
  		63964,
  		1,
  		"隆"
  	],
  	[
  		63965,
  		1,
  		"利"
  	],
  	[
  		63966,
  		1,
  		"吏"
  	],
  	[
  		63967,
  		1,
  		"履"
  	],
  	[
  		63968,
  		1,
  		"易"
  	],
  	[
  		63969,
  		1,
  		"李"
  	],
  	[
  		63970,
  		1,
  		"梨"
  	],
  	[
  		63971,
  		1,
  		"泥"
  	],
  	[
  		63972,
  		1,
  		"理"
  	],
  	[
  		63973,
  		1,
  		"痢"
  	],
  	[
  		63974,
  		1,
  		"罹"
  	],
  	[
  		63975,
  		1,
  		"裏"
  	],
  	[
  		63976,
  		1,
  		"裡"
  	],
  	[
  		63977,
  		1,
  		"里"
  	],
  	[
  		63978,
  		1,
  		"離"
  	],
  	[
  		63979,
  		1,
  		"匿"
  	],
  	[
  		63980,
  		1,
  		"溺"
  	],
  	[
  		63981,
  		1,
  		"吝"
  	],
  	[
  		63982,
  		1,
  		"燐"
  	],
  	[
  		63983,
  		1,
  		"璘"
  	],
  	[
  		63984,
  		1,
  		"藺"
  	],
  	[
  		63985,
  		1,
  		"隣"
  	],
  	[
  		63986,
  		1,
  		"鱗"
  	],
  	[
  		63987,
  		1,
  		"麟"
  	],
  	[
  		63988,
  		1,
  		"林"
  	],
  	[
  		63989,
  		1,
  		"淋"
  	],
  	[
  		63990,
  		1,
  		"臨"
  	],
  	[
  		63991,
  		1,
  		"立"
  	],
  	[
  		63992,
  		1,
  		"笠"
  	],
  	[
  		63993,
  		1,
  		"粒"
  	],
  	[
  		63994,
  		1,
  		"狀"
  	],
  	[
  		63995,
  		1,
  		"炙"
  	],
  	[
  		63996,
  		1,
  		"識"
  	],
  	[
  		63997,
  		1,
  		"什"
  	],
  	[
  		63998,
  		1,
  		"茶"
  	],
  	[
  		63999,
  		1,
  		"刺"
  	],
  	[
  		64000,
  		1,
  		"切"
  	],
  	[
  		64001,
  		1,
  		"度"
  	],
  	[
  		64002,
  		1,
  		"拓"
  	],
  	[
  		64003,
  		1,
  		"糖"
  	],
  	[
  		64004,
  		1,
  		"宅"
  	],
  	[
  		64005,
  		1,
  		"洞"
  	],
  	[
  		64006,
  		1,
  		"暴"
  	],
  	[
  		64007,
  		1,
  		"輻"
  	],
  	[
  		64008,
  		1,
  		"行"
  	],
  	[
  		64009,
  		1,
  		"降"
  	],
  	[
  		64010,
  		1,
  		"見"
  	],
  	[
  		64011,
  		1,
  		"廓"
  	],
  	[
  		64012,
  		1,
  		"兀"
  	],
  	[
  		64013,
  		1,
  		"嗀"
  	],
  	[
  		[
  			64014,
  			64015
  		],
  		2
  	],
  	[
  		64016,
  		1,
  		"塚"
  	],
  	[
  		64017,
  		2
  	],
  	[
  		64018,
  		1,
  		"晴"
  	],
  	[
  		[
  			64019,
  			64020
  		],
  		2
  	],
  	[
  		64021,
  		1,
  		"凞"
  	],
  	[
  		64022,
  		1,
  		"猪"
  	],
  	[
  		64023,
  		1,
  		"益"
  	],
  	[
  		64024,
  		1,
  		"礼"
  	],
  	[
  		64025,
  		1,
  		"神"
  	],
  	[
  		64026,
  		1,
  		"祥"
  	],
  	[
  		64027,
  		1,
  		"福"
  	],
  	[
  		64028,
  		1,
  		"靖"
  	],
  	[
  		64029,
  		1,
  		"精"
  	],
  	[
  		64030,
  		1,
  		"羽"
  	],
  	[
  		64031,
  		2
  	],
  	[
  		64032,
  		1,
  		"蘒"
  	],
  	[
  		64033,
  		2
  	],
  	[
  		64034,
  		1,
  		"諸"
  	],
  	[
  		[
  			64035,
  			64036
  		],
  		2
  	],
  	[
  		64037,
  		1,
  		"逸"
  	],
  	[
  		64038,
  		1,
  		"都"
  	],
  	[
  		[
  			64039,
  			64041
  		],
  		2
  	],
  	[
  		64042,
  		1,
  		"飯"
  	],
  	[
  		64043,
  		1,
  		"飼"
  	],
  	[
  		64044,
  		1,
  		"館"
  	],
  	[
  		64045,
  		1,
  		"鶴"
  	],
  	[
  		64046,
  		1,
  		"郞"
  	],
  	[
  		64047,
  		1,
  		"隷"
  	],
  	[
  		64048,
  		1,
  		"侮"
  	],
  	[
  		64049,
  		1,
  		"僧"
  	],
  	[
  		64050,
  		1,
  		"免"
  	],
  	[
  		64051,
  		1,
  		"勉"
  	],
  	[
  		64052,
  		1,
  		"勤"
  	],
  	[
  		64053,
  		1,
  		"卑"
  	],
  	[
  		64054,
  		1,
  		"喝"
  	],
  	[
  		64055,
  		1,
  		"嘆"
  	],
  	[
  		64056,
  		1,
  		"器"
  	],
  	[
  		64057,
  		1,
  		"塀"
  	],
  	[
  		64058,
  		1,
  		"墨"
  	],
  	[
  		64059,
  		1,
  		"層"
  	],
  	[
  		64060,
  		1,
  		"屮"
  	],
  	[
  		64061,
  		1,
  		"悔"
  	],
  	[
  		64062,
  		1,
  		"慨"
  	],
  	[
  		64063,
  		1,
  		"憎"
  	],
  	[
  		64064,
  		1,
  		"懲"
  	],
  	[
  		64065,
  		1,
  		"敏"
  	],
  	[
  		64066,
  		1,
  		"既"
  	],
  	[
  		64067,
  		1,
  		"暑"
  	],
  	[
  		64068,
  		1,
  		"梅"
  	],
  	[
  		64069,
  		1,
  		"海"
  	],
  	[
  		64070,
  		1,
  		"渚"
  	],
  	[
  		64071,
  		1,
  		"漢"
  	],
  	[
  		64072,
  		1,
  		"煮"
  	],
  	[
  		64073,
  		1,
  		"爫"
  	],
  	[
  		64074,
  		1,
  		"琢"
  	],
  	[
  		64075,
  		1,
  		"碑"
  	],
  	[
  		64076,
  		1,
  		"社"
  	],
  	[
  		64077,
  		1,
  		"祉"
  	],
  	[
  		64078,
  		1,
  		"祈"
  	],
  	[
  		64079,
  		1,
  		"祐"
  	],
  	[
  		64080,
  		1,
  		"祖"
  	],
  	[
  		64081,
  		1,
  		"祝"
  	],
  	[
  		64082,
  		1,
  		"禍"
  	],
  	[
  		64083,
  		1,
  		"禎"
  	],
  	[
  		64084,
  		1,
  		"穀"
  	],
  	[
  		64085,
  		1,
  		"突"
  	],
  	[
  		64086,
  		1,
  		"節"
  	],
  	[
  		64087,
  		1,
  		"練"
  	],
  	[
  		64088,
  		1,
  		"縉"
  	],
  	[
  		64089,
  		1,
  		"繁"
  	],
  	[
  		64090,
  		1,
  		"署"
  	],
  	[
  		64091,
  		1,
  		"者"
  	],
  	[
  		64092,
  		1,
  		"臭"
  	],
  	[
  		[
  			64093,
  			64094
  		],
  		1,
  		"艹"
  	],
  	[
  		64095,
  		1,
  		"著"
  	],
  	[
  		64096,
  		1,
  		"褐"
  	],
  	[
  		64097,
  		1,
  		"視"
  	],
  	[
  		64098,
  		1,
  		"謁"
  	],
  	[
  		64099,
  		1,
  		"謹"
  	],
  	[
  		64100,
  		1,
  		"賓"
  	],
  	[
  		64101,
  		1,
  		"贈"
  	],
  	[
  		64102,
  		1,
  		"辶"
  	],
  	[
  		64103,
  		1,
  		"逸"
  	],
  	[
  		64104,
  		1,
  		"難"
  	],
  	[
  		64105,
  		1,
  		"響"
  	],
  	[
  		64106,
  		1,
  		"頻"
  	],
  	[
  		64107,
  		1,
  		"恵"
  	],
  	[
  		64108,
  		1,
  		"𤋮"
  	],
  	[
  		64109,
  		1,
  		"舘"
  	],
  	[
  		[
  			64110,
  			64111
  		],
  		3
  	],
  	[
  		64112,
  		1,
  		"並"
  	],
  	[
  		64113,
  		1,
  		"况"
  	],
  	[
  		64114,
  		1,
  		"全"
  	],
  	[
  		64115,
  		1,
  		"侀"
  	],
  	[
  		64116,
  		1,
  		"充"
  	],
  	[
  		64117,
  		1,
  		"冀"
  	],
  	[
  		64118,
  		1,
  		"勇"
  	],
  	[
  		64119,
  		1,
  		"勺"
  	],
  	[
  		64120,
  		1,
  		"喝"
  	],
  	[
  		64121,
  		1,
  		"啕"
  	],
  	[
  		64122,
  		1,
  		"喙"
  	],
  	[
  		64123,
  		1,
  		"嗢"
  	],
  	[
  		64124,
  		1,
  		"塚"
  	],
  	[
  		64125,
  		1,
  		"墳"
  	],
  	[
  		64126,
  		1,
  		"奄"
  	],
  	[
  		64127,
  		1,
  		"奔"
  	],
  	[
  		64128,
  		1,
  		"婢"
  	],
  	[
  		64129,
  		1,
  		"嬨"
  	],
  	[
  		64130,
  		1,
  		"廒"
  	],
  	[
  		64131,
  		1,
  		"廙"
  	],
  	[
  		64132,
  		1,
  		"彩"
  	],
  	[
  		64133,
  		1,
  		"徭"
  	],
  	[
  		64134,
  		1,
  		"惘"
  	],
  	[
  		64135,
  		1,
  		"慎"
  	],
  	[
  		64136,
  		1,
  		"愈"
  	],
  	[
  		64137,
  		1,
  		"憎"
  	],
  	[
  		64138,
  		1,
  		"慠"
  	],
  	[
  		64139,
  		1,
  		"懲"
  	],
  	[
  		64140,
  		1,
  		"戴"
  	],
  	[
  		64141,
  		1,
  		"揄"
  	],
  	[
  		64142,
  		1,
  		"搜"
  	],
  	[
  		64143,
  		1,
  		"摒"
  	],
  	[
  		64144,
  		1,
  		"敖"
  	],
  	[
  		64145,
  		1,
  		"晴"
  	],
  	[
  		64146,
  		1,
  		"朗"
  	],
  	[
  		64147,
  		1,
  		"望"
  	],
  	[
  		64148,
  		1,
  		"杖"
  	],
  	[
  		64149,
  		1,
  		"歹"
  	],
  	[
  		64150,
  		1,
  		"殺"
  	],
  	[
  		64151,
  		1,
  		"流"
  	],
  	[
  		64152,
  		1,
  		"滛"
  	],
  	[
  		64153,
  		1,
  		"滋"
  	],
  	[
  		64154,
  		1,
  		"漢"
  	],
  	[
  		64155,
  		1,
  		"瀞"
  	],
  	[
  		64156,
  		1,
  		"煮"
  	],
  	[
  		64157,
  		1,
  		"瞧"
  	],
  	[
  		64158,
  		1,
  		"爵"
  	],
  	[
  		64159,
  		1,
  		"犯"
  	],
  	[
  		64160,
  		1,
  		"猪"
  	],
  	[
  		64161,
  		1,
  		"瑱"
  	],
  	[
  		64162,
  		1,
  		"甆"
  	],
  	[
  		64163,
  		1,
  		"画"
  	],
  	[
  		64164,
  		1,
  		"瘝"
  	],
  	[
  		64165,
  		1,
  		"瘟"
  	],
  	[
  		64166,
  		1,
  		"益"
  	],
  	[
  		64167,
  		1,
  		"盛"
  	],
  	[
  		64168,
  		1,
  		"直"
  	],
  	[
  		64169,
  		1,
  		"睊"
  	],
  	[
  		64170,
  		1,
  		"着"
  	],
  	[
  		64171,
  		1,
  		"磌"
  	],
  	[
  		64172,
  		1,
  		"窱"
  	],
  	[
  		64173,
  		1,
  		"節"
  	],
  	[
  		64174,
  		1,
  		"类"
  	],
  	[
  		64175,
  		1,
  		"絛"
  	],
  	[
  		64176,
  		1,
  		"練"
  	],
  	[
  		64177,
  		1,
  		"缾"
  	],
  	[
  		64178,
  		1,
  		"者"
  	],
  	[
  		64179,
  		1,
  		"荒"
  	],
  	[
  		64180,
  		1,
  		"華"
  	],
  	[
  		64181,
  		1,
  		"蝹"
  	],
  	[
  		64182,
  		1,
  		"襁"
  	],
  	[
  		64183,
  		1,
  		"覆"
  	],
  	[
  		64184,
  		1,
  		"視"
  	],
  	[
  		64185,
  		1,
  		"調"
  	],
  	[
  		64186,
  		1,
  		"諸"
  	],
  	[
  		64187,
  		1,
  		"請"
  	],
  	[
  		64188,
  		1,
  		"謁"
  	],
  	[
  		64189,
  		1,
  		"諾"
  	],
  	[
  		64190,
  		1,
  		"諭"
  	],
  	[
  		64191,
  		1,
  		"謹"
  	],
  	[
  		64192,
  		1,
  		"變"
  	],
  	[
  		64193,
  		1,
  		"贈"
  	],
  	[
  		64194,
  		1,
  		"輸"
  	],
  	[
  		64195,
  		1,
  		"遲"
  	],
  	[
  		64196,
  		1,
  		"醙"
  	],
  	[
  		64197,
  		1,
  		"鉶"
  	],
  	[
  		64198,
  		1,
  		"陼"
  	],
  	[
  		64199,
  		1,
  		"難"
  	],
  	[
  		64200,
  		1,
  		"靖"
  	],
  	[
  		64201,
  		1,
  		"韛"
  	],
  	[
  		64202,
  		1,
  		"響"
  	],
  	[
  		64203,
  		1,
  		"頋"
  	],
  	[
  		64204,
  		1,
  		"頻"
  	],
  	[
  		64205,
  		1,
  		"鬒"
  	],
  	[
  		64206,
  		1,
  		"龜"
  	],
  	[
  		64207,
  		1,
  		"𢡊"
  	],
  	[
  		64208,
  		1,
  		"𢡄"
  	],
  	[
  		64209,
  		1,
  		"𣏕"
  	],
  	[
  		64210,
  		1,
  		"㮝"
  	],
  	[
  		64211,
  		1,
  		"䀘"
  	],
  	[
  		64212,
  		1,
  		"䀹"
  	],
  	[
  		64213,
  		1,
  		"𥉉"
  	],
  	[
  		64214,
  		1,
  		"𥳐"
  	],
  	[
  		64215,
  		1,
  		"𧻓"
  	],
  	[
  		64216,
  		1,
  		"齃"
  	],
  	[
  		64217,
  		1,
  		"龎"
  	],
  	[
  		[
  			64218,
  			64255
  		],
  		3
  	],
  	[
  		64256,
  		1,
  		"ff"
  	],
  	[
  		64257,
  		1,
  		"fi"
  	],
  	[
  		64258,
  		1,
  		"fl"
  	],
  	[
  		64259,
  		1,
  		"ffi"
  	],
  	[
  		64260,
  		1,
  		"ffl"
  	],
  	[
  		[
  			64261,
  			64262
  		],
  		1,
  		"st"
  	],
  	[
  		[
  			64263,
  			64274
  		],
  		3
  	],
  	[
  		64275,
  		1,
  		"մն"
  	],
  	[
  		64276,
  		1,
  		"մե"
  	],
  	[
  		64277,
  		1,
  		"մի"
  	],
  	[
  		64278,
  		1,
  		"վն"
  	],
  	[
  		64279,
  		1,
  		"մխ"
  	],
  	[
  		[
  			64280,
  			64284
  		],
  		3
  	],
  	[
  		64285,
  		1,
  		"יִ"
  	],
  	[
  		64286,
  		2
  	],
  	[
  		64287,
  		1,
  		"ײַ"
  	],
  	[
  		64288,
  		1,
  		"ע"
  	],
  	[
  		64289,
  		1,
  		"א"
  	],
  	[
  		64290,
  		1,
  		"ד"
  	],
  	[
  		64291,
  		1,
  		"ה"
  	],
  	[
  		64292,
  		1,
  		"כ"
  	],
  	[
  		64293,
  		1,
  		"ל"
  	],
  	[
  		64294,
  		1,
  		"ם"
  	],
  	[
  		64295,
  		1,
  		"ר"
  	],
  	[
  		64296,
  		1,
  		"ת"
  	],
  	[
  		64297,
  		5,
  		"+"
  	],
  	[
  		64298,
  		1,
  		"שׁ"
  	],
  	[
  		64299,
  		1,
  		"שׂ"
  	],
  	[
  		64300,
  		1,
  		"שּׁ"
  	],
  	[
  		64301,
  		1,
  		"שּׂ"
  	],
  	[
  		64302,
  		1,
  		"אַ"
  	],
  	[
  		64303,
  		1,
  		"אָ"
  	],
  	[
  		64304,
  		1,
  		"אּ"
  	],
  	[
  		64305,
  		1,
  		"בּ"
  	],
  	[
  		64306,
  		1,
  		"גּ"
  	],
  	[
  		64307,
  		1,
  		"דּ"
  	],
  	[
  		64308,
  		1,
  		"הּ"
  	],
  	[
  		64309,
  		1,
  		"וּ"
  	],
  	[
  		64310,
  		1,
  		"זּ"
  	],
  	[
  		64311,
  		3
  	],
  	[
  		64312,
  		1,
  		"טּ"
  	],
  	[
  		64313,
  		1,
  		"יּ"
  	],
  	[
  		64314,
  		1,
  		"ךּ"
  	],
  	[
  		64315,
  		1,
  		"כּ"
  	],
  	[
  		64316,
  		1,
  		"לּ"
  	],
  	[
  		64317,
  		3
  	],
  	[
  		64318,
  		1,
  		"מּ"
  	],
  	[
  		64319,
  		3
  	],
  	[
  		64320,
  		1,
  		"נּ"
  	],
  	[
  		64321,
  		1,
  		"סּ"
  	],
  	[
  		64322,
  		3
  	],
  	[
  		64323,
  		1,
  		"ףּ"
  	],
  	[
  		64324,
  		1,
  		"פּ"
  	],
  	[
  		64325,
  		3
  	],
  	[
  		64326,
  		1,
  		"צּ"
  	],
  	[
  		64327,
  		1,
  		"קּ"
  	],
  	[
  		64328,
  		1,
  		"רּ"
  	],
  	[
  		64329,
  		1,
  		"שּ"
  	],
  	[
  		64330,
  		1,
  		"תּ"
  	],
  	[
  		64331,
  		1,
  		"וֹ"
  	],
  	[
  		64332,
  		1,
  		"בֿ"
  	],
  	[
  		64333,
  		1,
  		"כֿ"
  	],
  	[
  		64334,
  		1,
  		"פֿ"
  	],
  	[
  		64335,
  		1,
  		"אל"
  	],
  	[
  		[
  			64336,
  			64337
  		],
  		1,
  		"ٱ"
  	],
  	[
  		[
  			64338,
  			64341
  		],
  		1,
  		"ٻ"
  	],
  	[
  		[
  			64342,
  			64345
  		],
  		1,
  		"پ"
  	],
  	[
  		[
  			64346,
  			64349
  		],
  		1,
  		"ڀ"
  	],
  	[
  		[
  			64350,
  			64353
  		],
  		1,
  		"ٺ"
  	],
  	[
  		[
  			64354,
  			64357
  		],
  		1,
  		"ٿ"
  	],
  	[
  		[
  			64358,
  			64361
  		],
  		1,
  		"ٹ"
  	],
  	[
  		[
  			64362,
  			64365
  		],
  		1,
  		"ڤ"
  	],
  	[
  		[
  			64366,
  			64369
  		],
  		1,
  		"ڦ"
  	],
  	[
  		[
  			64370,
  			64373
  		],
  		1,
  		"ڄ"
  	],
  	[
  		[
  			64374,
  			64377
  		],
  		1,
  		"ڃ"
  	],
  	[
  		[
  			64378,
  			64381
  		],
  		1,
  		"چ"
  	],
  	[
  		[
  			64382,
  			64385
  		],
  		1,
  		"ڇ"
  	],
  	[
  		[
  			64386,
  			64387
  		],
  		1,
  		"ڍ"
  	],
  	[
  		[
  			64388,
  			64389
  		],
  		1,
  		"ڌ"
  	],
  	[
  		[
  			64390,
  			64391
  		],
  		1,
  		"ڎ"
  	],
  	[
  		[
  			64392,
  			64393
  		],
  		1,
  		"ڈ"
  	],
  	[
  		[
  			64394,
  			64395
  		],
  		1,
  		"ژ"
  	],
  	[
  		[
  			64396,
  			64397
  		],
  		1,
  		"ڑ"
  	],
  	[
  		[
  			64398,
  			64401
  		],
  		1,
  		"ک"
  	],
  	[
  		[
  			64402,
  			64405
  		],
  		1,
  		"گ"
  	],
  	[
  		[
  			64406,
  			64409
  		],
  		1,
  		"ڳ"
  	],
  	[
  		[
  			64410,
  			64413
  		],
  		1,
  		"ڱ"
  	],
  	[
  		[
  			64414,
  			64415
  		],
  		1,
  		"ں"
  	],
  	[
  		[
  			64416,
  			64419
  		],
  		1,
  		"ڻ"
  	],
  	[
  		[
  			64420,
  			64421
  		],
  		1,
  		"ۀ"
  	],
  	[
  		[
  			64422,
  			64425
  		],
  		1,
  		"ہ"
  	],
  	[
  		[
  			64426,
  			64429
  		],
  		1,
  		"ھ"
  	],
  	[
  		[
  			64430,
  			64431
  		],
  		1,
  		"ے"
  	],
  	[
  		[
  			64432,
  			64433
  		],
  		1,
  		"ۓ"
  	],
  	[
  		[
  			64434,
  			64449
  		],
  		2
  	],
  	[
  		[
  			64450,
  			64466
  		],
  		3
  	],
  	[
  		[
  			64467,
  			64470
  		],
  		1,
  		"ڭ"
  	],
  	[
  		[
  			64471,
  			64472
  		],
  		1,
  		"ۇ"
  	],
  	[
  		[
  			64473,
  			64474
  		],
  		1,
  		"ۆ"
  	],
  	[
  		[
  			64475,
  			64476
  		],
  		1,
  		"ۈ"
  	],
  	[
  		64477,
  		1,
  		"ۇٴ"
  	],
  	[
  		[
  			64478,
  			64479
  		],
  		1,
  		"ۋ"
  	],
  	[
  		[
  			64480,
  			64481
  		],
  		1,
  		"ۅ"
  	],
  	[
  		[
  			64482,
  			64483
  		],
  		1,
  		"ۉ"
  	],
  	[
  		[
  			64484,
  			64487
  		],
  		1,
  		"ې"
  	],
  	[
  		[
  			64488,
  			64489
  		],
  		1,
  		"ى"
  	],
  	[
  		[
  			64490,
  			64491
  		],
  		1,
  		"ئا"
  	],
  	[
  		[
  			64492,
  			64493
  		],
  		1,
  		"ئە"
  	],
  	[
  		[
  			64494,
  			64495
  		],
  		1,
  		"ئو"
  	],
  	[
  		[
  			64496,
  			64497
  		],
  		1,
  		"ئۇ"
  	],
  	[
  		[
  			64498,
  			64499
  		],
  		1,
  		"ئۆ"
  	],
  	[
  		[
  			64500,
  			64501
  		],
  		1,
  		"ئۈ"
  	],
  	[
  		[
  			64502,
  			64504
  		],
  		1,
  		"ئې"
  	],
  	[
  		[
  			64505,
  			64507
  		],
  		1,
  		"ئى"
  	],
  	[
  		[
  			64508,
  			64511
  		],
  		1,
  		"ی"
  	],
  	[
  		64512,
  		1,
  		"ئج"
  	],
  	[
  		64513,
  		1,
  		"ئح"
  	],
  	[
  		64514,
  		1,
  		"ئم"
  	],
  	[
  		64515,
  		1,
  		"ئى"
  	],
  	[
  		64516,
  		1,
  		"ئي"
  	],
  	[
  		64517,
  		1,
  		"بج"
  	],
  	[
  		64518,
  		1,
  		"بح"
  	],
  	[
  		64519,
  		1,
  		"بخ"
  	],
  	[
  		64520,
  		1,
  		"بم"
  	],
  	[
  		64521,
  		1,
  		"بى"
  	],
  	[
  		64522,
  		1,
  		"بي"
  	],
  	[
  		64523,
  		1,
  		"تج"
  	],
  	[
  		64524,
  		1,
  		"تح"
  	],
  	[
  		64525,
  		1,
  		"تخ"
  	],
  	[
  		64526,
  		1,
  		"تم"
  	],
  	[
  		64527,
  		1,
  		"تى"
  	],
  	[
  		64528,
  		1,
  		"تي"
  	],
  	[
  		64529,
  		1,
  		"ثج"
  	],
  	[
  		64530,
  		1,
  		"ثم"
  	],
  	[
  		64531,
  		1,
  		"ثى"
  	],
  	[
  		64532,
  		1,
  		"ثي"
  	],
  	[
  		64533,
  		1,
  		"جح"
  	],
  	[
  		64534,
  		1,
  		"جم"
  	],
  	[
  		64535,
  		1,
  		"حج"
  	],
  	[
  		64536,
  		1,
  		"حم"
  	],
  	[
  		64537,
  		1,
  		"خج"
  	],
  	[
  		64538,
  		1,
  		"خح"
  	],
  	[
  		64539,
  		1,
  		"خم"
  	],
  	[
  		64540,
  		1,
  		"سج"
  	],
  	[
  		64541,
  		1,
  		"سح"
  	],
  	[
  		64542,
  		1,
  		"سخ"
  	],
  	[
  		64543,
  		1,
  		"سم"
  	],
  	[
  		64544,
  		1,
  		"صح"
  	],
  	[
  		64545,
  		1,
  		"صم"
  	],
  	[
  		64546,
  		1,
  		"ضج"
  	],
  	[
  		64547,
  		1,
  		"ضح"
  	],
  	[
  		64548,
  		1,
  		"ضخ"
  	],
  	[
  		64549,
  		1,
  		"ضم"
  	],
  	[
  		64550,
  		1,
  		"طح"
  	],
  	[
  		64551,
  		1,
  		"طم"
  	],
  	[
  		64552,
  		1,
  		"ظم"
  	],
  	[
  		64553,
  		1,
  		"عج"
  	],
  	[
  		64554,
  		1,
  		"عم"
  	],
  	[
  		64555,
  		1,
  		"غج"
  	],
  	[
  		64556,
  		1,
  		"غم"
  	],
  	[
  		64557,
  		1,
  		"فج"
  	],
  	[
  		64558,
  		1,
  		"فح"
  	],
  	[
  		64559,
  		1,
  		"فخ"
  	],
  	[
  		64560,
  		1,
  		"فم"
  	],
  	[
  		64561,
  		1,
  		"فى"
  	],
  	[
  		64562,
  		1,
  		"في"
  	],
  	[
  		64563,
  		1,
  		"قح"
  	],
  	[
  		64564,
  		1,
  		"قم"
  	],
  	[
  		64565,
  		1,
  		"قى"
  	],
  	[
  		64566,
  		1,
  		"قي"
  	],
  	[
  		64567,
  		1,
  		"كا"
  	],
  	[
  		64568,
  		1,
  		"كج"
  	],
  	[
  		64569,
  		1,
  		"كح"
  	],
  	[
  		64570,
  		1,
  		"كخ"
  	],
  	[
  		64571,
  		1,
  		"كل"
  	],
  	[
  		64572,
  		1,
  		"كم"
  	],
  	[
  		64573,
  		1,
  		"كى"
  	],
  	[
  		64574,
  		1,
  		"كي"
  	],
  	[
  		64575,
  		1,
  		"لج"
  	],
  	[
  		64576,
  		1,
  		"لح"
  	],
  	[
  		64577,
  		1,
  		"لخ"
  	],
  	[
  		64578,
  		1,
  		"لم"
  	],
  	[
  		64579,
  		1,
  		"لى"
  	],
  	[
  		64580,
  		1,
  		"لي"
  	],
  	[
  		64581,
  		1,
  		"مج"
  	],
  	[
  		64582,
  		1,
  		"مح"
  	],
  	[
  		64583,
  		1,
  		"مخ"
  	],
  	[
  		64584,
  		1,
  		"مم"
  	],
  	[
  		64585,
  		1,
  		"مى"
  	],
  	[
  		64586,
  		1,
  		"مي"
  	],
  	[
  		64587,
  		1,
  		"نج"
  	],
  	[
  		64588,
  		1,
  		"نح"
  	],
  	[
  		64589,
  		1,
  		"نخ"
  	],
  	[
  		64590,
  		1,
  		"نم"
  	],
  	[
  		64591,
  		1,
  		"نى"
  	],
  	[
  		64592,
  		1,
  		"ني"
  	],
  	[
  		64593,
  		1,
  		"هج"
  	],
  	[
  		64594,
  		1,
  		"هم"
  	],
  	[
  		64595,
  		1,
  		"هى"
  	],
  	[
  		64596,
  		1,
  		"هي"
  	],
  	[
  		64597,
  		1,
  		"يج"
  	],
  	[
  		64598,
  		1,
  		"يح"
  	],
  	[
  		64599,
  		1,
  		"يخ"
  	],
  	[
  		64600,
  		1,
  		"يم"
  	],
  	[
  		64601,
  		1,
  		"يى"
  	],
  	[
  		64602,
  		1,
  		"يي"
  	],
  	[
  		64603,
  		1,
  		"ذٰ"
  	],
  	[
  		64604,
  		1,
  		"رٰ"
  	],
  	[
  		64605,
  		1,
  		"ىٰ"
  	],
  	[
  		64606,
  		5,
  		" ٌّ"
  	],
  	[
  		64607,
  		5,
  		" ٍّ"
  	],
  	[
  		64608,
  		5,
  		" َّ"
  	],
  	[
  		64609,
  		5,
  		" ُّ"
  	],
  	[
  		64610,
  		5,
  		" ِّ"
  	],
  	[
  		64611,
  		5,
  		" ّٰ"
  	],
  	[
  		64612,
  		1,
  		"ئر"
  	],
  	[
  		64613,
  		1,
  		"ئز"
  	],
  	[
  		64614,
  		1,
  		"ئم"
  	],
  	[
  		64615,
  		1,
  		"ئن"
  	],
  	[
  		64616,
  		1,
  		"ئى"
  	],
  	[
  		64617,
  		1,
  		"ئي"
  	],
  	[
  		64618,
  		1,
  		"بر"
  	],
  	[
  		64619,
  		1,
  		"بز"
  	],
  	[
  		64620,
  		1,
  		"بم"
  	],
  	[
  		64621,
  		1,
  		"بن"
  	],
  	[
  		64622,
  		1,
  		"بى"
  	],
  	[
  		64623,
  		1,
  		"بي"
  	],
  	[
  		64624,
  		1,
  		"تر"
  	],
  	[
  		64625,
  		1,
  		"تز"
  	],
  	[
  		64626,
  		1,
  		"تم"
  	],
  	[
  		64627,
  		1,
  		"تن"
  	],
  	[
  		64628,
  		1,
  		"تى"
  	],
  	[
  		64629,
  		1,
  		"تي"
  	],
  	[
  		64630,
  		1,
  		"ثر"
  	],
  	[
  		64631,
  		1,
  		"ثز"
  	],
  	[
  		64632,
  		1,
  		"ثم"
  	],
  	[
  		64633,
  		1,
  		"ثن"
  	],
  	[
  		64634,
  		1,
  		"ثى"
  	],
  	[
  		64635,
  		1,
  		"ثي"
  	],
  	[
  		64636,
  		1,
  		"فى"
  	],
  	[
  		64637,
  		1,
  		"في"
  	],
  	[
  		64638,
  		1,
  		"قى"
  	],
  	[
  		64639,
  		1,
  		"قي"
  	],
  	[
  		64640,
  		1,
  		"كا"
  	],
  	[
  		64641,
  		1,
  		"كل"
  	],
  	[
  		64642,
  		1,
  		"كم"
  	],
  	[
  		64643,
  		1,
  		"كى"
  	],
  	[
  		64644,
  		1,
  		"كي"
  	],
  	[
  		64645,
  		1,
  		"لم"
  	],
  	[
  		64646,
  		1,
  		"لى"
  	],
  	[
  		64647,
  		1,
  		"لي"
  	],
  	[
  		64648,
  		1,
  		"ما"
  	],
  	[
  		64649,
  		1,
  		"مم"
  	],
  	[
  		64650,
  		1,
  		"نر"
  	],
  	[
  		64651,
  		1,
  		"نز"
  	],
  	[
  		64652,
  		1,
  		"نم"
  	],
  	[
  		64653,
  		1,
  		"نن"
  	],
  	[
  		64654,
  		1,
  		"نى"
  	],
  	[
  		64655,
  		1,
  		"ني"
  	],
  	[
  		64656,
  		1,
  		"ىٰ"
  	],
  	[
  		64657,
  		1,
  		"ير"
  	],
  	[
  		64658,
  		1,
  		"يز"
  	],
  	[
  		64659,
  		1,
  		"يم"
  	],
  	[
  		64660,
  		1,
  		"ين"
  	],
  	[
  		64661,
  		1,
  		"يى"
  	],
  	[
  		64662,
  		1,
  		"يي"
  	],
  	[
  		64663,
  		1,
  		"ئج"
  	],
  	[
  		64664,
  		1,
  		"ئح"
  	],
  	[
  		64665,
  		1,
  		"ئخ"
  	],
  	[
  		64666,
  		1,
  		"ئم"
  	],
  	[
  		64667,
  		1,
  		"ئه"
  	],
  	[
  		64668,
  		1,
  		"بج"
  	],
  	[
  		64669,
  		1,
  		"بح"
  	],
  	[
  		64670,
  		1,
  		"بخ"
  	],
  	[
  		64671,
  		1,
  		"بم"
  	],
  	[
  		64672,
  		1,
  		"به"
  	],
  	[
  		64673,
  		1,
  		"تج"
  	],
  	[
  		64674,
  		1,
  		"تح"
  	],
  	[
  		64675,
  		1,
  		"تخ"
  	],
  	[
  		64676,
  		1,
  		"تم"
  	],
  	[
  		64677,
  		1,
  		"ته"
  	],
  	[
  		64678,
  		1,
  		"ثم"
  	],
  	[
  		64679,
  		1,
  		"جح"
  	],
  	[
  		64680,
  		1,
  		"جم"
  	],
  	[
  		64681,
  		1,
  		"حج"
  	],
  	[
  		64682,
  		1,
  		"حم"
  	],
  	[
  		64683,
  		1,
  		"خج"
  	],
  	[
  		64684,
  		1,
  		"خم"
  	],
  	[
  		64685,
  		1,
  		"سج"
  	],
  	[
  		64686,
  		1,
  		"سح"
  	],
  	[
  		64687,
  		1,
  		"سخ"
  	],
  	[
  		64688,
  		1,
  		"سم"
  	],
  	[
  		64689,
  		1,
  		"صح"
  	],
  	[
  		64690,
  		1,
  		"صخ"
  	],
  	[
  		64691,
  		1,
  		"صم"
  	],
  	[
  		64692,
  		1,
  		"ضج"
  	],
  	[
  		64693,
  		1,
  		"ضح"
  	],
  	[
  		64694,
  		1,
  		"ضخ"
  	],
  	[
  		64695,
  		1,
  		"ضم"
  	],
  	[
  		64696,
  		1,
  		"طح"
  	],
  	[
  		64697,
  		1,
  		"ظم"
  	],
  	[
  		64698,
  		1,
  		"عج"
  	],
  	[
  		64699,
  		1,
  		"عم"
  	],
  	[
  		64700,
  		1,
  		"غج"
  	],
  	[
  		64701,
  		1,
  		"غم"
  	],
  	[
  		64702,
  		1,
  		"فج"
  	],
  	[
  		64703,
  		1,
  		"فح"
  	],
  	[
  		64704,
  		1,
  		"فخ"
  	],
  	[
  		64705,
  		1,
  		"فم"
  	],
  	[
  		64706,
  		1,
  		"قح"
  	],
  	[
  		64707,
  		1,
  		"قم"
  	],
  	[
  		64708,
  		1,
  		"كج"
  	],
  	[
  		64709,
  		1,
  		"كح"
  	],
  	[
  		64710,
  		1,
  		"كخ"
  	],
  	[
  		64711,
  		1,
  		"كل"
  	],
  	[
  		64712,
  		1,
  		"كم"
  	],
  	[
  		64713,
  		1,
  		"لج"
  	],
  	[
  		64714,
  		1,
  		"لح"
  	],
  	[
  		64715,
  		1,
  		"لخ"
  	],
  	[
  		64716,
  		1,
  		"لم"
  	],
  	[
  		64717,
  		1,
  		"له"
  	],
  	[
  		64718,
  		1,
  		"مج"
  	],
  	[
  		64719,
  		1,
  		"مح"
  	],
  	[
  		64720,
  		1,
  		"مخ"
  	],
  	[
  		64721,
  		1,
  		"مم"
  	],
  	[
  		64722,
  		1,
  		"نج"
  	],
  	[
  		64723,
  		1,
  		"نح"
  	],
  	[
  		64724,
  		1,
  		"نخ"
  	],
  	[
  		64725,
  		1,
  		"نم"
  	],
  	[
  		64726,
  		1,
  		"نه"
  	],
  	[
  		64727,
  		1,
  		"هج"
  	],
  	[
  		64728,
  		1,
  		"هم"
  	],
  	[
  		64729,
  		1,
  		"هٰ"
  	],
  	[
  		64730,
  		1,
  		"يج"
  	],
  	[
  		64731,
  		1,
  		"يح"
  	],
  	[
  		64732,
  		1,
  		"يخ"
  	],
  	[
  		64733,
  		1,
  		"يم"
  	],
  	[
  		64734,
  		1,
  		"يه"
  	],
  	[
  		64735,
  		1,
  		"ئم"
  	],
  	[
  		64736,
  		1,
  		"ئه"
  	],
  	[
  		64737,
  		1,
  		"بم"
  	],
  	[
  		64738,
  		1,
  		"به"
  	],
  	[
  		64739,
  		1,
  		"تم"
  	],
  	[
  		64740,
  		1,
  		"ته"
  	],
  	[
  		64741,
  		1,
  		"ثم"
  	],
  	[
  		64742,
  		1,
  		"ثه"
  	],
  	[
  		64743,
  		1,
  		"سم"
  	],
  	[
  		64744,
  		1,
  		"سه"
  	],
  	[
  		64745,
  		1,
  		"شم"
  	],
  	[
  		64746,
  		1,
  		"شه"
  	],
  	[
  		64747,
  		1,
  		"كل"
  	],
  	[
  		64748,
  		1,
  		"كم"
  	],
  	[
  		64749,
  		1,
  		"لم"
  	],
  	[
  		64750,
  		1,
  		"نم"
  	],
  	[
  		64751,
  		1,
  		"نه"
  	],
  	[
  		64752,
  		1,
  		"يم"
  	],
  	[
  		64753,
  		1,
  		"يه"
  	],
  	[
  		64754,
  		1,
  		"ـَّ"
  	],
  	[
  		64755,
  		1,
  		"ـُّ"
  	],
  	[
  		64756,
  		1,
  		"ـِّ"
  	],
  	[
  		64757,
  		1,
  		"طى"
  	],
  	[
  		64758,
  		1,
  		"طي"
  	],
  	[
  		64759,
  		1,
  		"عى"
  	],
  	[
  		64760,
  		1,
  		"عي"
  	],
  	[
  		64761,
  		1,
  		"غى"
  	],
  	[
  		64762,
  		1,
  		"غي"
  	],
  	[
  		64763,
  		1,
  		"سى"
  	],
  	[
  		64764,
  		1,
  		"سي"
  	],
  	[
  		64765,
  		1,
  		"شى"
  	],
  	[
  		64766,
  		1,
  		"شي"
  	],
  	[
  		64767,
  		1,
  		"حى"
  	],
  	[
  		64768,
  		1,
  		"حي"
  	],
  	[
  		64769,
  		1,
  		"جى"
  	],
  	[
  		64770,
  		1,
  		"جي"
  	],
  	[
  		64771,
  		1,
  		"خى"
  	],
  	[
  		64772,
  		1,
  		"خي"
  	],
  	[
  		64773,
  		1,
  		"صى"
  	],
  	[
  		64774,
  		1,
  		"صي"
  	],
  	[
  		64775,
  		1,
  		"ضى"
  	],
  	[
  		64776,
  		1,
  		"ضي"
  	],
  	[
  		64777,
  		1,
  		"شج"
  	],
  	[
  		64778,
  		1,
  		"شح"
  	],
  	[
  		64779,
  		1,
  		"شخ"
  	],
  	[
  		64780,
  		1,
  		"شم"
  	],
  	[
  		64781,
  		1,
  		"شر"
  	],
  	[
  		64782,
  		1,
  		"سر"
  	],
  	[
  		64783,
  		1,
  		"صر"
  	],
  	[
  		64784,
  		1,
  		"ضر"
  	],
  	[
  		64785,
  		1,
  		"طى"
  	],
  	[
  		64786,
  		1,
  		"طي"
  	],
  	[
  		64787,
  		1,
  		"عى"
  	],
  	[
  		64788,
  		1,
  		"عي"
  	],
  	[
  		64789,
  		1,
  		"غى"
  	],
  	[
  		64790,
  		1,
  		"غي"
  	],
  	[
  		64791,
  		1,
  		"سى"
  	],
  	[
  		64792,
  		1,
  		"سي"
  	],
  	[
  		64793,
  		1,
  		"شى"
  	],
  	[
  		64794,
  		1,
  		"شي"
  	],
  	[
  		64795,
  		1,
  		"حى"
  	],
  	[
  		64796,
  		1,
  		"حي"
  	],
  	[
  		64797,
  		1,
  		"جى"
  	],
  	[
  		64798,
  		1,
  		"جي"
  	],
  	[
  		64799,
  		1,
  		"خى"
  	],
  	[
  		64800,
  		1,
  		"خي"
  	],
  	[
  		64801,
  		1,
  		"صى"
  	],
  	[
  		64802,
  		1,
  		"صي"
  	],
  	[
  		64803,
  		1,
  		"ضى"
  	],
  	[
  		64804,
  		1,
  		"ضي"
  	],
  	[
  		64805,
  		1,
  		"شج"
  	],
  	[
  		64806,
  		1,
  		"شح"
  	],
  	[
  		64807,
  		1,
  		"شخ"
  	],
  	[
  		64808,
  		1,
  		"شم"
  	],
  	[
  		64809,
  		1,
  		"شر"
  	],
  	[
  		64810,
  		1,
  		"سر"
  	],
  	[
  		64811,
  		1,
  		"صر"
  	],
  	[
  		64812,
  		1,
  		"ضر"
  	],
  	[
  		64813,
  		1,
  		"شج"
  	],
  	[
  		64814,
  		1,
  		"شح"
  	],
  	[
  		64815,
  		1,
  		"شخ"
  	],
  	[
  		64816,
  		1,
  		"شم"
  	],
  	[
  		64817,
  		1,
  		"سه"
  	],
  	[
  		64818,
  		1,
  		"شه"
  	],
  	[
  		64819,
  		1,
  		"طم"
  	],
  	[
  		64820,
  		1,
  		"سج"
  	],
  	[
  		64821,
  		1,
  		"سح"
  	],
  	[
  		64822,
  		1,
  		"سخ"
  	],
  	[
  		64823,
  		1,
  		"شج"
  	],
  	[
  		64824,
  		1,
  		"شح"
  	],
  	[
  		64825,
  		1,
  		"شخ"
  	],
  	[
  		64826,
  		1,
  		"طم"
  	],
  	[
  		64827,
  		1,
  		"ظم"
  	],
  	[
  		[
  			64828,
  			64829
  		],
  		1,
  		"اً"
  	],
  	[
  		[
  			64830,
  			64831
  		],
  		2
  	],
  	[
  		[
  			64832,
  			64847
  		],
  		3
  	],
  	[
  		64848,
  		1,
  		"تجم"
  	],
  	[
  		[
  			64849,
  			64850
  		],
  		1,
  		"تحج"
  	],
  	[
  		64851,
  		1,
  		"تحم"
  	],
  	[
  		64852,
  		1,
  		"تخم"
  	],
  	[
  		64853,
  		1,
  		"تمج"
  	],
  	[
  		64854,
  		1,
  		"تمح"
  	],
  	[
  		64855,
  		1,
  		"تمخ"
  	],
  	[
  		[
  			64856,
  			64857
  		],
  		1,
  		"جمح"
  	],
  	[
  		64858,
  		1,
  		"حمي"
  	],
  	[
  		64859,
  		1,
  		"حمى"
  	],
  	[
  		64860,
  		1,
  		"سحج"
  	],
  	[
  		64861,
  		1,
  		"سجح"
  	],
  	[
  		64862,
  		1,
  		"سجى"
  	],
  	[
  		[
  			64863,
  			64864
  		],
  		1,
  		"سمح"
  	],
  	[
  		64865,
  		1,
  		"سمج"
  	],
  	[
  		[
  			64866,
  			64867
  		],
  		1,
  		"سمم"
  	],
  	[
  		[
  			64868,
  			64869
  		],
  		1,
  		"صحح"
  	],
  	[
  		64870,
  		1,
  		"صمم"
  	],
  	[
  		[
  			64871,
  			64872
  		],
  		1,
  		"شحم"
  	],
  	[
  		64873,
  		1,
  		"شجي"
  	],
  	[
  		[
  			64874,
  			64875
  		],
  		1,
  		"شمخ"
  	],
  	[
  		[
  			64876,
  			64877
  		],
  		1,
  		"شمم"
  	],
  	[
  		64878,
  		1,
  		"ضحى"
  	],
  	[
  		[
  			64879,
  			64880
  		],
  		1,
  		"ضخم"
  	],
  	[
  		[
  			64881,
  			64882
  		],
  		1,
  		"طمح"
  	],
  	[
  		64883,
  		1,
  		"طمم"
  	],
  	[
  		64884,
  		1,
  		"طمي"
  	],
  	[
  		64885,
  		1,
  		"عجم"
  	],
  	[
  		[
  			64886,
  			64887
  		],
  		1,
  		"عمم"
  	],
  	[
  		64888,
  		1,
  		"عمى"
  	],
  	[
  		64889,
  		1,
  		"غمم"
  	],
  	[
  		64890,
  		1,
  		"غمي"
  	],
  	[
  		64891,
  		1,
  		"غمى"
  	],
  	[
  		[
  			64892,
  			64893
  		],
  		1,
  		"فخم"
  	],
  	[
  		64894,
  		1,
  		"قمح"
  	],
  	[
  		64895,
  		1,
  		"قمم"
  	],
  	[
  		64896,
  		1,
  		"لحم"
  	],
  	[
  		64897,
  		1,
  		"لحي"
  	],
  	[
  		64898,
  		1,
  		"لحى"
  	],
  	[
  		[
  			64899,
  			64900
  		],
  		1,
  		"لجج"
  	],
  	[
  		[
  			64901,
  			64902
  		],
  		1,
  		"لخم"
  	],
  	[
  		[
  			64903,
  			64904
  		],
  		1,
  		"لمح"
  	],
  	[
  		64905,
  		1,
  		"محج"
  	],
  	[
  		64906,
  		1,
  		"محم"
  	],
  	[
  		64907,
  		1,
  		"محي"
  	],
  	[
  		64908,
  		1,
  		"مجح"
  	],
  	[
  		64909,
  		1,
  		"مجم"
  	],
  	[
  		64910,
  		1,
  		"مخج"
  	],
  	[
  		64911,
  		1,
  		"مخم"
  	],
  	[
  		[
  			64912,
  			64913
  		],
  		3
  	],
  	[
  		64914,
  		1,
  		"مجخ"
  	],
  	[
  		64915,
  		1,
  		"همج"
  	],
  	[
  		64916,
  		1,
  		"همم"
  	],
  	[
  		64917,
  		1,
  		"نحم"
  	],
  	[
  		64918,
  		1,
  		"نحى"
  	],
  	[
  		[
  			64919,
  			64920
  		],
  		1,
  		"نجم"
  	],
  	[
  		64921,
  		1,
  		"نجى"
  	],
  	[
  		64922,
  		1,
  		"نمي"
  	],
  	[
  		64923,
  		1,
  		"نمى"
  	],
  	[
  		[
  			64924,
  			64925
  		],
  		1,
  		"يمم"
  	],
  	[
  		64926,
  		1,
  		"بخي"
  	],
  	[
  		64927,
  		1,
  		"تجي"
  	],
  	[
  		64928,
  		1,
  		"تجى"
  	],
  	[
  		64929,
  		1,
  		"تخي"
  	],
  	[
  		64930,
  		1,
  		"تخى"
  	],
  	[
  		64931,
  		1,
  		"تمي"
  	],
  	[
  		64932,
  		1,
  		"تمى"
  	],
  	[
  		64933,
  		1,
  		"جمي"
  	],
  	[
  		64934,
  		1,
  		"جحى"
  	],
  	[
  		64935,
  		1,
  		"جمى"
  	],
  	[
  		64936,
  		1,
  		"سخى"
  	],
  	[
  		64937,
  		1,
  		"صحي"
  	],
  	[
  		64938,
  		1,
  		"شحي"
  	],
  	[
  		64939,
  		1,
  		"ضحي"
  	],
  	[
  		64940,
  		1,
  		"لجي"
  	],
  	[
  		64941,
  		1,
  		"لمي"
  	],
  	[
  		64942,
  		1,
  		"يحي"
  	],
  	[
  		64943,
  		1,
  		"يجي"
  	],
  	[
  		64944,
  		1,
  		"يمي"
  	],
  	[
  		64945,
  		1,
  		"ممي"
  	],
  	[
  		64946,
  		1,
  		"قمي"
  	],
  	[
  		64947,
  		1,
  		"نحي"
  	],
  	[
  		64948,
  		1,
  		"قمح"
  	],
  	[
  		64949,
  		1,
  		"لحم"
  	],
  	[
  		64950,
  		1,
  		"عمي"
  	],
  	[
  		64951,
  		1,
  		"كمي"
  	],
  	[
  		64952,
  		1,
  		"نجح"
  	],
  	[
  		64953,
  		1,
  		"مخي"
  	],
  	[
  		64954,
  		1,
  		"لجم"
  	],
  	[
  		64955,
  		1,
  		"كمم"
  	],
  	[
  		64956,
  		1,
  		"لجم"
  	],
  	[
  		64957,
  		1,
  		"نجح"
  	],
  	[
  		64958,
  		1,
  		"جحي"
  	],
  	[
  		64959,
  		1,
  		"حجي"
  	],
  	[
  		64960,
  		1,
  		"مجي"
  	],
  	[
  		64961,
  		1,
  		"فمي"
  	],
  	[
  		64962,
  		1,
  		"بحي"
  	],
  	[
  		64963,
  		1,
  		"كمم"
  	],
  	[
  		64964,
  		1,
  		"عجم"
  	],
  	[
  		64965,
  		1,
  		"صمم"
  	],
  	[
  		64966,
  		1,
  		"سخي"
  	],
  	[
  		64967,
  		1,
  		"نجي"
  	],
  	[
  		[
  			64968,
  			64975
  		],
  		3
  	],
  	[
  		[
  			64976,
  			65007
  		],
  		3
  	],
  	[
  		65008,
  		1,
  		"صلے"
  	],
  	[
  		65009,
  		1,
  		"قلے"
  	],
  	[
  		65010,
  		1,
  		"الله"
  	],
  	[
  		65011,
  		1,
  		"اكبر"
  	],
  	[
  		65012,
  		1,
  		"محمد"
  	],
  	[
  		65013,
  		1,
  		"صلعم"
  	],
  	[
  		65014,
  		1,
  		"رسول"
  	],
  	[
  		65015,
  		1,
  		"عليه"
  	],
  	[
  		65016,
  		1,
  		"وسلم"
  	],
  	[
  		65017,
  		1,
  		"صلى"
  	],
  	[
  		65018,
  		5,
  		"صلى الله عليه وسلم"
  	],
  	[
  		65019,
  		5,
  		"جل جلاله"
  	],
  	[
  		65020,
  		1,
  		"ریال"
  	],
  	[
  		65021,
  		2
  	],
  	[
  		[
  			65022,
  			65023
  		],
  		3
  	],
  	[
  		[
  			65024,
  			65039
  		],
  		7
  	],
  	[
  		65040,
  		5,
  		","
  	],
  	[
  		65041,
  		1,
  		"、"
  	],
  	[
  		65042,
  		3
  	],
  	[
  		65043,
  		5,
  		":"
  	],
  	[
  		65044,
  		5,
  		";"
  	],
  	[
  		65045,
  		5,
  		"!"
  	],
  	[
  		65046,
  		5,
  		"?"
  	],
  	[
  		65047,
  		1,
  		"〖"
  	],
  	[
  		65048,
  		1,
  		"〗"
  	],
  	[
  		65049,
  		3
  	],
  	[
  		[
  			65050,
  			65055
  		],
  		3
  	],
  	[
  		[
  			65056,
  			65059
  		],
  		2
  	],
  	[
  		[
  			65060,
  			65062
  		],
  		2
  	],
  	[
  		[
  			65063,
  			65069
  		],
  		2
  	],
  	[
  		[
  			65070,
  			65071
  		],
  		2
  	],
  	[
  		65072,
  		3
  	],
  	[
  		65073,
  		1,
  		"—"
  	],
  	[
  		65074,
  		1,
  		"–"
  	],
  	[
  		[
  			65075,
  			65076
  		],
  		5,
  		"_"
  	],
  	[
  		65077,
  		5,
  		"("
  	],
  	[
  		65078,
  		5,
  		")"
  	],
  	[
  		65079,
  		5,
  		"{"
  	],
  	[
  		65080,
  		5,
  		"}"
  	],
  	[
  		65081,
  		1,
  		"〔"
  	],
  	[
  		65082,
  		1,
  		"〕"
  	],
  	[
  		65083,
  		1,
  		"【"
  	],
  	[
  		65084,
  		1,
  		"】"
  	],
  	[
  		65085,
  		1,
  		"《"
  	],
  	[
  		65086,
  		1,
  		"》"
  	],
  	[
  		65087,
  		1,
  		"〈"
  	],
  	[
  		65088,
  		1,
  		"〉"
  	],
  	[
  		65089,
  		1,
  		"「"
  	],
  	[
  		65090,
  		1,
  		"」"
  	],
  	[
  		65091,
  		1,
  		"『"
  	],
  	[
  		65092,
  		1,
  		"』"
  	],
  	[
  		[
  			65093,
  			65094
  		],
  		2
  	],
  	[
  		65095,
  		5,
  		"["
  	],
  	[
  		65096,
  		5,
  		"]"
  	],
  	[
  		[
  			65097,
  			65100
  		],
  		5,
  		" ̅"
  	],
  	[
  		[
  			65101,
  			65103
  		],
  		5,
  		"_"
  	],
  	[
  		65104,
  		5,
  		","
  	],
  	[
  		65105,
  		1,
  		"、"
  	],
  	[
  		65106,
  		3
  	],
  	[
  		65107,
  		3
  	],
  	[
  		65108,
  		5,
  		";"
  	],
  	[
  		65109,
  		5,
  		":"
  	],
  	[
  		65110,
  		5,
  		"?"
  	],
  	[
  		65111,
  		5,
  		"!"
  	],
  	[
  		65112,
  		1,
  		"—"
  	],
  	[
  		65113,
  		5,
  		"("
  	],
  	[
  		65114,
  		5,
  		")"
  	],
  	[
  		65115,
  		5,
  		"{"
  	],
  	[
  		65116,
  		5,
  		"}"
  	],
  	[
  		65117,
  		1,
  		"〔"
  	],
  	[
  		65118,
  		1,
  		"〕"
  	],
  	[
  		65119,
  		5,
  		"#"
  	],
  	[
  		65120,
  		5,
  		"&"
  	],
  	[
  		65121,
  		5,
  		"*"
  	],
  	[
  		65122,
  		5,
  		"+"
  	],
  	[
  		65123,
  		1,
  		"-"
  	],
  	[
  		65124,
  		5,
  		"<"
  	],
  	[
  		65125,
  		5,
  		">"
  	],
  	[
  		65126,
  		5,
  		"="
  	],
  	[
  		65127,
  		3
  	],
  	[
  		65128,
  		5,
  		"\\"
  	],
  	[
  		65129,
  		5,
  		"$"
  	],
  	[
  		65130,
  		5,
  		"%"
  	],
  	[
  		65131,
  		5,
  		"@"
  	],
  	[
  		[
  			65132,
  			65135
  		],
  		3
  	],
  	[
  		65136,
  		5,
  		" ً"
  	],
  	[
  		65137,
  		1,
  		"ـً"
  	],
  	[
  		65138,
  		5,
  		" ٌ"
  	],
  	[
  		65139,
  		2
  	],
  	[
  		65140,
  		5,
  		" ٍ"
  	],
  	[
  		65141,
  		3
  	],
  	[
  		65142,
  		5,
  		" َ"
  	],
  	[
  		65143,
  		1,
  		"ـَ"
  	],
  	[
  		65144,
  		5,
  		" ُ"
  	],
  	[
  		65145,
  		1,
  		"ـُ"
  	],
  	[
  		65146,
  		5,
  		" ِ"
  	],
  	[
  		65147,
  		1,
  		"ـِ"
  	],
  	[
  		65148,
  		5,
  		" ّ"
  	],
  	[
  		65149,
  		1,
  		"ـّ"
  	],
  	[
  		65150,
  		5,
  		" ْ"
  	],
  	[
  		65151,
  		1,
  		"ـْ"
  	],
  	[
  		65152,
  		1,
  		"ء"
  	],
  	[
  		[
  			65153,
  			65154
  		],
  		1,
  		"آ"
  	],
  	[
  		[
  			65155,
  			65156
  		],
  		1,
  		"أ"
  	],
  	[
  		[
  			65157,
  			65158
  		],
  		1,
  		"ؤ"
  	],
  	[
  		[
  			65159,
  			65160
  		],
  		1,
  		"إ"
  	],
  	[
  		[
  			65161,
  			65164
  		],
  		1,
  		"ئ"
  	],
  	[
  		[
  			65165,
  			65166
  		],
  		1,
  		"ا"
  	],
  	[
  		[
  			65167,
  			65170
  		],
  		1,
  		"ب"
  	],
  	[
  		[
  			65171,
  			65172
  		],
  		1,
  		"ة"
  	],
  	[
  		[
  			65173,
  			65176
  		],
  		1,
  		"ت"
  	],
  	[
  		[
  			65177,
  			65180
  		],
  		1,
  		"ث"
  	],
  	[
  		[
  			65181,
  			65184
  		],
  		1,
  		"ج"
  	],
  	[
  		[
  			65185,
  			65188
  		],
  		1,
  		"ح"
  	],
  	[
  		[
  			65189,
  			65192
  		],
  		1,
  		"خ"
  	],
  	[
  		[
  			65193,
  			65194
  		],
  		1,
  		"د"
  	],
  	[
  		[
  			65195,
  			65196
  		],
  		1,
  		"ذ"
  	],
  	[
  		[
  			65197,
  			65198
  		],
  		1,
  		"ر"
  	],
  	[
  		[
  			65199,
  			65200
  		],
  		1,
  		"ز"
  	],
  	[
  		[
  			65201,
  			65204
  		],
  		1,
  		"س"
  	],
  	[
  		[
  			65205,
  			65208
  		],
  		1,
  		"ش"
  	],
  	[
  		[
  			65209,
  			65212
  		],
  		1,
  		"ص"
  	],
  	[
  		[
  			65213,
  			65216
  		],
  		1,
  		"ض"
  	],
  	[
  		[
  			65217,
  			65220
  		],
  		1,
  		"ط"
  	],
  	[
  		[
  			65221,
  			65224
  		],
  		1,
  		"ظ"
  	],
  	[
  		[
  			65225,
  			65228
  		],
  		1,
  		"ع"
  	],
  	[
  		[
  			65229,
  			65232
  		],
  		1,
  		"غ"
  	],
  	[
  		[
  			65233,
  			65236
  		],
  		1,
  		"ف"
  	],
  	[
  		[
  			65237,
  			65240
  		],
  		1,
  		"ق"
  	],
  	[
  		[
  			65241,
  			65244
  		],
  		1,
  		"ك"
  	],
  	[
  		[
  			65245,
  			65248
  		],
  		1,
  		"ل"
  	],
  	[
  		[
  			65249,
  			65252
  		],
  		1,
  		"م"
  	],
  	[
  		[
  			65253,
  			65256
  		],
  		1,
  		"ن"
  	],
  	[
  		[
  			65257,
  			65260
  		],
  		1,
  		"ه"
  	],
  	[
  		[
  			65261,
  			65262
  		],
  		1,
  		"و"
  	],
  	[
  		[
  			65263,
  			65264
  		],
  		1,
  		"ى"
  	],
  	[
  		[
  			65265,
  			65268
  		],
  		1,
  		"ي"
  	],
  	[
  		[
  			65269,
  			65270
  		],
  		1,
  		"لآ"
  	],
  	[
  		[
  			65271,
  			65272
  		],
  		1,
  		"لأ"
  	],
  	[
  		[
  			65273,
  			65274
  		],
  		1,
  		"لإ"
  	],
  	[
  		[
  			65275,
  			65276
  		],
  		1,
  		"لا"
  	],
  	[
  		[
  			65277,
  			65278
  		],
  		3
  	],
  	[
  		65279,
  		7
  	],
  	[
  		65280,
  		3
  	],
  	[
  		65281,
  		5,
  		"!"
  	],
  	[
  		65282,
  		5,
  		"\""
  	],
  	[
  		65283,
  		5,
  		"#"
  	],
  	[
  		65284,
  		5,
  		"$"
  	],
  	[
  		65285,
  		5,
  		"%"
  	],
  	[
  		65286,
  		5,
  		"&"
  	],
  	[
  		65287,
  		5,
  		"'"
  	],
  	[
  		65288,
  		5,
  		"("
  	],
  	[
  		65289,
  		5,
  		")"
  	],
  	[
  		65290,
  		5,
  		"*"
  	],
  	[
  		65291,
  		5,
  		"+"
  	],
  	[
  		65292,
  		5,
  		","
  	],
  	[
  		65293,
  		1,
  		"-"
  	],
  	[
  		65294,
  		1,
  		"."
  	],
  	[
  		65295,
  		5,
  		"/"
  	],
  	[
  		65296,
  		1,
  		"0"
  	],
  	[
  		65297,
  		1,
  		"1"
  	],
  	[
  		65298,
  		1,
  		"2"
  	],
  	[
  		65299,
  		1,
  		"3"
  	],
  	[
  		65300,
  		1,
  		"4"
  	],
  	[
  		65301,
  		1,
  		"5"
  	],
  	[
  		65302,
  		1,
  		"6"
  	],
  	[
  		65303,
  		1,
  		"7"
  	],
  	[
  		65304,
  		1,
  		"8"
  	],
  	[
  		65305,
  		1,
  		"9"
  	],
  	[
  		65306,
  		5,
  		":"
  	],
  	[
  		65307,
  		5,
  		";"
  	],
  	[
  		65308,
  		5,
  		"<"
  	],
  	[
  		65309,
  		5,
  		"="
  	],
  	[
  		65310,
  		5,
  		">"
  	],
  	[
  		65311,
  		5,
  		"?"
  	],
  	[
  		65312,
  		5,
  		"@"
  	],
  	[
  		65313,
  		1,
  		"a"
  	],
  	[
  		65314,
  		1,
  		"b"
  	],
  	[
  		65315,
  		1,
  		"c"
  	],
  	[
  		65316,
  		1,
  		"d"
  	],
  	[
  		65317,
  		1,
  		"e"
  	],
  	[
  		65318,
  		1,
  		"f"
  	],
  	[
  		65319,
  		1,
  		"g"
  	],
  	[
  		65320,
  		1,
  		"h"
  	],
  	[
  		65321,
  		1,
  		"i"
  	],
  	[
  		65322,
  		1,
  		"j"
  	],
  	[
  		65323,
  		1,
  		"k"
  	],
  	[
  		65324,
  		1,
  		"l"
  	],
  	[
  		65325,
  		1,
  		"m"
  	],
  	[
  		65326,
  		1,
  		"n"
  	],
  	[
  		65327,
  		1,
  		"o"
  	],
  	[
  		65328,
  		1,
  		"p"
  	],
  	[
  		65329,
  		1,
  		"q"
  	],
  	[
  		65330,
  		1,
  		"r"
  	],
  	[
  		65331,
  		1,
  		"s"
  	],
  	[
  		65332,
  		1,
  		"t"
  	],
  	[
  		65333,
  		1,
  		"u"
  	],
  	[
  		65334,
  		1,
  		"v"
  	],
  	[
  		65335,
  		1,
  		"w"
  	],
  	[
  		65336,
  		1,
  		"x"
  	],
  	[
  		65337,
  		1,
  		"y"
  	],
  	[
  		65338,
  		1,
  		"z"
  	],
  	[
  		65339,
  		5,
  		"["
  	],
  	[
  		65340,
  		5,
  		"\\"
  	],
  	[
  		65341,
  		5,
  		"]"
  	],
  	[
  		65342,
  		5,
  		"^"
  	],
  	[
  		65343,
  		5,
  		"_"
  	],
  	[
  		65344,
  		5,
  		"`"
  	],
  	[
  		65345,
  		1,
  		"a"
  	],
  	[
  		65346,
  		1,
  		"b"
  	],
  	[
  		65347,
  		1,
  		"c"
  	],
  	[
  		65348,
  		1,
  		"d"
  	],
  	[
  		65349,
  		1,
  		"e"
  	],
  	[
  		65350,
  		1,
  		"f"
  	],
  	[
  		65351,
  		1,
  		"g"
  	],
  	[
  		65352,
  		1,
  		"h"
  	],
  	[
  		65353,
  		1,
  		"i"
  	],
  	[
  		65354,
  		1,
  		"j"
  	],
  	[
  		65355,
  		1,
  		"k"
  	],
  	[
  		65356,
  		1,
  		"l"
  	],
  	[
  		65357,
  		1,
  		"m"
  	],
  	[
  		65358,
  		1,
  		"n"
  	],
  	[
  		65359,
  		1,
  		"o"
  	],
  	[
  		65360,
  		1,
  		"p"
  	],
  	[
  		65361,
  		1,
  		"q"
  	],
  	[
  		65362,
  		1,
  		"r"
  	],
  	[
  		65363,
  		1,
  		"s"
  	],
  	[
  		65364,
  		1,
  		"t"
  	],
  	[
  		65365,
  		1,
  		"u"
  	],
  	[
  		65366,
  		1,
  		"v"
  	],
  	[
  		65367,
  		1,
  		"w"
  	],
  	[
  		65368,
  		1,
  		"x"
  	],
  	[
  		65369,
  		1,
  		"y"
  	],
  	[
  		65370,
  		1,
  		"z"
  	],
  	[
  		65371,
  		5,
  		"{"
  	],
  	[
  		65372,
  		5,
  		"|"
  	],
  	[
  		65373,
  		5,
  		"}"
  	],
  	[
  		65374,
  		5,
  		"~"
  	],
  	[
  		65375,
  		1,
  		"⦅"
  	],
  	[
  		65376,
  		1,
  		"⦆"
  	],
  	[
  		65377,
  		1,
  		"."
  	],
  	[
  		65378,
  		1,
  		"「"
  	],
  	[
  		65379,
  		1,
  		"」"
  	],
  	[
  		65380,
  		1,
  		"、"
  	],
  	[
  		65381,
  		1,
  		"・"
  	],
  	[
  		65382,
  		1,
  		"ヲ"
  	],
  	[
  		65383,
  		1,
  		"ァ"
  	],
  	[
  		65384,
  		1,
  		"ィ"
  	],
  	[
  		65385,
  		1,
  		"ゥ"
  	],
  	[
  		65386,
  		1,
  		"ェ"
  	],
  	[
  		65387,
  		1,
  		"ォ"
  	],
  	[
  		65388,
  		1,
  		"ャ"
  	],
  	[
  		65389,
  		1,
  		"ュ"
  	],
  	[
  		65390,
  		1,
  		"ョ"
  	],
  	[
  		65391,
  		1,
  		"ッ"
  	],
  	[
  		65392,
  		1,
  		"ー"
  	],
  	[
  		65393,
  		1,
  		"ア"
  	],
  	[
  		65394,
  		1,
  		"イ"
  	],
  	[
  		65395,
  		1,
  		"ウ"
  	],
  	[
  		65396,
  		1,
  		"エ"
  	],
  	[
  		65397,
  		1,
  		"オ"
  	],
  	[
  		65398,
  		1,
  		"カ"
  	],
  	[
  		65399,
  		1,
  		"キ"
  	],
  	[
  		65400,
  		1,
  		"ク"
  	],
  	[
  		65401,
  		1,
  		"ケ"
  	],
  	[
  		65402,
  		1,
  		"コ"
  	],
  	[
  		65403,
  		1,
  		"サ"
  	],
  	[
  		65404,
  		1,
  		"シ"
  	],
  	[
  		65405,
  		1,
  		"ス"
  	],
  	[
  		65406,
  		1,
  		"セ"
  	],
  	[
  		65407,
  		1,
  		"ソ"
  	],
  	[
  		65408,
  		1,
  		"タ"
  	],
  	[
  		65409,
  		1,
  		"チ"
  	],
  	[
  		65410,
  		1,
  		"ツ"
  	],
  	[
  		65411,
  		1,
  		"テ"
  	],
  	[
  		65412,
  		1,
  		"ト"
  	],
  	[
  		65413,
  		1,
  		"ナ"
  	],
  	[
  		65414,
  		1,
  		"ニ"
  	],
  	[
  		65415,
  		1,
  		"ヌ"
  	],
  	[
  		65416,
  		1,
  		"ネ"
  	],
  	[
  		65417,
  		1,
  		"ノ"
  	],
  	[
  		65418,
  		1,
  		"ハ"
  	],
  	[
  		65419,
  		1,
  		"ヒ"
  	],
  	[
  		65420,
  		1,
  		"フ"
  	],
  	[
  		65421,
  		1,
  		"ヘ"
  	],
  	[
  		65422,
  		1,
  		"ホ"
  	],
  	[
  		65423,
  		1,
  		"マ"
  	],
  	[
  		65424,
  		1,
  		"ミ"
  	],
  	[
  		65425,
  		1,
  		"ム"
  	],
  	[
  		65426,
  		1,
  		"メ"
  	],
  	[
  		65427,
  		1,
  		"モ"
  	],
  	[
  		65428,
  		1,
  		"ヤ"
  	],
  	[
  		65429,
  		1,
  		"ユ"
  	],
  	[
  		65430,
  		1,
  		"ヨ"
  	],
  	[
  		65431,
  		1,
  		"ラ"
  	],
  	[
  		65432,
  		1,
  		"リ"
  	],
  	[
  		65433,
  		1,
  		"ル"
  	],
  	[
  		65434,
  		1,
  		"レ"
  	],
  	[
  		65435,
  		1,
  		"ロ"
  	],
  	[
  		65436,
  		1,
  		"ワ"
  	],
  	[
  		65437,
  		1,
  		"ン"
  	],
  	[
  		65438,
  		1,
  		"゙"
  	],
  	[
  		65439,
  		1,
  		"゚"
  	],
  	[
  		65440,
  		3
  	],
  	[
  		65441,
  		1,
  		"ᄀ"
  	],
  	[
  		65442,
  		1,
  		"ᄁ"
  	],
  	[
  		65443,
  		1,
  		"ᆪ"
  	],
  	[
  		65444,
  		1,
  		"ᄂ"
  	],
  	[
  		65445,
  		1,
  		"ᆬ"
  	],
  	[
  		65446,
  		1,
  		"ᆭ"
  	],
  	[
  		65447,
  		1,
  		"ᄃ"
  	],
  	[
  		65448,
  		1,
  		"ᄄ"
  	],
  	[
  		65449,
  		1,
  		"ᄅ"
  	],
  	[
  		65450,
  		1,
  		"ᆰ"
  	],
  	[
  		65451,
  		1,
  		"ᆱ"
  	],
  	[
  		65452,
  		1,
  		"ᆲ"
  	],
  	[
  		65453,
  		1,
  		"ᆳ"
  	],
  	[
  		65454,
  		1,
  		"ᆴ"
  	],
  	[
  		65455,
  		1,
  		"ᆵ"
  	],
  	[
  		65456,
  		1,
  		"ᄚ"
  	],
  	[
  		65457,
  		1,
  		"ᄆ"
  	],
  	[
  		65458,
  		1,
  		"ᄇ"
  	],
  	[
  		65459,
  		1,
  		"ᄈ"
  	],
  	[
  		65460,
  		1,
  		"ᄡ"
  	],
  	[
  		65461,
  		1,
  		"ᄉ"
  	],
  	[
  		65462,
  		1,
  		"ᄊ"
  	],
  	[
  		65463,
  		1,
  		"ᄋ"
  	],
  	[
  		65464,
  		1,
  		"ᄌ"
  	],
  	[
  		65465,
  		1,
  		"ᄍ"
  	],
  	[
  		65466,
  		1,
  		"ᄎ"
  	],
  	[
  		65467,
  		1,
  		"ᄏ"
  	],
  	[
  		65468,
  		1,
  		"ᄐ"
  	],
  	[
  		65469,
  		1,
  		"ᄑ"
  	],
  	[
  		65470,
  		1,
  		"ᄒ"
  	],
  	[
  		[
  			65471,
  			65473
  		],
  		3
  	],
  	[
  		65474,
  		1,
  		"ᅡ"
  	],
  	[
  		65475,
  		1,
  		"ᅢ"
  	],
  	[
  		65476,
  		1,
  		"ᅣ"
  	],
  	[
  		65477,
  		1,
  		"ᅤ"
  	],
  	[
  		65478,
  		1,
  		"ᅥ"
  	],
  	[
  		65479,
  		1,
  		"ᅦ"
  	],
  	[
  		[
  			65480,
  			65481
  		],
  		3
  	],
  	[
  		65482,
  		1,
  		"ᅧ"
  	],
  	[
  		65483,
  		1,
  		"ᅨ"
  	],
  	[
  		65484,
  		1,
  		"ᅩ"
  	],
  	[
  		65485,
  		1,
  		"ᅪ"
  	],
  	[
  		65486,
  		1,
  		"ᅫ"
  	],
  	[
  		65487,
  		1,
  		"ᅬ"
  	],
  	[
  		[
  			65488,
  			65489
  		],
  		3
  	],
  	[
  		65490,
  		1,
  		"ᅭ"
  	],
  	[
  		65491,
  		1,
  		"ᅮ"
  	],
  	[
  		65492,
  		1,
  		"ᅯ"
  	],
  	[
  		65493,
  		1,
  		"ᅰ"
  	],
  	[
  		65494,
  		1,
  		"ᅱ"
  	],
  	[
  		65495,
  		1,
  		"ᅲ"
  	],
  	[
  		[
  			65496,
  			65497
  		],
  		3
  	],
  	[
  		65498,
  		1,
  		"ᅳ"
  	],
  	[
  		65499,
  		1,
  		"ᅴ"
  	],
  	[
  		65500,
  		1,
  		"ᅵ"
  	],
  	[
  		[
  			65501,
  			65503
  		],
  		3
  	],
  	[
  		65504,
  		1,
  		"¢"
  	],
  	[
  		65505,
  		1,
  		"£"
  	],
  	[
  		65506,
  		1,
  		"¬"
  	],
  	[
  		65507,
  		5,
  		" ̄"
  	],
  	[
  		65508,
  		1,
  		"¦"
  	],
  	[
  		65509,
  		1,
  		"¥"
  	],
  	[
  		65510,
  		1,
  		"₩"
  	],
  	[
  		65511,
  		3
  	],
  	[
  		65512,
  		1,
  		"│"
  	],
  	[
  		65513,
  		1,
  		"←"
  	],
  	[
  		65514,
  		1,
  		"↑"
  	],
  	[
  		65515,
  		1,
  		"→"
  	],
  	[
  		65516,
  		1,
  		"↓"
  	],
  	[
  		65517,
  		1,
  		"■"
  	],
  	[
  		65518,
  		1,
  		"○"
  	],
  	[
  		[
  			65519,
  			65528
  		],
  		3
  	],
  	[
  		[
  			65529,
  			65531
  		],
  		3
  	],
  	[
  		65532,
  		3
  	],
  	[
  		65533,
  		3
  	],
  	[
  		[
  			65534,
  			65535
  		],
  		3
  	],
  	[
  		[
  			65536,
  			65547
  		],
  		2
  	],
  	[
  		65548,
  		3
  	],
  	[
  		[
  			65549,
  			65574
  		],
  		2
  	],
  	[
  		65575,
  		3
  	],
  	[
  		[
  			65576,
  			65594
  		],
  		2
  	],
  	[
  		65595,
  		3
  	],
  	[
  		[
  			65596,
  			65597
  		],
  		2
  	],
  	[
  		65598,
  		3
  	],
  	[
  		[
  			65599,
  			65613
  		],
  		2
  	],
  	[
  		[
  			65614,
  			65615
  		],
  		3
  	],
  	[
  		[
  			65616,
  			65629
  		],
  		2
  	],
  	[
  		[
  			65630,
  			65663
  		],
  		3
  	],
  	[
  		[
  			65664,
  			65786
  		],
  		2
  	],
  	[
  		[
  			65787,
  			65791
  		],
  		3
  	],
  	[
  		[
  			65792,
  			65794
  		],
  		2
  	],
  	[
  		[
  			65795,
  			65798
  		],
  		3
  	],
  	[
  		[
  			65799,
  			65843
  		],
  		2
  	],
  	[
  		[
  			65844,
  			65846
  		],
  		3
  	],
  	[
  		[
  			65847,
  			65855
  		],
  		2
  	],
  	[
  		[
  			65856,
  			65930
  		],
  		2
  	],
  	[
  		[
  			65931,
  			65932
  		],
  		2
  	],
  	[
  		[
  			65933,
  			65934
  		],
  		2
  	],
  	[
  		65935,
  		3
  	],
  	[
  		[
  			65936,
  			65947
  		],
  		2
  	],
  	[
  		65948,
  		2
  	],
  	[
  		[
  			65949,
  			65951
  		],
  		3
  	],
  	[
  		65952,
  		2
  	],
  	[
  		[
  			65953,
  			65999
  		],
  		3
  	],
  	[
  		[
  			66000,
  			66044
  		],
  		2
  	],
  	[
  		66045,
  		2
  	],
  	[
  		[
  			66046,
  			66175
  		],
  		3
  	],
  	[
  		[
  			66176,
  			66204
  		],
  		2
  	],
  	[
  		[
  			66205,
  			66207
  		],
  		3
  	],
  	[
  		[
  			66208,
  			66256
  		],
  		2
  	],
  	[
  		[
  			66257,
  			66271
  		],
  		3
  	],
  	[
  		66272,
  		2
  	],
  	[
  		[
  			66273,
  			66299
  		],
  		2
  	],
  	[
  		[
  			66300,
  			66303
  		],
  		3
  	],
  	[
  		[
  			66304,
  			66334
  		],
  		2
  	],
  	[
  		66335,
  		2
  	],
  	[
  		[
  			66336,
  			66339
  		],
  		2
  	],
  	[
  		[
  			66340,
  			66348
  		],
  		3
  	],
  	[
  		[
  			66349,
  			66351
  		],
  		2
  	],
  	[
  		[
  			66352,
  			66368
  		],
  		2
  	],
  	[
  		66369,
  		2
  	],
  	[
  		[
  			66370,
  			66377
  		],
  		2
  	],
  	[
  		66378,
  		2
  	],
  	[
  		[
  			66379,
  			66383
  		],
  		3
  	],
  	[
  		[
  			66384,
  			66426
  		],
  		2
  	],
  	[
  		[
  			66427,
  			66431
  		],
  		3
  	],
  	[
  		[
  			66432,
  			66461
  		],
  		2
  	],
  	[
  		66462,
  		3
  	],
  	[
  		66463,
  		2
  	],
  	[
  		[
  			66464,
  			66499
  		],
  		2
  	],
  	[
  		[
  			66500,
  			66503
  		],
  		3
  	],
  	[
  		[
  			66504,
  			66511
  		],
  		2
  	],
  	[
  		[
  			66512,
  			66517
  		],
  		2
  	],
  	[
  		[
  			66518,
  			66559
  		],
  		3
  	],
  	[
  		66560,
  		1,
  		"𐐨"
  	],
  	[
  		66561,
  		1,
  		"𐐩"
  	],
  	[
  		66562,
  		1,
  		"𐐪"
  	],
  	[
  		66563,
  		1,
  		"𐐫"
  	],
  	[
  		66564,
  		1,
  		"𐐬"
  	],
  	[
  		66565,
  		1,
  		"𐐭"
  	],
  	[
  		66566,
  		1,
  		"𐐮"
  	],
  	[
  		66567,
  		1,
  		"𐐯"
  	],
  	[
  		66568,
  		1,
  		"𐐰"
  	],
  	[
  		66569,
  		1,
  		"𐐱"
  	],
  	[
  		66570,
  		1,
  		"𐐲"
  	],
  	[
  		66571,
  		1,
  		"𐐳"
  	],
  	[
  		66572,
  		1,
  		"𐐴"
  	],
  	[
  		66573,
  		1,
  		"𐐵"
  	],
  	[
  		66574,
  		1,
  		"𐐶"
  	],
  	[
  		66575,
  		1,
  		"𐐷"
  	],
  	[
  		66576,
  		1,
  		"𐐸"
  	],
  	[
  		66577,
  		1,
  		"𐐹"
  	],
  	[
  		66578,
  		1,
  		"𐐺"
  	],
  	[
  		66579,
  		1,
  		"𐐻"
  	],
  	[
  		66580,
  		1,
  		"𐐼"
  	],
  	[
  		66581,
  		1,
  		"𐐽"
  	],
  	[
  		66582,
  		1,
  		"𐐾"
  	],
  	[
  		66583,
  		1,
  		"𐐿"
  	],
  	[
  		66584,
  		1,
  		"𐑀"
  	],
  	[
  		66585,
  		1,
  		"𐑁"
  	],
  	[
  		66586,
  		1,
  		"𐑂"
  	],
  	[
  		66587,
  		1,
  		"𐑃"
  	],
  	[
  		66588,
  		1,
  		"𐑄"
  	],
  	[
  		66589,
  		1,
  		"𐑅"
  	],
  	[
  		66590,
  		1,
  		"𐑆"
  	],
  	[
  		66591,
  		1,
  		"𐑇"
  	],
  	[
  		66592,
  		1,
  		"𐑈"
  	],
  	[
  		66593,
  		1,
  		"𐑉"
  	],
  	[
  		66594,
  		1,
  		"𐑊"
  	],
  	[
  		66595,
  		1,
  		"𐑋"
  	],
  	[
  		66596,
  		1,
  		"𐑌"
  	],
  	[
  		66597,
  		1,
  		"𐑍"
  	],
  	[
  		66598,
  		1,
  		"𐑎"
  	],
  	[
  		66599,
  		1,
  		"𐑏"
  	],
  	[
  		[
  			66600,
  			66637
  		],
  		2
  	],
  	[
  		[
  			66638,
  			66717
  		],
  		2
  	],
  	[
  		[
  			66718,
  			66719
  		],
  		3
  	],
  	[
  		[
  			66720,
  			66729
  		],
  		2
  	],
  	[
  		[
  			66730,
  			66735
  		],
  		3
  	],
  	[
  		66736,
  		1,
  		"𐓘"
  	],
  	[
  		66737,
  		1,
  		"𐓙"
  	],
  	[
  		66738,
  		1,
  		"𐓚"
  	],
  	[
  		66739,
  		1,
  		"𐓛"
  	],
  	[
  		66740,
  		1,
  		"𐓜"
  	],
  	[
  		66741,
  		1,
  		"𐓝"
  	],
  	[
  		66742,
  		1,
  		"𐓞"
  	],
  	[
  		66743,
  		1,
  		"𐓟"
  	],
  	[
  		66744,
  		1,
  		"𐓠"
  	],
  	[
  		66745,
  		1,
  		"𐓡"
  	],
  	[
  		66746,
  		1,
  		"𐓢"
  	],
  	[
  		66747,
  		1,
  		"𐓣"
  	],
  	[
  		66748,
  		1,
  		"𐓤"
  	],
  	[
  		66749,
  		1,
  		"𐓥"
  	],
  	[
  		66750,
  		1,
  		"𐓦"
  	],
  	[
  		66751,
  		1,
  		"𐓧"
  	],
  	[
  		66752,
  		1,
  		"𐓨"
  	],
  	[
  		66753,
  		1,
  		"𐓩"
  	],
  	[
  		66754,
  		1,
  		"𐓪"
  	],
  	[
  		66755,
  		1,
  		"𐓫"
  	],
  	[
  		66756,
  		1,
  		"𐓬"
  	],
  	[
  		66757,
  		1,
  		"𐓭"
  	],
  	[
  		66758,
  		1,
  		"𐓮"
  	],
  	[
  		66759,
  		1,
  		"𐓯"
  	],
  	[
  		66760,
  		1,
  		"𐓰"
  	],
  	[
  		66761,
  		1,
  		"𐓱"
  	],
  	[
  		66762,
  		1,
  		"𐓲"
  	],
  	[
  		66763,
  		1,
  		"𐓳"
  	],
  	[
  		66764,
  		1,
  		"𐓴"
  	],
  	[
  		66765,
  		1,
  		"𐓵"
  	],
  	[
  		66766,
  		1,
  		"𐓶"
  	],
  	[
  		66767,
  		1,
  		"𐓷"
  	],
  	[
  		66768,
  		1,
  		"𐓸"
  	],
  	[
  		66769,
  		1,
  		"𐓹"
  	],
  	[
  		66770,
  		1,
  		"𐓺"
  	],
  	[
  		66771,
  		1,
  		"𐓻"
  	],
  	[
  		[
  			66772,
  			66775
  		],
  		3
  	],
  	[
  		[
  			66776,
  			66811
  		],
  		2
  	],
  	[
  		[
  			66812,
  			66815
  		],
  		3
  	],
  	[
  		[
  			66816,
  			66855
  		],
  		2
  	],
  	[
  		[
  			66856,
  			66863
  		],
  		3
  	],
  	[
  		[
  			66864,
  			66915
  		],
  		2
  	],
  	[
  		[
  			66916,
  			66926
  		],
  		3
  	],
  	[
  		66927,
  		2
  	],
  	[
  		[
  			66928,
  			67071
  		],
  		3
  	],
  	[
  		[
  			67072,
  			67382
  		],
  		2
  	],
  	[
  		[
  			67383,
  			67391
  		],
  		3
  	],
  	[
  		[
  			67392,
  			67413
  		],
  		2
  	],
  	[
  		[
  			67414,
  			67423
  		],
  		3
  	],
  	[
  		[
  			67424,
  			67431
  		],
  		2
  	],
  	[
  		[
  			67432,
  			67583
  		],
  		3
  	],
  	[
  		[
  			67584,
  			67589
  		],
  		2
  	],
  	[
  		[
  			67590,
  			67591
  		],
  		3
  	],
  	[
  		67592,
  		2
  	],
  	[
  		67593,
  		3
  	],
  	[
  		[
  			67594,
  			67637
  		],
  		2
  	],
  	[
  		67638,
  		3
  	],
  	[
  		[
  			67639,
  			67640
  		],
  		2
  	],
  	[
  		[
  			67641,
  			67643
  		],
  		3
  	],
  	[
  		67644,
  		2
  	],
  	[
  		[
  			67645,
  			67646
  		],
  		3
  	],
  	[
  		67647,
  		2
  	],
  	[
  		[
  			67648,
  			67669
  		],
  		2
  	],
  	[
  		67670,
  		3
  	],
  	[
  		[
  			67671,
  			67679
  		],
  		2
  	],
  	[
  		[
  			67680,
  			67702
  		],
  		2
  	],
  	[
  		[
  			67703,
  			67711
  		],
  		2
  	],
  	[
  		[
  			67712,
  			67742
  		],
  		2
  	],
  	[
  		[
  			67743,
  			67750
  		],
  		3
  	],
  	[
  		[
  			67751,
  			67759
  		],
  		2
  	],
  	[
  		[
  			67760,
  			67807
  		],
  		3
  	],
  	[
  		[
  			67808,
  			67826
  		],
  		2
  	],
  	[
  		67827,
  		3
  	],
  	[
  		[
  			67828,
  			67829
  		],
  		2
  	],
  	[
  		[
  			67830,
  			67834
  		],
  		3
  	],
  	[
  		[
  			67835,
  			67839
  		],
  		2
  	],
  	[
  		[
  			67840,
  			67861
  		],
  		2
  	],
  	[
  		[
  			67862,
  			67865
  		],
  		2
  	],
  	[
  		[
  			67866,
  			67867
  		],
  		2
  	],
  	[
  		[
  			67868,
  			67870
  		],
  		3
  	],
  	[
  		67871,
  		2
  	],
  	[
  		[
  			67872,
  			67897
  		],
  		2
  	],
  	[
  		[
  			67898,
  			67902
  		],
  		3
  	],
  	[
  		67903,
  		2
  	],
  	[
  		[
  			67904,
  			67967
  		],
  		3
  	],
  	[
  		[
  			67968,
  			68023
  		],
  		2
  	],
  	[
  		[
  			68024,
  			68027
  		],
  		3
  	],
  	[
  		[
  			68028,
  			68029
  		],
  		2
  	],
  	[
  		[
  			68030,
  			68031
  		],
  		2
  	],
  	[
  		[
  			68032,
  			68047
  		],
  		2
  	],
  	[
  		[
  			68048,
  			68049
  		],
  		3
  	],
  	[
  		[
  			68050,
  			68095
  		],
  		2
  	],
  	[
  		[
  			68096,
  			68099
  		],
  		2
  	],
  	[
  		68100,
  		3
  	],
  	[
  		[
  			68101,
  			68102
  		],
  		2
  	],
  	[
  		[
  			68103,
  			68107
  		],
  		3
  	],
  	[
  		[
  			68108,
  			68115
  		],
  		2
  	],
  	[
  		68116,
  		3
  	],
  	[
  		[
  			68117,
  			68119
  		],
  		2
  	],
  	[
  		68120,
  		3
  	],
  	[
  		[
  			68121,
  			68147
  		],
  		2
  	],
  	[
  		[
  			68148,
  			68149
  		],
  		2
  	],
  	[
  		[
  			68150,
  			68151
  		],
  		3
  	],
  	[
  		[
  			68152,
  			68154
  		],
  		2
  	],
  	[
  		[
  			68155,
  			68158
  		],
  		3
  	],
  	[
  		68159,
  		2
  	],
  	[
  		[
  			68160,
  			68167
  		],
  		2
  	],
  	[
  		68168,
  		2
  	],
  	[
  		[
  			68169,
  			68175
  		],
  		3
  	],
  	[
  		[
  			68176,
  			68184
  		],
  		2
  	],
  	[
  		[
  			68185,
  			68191
  		],
  		3
  	],
  	[
  		[
  			68192,
  			68220
  		],
  		2
  	],
  	[
  		[
  			68221,
  			68223
  		],
  		2
  	],
  	[
  		[
  			68224,
  			68252
  		],
  		2
  	],
  	[
  		[
  			68253,
  			68255
  		],
  		2
  	],
  	[
  		[
  			68256,
  			68287
  		],
  		3
  	],
  	[
  		[
  			68288,
  			68295
  		],
  		2
  	],
  	[
  		68296,
  		2
  	],
  	[
  		[
  			68297,
  			68326
  		],
  		2
  	],
  	[
  		[
  			68327,
  			68330
  		],
  		3
  	],
  	[
  		[
  			68331,
  			68342
  		],
  		2
  	],
  	[
  		[
  			68343,
  			68351
  		],
  		3
  	],
  	[
  		[
  			68352,
  			68405
  		],
  		2
  	],
  	[
  		[
  			68406,
  			68408
  		],
  		3
  	],
  	[
  		[
  			68409,
  			68415
  		],
  		2
  	],
  	[
  		[
  			68416,
  			68437
  		],
  		2
  	],
  	[
  		[
  			68438,
  			68439
  		],
  		3
  	],
  	[
  		[
  			68440,
  			68447
  		],
  		2
  	],
  	[
  		[
  			68448,
  			68466
  		],
  		2
  	],
  	[
  		[
  			68467,
  			68471
  		],
  		3
  	],
  	[
  		[
  			68472,
  			68479
  		],
  		2
  	],
  	[
  		[
  			68480,
  			68497
  		],
  		2
  	],
  	[
  		[
  			68498,
  			68504
  		],
  		3
  	],
  	[
  		[
  			68505,
  			68508
  		],
  		2
  	],
  	[
  		[
  			68509,
  			68520
  		],
  		3
  	],
  	[
  		[
  			68521,
  			68527
  		],
  		2
  	],
  	[
  		[
  			68528,
  			68607
  		],
  		3
  	],
  	[
  		[
  			68608,
  			68680
  		],
  		2
  	],
  	[
  		[
  			68681,
  			68735
  		],
  		3
  	],
  	[
  		68736,
  		1,
  		"𐳀"
  	],
  	[
  		68737,
  		1,
  		"𐳁"
  	],
  	[
  		68738,
  		1,
  		"𐳂"
  	],
  	[
  		68739,
  		1,
  		"𐳃"
  	],
  	[
  		68740,
  		1,
  		"𐳄"
  	],
  	[
  		68741,
  		1,
  		"𐳅"
  	],
  	[
  		68742,
  		1,
  		"𐳆"
  	],
  	[
  		68743,
  		1,
  		"𐳇"
  	],
  	[
  		68744,
  		1,
  		"𐳈"
  	],
  	[
  		68745,
  		1,
  		"𐳉"
  	],
  	[
  		68746,
  		1,
  		"𐳊"
  	],
  	[
  		68747,
  		1,
  		"𐳋"
  	],
  	[
  		68748,
  		1,
  		"𐳌"
  	],
  	[
  		68749,
  		1,
  		"𐳍"
  	],
  	[
  		68750,
  		1,
  		"𐳎"
  	],
  	[
  		68751,
  		1,
  		"𐳏"
  	],
  	[
  		68752,
  		1,
  		"𐳐"
  	],
  	[
  		68753,
  		1,
  		"𐳑"
  	],
  	[
  		68754,
  		1,
  		"𐳒"
  	],
  	[
  		68755,
  		1,
  		"𐳓"
  	],
  	[
  		68756,
  		1,
  		"𐳔"
  	],
  	[
  		68757,
  		1,
  		"𐳕"
  	],
  	[
  		68758,
  		1,
  		"𐳖"
  	],
  	[
  		68759,
  		1,
  		"𐳗"
  	],
  	[
  		68760,
  		1,
  		"𐳘"
  	],
  	[
  		68761,
  		1,
  		"𐳙"
  	],
  	[
  		68762,
  		1,
  		"𐳚"
  	],
  	[
  		68763,
  		1,
  		"𐳛"
  	],
  	[
  		68764,
  		1,
  		"𐳜"
  	],
  	[
  		68765,
  		1,
  		"𐳝"
  	],
  	[
  		68766,
  		1,
  		"𐳞"
  	],
  	[
  		68767,
  		1,
  		"𐳟"
  	],
  	[
  		68768,
  		1,
  		"𐳠"
  	],
  	[
  		68769,
  		1,
  		"𐳡"
  	],
  	[
  		68770,
  		1,
  		"𐳢"
  	],
  	[
  		68771,
  		1,
  		"𐳣"
  	],
  	[
  		68772,
  		1,
  		"𐳤"
  	],
  	[
  		68773,
  		1,
  		"𐳥"
  	],
  	[
  		68774,
  		1,
  		"𐳦"
  	],
  	[
  		68775,
  		1,
  		"𐳧"
  	],
  	[
  		68776,
  		1,
  		"𐳨"
  	],
  	[
  		68777,
  		1,
  		"𐳩"
  	],
  	[
  		68778,
  		1,
  		"𐳪"
  	],
  	[
  		68779,
  		1,
  		"𐳫"
  	],
  	[
  		68780,
  		1,
  		"𐳬"
  	],
  	[
  		68781,
  		1,
  		"𐳭"
  	],
  	[
  		68782,
  		1,
  		"𐳮"
  	],
  	[
  		68783,
  		1,
  		"𐳯"
  	],
  	[
  		68784,
  		1,
  		"𐳰"
  	],
  	[
  		68785,
  		1,
  		"𐳱"
  	],
  	[
  		68786,
  		1,
  		"𐳲"
  	],
  	[
  		[
  			68787,
  			68799
  		],
  		3
  	],
  	[
  		[
  			68800,
  			68850
  		],
  		2
  	],
  	[
  		[
  			68851,
  			68857
  		],
  		3
  	],
  	[
  		[
  			68858,
  			68863
  		],
  		2
  	],
  	[
  		[
  			68864,
  			68903
  		],
  		2
  	],
  	[
  		[
  			68904,
  			68911
  		],
  		3
  	],
  	[
  		[
  			68912,
  			68921
  		],
  		2
  	],
  	[
  		[
  			68922,
  			69215
  		],
  		3
  	],
  	[
  		[
  			69216,
  			69246
  		],
  		2
  	],
  	[
  		69247,
  		3
  	],
  	[
  		[
  			69248,
  			69289
  		],
  		2
  	],
  	[
  		69290,
  		3
  	],
  	[
  		[
  			69291,
  			69292
  		],
  		2
  	],
  	[
  		69293,
  		2
  	],
  	[
  		[
  			69294,
  			69295
  		],
  		3
  	],
  	[
  		[
  			69296,
  			69297
  		],
  		2
  	],
  	[
  		[
  			69298,
  			69375
  		],
  		3
  	],
  	[
  		[
  			69376,
  			69404
  		],
  		2
  	],
  	[
  		[
  			69405,
  			69414
  		],
  		2
  	],
  	[
  		69415,
  		2
  	],
  	[
  		[
  			69416,
  			69423
  		],
  		3
  	],
  	[
  		[
  			69424,
  			69456
  		],
  		2
  	],
  	[
  		[
  			69457,
  			69465
  		],
  		2
  	],
  	[
  		[
  			69466,
  			69551
  		],
  		3
  	],
  	[
  		[
  			69552,
  			69572
  		],
  		2
  	],
  	[
  		[
  			69573,
  			69579
  		],
  		2
  	],
  	[
  		[
  			69580,
  			69599
  		],
  		3
  	],
  	[
  		[
  			69600,
  			69622
  		],
  		2
  	],
  	[
  		[
  			69623,
  			69631
  		],
  		3
  	],
  	[
  		[
  			69632,
  			69702
  		],
  		2
  	],
  	[
  		[
  			69703,
  			69709
  		],
  		2
  	],
  	[
  		[
  			69710,
  			69713
  		],
  		3
  	],
  	[
  		[
  			69714,
  			69733
  		],
  		2
  	],
  	[
  		[
  			69734,
  			69743
  		],
  		2
  	],
  	[
  		[
  			69744,
  			69758
  		],
  		3
  	],
  	[
  		69759,
  		2
  	],
  	[
  		[
  			69760,
  			69818
  		],
  		2
  	],
  	[
  		[
  			69819,
  			69820
  		],
  		2
  	],
  	[
  		69821,
  		3
  	],
  	[
  		[
  			69822,
  			69825
  		],
  		2
  	],
  	[
  		[
  			69826,
  			69836
  		],
  		3
  	],
  	[
  		69837,
  		3
  	],
  	[
  		[
  			69838,
  			69839
  		],
  		3
  	],
  	[
  		[
  			69840,
  			69864
  		],
  		2
  	],
  	[
  		[
  			69865,
  			69871
  		],
  		3
  	],
  	[
  		[
  			69872,
  			69881
  		],
  		2
  	],
  	[
  		[
  			69882,
  			69887
  		],
  		3
  	],
  	[
  		[
  			69888,
  			69940
  		],
  		2
  	],
  	[
  		69941,
  		3
  	],
  	[
  		[
  			69942,
  			69951
  		],
  		2
  	],
  	[
  		[
  			69952,
  			69955
  		],
  		2
  	],
  	[
  		[
  			69956,
  			69958
  		],
  		2
  	],
  	[
  		69959,
  		2
  	],
  	[
  		[
  			69960,
  			69967
  		],
  		3
  	],
  	[
  		[
  			69968,
  			70003
  		],
  		2
  	],
  	[
  		[
  			70004,
  			70005
  		],
  		2
  	],
  	[
  		70006,
  		2
  	],
  	[
  		[
  			70007,
  			70015
  		],
  		3
  	],
  	[
  		[
  			70016,
  			70084
  		],
  		2
  	],
  	[
  		[
  			70085,
  			70088
  		],
  		2
  	],
  	[
  		[
  			70089,
  			70092
  		],
  		2
  	],
  	[
  		70093,
  		2
  	],
  	[
  		[
  			70094,
  			70095
  		],
  		2
  	],
  	[
  		[
  			70096,
  			70105
  		],
  		2
  	],
  	[
  		70106,
  		2
  	],
  	[
  		70107,
  		2
  	],
  	[
  		70108,
  		2
  	],
  	[
  		[
  			70109,
  			70111
  		],
  		2
  	],
  	[
  		70112,
  		3
  	],
  	[
  		[
  			70113,
  			70132
  		],
  		2
  	],
  	[
  		[
  			70133,
  			70143
  		],
  		3
  	],
  	[
  		[
  			70144,
  			70161
  		],
  		2
  	],
  	[
  		70162,
  		3
  	],
  	[
  		[
  			70163,
  			70199
  		],
  		2
  	],
  	[
  		[
  			70200,
  			70205
  		],
  		2
  	],
  	[
  		70206,
  		2
  	],
  	[
  		[
  			70207,
  			70271
  		],
  		3
  	],
  	[
  		[
  			70272,
  			70278
  		],
  		2
  	],
  	[
  		70279,
  		3
  	],
  	[
  		70280,
  		2
  	],
  	[
  		70281,
  		3
  	],
  	[
  		[
  			70282,
  			70285
  		],
  		2
  	],
  	[
  		70286,
  		3
  	],
  	[
  		[
  			70287,
  			70301
  		],
  		2
  	],
  	[
  		70302,
  		3
  	],
  	[
  		[
  			70303,
  			70312
  		],
  		2
  	],
  	[
  		70313,
  		2
  	],
  	[
  		[
  			70314,
  			70319
  		],
  		3
  	],
  	[
  		[
  			70320,
  			70378
  		],
  		2
  	],
  	[
  		[
  			70379,
  			70383
  		],
  		3
  	],
  	[
  		[
  			70384,
  			70393
  		],
  		2
  	],
  	[
  		[
  			70394,
  			70399
  		],
  		3
  	],
  	[
  		70400,
  		2
  	],
  	[
  		[
  			70401,
  			70403
  		],
  		2
  	],
  	[
  		70404,
  		3
  	],
  	[
  		[
  			70405,
  			70412
  		],
  		2
  	],
  	[
  		[
  			70413,
  			70414
  		],
  		3
  	],
  	[
  		[
  			70415,
  			70416
  		],
  		2
  	],
  	[
  		[
  			70417,
  			70418
  		],
  		3
  	],
  	[
  		[
  			70419,
  			70440
  		],
  		2
  	],
  	[
  		70441,
  		3
  	],
  	[
  		[
  			70442,
  			70448
  		],
  		2
  	],
  	[
  		70449,
  		3
  	],
  	[
  		[
  			70450,
  			70451
  		],
  		2
  	],
  	[
  		70452,
  		3
  	],
  	[
  		[
  			70453,
  			70457
  		],
  		2
  	],
  	[
  		70458,
  		3
  	],
  	[
  		70459,
  		2
  	],
  	[
  		[
  			70460,
  			70468
  		],
  		2
  	],
  	[
  		[
  			70469,
  			70470
  		],
  		3
  	],
  	[
  		[
  			70471,
  			70472
  		],
  		2
  	],
  	[
  		[
  			70473,
  			70474
  		],
  		3
  	],
  	[
  		[
  			70475,
  			70477
  		],
  		2
  	],
  	[
  		[
  			70478,
  			70479
  		],
  		3
  	],
  	[
  		70480,
  		2
  	],
  	[
  		[
  			70481,
  			70486
  		],
  		3
  	],
  	[
  		70487,
  		2
  	],
  	[
  		[
  			70488,
  			70492
  		],
  		3
  	],
  	[
  		[
  			70493,
  			70499
  		],
  		2
  	],
  	[
  		[
  			70500,
  			70501
  		],
  		3
  	],
  	[
  		[
  			70502,
  			70508
  		],
  		2
  	],
  	[
  		[
  			70509,
  			70511
  		],
  		3
  	],
  	[
  		[
  			70512,
  			70516
  		],
  		2
  	],
  	[
  		[
  			70517,
  			70655
  		],
  		3
  	],
  	[
  		[
  			70656,
  			70730
  		],
  		2
  	],
  	[
  		[
  			70731,
  			70735
  		],
  		2
  	],
  	[
  		[
  			70736,
  			70745
  		],
  		2
  	],
  	[
  		70746,
  		2
  	],
  	[
  		70747,
  		2
  	],
  	[
  		70748,
  		3
  	],
  	[
  		70749,
  		2
  	],
  	[
  		70750,
  		2
  	],
  	[
  		70751,
  		2
  	],
  	[
  		[
  			70752,
  			70753
  		],
  		2
  	],
  	[
  		[
  			70754,
  			70783
  		],
  		3
  	],
  	[
  		[
  			70784,
  			70853
  		],
  		2
  	],
  	[
  		70854,
  		2
  	],
  	[
  		70855,
  		2
  	],
  	[
  		[
  			70856,
  			70863
  		],
  		3
  	],
  	[
  		[
  			70864,
  			70873
  		],
  		2
  	],
  	[
  		[
  			70874,
  			71039
  		],
  		3
  	],
  	[
  		[
  			71040,
  			71093
  		],
  		2
  	],
  	[
  		[
  			71094,
  			71095
  		],
  		3
  	],
  	[
  		[
  			71096,
  			71104
  		],
  		2
  	],
  	[
  		[
  			71105,
  			71113
  		],
  		2
  	],
  	[
  		[
  			71114,
  			71127
  		],
  		2
  	],
  	[
  		[
  			71128,
  			71133
  		],
  		2
  	],
  	[
  		[
  			71134,
  			71167
  		],
  		3
  	],
  	[
  		[
  			71168,
  			71232
  		],
  		2
  	],
  	[
  		[
  			71233,
  			71235
  		],
  		2
  	],
  	[
  		71236,
  		2
  	],
  	[
  		[
  			71237,
  			71247
  		],
  		3
  	],
  	[
  		[
  			71248,
  			71257
  		],
  		2
  	],
  	[
  		[
  			71258,
  			71263
  		],
  		3
  	],
  	[
  		[
  			71264,
  			71276
  		],
  		2
  	],
  	[
  		[
  			71277,
  			71295
  		],
  		3
  	],
  	[
  		[
  			71296,
  			71351
  		],
  		2
  	],
  	[
  		71352,
  		2
  	],
  	[
  		[
  			71353,
  			71359
  		],
  		3
  	],
  	[
  		[
  			71360,
  			71369
  		],
  		2
  	],
  	[
  		[
  			71370,
  			71423
  		],
  		3
  	],
  	[
  		[
  			71424,
  			71449
  		],
  		2
  	],
  	[
  		71450,
  		2
  	],
  	[
  		[
  			71451,
  			71452
  		],
  		3
  	],
  	[
  		[
  			71453,
  			71467
  		],
  		2
  	],
  	[
  		[
  			71468,
  			71471
  		],
  		3
  	],
  	[
  		[
  			71472,
  			71481
  		],
  		2
  	],
  	[
  		[
  			71482,
  			71487
  		],
  		2
  	],
  	[
  		[
  			71488,
  			71679
  		],
  		3
  	],
  	[
  		[
  			71680,
  			71738
  		],
  		2
  	],
  	[
  		71739,
  		2
  	],
  	[
  		[
  			71740,
  			71839
  		],
  		3
  	],
  	[
  		71840,
  		1,
  		"𑣀"
  	],
  	[
  		71841,
  		1,
  		"𑣁"
  	],
  	[
  		71842,
  		1,
  		"𑣂"
  	],
  	[
  		71843,
  		1,
  		"𑣃"
  	],
  	[
  		71844,
  		1,
  		"𑣄"
  	],
  	[
  		71845,
  		1,
  		"𑣅"
  	],
  	[
  		71846,
  		1,
  		"𑣆"
  	],
  	[
  		71847,
  		1,
  		"𑣇"
  	],
  	[
  		71848,
  		1,
  		"𑣈"
  	],
  	[
  		71849,
  		1,
  		"𑣉"
  	],
  	[
  		71850,
  		1,
  		"𑣊"
  	],
  	[
  		71851,
  		1,
  		"𑣋"
  	],
  	[
  		71852,
  		1,
  		"𑣌"
  	],
  	[
  		71853,
  		1,
  		"𑣍"
  	],
  	[
  		71854,
  		1,
  		"𑣎"
  	],
  	[
  		71855,
  		1,
  		"𑣏"
  	],
  	[
  		71856,
  		1,
  		"𑣐"
  	],
  	[
  		71857,
  		1,
  		"𑣑"
  	],
  	[
  		71858,
  		1,
  		"𑣒"
  	],
  	[
  		71859,
  		1,
  		"𑣓"
  	],
  	[
  		71860,
  		1,
  		"𑣔"
  	],
  	[
  		71861,
  		1,
  		"𑣕"
  	],
  	[
  		71862,
  		1,
  		"𑣖"
  	],
  	[
  		71863,
  		1,
  		"𑣗"
  	],
  	[
  		71864,
  		1,
  		"𑣘"
  	],
  	[
  		71865,
  		1,
  		"𑣙"
  	],
  	[
  		71866,
  		1,
  		"𑣚"
  	],
  	[
  		71867,
  		1,
  		"𑣛"
  	],
  	[
  		71868,
  		1,
  		"𑣜"
  	],
  	[
  		71869,
  		1,
  		"𑣝"
  	],
  	[
  		71870,
  		1,
  		"𑣞"
  	],
  	[
  		71871,
  		1,
  		"𑣟"
  	],
  	[
  		[
  			71872,
  			71913
  		],
  		2
  	],
  	[
  		[
  			71914,
  			71922
  		],
  		2
  	],
  	[
  		[
  			71923,
  			71934
  		],
  		3
  	],
  	[
  		71935,
  		2
  	],
  	[
  		[
  			71936,
  			71942
  		],
  		2
  	],
  	[
  		[
  			71943,
  			71944
  		],
  		3
  	],
  	[
  		71945,
  		2
  	],
  	[
  		[
  			71946,
  			71947
  		],
  		3
  	],
  	[
  		[
  			71948,
  			71955
  		],
  		2
  	],
  	[
  		71956,
  		3
  	],
  	[
  		[
  			71957,
  			71958
  		],
  		2
  	],
  	[
  		71959,
  		3
  	],
  	[
  		[
  			71960,
  			71989
  		],
  		2
  	],
  	[
  		71990,
  		3
  	],
  	[
  		[
  			71991,
  			71992
  		],
  		2
  	],
  	[
  		[
  			71993,
  			71994
  		],
  		3
  	],
  	[
  		[
  			71995,
  			72003
  		],
  		2
  	],
  	[
  		[
  			72004,
  			72006
  		],
  		2
  	],
  	[
  		[
  			72007,
  			72015
  		],
  		3
  	],
  	[
  		[
  			72016,
  			72025
  		],
  		2
  	],
  	[
  		[
  			72026,
  			72095
  		],
  		3
  	],
  	[
  		[
  			72096,
  			72103
  		],
  		2
  	],
  	[
  		[
  			72104,
  			72105
  		],
  		3
  	],
  	[
  		[
  			72106,
  			72151
  		],
  		2
  	],
  	[
  		[
  			72152,
  			72153
  		],
  		3
  	],
  	[
  		[
  			72154,
  			72161
  		],
  		2
  	],
  	[
  		72162,
  		2
  	],
  	[
  		[
  			72163,
  			72164
  		],
  		2
  	],
  	[
  		[
  			72165,
  			72191
  		],
  		3
  	],
  	[
  		[
  			72192,
  			72254
  		],
  		2
  	],
  	[
  		[
  			72255,
  			72262
  		],
  		2
  	],
  	[
  		72263,
  		2
  	],
  	[
  		[
  			72264,
  			72271
  		],
  		3
  	],
  	[
  		[
  			72272,
  			72323
  		],
  		2
  	],
  	[
  		[
  			72324,
  			72325
  		],
  		2
  	],
  	[
  		[
  			72326,
  			72345
  		],
  		2
  	],
  	[
  		[
  			72346,
  			72348
  		],
  		2
  	],
  	[
  		72349,
  		2
  	],
  	[
  		[
  			72350,
  			72354
  		],
  		2
  	],
  	[
  		[
  			72355,
  			72383
  		],
  		3
  	],
  	[
  		[
  			72384,
  			72440
  		],
  		2
  	],
  	[
  		[
  			72441,
  			72703
  		],
  		3
  	],
  	[
  		[
  			72704,
  			72712
  		],
  		2
  	],
  	[
  		72713,
  		3
  	],
  	[
  		[
  			72714,
  			72758
  		],
  		2
  	],
  	[
  		72759,
  		3
  	],
  	[
  		[
  			72760,
  			72768
  		],
  		2
  	],
  	[
  		[
  			72769,
  			72773
  		],
  		2
  	],
  	[
  		[
  			72774,
  			72783
  		],
  		3
  	],
  	[
  		[
  			72784,
  			72793
  		],
  		2
  	],
  	[
  		[
  			72794,
  			72812
  		],
  		2
  	],
  	[
  		[
  			72813,
  			72815
  		],
  		3
  	],
  	[
  		[
  			72816,
  			72817
  		],
  		2
  	],
  	[
  		[
  			72818,
  			72847
  		],
  		2
  	],
  	[
  		[
  			72848,
  			72849
  		],
  		3
  	],
  	[
  		[
  			72850,
  			72871
  		],
  		2
  	],
  	[
  		72872,
  		3
  	],
  	[
  		[
  			72873,
  			72886
  		],
  		2
  	],
  	[
  		[
  			72887,
  			72959
  		],
  		3
  	],
  	[
  		[
  			72960,
  			72966
  		],
  		2
  	],
  	[
  		72967,
  		3
  	],
  	[
  		[
  			72968,
  			72969
  		],
  		2
  	],
  	[
  		72970,
  		3
  	],
  	[
  		[
  			72971,
  			73014
  		],
  		2
  	],
  	[
  		[
  			73015,
  			73017
  		],
  		3
  	],
  	[
  		73018,
  		2
  	],
  	[
  		73019,
  		3
  	],
  	[
  		[
  			73020,
  			73021
  		],
  		2
  	],
  	[
  		73022,
  		3
  	],
  	[
  		[
  			73023,
  			73031
  		],
  		2
  	],
  	[
  		[
  			73032,
  			73039
  		],
  		3
  	],
  	[
  		[
  			73040,
  			73049
  		],
  		2
  	],
  	[
  		[
  			73050,
  			73055
  		],
  		3
  	],
  	[
  		[
  			73056,
  			73061
  		],
  		2
  	],
  	[
  		73062,
  		3
  	],
  	[
  		[
  			73063,
  			73064
  		],
  		2
  	],
  	[
  		73065,
  		3
  	],
  	[
  		[
  			73066,
  			73102
  		],
  		2
  	],
  	[
  		73103,
  		3
  	],
  	[
  		[
  			73104,
  			73105
  		],
  		2
  	],
  	[
  		73106,
  		3
  	],
  	[
  		[
  			73107,
  			73112
  		],
  		2
  	],
  	[
  		[
  			73113,
  			73119
  		],
  		3
  	],
  	[
  		[
  			73120,
  			73129
  		],
  		2
  	],
  	[
  		[
  			73130,
  			73439
  		],
  		3
  	],
  	[
  		[
  			73440,
  			73462
  		],
  		2
  	],
  	[
  		[
  			73463,
  			73464
  		],
  		2
  	],
  	[
  		[
  			73465,
  			73647
  		],
  		3
  	],
  	[
  		73648,
  		2
  	],
  	[
  		[
  			73649,
  			73663
  		],
  		3
  	],
  	[
  		[
  			73664,
  			73713
  		],
  		2
  	],
  	[
  		[
  			73714,
  			73726
  		],
  		3
  	],
  	[
  		73727,
  		2
  	],
  	[
  		[
  			73728,
  			74606
  		],
  		2
  	],
  	[
  		[
  			74607,
  			74648
  		],
  		2
  	],
  	[
  		74649,
  		2
  	],
  	[
  		[
  			74650,
  			74751
  		],
  		3
  	],
  	[
  		[
  			74752,
  			74850
  		],
  		2
  	],
  	[
  		[
  			74851,
  			74862
  		],
  		2
  	],
  	[
  		74863,
  		3
  	],
  	[
  		[
  			74864,
  			74867
  		],
  		2
  	],
  	[
  		74868,
  		2
  	],
  	[
  		[
  			74869,
  			74879
  		],
  		3
  	],
  	[
  		[
  			74880,
  			75075
  		],
  		2
  	],
  	[
  		[
  			75076,
  			77823
  		],
  		3
  	],
  	[
  		[
  			77824,
  			78894
  		],
  		2
  	],
  	[
  		78895,
  		3
  	],
  	[
  		[
  			78896,
  			78904
  		],
  		3
  	],
  	[
  		[
  			78905,
  			82943
  		],
  		3
  	],
  	[
  		[
  			82944,
  			83526
  		],
  		2
  	],
  	[
  		[
  			83527,
  			92159
  		],
  		3
  	],
  	[
  		[
  			92160,
  			92728
  		],
  		2
  	],
  	[
  		[
  			92729,
  			92735
  		],
  		3
  	],
  	[
  		[
  			92736,
  			92766
  		],
  		2
  	],
  	[
  		92767,
  		3
  	],
  	[
  		[
  			92768,
  			92777
  		],
  		2
  	],
  	[
  		[
  			92778,
  			92781
  		],
  		3
  	],
  	[
  		[
  			92782,
  			92783
  		],
  		2
  	],
  	[
  		[
  			92784,
  			92879
  		],
  		3
  	],
  	[
  		[
  			92880,
  			92909
  		],
  		2
  	],
  	[
  		[
  			92910,
  			92911
  		],
  		3
  	],
  	[
  		[
  			92912,
  			92916
  		],
  		2
  	],
  	[
  		92917,
  		2
  	],
  	[
  		[
  			92918,
  			92927
  		],
  		3
  	],
  	[
  		[
  			92928,
  			92982
  		],
  		2
  	],
  	[
  		[
  			92983,
  			92991
  		],
  		2
  	],
  	[
  		[
  			92992,
  			92995
  		],
  		2
  	],
  	[
  		[
  			92996,
  			92997
  		],
  		2
  	],
  	[
  		[
  			92998,
  			93007
  		],
  		3
  	],
  	[
  		[
  			93008,
  			93017
  		],
  		2
  	],
  	[
  		93018,
  		3
  	],
  	[
  		[
  			93019,
  			93025
  		],
  		2
  	],
  	[
  		93026,
  		3
  	],
  	[
  		[
  			93027,
  			93047
  		],
  		2
  	],
  	[
  		[
  			93048,
  			93052
  		],
  		3
  	],
  	[
  		[
  			93053,
  			93071
  		],
  		2
  	],
  	[
  		[
  			93072,
  			93759
  		],
  		3
  	],
  	[
  		93760,
  		1,
  		"𖹠"
  	],
  	[
  		93761,
  		1,
  		"𖹡"
  	],
  	[
  		93762,
  		1,
  		"𖹢"
  	],
  	[
  		93763,
  		1,
  		"𖹣"
  	],
  	[
  		93764,
  		1,
  		"𖹤"
  	],
  	[
  		93765,
  		1,
  		"𖹥"
  	],
  	[
  		93766,
  		1,
  		"𖹦"
  	],
  	[
  		93767,
  		1,
  		"𖹧"
  	],
  	[
  		93768,
  		1,
  		"𖹨"
  	],
  	[
  		93769,
  		1,
  		"𖹩"
  	],
  	[
  		93770,
  		1,
  		"𖹪"
  	],
  	[
  		93771,
  		1,
  		"𖹫"
  	],
  	[
  		93772,
  		1,
  		"𖹬"
  	],
  	[
  		93773,
  		1,
  		"𖹭"
  	],
  	[
  		93774,
  		1,
  		"𖹮"
  	],
  	[
  		93775,
  		1,
  		"𖹯"
  	],
  	[
  		93776,
  		1,
  		"𖹰"
  	],
  	[
  		93777,
  		1,
  		"𖹱"
  	],
  	[
  		93778,
  		1,
  		"𖹲"
  	],
  	[
  		93779,
  		1,
  		"𖹳"
  	],
  	[
  		93780,
  		1,
  		"𖹴"
  	],
  	[
  		93781,
  		1,
  		"𖹵"
  	],
  	[
  		93782,
  		1,
  		"𖹶"
  	],
  	[
  		93783,
  		1,
  		"𖹷"
  	],
  	[
  		93784,
  		1,
  		"𖹸"
  	],
  	[
  		93785,
  		1,
  		"𖹹"
  	],
  	[
  		93786,
  		1,
  		"𖹺"
  	],
  	[
  		93787,
  		1,
  		"𖹻"
  	],
  	[
  		93788,
  		1,
  		"𖹼"
  	],
  	[
  		93789,
  		1,
  		"𖹽"
  	],
  	[
  		93790,
  		1,
  		"𖹾"
  	],
  	[
  		93791,
  		1,
  		"𖹿"
  	],
  	[
  		[
  			93792,
  			93823
  		],
  		2
  	],
  	[
  		[
  			93824,
  			93850
  		],
  		2
  	],
  	[
  		[
  			93851,
  			93951
  		],
  		3
  	],
  	[
  		[
  			93952,
  			94020
  		],
  		2
  	],
  	[
  		[
  			94021,
  			94026
  		],
  		2
  	],
  	[
  		[
  			94027,
  			94030
  		],
  		3
  	],
  	[
  		94031,
  		2
  	],
  	[
  		[
  			94032,
  			94078
  		],
  		2
  	],
  	[
  		[
  			94079,
  			94087
  		],
  		2
  	],
  	[
  		[
  			94088,
  			94094
  		],
  		3
  	],
  	[
  		[
  			94095,
  			94111
  		],
  		2
  	],
  	[
  		[
  			94112,
  			94175
  		],
  		3
  	],
  	[
  		94176,
  		2
  	],
  	[
  		94177,
  		2
  	],
  	[
  		94178,
  		2
  	],
  	[
  		94179,
  		2
  	],
  	[
  		94180,
  		2
  	],
  	[
  		[
  			94181,
  			94191
  		],
  		3
  	],
  	[
  		[
  			94192,
  			94193
  		],
  		2
  	],
  	[
  		[
  			94194,
  			94207
  		],
  		3
  	],
  	[
  		[
  			94208,
  			100332
  		],
  		2
  	],
  	[
  		[
  			100333,
  			100337
  		],
  		2
  	],
  	[
  		[
  			100338,
  			100343
  		],
  		2
  	],
  	[
  		[
  			100344,
  			100351
  		],
  		3
  	],
  	[
  		[
  			100352,
  			101106
  		],
  		2
  	],
  	[
  		[
  			101107,
  			101589
  		],
  		2
  	],
  	[
  		[
  			101590,
  			101631
  		],
  		3
  	],
  	[
  		[
  			101632,
  			101640
  		],
  		2
  	],
  	[
  		[
  			101641,
  			110591
  		],
  		3
  	],
  	[
  		[
  			110592,
  			110593
  		],
  		2
  	],
  	[
  		[
  			110594,
  			110878
  		],
  		2
  	],
  	[
  		[
  			110879,
  			110927
  		],
  		3
  	],
  	[
  		[
  			110928,
  			110930
  		],
  		2
  	],
  	[
  		[
  			110931,
  			110947
  		],
  		3
  	],
  	[
  		[
  			110948,
  			110951
  		],
  		2
  	],
  	[
  		[
  			110952,
  			110959
  		],
  		3
  	],
  	[
  		[
  			110960,
  			111355
  		],
  		2
  	],
  	[
  		[
  			111356,
  			113663
  		],
  		3
  	],
  	[
  		[
  			113664,
  			113770
  		],
  		2
  	],
  	[
  		[
  			113771,
  			113775
  		],
  		3
  	],
  	[
  		[
  			113776,
  			113788
  		],
  		2
  	],
  	[
  		[
  			113789,
  			113791
  		],
  		3
  	],
  	[
  		[
  			113792,
  			113800
  		],
  		2
  	],
  	[
  		[
  			113801,
  			113807
  		],
  		3
  	],
  	[
  		[
  			113808,
  			113817
  		],
  		2
  	],
  	[
  		[
  			113818,
  			113819
  		],
  		3
  	],
  	[
  		113820,
  		2
  	],
  	[
  		[
  			113821,
  			113822
  		],
  		2
  	],
  	[
  		113823,
  		2
  	],
  	[
  		[
  			113824,
  			113827
  		],
  		7
  	],
  	[
  		[
  			113828,
  			118783
  		],
  		3
  	],
  	[
  		[
  			118784,
  			119029
  		],
  		2
  	],
  	[
  		[
  			119030,
  			119039
  		],
  		3
  	],
  	[
  		[
  			119040,
  			119078
  		],
  		2
  	],
  	[
  		[
  			119079,
  			119080
  		],
  		3
  	],
  	[
  		119081,
  		2
  	],
  	[
  		[
  			119082,
  			119133
  		],
  		2
  	],
  	[
  		119134,
  		1,
  		"𝅗𝅥"
  	],
  	[
  		119135,
  		1,
  		"𝅘𝅥"
  	],
  	[
  		119136,
  		1,
  		"𝅘𝅥𝅮"
  	],
  	[
  		119137,
  		1,
  		"𝅘𝅥𝅯"
  	],
  	[
  		119138,
  		1,
  		"𝅘𝅥𝅰"
  	],
  	[
  		119139,
  		1,
  		"𝅘𝅥𝅱"
  	],
  	[
  		119140,
  		1,
  		"𝅘𝅥𝅲"
  	],
  	[
  		[
  			119141,
  			119154
  		],
  		2
  	],
  	[
  		[
  			119155,
  			119162
  		],
  		3
  	],
  	[
  		[
  			119163,
  			119226
  		],
  		2
  	],
  	[
  		119227,
  		1,
  		"𝆹𝅥"
  	],
  	[
  		119228,
  		1,
  		"𝆺𝅥"
  	],
  	[
  		119229,
  		1,
  		"𝆹𝅥𝅮"
  	],
  	[
  		119230,
  		1,
  		"𝆺𝅥𝅮"
  	],
  	[
  		119231,
  		1,
  		"𝆹𝅥𝅯"
  	],
  	[
  		119232,
  		1,
  		"𝆺𝅥𝅯"
  	],
  	[
  		[
  			119233,
  			119261
  		],
  		2
  	],
  	[
  		[
  			119262,
  			119272
  		],
  		2
  	],
  	[
  		[
  			119273,
  			119295
  		],
  		3
  	],
  	[
  		[
  			119296,
  			119365
  		],
  		2
  	],
  	[
  		[
  			119366,
  			119519
  		],
  		3
  	],
  	[
  		[
  			119520,
  			119539
  		],
  		2
  	],
  	[
  		[
  			119540,
  			119551
  		],
  		3
  	],
  	[
  		[
  			119552,
  			119638
  		],
  		2
  	],
  	[
  		[
  			119639,
  			119647
  		],
  		3
  	],
  	[
  		[
  			119648,
  			119665
  		],
  		2
  	],
  	[
  		[
  			119666,
  			119672
  		],
  		2
  	],
  	[
  		[
  			119673,
  			119807
  		],
  		3
  	],
  	[
  		119808,
  		1,
  		"a"
  	],
  	[
  		119809,
  		1,
  		"b"
  	],
  	[
  		119810,
  		1,
  		"c"
  	],
  	[
  		119811,
  		1,
  		"d"
  	],
  	[
  		119812,
  		1,
  		"e"
  	],
  	[
  		119813,
  		1,
  		"f"
  	],
  	[
  		119814,
  		1,
  		"g"
  	],
  	[
  		119815,
  		1,
  		"h"
  	],
  	[
  		119816,
  		1,
  		"i"
  	],
  	[
  		119817,
  		1,
  		"j"
  	],
  	[
  		119818,
  		1,
  		"k"
  	],
  	[
  		119819,
  		1,
  		"l"
  	],
  	[
  		119820,
  		1,
  		"m"
  	],
  	[
  		119821,
  		1,
  		"n"
  	],
  	[
  		119822,
  		1,
  		"o"
  	],
  	[
  		119823,
  		1,
  		"p"
  	],
  	[
  		119824,
  		1,
  		"q"
  	],
  	[
  		119825,
  		1,
  		"r"
  	],
  	[
  		119826,
  		1,
  		"s"
  	],
  	[
  		119827,
  		1,
  		"t"
  	],
  	[
  		119828,
  		1,
  		"u"
  	],
  	[
  		119829,
  		1,
  		"v"
  	],
  	[
  		119830,
  		1,
  		"w"
  	],
  	[
  		119831,
  		1,
  		"x"
  	],
  	[
  		119832,
  		1,
  		"y"
  	],
  	[
  		119833,
  		1,
  		"z"
  	],
  	[
  		119834,
  		1,
  		"a"
  	],
  	[
  		119835,
  		1,
  		"b"
  	],
  	[
  		119836,
  		1,
  		"c"
  	],
  	[
  		119837,
  		1,
  		"d"
  	],
  	[
  		119838,
  		1,
  		"e"
  	],
  	[
  		119839,
  		1,
  		"f"
  	],
  	[
  		119840,
  		1,
  		"g"
  	],
  	[
  		119841,
  		1,
  		"h"
  	],
  	[
  		119842,
  		1,
  		"i"
  	],
  	[
  		119843,
  		1,
  		"j"
  	],
  	[
  		119844,
  		1,
  		"k"
  	],
  	[
  		119845,
  		1,
  		"l"
  	],
  	[
  		119846,
  		1,
  		"m"
  	],
  	[
  		119847,
  		1,
  		"n"
  	],
  	[
  		119848,
  		1,
  		"o"
  	],
  	[
  		119849,
  		1,
  		"p"
  	],
  	[
  		119850,
  		1,
  		"q"
  	],
  	[
  		119851,
  		1,
  		"r"
  	],
  	[
  		119852,
  		1,
  		"s"
  	],
  	[
  		119853,
  		1,
  		"t"
  	],
  	[
  		119854,
  		1,
  		"u"
  	],
  	[
  		119855,
  		1,
  		"v"
  	],
  	[
  		119856,
  		1,
  		"w"
  	],
  	[
  		119857,
  		1,
  		"x"
  	],
  	[
  		119858,
  		1,
  		"y"
  	],
  	[
  		119859,
  		1,
  		"z"
  	],
  	[
  		119860,
  		1,
  		"a"
  	],
  	[
  		119861,
  		1,
  		"b"
  	],
  	[
  		119862,
  		1,
  		"c"
  	],
  	[
  		119863,
  		1,
  		"d"
  	],
  	[
  		119864,
  		1,
  		"e"
  	],
  	[
  		119865,
  		1,
  		"f"
  	],
  	[
  		119866,
  		1,
  		"g"
  	],
  	[
  		119867,
  		1,
  		"h"
  	],
  	[
  		119868,
  		1,
  		"i"
  	],
  	[
  		119869,
  		1,
  		"j"
  	],
  	[
  		119870,
  		1,
  		"k"
  	],
  	[
  		119871,
  		1,
  		"l"
  	],
  	[
  		119872,
  		1,
  		"m"
  	],
  	[
  		119873,
  		1,
  		"n"
  	],
  	[
  		119874,
  		1,
  		"o"
  	],
  	[
  		119875,
  		1,
  		"p"
  	],
  	[
  		119876,
  		1,
  		"q"
  	],
  	[
  		119877,
  		1,
  		"r"
  	],
  	[
  		119878,
  		1,
  		"s"
  	],
  	[
  		119879,
  		1,
  		"t"
  	],
  	[
  		119880,
  		1,
  		"u"
  	],
  	[
  		119881,
  		1,
  		"v"
  	],
  	[
  		119882,
  		1,
  		"w"
  	],
  	[
  		119883,
  		1,
  		"x"
  	],
  	[
  		119884,
  		1,
  		"y"
  	],
  	[
  		119885,
  		1,
  		"z"
  	],
  	[
  		119886,
  		1,
  		"a"
  	],
  	[
  		119887,
  		1,
  		"b"
  	],
  	[
  		119888,
  		1,
  		"c"
  	],
  	[
  		119889,
  		1,
  		"d"
  	],
  	[
  		119890,
  		1,
  		"e"
  	],
  	[
  		119891,
  		1,
  		"f"
  	],
  	[
  		119892,
  		1,
  		"g"
  	],
  	[
  		119893,
  		3
  	],
  	[
  		119894,
  		1,
  		"i"
  	],
  	[
  		119895,
  		1,
  		"j"
  	],
  	[
  		119896,
  		1,
  		"k"
  	],
  	[
  		119897,
  		1,
  		"l"
  	],
  	[
  		119898,
  		1,
  		"m"
  	],
  	[
  		119899,
  		1,
  		"n"
  	],
  	[
  		119900,
  		1,
  		"o"
  	],
  	[
  		119901,
  		1,
  		"p"
  	],
  	[
  		119902,
  		1,
  		"q"
  	],
  	[
  		119903,
  		1,
  		"r"
  	],
  	[
  		119904,
  		1,
  		"s"
  	],
  	[
  		119905,
  		1,
  		"t"
  	],
  	[
  		119906,
  		1,
  		"u"
  	],
  	[
  		119907,
  		1,
  		"v"
  	],
  	[
  		119908,
  		1,
  		"w"
  	],
  	[
  		119909,
  		1,
  		"x"
  	],
  	[
  		119910,
  		1,
  		"y"
  	],
  	[
  		119911,
  		1,
  		"z"
  	],
  	[
  		119912,
  		1,
  		"a"
  	],
  	[
  		119913,
  		1,
  		"b"
  	],
  	[
  		119914,
  		1,
  		"c"
  	],
  	[
  		119915,
  		1,
  		"d"
  	],
  	[
  		119916,
  		1,
  		"e"
  	],
  	[
  		119917,
  		1,
  		"f"
  	],
  	[
  		119918,
  		1,
  		"g"
  	],
  	[
  		119919,
  		1,
  		"h"
  	],
  	[
  		119920,
  		1,
  		"i"
  	],
  	[
  		119921,
  		1,
  		"j"
  	],
  	[
  		119922,
  		1,
  		"k"
  	],
  	[
  		119923,
  		1,
  		"l"
  	],
  	[
  		119924,
  		1,
  		"m"
  	],
  	[
  		119925,
  		1,
  		"n"
  	],
  	[
  		119926,
  		1,
  		"o"
  	],
  	[
  		119927,
  		1,
  		"p"
  	],
  	[
  		119928,
  		1,
  		"q"
  	],
  	[
  		119929,
  		1,
  		"r"
  	],
  	[
  		119930,
  		1,
  		"s"
  	],
  	[
  		119931,
  		1,
  		"t"
  	],
  	[
  		119932,
  		1,
  		"u"
  	],
  	[
  		119933,
  		1,
  		"v"
  	],
  	[
  		119934,
  		1,
  		"w"
  	],
  	[
  		119935,
  		1,
  		"x"
  	],
  	[
  		119936,
  		1,
  		"y"
  	],
  	[
  		119937,
  		1,
  		"z"
  	],
  	[
  		119938,
  		1,
  		"a"
  	],
  	[
  		119939,
  		1,
  		"b"
  	],
  	[
  		119940,
  		1,
  		"c"
  	],
  	[
  		119941,
  		1,
  		"d"
  	],
  	[
  		119942,
  		1,
  		"e"
  	],
  	[
  		119943,
  		1,
  		"f"
  	],
  	[
  		119944,
  		1,
  		"g"
  	],
  	[
  		119945,
  		1,
  		"h"
  	],
  	[
  		119946,
  		1,
  		"i"
  	],
  	[
  		119947,
  		1,
  		"j"
  	],
  	[
  		119948,
  		1,
  		"k"
  	],
  	[
  		119949,
  		1,
  		"l"
  	],
  	[
  		119950,
  		1,
  		"m"
  	],
  	[
  		119951,
  		1,
  		"n"
  	],
  	[
  		119952,
  		1,
  		"o"
  	],
  	[
  		119953,
  		1,
  		"p"
  	],
  	[
  		119954,
  		1,
  		"q"
  	],
  	[
  		119955,
  		1,
  		"r"
  	],
  	[
  		119956,
  		1,
  		"s"
  	],
  	[
  		119957,
  		1,
  		"t"
  	],
  	[
  		119958,
  		1,
  		"u"
  	],
  	[
  		119959,
  		1,
  		"v"
  	],
  	[
  		119960,
  		1,
  		"w"
  	],
  	[
  		119961,
  		1,
  		"x"
  	],
  	[
  		119962,
  		1,
  		"y"
  	],
  	[
  		119963,
  		1,
  		"z"
  	],
  	[
  		119964,
  		1,
  		"a"
  	],
  	[
  		119965,
  		3
  	],
  	[
  		119966,
  		1,
  		"c"
  	],
  	[
  		119967,
  		1,
  		"d"
  	],
  	[
  		[
  			119968,
  			119969
  		],
  		3
  	],
  	[
  		119970,
  		1,
  		"g"
  	],
  	[
  		[
  			119971,
  			119972
  		],
  		3
  	],
  	[
  		119973,
  		1,
  		"j"
  	],
  	[
  		119974,
  		1,
  		"k"
  	],
  	[
  		[
  			119975,
  			119976
  		],
  		3
  	],
  	[
  		119977,
  		1,
  		"n"
  	],
  	[
  		119978,
  		1,
  		"o"
  	],
  	[
  		119979,
  		1,
  		"p"
  	],
  	[
  		119980,
  		1,
  		"q"
  	],
  	[
  		119981,
  		3
  	],
  	[
  		119982,
  		1,
  		"s"
  	],
  	[
  		119983,
  		1,
  		"t"
  	],
  	[
  		119984,
  		1,
  		"u"
  	],
  	[
  		119985,
  		1,
  		"v"
  	],
  	[
  		119986,
  		1,
  		"w"
  	],
  	[
  		119987,
  		1,
  		"x"
  	],
  	[
  		119988,
  		1,
  		"y"
  	],
  	[
  		119989,
  		1,
  		"z"
  	],
  	[
  		119990,
  		1,
  		"a"
  	],
  	[
  		119991,
  		1,
  		"b"
  	],
  	[
  		119992,
  		1,
  		"c"
  	],
  	[
  		119993,
  		1,
  		"d"
  	],
  	[
  		119994,
  		3
  	],
  	[
  		119995,
  		1,
  		"f"
  	],
  	[
  		119996,
  		3
  	],
  	[
  		119997,
  		1,
  		"h"
  	],
  	[
  		119998,
  		1,
  		"i"
  	],
  	[
  		119999,
  		1,
  		"j"
  	],
  	[
  		120000,
  		1,
  		"k"
  	],
  	[
  		120001,
  		1,
  		"l"
  	],
  	[
  		120002,
  		1,
  		"m"
  	],
  	[
  		120003,
  		1,
  		"n"
  	],
  	[
  		120004,
  		3
  	],
  	[
  		120005,
  		1,
  		"p"
  	],
  	[
  		120006,
  		1,
  		"q"
  	],
  	[
  		120007,
  		1,
  		"r"
  	],
  	[
  		120008,
  		1,
  		"s"
  	],
  	[
  		120009,
  		1,
  		"t"
  	],
  	[
  		120010,
  		1,
  		"u"
  	],
  	[
  		120011,
  		1,
  		"v"
  	],
  	[
  		120012,
  		1,
  		"w"
  	],
  	[
  		120013,
  		1,
  		"x"
  	],
  	[
  		120014,
  		1,
  		"y"
  	],
  	[
  		120015,
  		1,
  		"z"
  	],
  	[
  		120016,
  		1,
  		"a"
  	],
  	[
  		120017,
  		1,
  		"b"
  	],
  	[
  		120018,
  		1,
  		"c"
  	],
  	[
  		120019,
  		1,
  		"d"
  	],
  	[
  		120020,
  		1,
  		"e"
  	],
  	[
  		120021,
  		1,
  		"f"
  	],
  	[
  		120022,
  		1,
  		"g"
  	],
  	[
  		120023,
  		1,
  		"h"
  	],
  	[
  		120024,
  		1,
  		"i"
  	],
  	[
  		120025,
  		1,
  		"j"
  	],
  	[
  		120026,
  		1,
  		"k"
  	],
  	[
  		120027,
  		1,
  		"l"
  	],
  	[
  		120028,
  		1,
  		"m"
  	],
  	[
  		120029,
  		1,
  		"n"
  	],
  	[
  		120030,
  		1,
  		"o"
  	],
  	[
  		120031,
  		1,
  		"p"
  	],
  	[
  		120032,
  		1,
  		"q"
  	],
  	[
  		120033,
  		1,
  		"r"
  	],
  	[
  		120034,
  		1,
  		"s"
  	],
  	[
  		120035,
  		1,
  		"t"
  	],
  	[
  		120036,
  		1,
  		"u"
  	],
  	[
  		120037,
  		1,
  		"v"
  	],
  	[
  		120038,
  		1,
  		"w"
  	],
  	[
  		120039,
  		1,
  		"x"
  	],
  	[
  		120040,
  		1,
  		"y"
  	],
  	[
  		120041,
  		1,
  		"z"
  	],
  	[
  		120042,
  		1,
  		"a"
  	],
  	[
  		120043,
  		1,
  		"b"
  	],
  	[
  		120044,
  		1,
  		"c"
  	],
  	[
  		120045,
  		1,
  		"d"
  	],
  	[
  		120046,
  		1,
  		"e"
  	],
  	[
  		120047,
  		1,
  		"f"
  	],
  	[
  		120048,
  		1,
  		"g"
  	],
  	[
  		120049,
  		1,
  		"h"
  	],
  	[
  		120050,
  		1,
  		"i"
  	],
  	[
  		120051,
  		1,
  		"j"
  	],
  	[
  		120052,
  		1,
  		"k"
  	],
  	[
  		120053,
  		1,
  		"l"
  	],
  	[
  		120054,
  		1,
  		"m"
  	],
  	[
  		120055,
  		1,
  		"n"
  	],
  	[
  		120056,
  		1,
  		"o"
  	],
  	[
  		120057,
  		1,
  		"p"
  	],
  	[
  		120058,
  		1,
  		"q"
  	],
  	[
  		120059,
  		1,
  		"r"
  	],
  	[
  		120060,
  		1,
  		"s"
  	],
  	[
  		120061,
  		1,
  		"t"
  	],
  	[
  		120062,
  		1,
  		"u"
  	],
  	[
  		120063,
  		1,
  		"v"
  	],
  	[
  		120064,
  		1,
  		"w"
  	],
  	[
  		120065,
  		1,
  		"x"
  	],
  	[
  		120066,
  		1,
  		"y"
  	],
  	[
  		120067,
  		1,
  		"z"
  	],
  	[
  		120068,
  		1,
  		"a"
  	],
  	[
  		120069,
  		1,
  		"b"
  	],
  	[
  		120070,
  		3
  	],
  	[
  		120071,
  		1,
  		"d"
  	],
  	[
  		120072,
  		1,
  		"e"
  	],
  	[
  		120073,
  		1,
  		"f"
  	],
  	[
  		120074,
  		1,
  		"g"
  	],
  	[
  		[
  			120075,
  			120076
  		],
  		3
  	],
  	[
  		120077,
  		1,
  		"j"
  	],
  	[
  		120078,
  		1,
  		"k"
  	],
  	[
  		120079,
  		1,
  		"l"
  	],
  	[
  		120080,
  		1,
  		"m"
  	],
  	[
  		120081,
  		1,
  		"n"
  	],
  	[
  		120082,
  		1,
  		"o"
  	],
  	[
  		120083,
  		1,
  		"p"
  	],
  	[
  		120084,
  		1,
  		"q"
  	],
  	[
  		120085,
  		3
  	],
  	[
  		120086,
  		1,
  		"s"
  	],
  	[
  		120087,
  		1,
  		"t"
  	],
  	[
  		120088,
  		1,
  		"u"
  	],
  	[
  		120089,
  		1,
  		"v"
  	],
  	[
  		120090,
  		1,
  		"w"
  	],
  	[
  		120091,
  		1,
  		"x"
  	],
  	[
  		120092,
  		1,
  		"y"
  	],
  	[
  		120093,
  		3
  	],
  	[
  		120094,
  		1,
  		"a"
  	],
  	[
  		120095,
  		1,
  		"b"
  	],
  	[
  		120096,
  		1,
  		"c"
  	],
  	[
  		120097,
  		1,
  		"d"
  	],
  	[
  		120098,
  		1,
  		"e"
  	],
  	[
  		120099,
  		1,
  		"f"
  	],
  	[
  		120100,
  		1,
  		"g"
  	],
  	[
  		120101,
  		1,
  		"h"
  	],
  	[
  		120102,
  		1,
  		"i"
  	],
  	[
  		120103,
  		1,
  		"j"
  	],
  	[
  		120104,
  		1,
  		"k"
  	],
  	[
  		120105,
  		1,
  		"l"
  	],
  	[
  		120106,
  		1,
  		"m"
  	],
  	[
  		120107,
  		1,
  		"n"
  	],
  	[
  		120108,
  		1,
  		"o"
  	],
  	[
  		120109,
  		1,
  		"p"
  	],
  	[
  		120110,
  		1,
  		"q"
  	],
  	[
  		120111,
  		1,
  		"r"
  	],
  	[
  		120112,
  		1,
  		"s"
  	],
  	[
  		120113,
  		1,
  		"t"
  	],
  	[
  		120114,
  		1,
  		"u"
  	],
  	[
  		120115,
  		1,
  		"v"
  	],
  	[
  		120116,
  		1,
  		"w"
  	],
  	[
  		120117,
  		1,
  		"x"
  	],
  	[
  		120118,
  		1,
  		"y"
  	],
  	[
  		120119,
  		1,
  		"z"
  	],
  	[
  		120120,
  		1,
  		"a"
  	],
  	[
  		120121,
  		1,
  		"b"
  	],
  	[
  		120122,
  		3
  	],
  	[
  		120123,
  		1,
  		"d"
  	],
  	[
  		120124,
  		1,
  		"e"
  	],
  	[
  		120125,
  		1,
  		"f"
  	],
  	[
  		120126,
  		1,
  		"g"
  	],
  	[
  		120127,
  		3
  	],
  	[
  		120128,
  		1,
  		"i"
  	],
  	[
  		120129,
  		1,
  		"j"
  	],
  	[
  		120130,
  		1,
  		"k"
  	],
  	[
  		120131,
  		1,
  		"l"
  	],
  	[
  		120132,
  		1,
  		"m"
  	],
  	[
  		120133,
  		3
  	],
  	[
  		120134,
  		1,
  		"o"
  	],
  	[
  		[
  			120135,
  			120137
  		],
  		3
  	],
  	[
  		120138,
  		1,
  		"s"
  	],
  	[
  		120139,
  		1,
  		"t"
  	],
  	[
  		120140,
  		1,
  		"u"
  	],
  	[
  		120141,
  		1,
  		"v"
  	],
  	[
  		120142,
  		1,
  		"w"
  	],
  	[
  		120143,
  		1,
  		"x"
  	],
  	[
  		120144,
  		1,
  		"y"
  	],
  	[
  		120145,
  		3
  	],
  	[
  		120146,
  		1,
  		"a"
  	],
  	[
  		120147,
  		1,
  		"b"
  	],
  	[
  		120148,
  		1,
  		"c"
  	],
  	[
  		120149,
  		1,
  		"d"
  	],
  	[
  		120150,
  		1,
  		"e"
  	],
  	[
  		120151,
  		1,
  		"f"
  	],
  	[
  		120152,
  		1,
  		"g"
  	],
  	[
  		120153,
  		1,
  		"h"
  	],
  	[
  		120154,
  		1,
  		"i"
  	],
  	[
  		120155,
  		1,
  		"j"
  	],
  	[
  		120156,
  		1,
  		"k"
  	],
  	[
  		120157,
  		1,
  		"l"
  	],
  	[
  		120158,
  		1,
  		"m"
  	],
  	[
  		120159,
  		1,
  		"n"
  	],
  	[
  		120160,
  		1,
  		"o"
  	],
  	[
  		120161,
  		1,
  		"p"
  	],
  	[
  		120162,
  		1,
  		"q"
  	],
  	[
  		120163,
  		1,
  		"r"
  	],
  	[
  		120164,
  		1,
  		"s"
  	],
  	[
  		120165,
  		1,
  		"t"
  	],
  	[
  		120166,
  		1,
  		"u"
  	],
  	[
  		120167,
  		1,
  		"v"
  	],
  	[
  		120168,
  		1,
  		"w"
  	],
  	[
  		120169,
  		1,
  		"x"
  	],
  	[
  		120170,
  		1,
  		"y"
  	],
  	[
  		120171,
  		1,
  		"z"
  	],
  	[
  		120172,
  		1,
  		"a"
  	],
  	[
  		120173,
  		1,
  		"b"
  	],
  	[
  		120174,
  		1,
  		"c"
  	],
  	[
  		120175,
  		1,
  		"d"
  	],
  	[
  		120176,
  		1,
  		"e"
  	],
  	[
  		120177,
  		1,
  		"f"
  	],
  	[
  		120178,
  		1,
  		"g"
  	],
  	[
  		120179,
  		1,
  		"h"
  	],
  	[
  		120180,
  		1,
  		"i"
  	],
  	[
  		120181,
  		1,
  		"j"
  	],
  	[
  		120182,
  		1,
  		"k"
  	],
  	[
  		120183,
  		1,
  		"l"
  	],
  	[
  		120184,
  		1,
  		"m"
  	],
  	[
  		120185,
  		1,
  		"n"
  	],
  	[
  		120186,
  		1,
  		"o"
  	],
  	[
  		120187,
  		1,
  		"p"
  	],
  	[
  		120188,
  		1,
  		"q"
  	],
  	[
  		120189,
  		1,
  		"r"
  	],
  	[
  		120190,
  		1,
  		"s"
  	],
  	[
  		120191,
  		1,
  		"t"
  	],
  	[
  		120192,
  		1,
  		"u"
  	],
  	[
  		120193,
  		1,
  		"v"
  	],
  	[
  		120194,
  		1,
  		"w"
  	],
  	[
  		120195,
  		1,
  		"x"
  	],
  	[
  		120196,
  		1,
  		"y"
  	],
  	[
  		120197,
  		1,
  		"z"
  	],
  	[
  		120198,
  		1,
  		"a"
  	],
  	[
  		120199,
  		1,
  		"b"
  	],
  	[
  		120200,
  		1,
  		"c"
  	],
  	[
  		120201,
  		1,
  		"d"
  	],
  	[
  		120202,
  		1,
  		"e"
  	],
  	[
  		120203,
  		1,
  		"f"
  	],
  	[
  		120204,
  		1,
  		"g"
  	],
  	[
  		120205,
  		1,
  		"h"
  	],
  	[
  		120206,
  		1,
  		"i"
  	],
  	[
  		120207,
  		1,
  		"j"
  	],
  	[
  		120208,
  		1,
  		"k"
  	],
  	[
  		120209,
  		1,
  		"l"
  	],
  	[
  		120210,
  		1,
  		"m"
  	],
  	[
  		120211,
  		1,
  		"n"
  	],
  	[
  		120212,
  		1,
  		"o"
  	],
  	[
  		120213,
  		1,
  		"p"
  	],
  	[
  		120214,
  		1,
  		"q"
  	],
  	[
  		120215,
  		1,
  		"r"
  	],
  	[
  		120216,
  		1,
  		"s"
  	],
  	[
  		120217,
  		1,
  		"t"
  	],
  	[
  		120218,
  		1,
  		"u"
  	],
  	[
  		120219,
  		1,
  		"v"
  	],
  	[
  		120220,
  		1,
  		"w"
  	],
  	[
  		120221,
  		1,
  		"x"
  	],
  	[
  		120222,
  		1,
  		"y"
  	],
  	[
  		120223,
  		1,
  		"z"
  	],
  	[
  		120224,
  		1,
  		"a"
  	],
  	[
  		120225,
  		1,
  		"b"
  	],
  	[
  		120226,
  		1,
  		"c"
  	],
  	[
  		120227,
  		1,
  		"d"
  	],
  	[
  		120228,
  		1,
  		"e"
  	],
  	[
  		120229,
  		1,
  		"f"
  	],
  	[
  		120230,
  		1,
  		"g"
  	],
  	[
  		120231,
  		1,
  		"h"
  	],
  	[
  		120232,
  		1,
  		"i"
  	],
  	[
  		120233,
  		1,
  		"j"
  	],
  	[
  		120234,
  		1,
  		"k"
  	],
  	[
  		120235,
  		1,
  		"l"
  	],
  	[
  		120236,
  		1,
  		"m"
  	],
  	[
  		120237,
  		1,
  		"n"
  	],
  	[
  		120238,
  		1,
  		"o"
  	],
  	[
  		120239,
  		1,
  		"p"
  	],
  	[
  		120240,
  		1,
  		"q"
  	],
  	[
  		120241,
  		1,
  		"r"
  	],
  	[
  		120242,
  		1,
  		"s"
  	],
  	[
  		120243,
  		1,
  		"t"
  	],
  	[
  		120244,
  		1,
  		"u"
  	],
  	[
  		120245,
  		1,
  		"v"
  	],
  	[
  		120246,
  		1,
  		"w"
  	],
  	[
  		120247,
  		1,
  		"x"
  	],
  	[
  		120248,
  		1,
  		"y"
  	],
  	[
  		120249,
  		1,
  		"z"
  	],
  	[
  		120250,
  		1,
  		"a"
  	],
  	[
  		120251,
  		1,
  		"b"
  	],
  	[
  		120252,
  		1,
  		"c"
  	],
  	[
  		120253,
  		1,
  		"d"
  	],
  	[
  		120254,
  		1,
  		"e"
  	],
  	[
  		120255,
  		1,
  		"f"
  	],
  	[
  		120256,
  		1,
  		"g"
  	],
  	[
  		120257,
  		1,
  		"h"
  	],
  	[
  		120258,
  		1,
  		"i"
  	],
  	[
  		120259,
  		1,
  		"j"
  	],
  	[
  		120260,
  		1,
  		"k"
  	],
  	[
  		120261,
  		1,
  		"l"
  	],
  	[
  		120262,
  		1,
  		"m"
  	],
  	[
  		120263,
  		1,
  		"n"
  	],
  	[
  		120264,
  		1,
  		"o"
  	],
  	[
  		120265,
  		1,
  		"p"
  	],
  	[
  		120266,
  		1,
  		"q"
  	],
  	[
  		120267,
  		1,
  		"r"
  	],
  	[
  		120268,
  		1,
  		"s"
  	],
  	[
  		120269,
  		1,
  		"t"
  	],
  	[
  		120270,
  		1,
  		"u"
  	],
  	[
  		120271,
  		1,
  		"v"
  	],
  	[
  		120272,
  		1,
  		"w"
  	],
  	[
  		120273,
  		1,
  		"x"
  	],
  	[
  		120274,
  		1,
  		"y"
  	],
  	[
  		120275,
  		1,
  		"z"
  	],
  	[
  		120276,
  		1,
  		"a"
  	],
  	[
  		120277,
  		1,
  		"b"
  	],
  	[
  		120278,
  		1,
  		"c"
  	],
  	[
  		120279,
  		1,
  		"d"
  	],
  	[
  		120280,
  		1,
  		"e"
  	],
  	[
  		120281,
  		1,
  		"f"
  	],
  	[
  		120282,
  		1,
  		"g"
  	],
  	[
  		120283,
  		1,
  		"h"
  	],
  	[
  		120284,
  		1,
  		"i"
  	],
  	[
  		120285,
  		1,
  		"j"
  	],
  	[
  		120286,
  		1,
  		"k"
  	],
  	[
  		120287,
  		1,
  		"l"
  	],
  	[
  		120288,
  		1,
  		"m"
  	],
  	[
  		120289,
  		1,
  		"n"
  	],
  	[
  		120290,
  		1,
  		"o"
  	],
  	[
  		120291,
  		1,
  		"p"
  	],
  	[
  		120292,
  		1,
  		"q"
  	],
  	[
  		120293,
  		1,
  		"r"
  	],
  	[
  		120294,
  		1,
  		"s"
  	],
  	[
  		120295,
  		1,
  		"t"
  	],
  	[
  		120296,
  		1,
  		"u"
  	],
  	[
  		120297,
  		1,
  		"v"
  	],
  	[
  		120298,
  		1,
  		"w"
  	],
  	[
  		120299,
  		1,
  		"x"
  	],
  	[
  		120300,
  		1,
  		"y"
  	],
  	[
  		120301,
  		1,
  		"z"
  	],
  	[
  		120302,
  		1,
  		"a"
  	],
  	[
  		120303,
  		1,
  		"b"
  	],
  	[
  		120304,
  		1,
  		"c"
  	],
  	[
  		120305,
  		1,
  		"d"
  	],
  	[
  		120306,
  		1,
  		"e"
  	],
  	[
  		120307,
  		1,
  		"f"
  	],
  	[
  		120308,
  		1,
  		"g"
  	],
  	[
  		120309,
  		1,
  		"h"
  	],
  	[
  		120310,
  		1,
  		"i"
  	],
  	[
  		120311,
  		1,
  		"j"
  	],
  	[
  		120312,
  		1,
  		"k"
  	],
  	[
  		120313,
  		1,
  		"l"
  	],
  	[
  		120314,
  		1,
  		"m"
  	],
  	[
  		120315,
  		1,
  		"n"
  	],
  	[
  		120316,
  		1,
  		"o"
  	],
  	[
  		120317,
  		1,
  		"p"
  	],
  	[
  		120318,
  		1,
  		"q"
  	],
  	[
  		120319,
  		1,
  		"r"
  	],
  	[
  		120320,
  		1,
  		"s"
  	],
  	[
  		120321,
  		1,
  		"t"
  	],
  	[
  		120322,
  		1,
  		"u"
  	],
  	[
  		120323,
  		1,
  		"v"
  	],
  	[
  		120324,
  		1,
  		"w"
  	],
  	[
  		120325,
  		1,
  		"x"
  	],
  	[
  		120326,
  		1,
  		"y"
  	],
  	[
  		120327,
  		1,
  		"z"
  	],
  	[
  		120328,
  		1,
  		"a"
  	],
  	[
  		120329,
  		1,
  		"b"
  	],
  	[
  		120330,
  		1,
  		"c"
  	],
  	[
  		120331,
  		1,
  		"d"
  	],
  	[
  		120332,
  		1,
  		"e"
  	],
  	[
  		120333,
  		1,
  		"f"
  	],
  	[
  		120334,
  		1,
  		"g"
  	],
  	[
  		120335,
  		1,
  		"h"
  	],
  	[
  		120336,
  		1,
  		"i"
  	],
  	[
  		120337,
  		1,
  		"j"
  	],
  	[
  		120338,
  		1,
  		"k"
  	],
  	[
  		120339,
  		1,
  		"l"
  	],
  	[
  		120340,
  		1,
  		"m"
  	],
  	[
  		120341,
  		1,
  		"n"
  	],
  	[
  		120342,
  		1,
  		"o"
  	],
  	[
  		120343,
  		1,
  		"p"
  	],
  	[
  		120344,
  		1,
  		"q"
  	],
  	[
  		120345,
  		1,
  		"r"
  	],
  	[
  		120346,
  		1,
  		"s"
  	],
  	[
  		120347,
  		1,
  		"t"
  	],
  	[
  		120348,
  		1,
  		"u"
  	],
  	[
  		120349,
  		1,
  		"v"
  	],
  	[
  		120350,
  		1,
  		"w"
  	],
  	[
  		120351,
  		1,
  		"x"
  	],
  	[
  		120352,
  		1,
  		"y"
  	],
  	[
  		120353,
  		1,
  		"z"
  	],
  	[
  		120354,
  		1,
  		"a"
  	],
  	[
  		120355,
  		1,
  		"b"
  	],
  	[
  		120356,
  		1,
  		"c"
  	],
  	[
  		120357,
  		1,
  		"d"
  	],
  	[
  		120358,
  		1,
  		"e"
  	],
  	[
  		120359,
  		1,
  		"f"
  	],
  	[
  		120360,
  		1,
  		"g"
  	],
  	[
  		120361,
  		1,
  		"h"
  	],
  	[
  		120362,
  		1,
  		"i"
  	],
  	[
  		120363,
  		1,
  		"j"
  	],
  	[
  		120364,
  		1,
  		"k"
  	],
  	[
  		120365,
  		1,
  		"l"
  	],
  	[
  		120366,
  		1,
  		"m"
  	],
  	[
  		120367,
  		1,
  		"n"
  	],
  	[
  		120368,
  		1,
  		"o"
  	],
  	[
  		120369,
  		1,
  		"p"
  	],
  	[
  		120370,
  		1,
  		"q"
  	],
  	[
  		120371,
  		1,
  		"r"
  	],
  	[
  		120372,
  		1,
  		"s"
  	],
  	[
  		120373,
  		1,
  		"t"
  	],
  	[
  		120374,
  		1,
  		"u"
  	],
  	[
  		120375,
  		1,
  		"v"
  	],
  	[
  		120376,
  		1,
  		"w"
  	],
  	[
  		120377,
  		1,
  		"x"
  	],
  	[
  		120378,
  		1,
  		"y"
  	],
  	[
  		120379,
  		1,
  		"z"
  	],
  	[
  		120380,
  		1,
  		"a"
  	],
  	[
  		120381,
  		1,
  		"b"
  	],
  	[
  		120382,
  		1,
  		"c"
  	],
  	[
  		120383,
  		1,
  		"d"
  	],
  	[
  		120384,
  		1,
  		"e"
  	],
  	[
  		120385,
  		1,
  		"f"
  	],
  	[
  		120386,
  		1,
  		"g"
  	],
  	[
  		120387,
  		1,
  		"h"
  	],
  	[
  		120388,
  		1,
  		"i"
  	],
  	[
  		120389,
  		1,
  		"j"
  	],
  	[
  		120390,
  		1,
  		"k"
  	],
  	[
  		120391,
  		1,
  		"l"
  	],
  	[
  		120392,
  		1,
  		"m"
  	],
  	[
  		120393,
  		1,
  		"n"
  	],
  	[
  		120394,
  		1,
  		"o"
  	],
  	[
  		120395,
  		1,
  		"p"
  	],
  	[
  		120396,
  		1,
  		"q"
  	],
  	[
  		120397,
  		1,
  		"r"
  	],
  	[
  		120398,
  		1,
  		"s"
  	],
  	[
  		120399,
  		1,
  		"t"
  	],
  	[
  		120400,
  		1,
  		"u"
  	],
  	[
  		120401,
  		1,
  		"v"
  	],
  	[
  		120402,
  		1,
  		"w"
  	],
  	[
  		120403,
  		1,
  		"x"
  	],
  	[
  		120404,
  		1,
  		"y"
  	],
  	[
  		120405,
  		1,
  		"z"
  	],
  	[
  		120406,
  		1,
  		"a"
  	],
  	[
  		120407,
  		1,
  		"b"
  	],
  	[
  		120408,
  		1,
  		"c"
  	],
  	[
  		120409,
  		1,
  		"d"
  	],
  	[
  		120410,
  		1,
  		"e"
  	],
  	[
  		120411,
  		1,
  		"f"
  	],
  	[
  		120412,
  		1,
  		"g"
  	],
  	[
  		120413,
  		1,
  		"h"
  	],
  	[
  		120414,
  		1,
  		"i"
  	],
  	[
  		120415,
  		1,
  		"j"
  	],
  	[
  		120416,
  		1,
  		"k"
  	],
  	[
  		120417,
  		1,
  		"l"
  	],
  	[
  		120418,
  		1,
  		"m"
  	],
  	[
  		120419,
  		1,
  		"n"
  	],
  	[
  		120420,
  		1,
  		"o"
  	],
  	[
  		120421,
  		1,
  		"p"
  	],
  	[
  		120422,
  		1,
  		"q"
  	],
  	[
  		120423,
  		1,
  		"r"
  	],
  	[
  		120424,
  		1,
  		"s"
  	],
  	[
  		120425,
  		1,
  		"t"
  	],
  	[
  		120426,
  		1,
  		"u"
  	],
  	[
  		120427,
  		1,
  		"v"
  	],
  	[
  		120428,
  		1,
  		"w"
  	],
  	[
  		120429,
  		1,
  		"x"
  	],
  	[
  		120430,
  		1,
  		"y"
  	],
  	[
  		120431,
  		1,
  		"z"
  	],
  	[
  		120432,
  		1,
  		"a"
  	],
  	[
  		120433,
  		1,
  		"b"
  	],
  	[
  		120434,
  		1,
  		"c"
  	],
  	[
  		120435,
  		1,
  		"d"
  	],
  	[
  		120436,
  		1,
  		"e"
  	],
  	[
  		120437,
  		1,
  		"f"
  	],
  	[
  		120438,
  		1,
  		"g"
  	],
  	[
  		120439,
  		1,
  		"h"
  	],
  	[
  		120440,
  		1,
  		"i"
  	],
  	[
  		120441,
  		1,
  		"j"
  	],
  	[
  		120442,
  		1,
  		"k"
  	],
  	[
  		120443,
  		1,
  		"l"
  	],
  	[
  		120444,
  		1,
  		"m"
  	],
  	[
  		120445,
  		1,
  		"n"
  	],
  	[
  		120446,
  		1,
  		"o"
  	],
  	[
  		120447,
  		1,
  		"p"
  	],
  	[
  		120448,
  		1,
  		"q"
  	],
  	[
  		120449,
  		1,
  		"r"
  	],
  	[
  		120450,
  		1,
  		"s"
  	],
  	[
  		120451,
  		1,
  		"t"
  	],
  	[
  		120452,
  		1,
  		"u"
  	],
  	[
  		120453,
  		1,
  		"v"
  	],
  	[
  		120454,
  		1,
  		"w"
  	],
  	[
  		120455,
  		1,
  		"x"
  	],
  	[
  		120456,
  		1,
  		"y"
  	],
  	[
  		120457,
  		1,
  		"z"
  	],
  	[
  		120458,
  		1,
  		"a"
  	],
  	[
  		120459,
  		1,
  		"b"
  	],
  	[
  		120460,
  		1,
  		"c"
  	],
  	[
  		120461,
  		1,
  		"d"
  	],
  	[
  		120462,
  		1,
  		"e"
  	],
  	[
  		120463,
  		1,
  		"f"
  	],
  	[
  		120464,
  		1,
  		"g"
  	],
  	[
  		120465,
  		1,
  		"h"
  	],
  	[
  		120466,
  		1,
  		"i"
  	],
  	[
  		120467,
  		1,
  		"j"
  	],
  	[
  		120468,
  		1,
  		"k"
  	],
  	[
  		120469,
  		1,
  		"l"
  	],
  	[
  		120470,
  		1,
  		"m"
  	],
  	[
  		120471,
  		1,
  		"n"
  	],
  	[
  		120472,
  		1,
  		"o"
  	],
  	[
  		120473,
  		1,
  		"p"
  	],
  	[
  		120474,
  		1,
  		"q"
  	],
  	[
  		120475,
  		1,
  		"r"
  	],
  	[
  		120476,
  		1,
  		"s"
  	],
  	[
  		120477,
  		1,
  		"t"
  	],
  	[
  		120478,
  		1,
  		"u"
  	],
  	[
  		120479,
  		1,
  		"v"
  	],
  	[
  		120480,
  		1,
  		"w"
  	],
  	[
  		120481,
  		1,
  		"x"
  	],
  	[
  		120482,
  		1,
  		"y"
  	],
  	[
  		120483,
  		1,
  		"z"
  	],
  	[
  		120484,
  		1,
  		"ı"
  	],
  	[
  		120485,
  		1,
  		"ȷ"
  	],
  	[
  		[
  			120486,
  			120487
  		],
  		3
  	],
  	[
  		120488,
  		1,
  		"α"
  	],
  	[
  		120489,
  		1,
  		"β"
  	],
  	[
  		120490,
  		1,
  		"γ"
  	],
  	[
  		120491,
  		1,
  		"δ"
  	],
  	[
  		120492,
  		1,
  		"ε"
  	],
  	[
  		120493,
  		1,
  		"ζ"
  	],
  	[
  		120494,
  		1,
  		"η"
  	],
  	[
  		120495,
  		1,
  		"θ"
  	],
  	[
  		120496,
  		1,
  		"ι"
  	],
  	[
  		120497,
  		1,
  		"κ"
  	],
  	[
  		120498,
  		1,
  		"λ"
  	],
  	[
  		120499,
  		1,
  		"μ"
  	],
  	[
  		120500,
  		1,
  		"ν"
  	],
  	[
  		120501,
  		1,
  		"ξ"
  	],
  	[
  		120502,
  		1,
  		"ο"
  	],
  	[
  		120503,
  		1,
  		"π"
  	],
  	[
  		120504,
  		1,
  		"ρ"
  	],
  	[
  		120505,
  		1,
  		"θ"
  	],
  	[
  		120506,
  		1,
  		"σ"
  	],
  	[
  		120507,
  		1,
  		"τ"
  	],
  	[
  		120508,
  		1,
  		"υ"
  	],
  	[
  		120509,
  		1,
  		"φ"
  	],
  	[
  		120510,
  		1,
  		"χ"
  	],
  	[
  		120511,
  		1,
  		"ψ"
  	],
  	[
  		120512,
  		1,
  		"ω"
  	],
  	[
  		120513,
  		1,
  		"∇"
  	],
  	[
  		120514,
  		1,
  		"α"
  	],
  	[
  		120515,
  		1,
  		"β"
  	],
  	[
  		120516,
  		1,
  		"γ"
  	],
  	[
  		120517,
  		1,
  		"δ"
  	],
  	[
  		120518,
  		1,
  		"ε"
  	],
  	[
  		120519,
  		1,
  		"ζ"
  	],
  	[
  		120520,
  		1,
  		"η"
  	],
  	[
  		120521,
  		1,
  		"θ"
  	],
  	[
  		120522,
  		1,
  		"ι"
  	],
  	[
  		120523,
  		1,
  		"κ"
  	],
  	[
  		120524,
  		1,
  		"λ"
  	],
  	[
  		120525,
  		1,
  		"μ"
  	],
  	[
  		120526,
  		1,
  		"ν"
  	],
  	[
  		120527,
  		1,
  		"ξ"
  	],
  	[
  		120528,
  		1,
  		"ο"
  	],
  	[
  		120529,
  		1,
  		"π"
  	],
  	[
  		120530,
  		1,
  		"ρ"
  	],
  	[
  		[
  			120531,
  			120532
  		],
  		1,
  		"σ"
  	],
  	[
  		120533,
  		1,
  		"τ"
  	],
  	[
  		120534,
  		1,
  		"υ"
  	],
  	[
  		120535,
  		1,
  		"φ"
  	],
  	[
  		120536,
  		1,
  		"χ"
  	],
  	[
  		120537,
  		1,
  		"ψ"
  	],
  	[
  		120538,
  		1,
  		"ω"
  	],
  	[
  		120539,
  		1,
  		"∂"
  	],
  	[
  		120540,
  		1,
  		"ε"
  	],
  	[
  		120541,
  		1,
  		"θ"
  	],
  	[
  		120542,
  		1,
  		"κ"
  	],
  	[
  		120543,
  		1,
  		"φ"
  	],
  	[
  		120544,
  		1,
  		"ρ"
  	],
  	[
  		120545,
  		1,
  		"π"
  	],
  	[
  		120546,
  		1,
  		"α"
  	],
  	[
  		120547,
  		1,
  		"β"
  	],
  	[
  		120548,
  		1,
  		"γ"
  	],
  	[
  		120549,
  		1,
  		"δ"
  	],
  	[
  		120550,
  		1,
  		"ε"
  	],
  	[
  		120551,
  		1,
  		"ζ"
  	],
  	[
  		120552,
  		1,
  		"η"
  	],
  	[
  		120553,
  		1,
  		"θ"
  	],
  	[
  		120554,
  		1,
  		"ι"
  	],
  	[
  		120555,
  		1,
  		"κ"
  	],
  	[
  		120556,
  		1,
  		"λ"
  	],
  	[
  		120557,
  		1,
  		"μ"
  	],
  	[
  		120558,
  		1,
  		"ν"
  	],
  	[
  		120559,
  		1,
  		"ξ"
  	],
  	[
  		120560,
  		1,
  		"ο"
  	],
  	[
  		120561,
  		1,
  		"π"
  	],
  	[
  		120562,
  		1,
  		"ρ"
  	],
  	[
  		120563,
  		1,
  		"θ"
  	],
  	[
  		120564,
  		1,
  		"σ"
  	],
  	[
  		120565,
  		1,
  		"τ"
  	],
  	[
  		120566,
  		1,
  		"υ"
  	],
  	[
  		120567,
  		1,
  		"φ"
  	],
  	[
  		120568,
  		1,
  		"χ"
  	],
  	[
  		120569,
  		1,
  		"ψ"
  	],
  	[
  		120570,
  		1,
  		"ω"
  	],
  	[
  		120571,
  		1,
  		"∇"
  	],
  	[
  		120572,
  		1,
  		"α"
  	],
  	[
  		120573,
  		1,
  		"β"
  	],
  	[
  		120574,
  		1,
  		"γ"
  	],
  	[
  		120575,
  		1,
  		"δ"
  	],
  	[
  		120576,
  		1,
  		"ε"
  	],
  	[
  		120577,
  		1,
  		"ζ"
  	],
  	[
  		120578,
  		1,
  		"η"
  	],
  	[
  		120579,
  		1,
  		"θ"
  	],
  	[
  		120580,
  		1,
  		"ι"
  	],
  	[
  		120581,
  		1,
  		"κ"
  	],
  	[
  		120582,
  		1,
  		"λ"
  	],
  	[
  		120583,
  		1,
  		"μ"
  	],
  	[
  		120584,
  		1,
  		"ν"
  	],
  	[
  		120585,
  		1,
  		"ξ"
  	],
  	[
  		120586,
  		1,
  		"ο"
  	],
  	[
  		120587,
  		1,
  		"π"
  	],
  	[
  		120588,
  		1,
  		"ρ"
  	],
  	[
  		[
  			120589,
  			120590
  		],
  		1,
  		"σ"
  	],
  	[
  		120591,
  		1,
  		"τ"
  	],
  	[
  		120592,
  		1,
  		"υ"
  	],
  	[
  		120593,
  		1,
  		"φ"
  	],
  	[
  		120594,
  		1,
  		"χ"
  	],
  	[
  		120595,
  		1,
  		"ψ"
  	],
  	[
  		120596,
  		1,
  		"ω"
  	],
  	[
  		120597,
  		1,
  		"∂"
  	],
  	[
  		120598,
  		1,
  		"ε"
  	],
  	[
  		120599,
  		1,
  		"θ"
  	],
  	[
  		120600,
  		1,
  		"κ"
  	],
  	[
  		120601,
  		1,
  		"φ"
  	],
  	[
  		120602,
  		1,
  		"ρ"
  	],
  	[
  		120603,
  		1,
  		"π"
  	],
  	[
  		120604,
  		1,
  		"α"
  	],
  	[
  		120605,
  		1,
  		"β"
  	],
  	[
  		120606,
  		1,
  		"γ"
  	],
  	[
  		120607,
  		1,
  		"δ"
  	],
  	[
  		120608,
  		1,
  		"ε"
  	],
  	[
  		120609,
  		1,
  		"ζ"
  	],
  	[
  		120610,
  		1,
  		"η"
  	],
  	[
  		120611,
  		1,
  		"θ"
  	],
  	[
  		120612,
  		1,
  		"ι"
  	],
  	[
  		120613,
  		1,
  		"κ"
  	],
  	[
  		120614,
  		1,
  		"λ"
  	],
  	[
  		120615,
  		1,
  		"μ"
  	],
  	[
  		120616,
  		1,
  		"ν"
  	],
  	[
  		120617,
  		1,
  		"ξ"
  	],
  	[
  		120618,
  		1,
  		"ο"
  	],
  	[
  		120619,
  		1,
  		"π"
  	],
  	[
  		120620,
  		1,
  		"ρ"
  	],
  	[
  		120621,
  		1,
  		"θ"
  	],
  	[
  		120622,
  		1,
  		"σ"
  	],
  	[
  		120623,
  		1,
  		"τ"
  	],
  	[
  		120624,
  		1,
  		"υ"
  	],
  	[
  		120625,
  		1,
  		"φ"
  	],
  	[
  		120626,
  		1,
  		"χ"
  	],
  	[
  		120627,
  		1,
  		"ψ"
  	],
  	[
  		120628,
  		1,
  		"ω"
  	],
  	[
  		120629,
  		1,
  		"∇"
  	],
  	[
  		120630,
  		1,
  		"α"
  	],
  	[
  		120631,
  		1,
  		"β"
  	],
  	[
  		120632,
  		1,
  		"γ"
  	],
  	[
  		120633,
  		1,
  		"δ"
  	],
  	[
  		120634,
  		1,
  		"ε"
  	],
  	[
  		120635,
  		1,
  		"ζ"
  	],
  	[
  		120636,
  		1,
  		"η"
  	],
  	[
  		120637,
  		1,
  		"θ"
  	],
  	[
  		120638,
  		1,
  		"ι"
  	],
  	[
  		120639,
  		1,
  		"κ"
  	],
  	[
  		120640,
  		1,
  		"λ"
  	],
  	[
  		120641,
  		1,
  		"μ"
  	],
  	[
  		120642,
  		1,
  		"ν"
  	],
  	[
  		120643,
  		1,
  		"ξ"
  	],
  	[
  		120644,
  		1,
  		"ο"
  	],
  	[
  		120645,
  		1,
  		"π"
  	],
  	[
  		120646,
  		1,
  		"ρ"
  	],
  	[
  		[
  			120647,
  			120648
  		],
  		1,
  		"σ"
  	],
  	[
  		120649,
  		1,
  		"τ"
  	],
  	[
  		120650,
  		1,
  		"υ"
  	],
  	[
  		120651,
  		1,
  		"φ"
  	],
  	[
  		120652,
  		1,
  		"χ"
  	],
  	[
  		120653,
  		1,
  		"ψ"
  	],
  	[
  		120654,
  		1,
  		"ω"
  	],
  	[
  		120655,
  		1,
  		"∂"
  	],
  	[
  		120656,
  		1,
  		"ε"
  	],
  	[
  		120657,
  		1,
  		"θ"
  	],
  	[
  		120658,
  		1,
  		"κ"
  	],
  	[
  		120659,
  		1,
  		"φ"
  	],
  	[
  		120660,
  		1,
  		"ρ"
  	],
  	[
  		120661,
  		1,
  		"π"
  	],
  	[
  		120662,
  		1,
  		"α"
  	],
  	[
  		120663,
  		1,
  		"β"
  	],
  	[
  		120664,
  		1,
  		"γ"
  	],
  	[
  		120665,
  		1,
  		"δ"
  	],
  	[
  		120666,
  		1,
  		"ε"
  	],
  	[
  		120667,
  		1,
  		"ζ"
  	],
  	[
  		120668,
  		1,
  		"η"
  	],
  	[
  		120669,
  		1,
  		"θ"
  	],
  	[
  		120670,
  		1,
  		"ι"
  	],
  	[
  		120671,
  		1,
  		"κ"
  	],
  	[
  		120672,
  		1,
  		"λ"
  	],
  	[
  		120673,
  		1,
  		"μ"
  	],
  	[
  		120674,
  		1,
  		"ν"
  	],
  	[
  		120675,
  		1,
  		"ξ"
  	],
  	[
  		120676,
  		1,
  		"ο"
  	],
  	[
  		120677,
  		1,
  		"π"
  	],
  	[
  		120678,
  		1,
  		"ρ"
  	],
  	[
  		120679,
  		1,
  		"θ"
  	],
  	[
  		120680,
  		1,
  		"σ"
  	],
  	[
  		120681,
  		1,
  		"τ"
  	],
  	[
  		120682,
  		1,
  		"υ"
  	],
  	[
  		120683,
  		1,
  		"φ"
  	],
  	[
  		120684,
  		1,
  		"χ"
  	],
  	[
  		120685,
  		1,
  		"ψ"
  	],
  	[
  		120686,
  		1,
  		"ω"
  	],
  	[
  		120687,
  		1,
  		"∇"
  	],
  	[
  		120688,
  		1,
  		"α"
  	],
  	[
  		120689,
  		1,
  		"β"
  	],
  	[
  		120690,
  		1,
  		"γ"
  	],
  	[
  		120691,
  		1,
  		"δ"
  	],
  	[
  		120692,
  		1,
  		"ε"
  	],
  	[
  		120693,
  		1,
  		"ζ"
  	],
  	[
  		120694,
  		1,
  		"η"
  	],
  	[
  		120695,
  		1,
  		"θ"
  	],
  	[
  		120696,
  		1,
  		"ι"
  	],
  	[
  		120697,
  		1,
  		"κ"
  	],
  	[
  		120698,
  		1,
  		"λ"
  	],
  	[
  		120699,
  		1,
  		"μ"
  	],
  	[
  		120700,
  		1,
  		"ν"
  	],
  	[
  		120701,
  		1,
  		"ξ"
  	],
  	[
  		120702,
  		1,
  		"ο"
  	],
  	[
  		120703,
  		1,
  		"π"
  	],
  	[
  		120704,
  		1,
  		"ρ"
  	],
  	[
  		[
  			120705,
  			120706
  		],
  		1,
  		"σ"
  	],
  	[
  		120707,
  		1,
  		"τ"
  	],
  	[
  		120708,
  		1,
  		"υ"
  	],
  	[
  		120709,
  		1,
  		"φ"
  	],
  	[
  		120710,
  		1,
  		"χ"
  	],
  	[
  		120711,
  		1,
  		"ψ"
  	],
  	[
  		120712,
  		1,
  		"ω"
  	],
  	[
  		120713,
  		1,
  		"∂"
  	],
  	[
  		120714,
  		1,
  		"ε"
  	],
  	[
  		120715,
  		1,
  		"θ"
  	],
  	[
  		120716,
  		1,
  		"κ"
  	],
  	[
  		120717,
  		1,
  		"φ"
  	],
  	[
  		120718,
  		1,
  		"ρ"
  	],
  	[
  		120719,
  		1,
  		"π"
  	],
  	[
  		120720,
  		1,
  		"α"
  	],
  	[
  		120721,
  		1,
  		"β"
  	],
  	[
  		120722,
  		1,
  		"γ"
  	],
  	[
  		120723,
  		1,
  		"δ"
  	],
  	[
  		120724,
  		1,
  		"ε"
  	],
  	[
  		120725,
  		1,
  		"ζ"
  	],
  	[
  		120726,
  		1,
  		"η"
  	],
  	[
  		120727,
  		1,
  		"θ"
  	],
  	[
  		120728,
  		1,
  		"ι"
  	],
  	[
  		120729,
  		1,
  		"κ"
  	],
  	[
  		120730,
  		1,
  		"λ"
  	],
  	[
  		120731,
  		1,
  		"μ"
  	],
  	[
  		120732,
  		1,
  		"ν"
  	],
  	[
  		120733,
  		1,
  		"ξ"
  	],
  	[
  		120734,
  		1,
  		"ο"
  	],
  	[
  		120735,
  		1,
  		"π"
  	],
  	[
  		120736,
  		1,
  		"ρ"
  	],
  	[
  		120737,
  		1,
  		"θ"
  	],
  	[
  		120738,
  		1,
  		"σ"
  	],
  	[
  		120739,
  		1,
  		"τ"
  	],
  	[
  		120740,
  		1,
  		"υ"
  	],
  	[
  		120741,
  		1,
  		"φ"
  	],
  	[
  		120742,
  		1,
  		"χ"
  	],
  	[
  		120743,
  		1,
  		"ψ"
  	],
  	[
  		120744,
  		1,
  		"ω"
  	],
  	[
  		120745,
  		1,
  		"∇"
  	],
  	[
  		120746,
  		1,
  		"α"
  	],
  	[
  		120747,
  		1,
  		"β"
  	],
  	[
  		120748,
  		1,
  		"γ"
  	],
  	[
  		120749,
  		1,
  		"δ"
  	],
  	[
  		120750,
  		1,
  		"ε"
  	],
  	[
  		120751,
  		1,
  		"ζ"
  	],
  	[
  		120752,
  		1,
  		"η"
  	],
  	[
  		120753,
  		1,
  		"θ"
  	],
  	[
  		120754,
  		1,
  		"ι"
  	],
  	[
  		120755,
  		1,
  		"κ"
  	],
  	[
  		120756,
  		1,
  		"λ"
  	],
  	[
  		120757,
  		1,
  		"μ"
  	],
  	[
  		120758,
  		1,
  		"ν"
  	],
  	[
  		120759,
  		1,
  		"ξ"
  	],
  	[
  		120760,
  		1,
  		"ο"
  	],
  	[
  		120761,
  		1,
  		"π"
  	],
  	[
  		120762,
  		1,
  		"ρ"
  	],
  	[
  		[
  			120763,
  			120764
  		],
  		1,
  		"σ"
  	],
  	[
  		120765,
  		1,
  		"τ"
  	],
  	[
  		120766,
  		1,
  		"υ"
  	],
  	[
  		120767,
  		1,
  		"φ"
  	],
  	[
  		120768,
  		1,
  		"χ"
  	],
  	[
  		120769,
  		1,
  		"ψ"
  	],
  	[
  		120770,
  		1,
  		"ω"
  	],
  	[
  		120771,
  		1,
  		"∂"
  	],
  	[
  		120772,
  		1,
  		"ε"
  	],
  	[
  		120773,
  		1,
  		"θ"
  	],
  	[
  		120774,
  		1,
  		"κ"
  	],
  	[
  		120775,
  		1,
  		"φ"
  	],
  	[
  		120776,
  		1,
  		"ρ"
  	],
  	[
  		120777,
  		1,
  		"π"
  	],
  	[
  		[
  			120778,
  			120779
  		],
  		1,
  		"ϝ"
  	],
  	[
  		[
  			120780,
  			120781
  		],
  		3
  	],
  	[
  		120782,
  		1,
  		"0"
  	],
  	[
  		120783,
  		1,
  		"1"
  	],
  	[
  		120784,
  		1,
  		"2"
  	],
  	[
  		120785,
  		1,
  		"3"
  	],
  	[
  		120786,
  		1,
  		"4"
  	],
  	[
  		120787,
  		1,
  		"5"
  	],
  	[
  		120788,
  		1,
  		"6"
  	],
  	[
  		120789,
  		1,
  		"7"
  	],
  	[
  		120790,
  		1,
  		"8"
  	],
  	[
  		120791,
  		1,
  		"9"
  	],
  	[
  		120792,
  		1,
  		"0"
  	],
  	[
  		120793,
  		1,
  		"1"
  	],
  	[
  		120794,
  		1,
  		"2"
  	],
  	[
  		120795,
  		1,
  		"3"
  	],
  	[
  		120796,
  		1,
  		"4"
  	],
  	[
  		120797,
  		1,
  		"5"
  	],
  	[
  		120798,
  		1,
  		"6"
  	],
  	[
  		120799,
  		1,
  		"7"
  	],
  	[
  		120800,
  		1,
  		"8"
  	],
  	[
  		120801,
  		1,
  		"9"
  	],
  	[
  		120802,
  		1,
  		"0"
  	],
  	[
  		120803,
  		1,
  		"1"
  	],
  	[
  		120804,
  		1,
  		"2"
  	],
  	[
  		120805,
  		1,
  		"3"
  	],
  	[
  		120806,
  		1,
  		"4"
  	],
  	[
  		120807,
  		1,
  		"5"
  	],
  	[
  		120808,
  		1,
  		"6"
  	],
  	[
  		120809,
  		1,
  		"7"
  	],
  	[
  		120810,
  		1,
  		"8"
  	],
  	[
  		120811,
  		1,
  		"9"
  	],
  	[
  		120812,
  		1,
  		"0"
  	],
  	[
  		120813,
  		1,
  		"1"
  	],
  	[
  		120814,
  		1,
  		"2"
  	],
  	[
  		120815,
  		1,
  		"3"
  	],
  	[
  		120816,
  		1,
  		"4"
  	],
  	[
  		120817,
  		1,
  		"5"
  	],
  	[
  		120818,
  		1,
  		"6"
  	],
  	[
  		120819,
  		1,
  		"7"
  	],
  	[
  		120820,
  		1,
  		"8"
  	],
  	[
  		120821,
  		1,
  		"9"
  	],
  	[
  		120822,
  		1,
  		"0"
  	],
  	[
  		120823,
  		1,
  		"1"
  	],
  	[
  		120824,
  		1,
  		"2"
  	],
  	[
  		120825,
  		1,
  		"3"
  	],
  	[
  		120826,
  		1,
  		"4"
  	],
  	[
  		120827,
  		1,
  		"5"
  	],
  	[
  		120828,
  		1,
  		"6"
  	],
  	[
  		120829,
  		1,
  		"7"
  	],
  	[
  		120830,
  		1,
  		"8"
  	],
  	[
  		120831,
  		1,
  		"9"
  	],
  	[
  		[
  			120832,
  			121343
  		],
  		2
  	],
  	[
  		[
  			121344,
  			121398
  		],
  		2
  	],
  	[
  		[
  			121399,
  			121402
  		],
  		2
  	],
  	[
  		[
  			121403,
  			121452
  		],
  		2
  	],
  	[
  		[
  			121453,
  			121460
  		],
  		2
  	],
  	[
  		121461,
  		2
  	],
  	[
  		[
  			121462,
  			121475
  		],
  		2
  	],
  	[
  		121476,
  		2
  	],
  	[
  		[
  			121477,
  			121483
  		],
  		2
  	],
  	[
  		[
  			121484,
  			121498
  		],
  		3
  	],
  	[
  		[
  			121499,
  			121503
  		],
  		2
  	],
  	[
  		121504,
  		3
  	],
  	[
  		[
  			121505,
  			121519
  		],
  		2
  	],
  	[
  		[
  			121520,
  			122879
  		],
  		3
  	],
  	[
  		[
  			122880,
  			122886
  		],
  		2
  	],
  	[
  		122887,
  		3
  	],
  	[
  		[
  			122888,
  			122904
  		],
  		2
  	],
  	[
  		[
  			122905,
  			122906
  		],
  		3
  	],
  	[
  		[
  			122907,
  			122913
  		],
  		2
  	],
  	[
  		122914,
  		3
  	],
  	[
  		[
  			122915,
  			122916
  		],
  		2
  	],
  	[
  		122917,
  		3
  	],
  	[
  		[
  			122918,
  			122922
  		],
  		2
  	],
  	[
  		[
  			122923,
  			123135
  		],
  		3
  	],
  	[
  		[
  			123136,
  			123180
  		],
  		2
  	],
  	[
  		[
  			123181,
  			123183
  		],
  		3
  	],
  	[
  		[
  			123184,
  			123197
  		],
  		2
  	],
  	[
  		[
  			123198,
  			123199
  		],
  		3
  	],
  	[
  		[
  			123200,
  			123209
  		],
  		2
  	],
  	[
  		[
  			123210,
  			123213
  		],
  		3
  	],
  	[
  		123214,
  		2
  	],
  	[
  		123215,
  		2
  	],
  	[
  		[
  			123216,
  			123583
  		],
  		3
  	],
  	[
  		[
  			123584,
  			123641
  		],
  		2
  	],
  	[
  		[
  			123642,
  			123646
  		],
  		3
  	],
  	[
  		123647,
  		2
  	],
  	[
  		[
  			123648,
  			124927
  		],
  		3
  	],
  	[
  		[
  			124928,
  			125124
  		],
  		2
  	],
  	[
  		[
  			125125,
  			125126
  		],
  		3
  	],
  	[
  		[
  			125127,
  			125135
  		],
  		2
  	],
  	[
  		[
  			125136,
  			125142
  		],
  		2
  	],
  	[
  		[
  			125143,
  			125183
  		],
  		3
  	],
  	[
  		125184,
  		1,
  		"𞤢"
  	],
  	[
  		125185,
  		1,
  		"𞤣"
  	],
  	[
  		125186,
  		1,
  		"𞤤"
  	],
  	[
  		125187,
  		1,
  		"𞤥"
  	],
  	[
  		125188,
  		1,
  		"𞤦"
  	],
  	[
  		125189,
  		1,
  		"𞤧"
  	],
  	[
  		125190,
  		1,
  		"𞤨"
  	],
  	[
  		125191,
  		1,
  		"𞤩"
  	],
  	[
  		125192,
  		1,
  		"𞤪"
  	],
  	[
  		125193,
  		1,
  		"𞤫"
  	],
  	[
  		125194,
  		1,
  		"𞤬"
  	],
  	[
  		125195,
  		1,
  		"𞤭"
  	],
  	[
  		125196,
  		1,
  		"𞤮"
  	],
  	[
  		125197,
  		1,
  		"𞤯"
  	],
  	[
  		125198,
  		1,
  		"𞤰"
  	],
  	[
  		125199,
  		1,
  		"𞤱"
  	],
  	[
  		125200,
  		1,
  		"𞤲"
  	],
  	[
  		125201,
  		1,
  		"𞤳"
  	],
  	[
  		125202,
  		1,
  		"𞤴"
  	],
  	[
  		125203,
  		1,
  		"𞤵"
  	],
  	[
  		125204,
  		1,
  		"𞤶"
  	],
  	[
  		125205,
  		1,
  		"𞤷"
  	],
  	[
  		125206,
  		1,
  		"𞤸"
  	],
  	[
  		125207,
  		1,
  		"𞤹"
  	],
  	[
  		125208,
  		1,
  		"𞤺"
  	],
  	[
  		125209,
  		1,
  		"𞤻"
  	],
  	[
  		125210,
  		1,
  		"𞤼"
  	],
  	[
  		125211,
  		1,
  		"𞤽"
  	],
  	[
  		125212,
  		1,
  		"𞤾"
  	],
  	[
  		125213,
  		1,
  		"𞤿"
  	],
  	[
  		125214,
  		1,
  		"𞥀"
  	],
  	[
  		125215,
  		1,
  		"𞥁"
  	],
  	[
  		125216,
  		1,
  		"𞥂"
  	],
  	[
  		125217,
  		1,
  		"𞥃"
  	],
  	[
  		[
  			125218,
  			125258
  		],
  		2
  	],
  	[
  		125259,
  		2
  	],
  	[
  		[
  			125260,
  			125263
  		],
  		3
  	],
  	[
  		[
  			125264,
  			125273
  		],
  		2
  	],
  	[
  		[
  			125274,
  			125277
  		],
  		3
  	],
  	[
  		[
  			125278,
  			125279
  		],
  		2
  	],
  	[
  		[
  			125280,
  			126064
  		],
  		3
  	],
  	[
  		[
  			126065,
  			126132
  		],
  		2
  	],
  	[
  		[
  			126133,
  			126208
  		],
  		3
  	],
  	[
  		[
  			126209,
  			126269
  		],
  		2
  	],
  	[
  		[
  			126270,
  			126463
  		],
  		3
  	],
  	[
  		126464,
  		1,
  		"ا"
  	],
  	[
  		126465,
  		1,
  		"ب"
  	],
  	[
  		126466,
  		1,
  		"ج"
  	],
  	[
  		126467,
  		1,
  		"د"
  	],
  	[
  		126468,
  		3
  	],
  	[
  		126469,
  		1,
  		"و"
  	],
  	[
  		126470,
  		1,
  		"ز"
  	],
  	[
  		126471,
  		1,
  		"ح"
  	],
  	[
  		126472,
  		1,
  		"ط"
  	],
  	[
  		126473,
  		1,
  		"ي"
  	],
  	[
  		126474,
  		1,
  		"ك"
  	],
  	[
  		126475,
  		1,
  		"ل"
  	],
  	[
  		126476,
  		1,
  		"م"
  	],
  	[
  		126477,
  		1,
  		"ن"
  	],
  	[
  		126478,
  		1,
  		"س"
  	],
  	[
  		126479,
  		1,
  		"ع"
  	],
  	[
  		126480,
  		1,
  		"ف"
  	],
  	[
  		126481,
  		1,
  		"ص"
  	],
  	[
  		126482,
  		1,
  		"ق"
  	],
  	[
  		126483,
  		1,
  		"ر"
  	],
  	[
  		126484,
  		1,
  		"ش"
  	],
  	[
  		126485,
  		1,
  		"ت"
  	],
  	[
  		126486,
  		1,
  		"ث"
  	],
  	[
  		126487,
  		1,
  		"خ"
  	],
  	[
  		126488,
  		1,
  		"ذ"
  	],
  	[
  		126489,
  		1,
  		"ض"
  	],
  	[
  		126490,
  		1,
  		"ظ"
  	],
  	[
  		126491,
  		1,
  		"غ"
  	],
  	[
  		126492,
  		1,
  		"ٮ"
  	],
  	[
  		126493,
  		1,
  		"ں"
  	],
  	[
  		126494,
  		1,
  		"ڡ"
  	],
  	[
  		126495,
  		1,
  		"ٯ"
  	],
  	[
  		126496,
  		3
  	],
  	[
  		126497,
  		1,
  		"ب"
  	],
  	[
  		126498,
  		1,
  		"ج"
  	],
  	[
  		126499,
  		3
  	],
  	[
  		126500,
  		1,
  		"ه"
  	],
  	[
  		[
  			126501,
  			126502
  		],
  		3
  	],
  	[
  		126503,
  		1,
  		"ح"
  	],
  	[
  		126504,
  		3
  	],
  	[
  		126505,
  		1,
  		"ي"
  	],
  	[
  		126506,
  		1,
  		"ك"
  	],
  	[
  		126507,
  		1,
  		"ل"
  	],
  	[
  		126508,
  		1,
  		"م"
  	],
  	[
  		126509,
  		1,
  		"ن"
  	],
  	[
  		126510,
  		1,
  		"س"
  	],
  	[
  		126511,
  		1,
  		"ع"
  	],
  	[
  		126512,
  		1,
  		"ف"
  	],
  	[
  		126513,
  		1,
  		"ص"
  	],
  	[
  		126514,
  		1,
  		"ق"
  	],
  	[
  		126515,
  		3
  	],
  	[
  		126516,
  		1,
  		"ش"
  	],
  	[
  		126517,
  		1,
  		"ت"
  	],
  	[
  		126518,
  		1,
  		"ث"
  	],
  	[
  		126519,
  		1,
  		"خ"
  	],
  	[
  		126520,
  		3
  	],
  	[
  		126521,
  		1,
  		"ض"
  	],
  	[
  		126522,
  		3
  	],
  	[
  		126523,
  		1,
  		"غ"
  	],
  	[
  		[
  			126524,
  			126529
  		],
  		3
  	],
  	[
  		126530,
  		1,
  		"ج"
  	],
  	[
  		[
  			126531,
  			126534
  		],
  		3
  	],
  	[
  		126535,
  		1,
  		"ح"
  	],
  	[
  		126536,
  		3
  	],
  	[
  		126537,
  		1,
  		"ي"
  	],
  	[
  		126538,
  		3
  	],
  	[
  		126539,
  		1,
  		"ل"
  	],
  	[
  		126540,
  		3
  	],
  	[
  		126541,
  		1,
  		"ن"
  	],
  	[
  		126542,
  		1,
  		"س"
  	],
  	[
  		126543,
  		1,
  		"ع"
  	],
  	[
  		126544,
  		3
  	],
  	[
  		126545,
  		1,
  		"ص"
  	],
  	[
  		126546,
  		1,
  		"ق"
  	],
  	[
  		126547,
  		3
  	],
  	[
  		126548,
  		1,
  		"ش"
  	],
  	[
  		[
  			126549,
  			126550
  		],
  		3
  	],
  	[
  		126551,
  		1,
  		"خ"
  	],
  	[
  		126552,
  		3
  	],
  	[
  		126553,
  		1,
  		"ض"
  	],
  	[
  		126554,
  		3
  	],
  	[
  		126555,
  		1,
  		"غ"
  	],
  	[
  		126556,
  		3
  	],
  	[
  		126557,
  		1,
  		"ں"
  	],
  	[
  		126558,
  		3
  	],
  	[
  		126559,
  		1,
  		"ٯ"
  	],
  	[
  		126560,
  		3
  	],
  	[
  		126561,
  		1,
  		"ب"
  	],
  	[
  		126562,
  		1,
  		"ج"
  	],
  	[
  		126563,
  		3
  	],
  	[
  		126564,
  		1,
  		"ه"
  	],
  	[
  		[
  			126565,
  			126566
  		],
  		3
  	],
  	[
  		126567,
  		1,
  		"ح"
  	],
  	[
  		126568,
  		1,
  		"ط"
  	],
  	[
  		126569,
  		1,
  		"ي"
  	],
  	[
  		126570,
  		1,
  		"ك"
  	],
  	[
  		126571,
  		3
  	],
  	[
  		126572,
  		1,
  		"م"
  	],
  	[
  		126573,
  		1,
  		"ن"
  	],
  	[
  		126574,
  		1,
  		"س"
  	],
  	[
  		126575,
  		1,
  		"ع"
  	],
  	[
  		126576,
  		1,
  		"ف"
  	],
  	[
  		126577,
  		1,
  		"ص"
  	],
  	[
  		126578,
  		1,
  		"ق"
  	],
  	[
  		126579,
  		3
  	],
  	[
  		126580,
  		1,
  		"ش"
  	],
  	[
  		126581,
  		1,
  		"ت"
  	],
  	[
  		126582,
  		1,
  		"ث"
  	],
  	[
  		126583,
  		1,
  		"خ"
  	],
  	[
  		126584,
  		3
  	],
  	[
  		126585,
  		1,
  		"ض"
  	],
  	[
  		126586,
  		1,
  		"ظ"
  	],
  	[
  		126587,
  		1,
  		"غ"
  	],
  	[
  		126588,
  		1,
  		"ٮ"
  	],
  	[
  		126589,
  		3
  	],
  	[
  		126590,
  		1,
  		"ڡ"
  	],
  	[
  		126591,
  		3
  	],
  	[
  		126592,
  		1,
  		"ا"
  	],
  	[
  		126593,
  		1,
  		"ب"
  	],
  	[
  		126594,
  		1,
  		"ج"
  	],
  	[
  		126595,
  		1,
  		"د"
  	],
  	[
  		126596,
  		1,
  		"ه"
  	],
  	[
  		126597,
  		1,
  		"و"
  	],
  	[
  		126598,
  		1,
  		"ز"
  	],
  	[
  		126599,
  		1,
  		"ح"
  	],
  	[
  		126600,
  		1,
  		"ط"
  	],
  	[
  		126601,
  		1,
  		"ي"
  	],
  	[
  		126602,
  		3
  	],
  	[
  		126603,
  		1,
  		"ل"
  	],
  	[
  		126604,
  		1,
  		"م"
  	],
  	[
  		126605,
  		1,
  		"ن"
  	],
  	[
  		126606,
  		1,
  		"س"
  	],
  	[
  		126607,
  		1,
  		"ع"
  	],
  	[
  		126608,
  		1,
  		"ف"
  	],
  	[
  		126609,
  		1,
  		"ص"
  	],
  	[
  		126610,
  		1,
  		"ق"
  	],
  	[
  		126611,
  		1,
  		"ر"
  	],
  	[
  		126612,
  		1,
  		"ش"
  	],
  	[
  		126613,
  		1,
  		"ت"
  	],
  	[
  		126614,
  		1,
  		"ث"
  	],
  	[
  		126615,
  		1,
  		"خ"
  	],
  	[
  		126616,
  		1,
  		"ذ"
  	],
  	[
  		126617,
  		1,
  		"ض"
  	],
  	[
  		126618,
  		1,
  		"ظ"
  	],
  	[
  		126619,
  		1,
  		"غ"
  	],
  	[
  		[
  			126620,
  			126624
  		],
  		3
  	],
  	[
  		126625,
  		1,
  		"ب"
  	],
  	[
  		126626,
  		1,
  		"ج"
  	],
  	[
  		126627,
  		1,
  		"د"
  	],
  	[
  		126628,
  		3
  	],
  	[
  		126629,
  		1,
  		"و"
  	],
  	[
  		126630,
  		1,
  		"ز"
  	],
  	[
  		126631,
  		1,
  		"ح"
  	],
  	[
  		126632,
  		1,
  		"ط"
  	],
  	[
  		126633,
  		1,
  		"ي"
  	],
  	[
  		126634,
  		3
  	],
  	[
  		126635,
  		1,
  		"ل"
  	],
  	[
  		126636,
  		1,
  		"م"
  	],
  	[
  		126637,
  		1,
  		"ن"
  	],
  	[
  		126638,
  		1,
  		"س"
  	],
  	[
  		126639,
  		1,
  		"ع"
  	],
  	[
  		126640,
  		1,
  		"ف"
  	],
  	[
  		126641,
  		1,
  		"ص"
  	],
  	[
  		126642,
  		1,
  		"ق"
  	],
  	[
  		126643,
  		1,
  		"ر"
  	],
  	[
  		126644,
  		1,
  		"ش"
  	],
  	[
  		126645,
  		1,
  		"ت"
  	],
  	[
  		126646,
  		1,
  		"ث"
  	],
  	[
  		126647,
  		1,
  		"خ"
  	],
  	[
  		126648,
  		1,
  		"ذ"
  	],
  	[
  		126649,
  		1,
  		"ض"
  	],
  	[
  		126650,
  		1,
  		"ظ"
  	],
  	[
  		126651,
  		1,
  		"غ"
  	],
  	[
  		[
  			126652,
  			126703
  		],
  		3
  	],
  	[
  		[
  			126704,
  			126705
  		],
  		2
  	],
  	[
  		[
  			126706,
  			126975
  		],
  		3
  	],
  	[
  		[
  			126976,
  			127019
  		],
  		2
  	],
  	[
  		[
  			127020,
  			127023
  		],
  		3
  	],
  	[
  		[
  			127024,
  			127123
  		],
  		2
  	],
  	[
  		[
  			127124,
  			127135
  		],
  		3
  	],
  	[
  		[
  			127136,
  			127150
  		],
  		2
  	],
  	[
  		[
  			127151,
  			127152
  		],
  		3
  	],
  	[
  		[
  			127153,
  			127166
  		],
  		2
  	],
  	[
  		127167,
  		2
  	],
  	[
  		127168,
  		3
  	],
  	[
  		[
  			127169,
  			127183
  		],
  		2
  	],
  	[
  		127184,
  		3
  	],
  	[
  		[
  			127185,
  			127199
  		],
  		2
  	],
  	[
  		[
  			127200,
  			127221
  		],
  		2
  	],
  	[
  		[
  			127222,
  			127231
  		],
  		3
  	],
  	[
  		127232,
  		3
  	],
  	[
  		127233,
  		5,
  		"0,"
  	],
  	[
  		127234,
  		5,
  		"1,"
  	],
  	[
  		127235,
  		5,
  		"2,"
  	],
  	[
  		127236,
  		5,
  		"3,"
  	],
  	[
  		127237,
  		5,
  		"4,"
  	],
  	[
  		127238,
  		5,
  		"5,"
  	],
  	[
  		127239,
  		5,
  		"6,"
  	],
  	[
  		127240,
  		5,
  		"7,"
  	],
  	[
  		127241,
  		5,
  		"8,"
  	],
  	[
  		127242,
  		5,
  		"9,"
  	],
  	[
  		[
  			127243,
  			127244
  		],
  		2
  	],
  	[
  		[
  			127245,
  			127247
  		],
  		2
  	],
  	[
  		127248,
  		5,
  		"(a)"
  	],
  	[
  		127249,
  		5,
  		"(b)"
  	],
  	[
  		127250,
  		5,
  		"(c)"
  	],
  	[
  		127251,
  		5,
  		"(d)"
  	],
  	[
  		127252,
  		5,
  		"(e)"
  	],
  	[
  		127253,
  		5,
  		"(f)"
  	],
  	[
  		127254,
  		5,
  		"(g)"
  	],
  	[
  		127255,
  		5,
  		"(h)"
  	],
  	[
  		127256,
  		5,
  		"(i)"
  	],
  	[
  		127257,
  		5,
  		"(j)"
  	],
  	[
  		127258,
  		5,
  		"(k)"
  	],
  	[
  		127259,
  		5,
  		"(l)"
  	],
  	[
  		127260,
  		5,
  		"(m)"
  	],
  	[
  		127261,
  		5,
  		"(n)"
  	],
  	[
  		127262,
  		5,
  		"(o)"
  	],
  	[
  		127263,
  		5,
  		"(p)"
  	],
  	[
  		127264,
  		5,
  		"(q)"
  	],
  	[
  		127265,
  		5,
  		"(r)"
  	],
  	[
  		127266,
  		5,
  		"(s)"
  	],
  	[
  		127267,
  		5,
  		"(t)"
  	],
  	[
  		127268,
  		5,
  		"(u)"
  	],
  	[
  		127269,
  		5,
  		"(v)"
  	],
  	[
  		127270,
  		5,
  		"(w)"
  	],
  	[
  		127271,
  		5,
  		"(x)"
  	],
  	[
  		127272,
  		5,
  		"(y)"
  	],
  	[
  		127273,
  		5,
  		"(z)"
  	],
  	[
  		127274,
  		1,
  		"〔s〕"
  	],
  	[
  		127275,
  		1,
  		"c"
  	],
  	[
  		127276,
  		1,
  		"r"
  	],
  	[
  		127277,
  		1,
  		"cd"
  	],
  	[
  		127278,
  		1,
  		"wz"
  	],
  	[
  		127279,
  		2
  	],
  	[
  		127280,
  		1,
  		"a"
  	],
  	[
  		127281,
  		1,
  		"b"
  	],
  	[
  		127282,
  		1,
  		"c"
  	],
  	[
  		127283,
  		1,
  		"d"
  	],
  	[
  		127284,
  		1,
  		"e"
  	],
  	[
  		127285,
  		1,
  		"f"
  	],
  	[
  		127286,
  		1,
  		"g"
  	],
  	[
  		127287,
  		1,
  		"h"
  	],
  	[
  		127288,
  		1,
  		"i"
  	],
  	[
  		127289,
  		1,
  		"j"
  	],
  	[
  		127290,
  		1,
  		"k"
  	],
  	[
  		127291,
  		1,
  		"l"
  	],
  	[
  		127292,
  		1,
  		"m"
  	],
  	[
  		127293,
  		1,
  		"n"
  	],
  	[
  		127294,
  		1,
  		"o"
  	],
  	[
  		127295,
  		1,
  		"p"
  	],
  	[
  		127296,
  		1,
  		"q"
  	],
  	[
  		127297,
  		1,
  		"r"
  	],
  	[
  		127298,
  		1,
  		"s"
  	],
  	[
  		127299,
  		1,
  		"t"
  	],
  	[
  		127300,
  		1,
  		"u"
  	],
  	[
  		127301,
  		1,
  		"v"
  	],
  	[
  		127302,
  		1,
  		"w"
  	],
  	[
  		127303,
  		1,
  		"x"
  	],
  	[
  		127304,
  		1,
  		"y"
  	],
  	[
  		127305,
  		1,
  		"z"
  	],
  	[
  		127306,
  		1,
  		"hv"
  	],
  	[
  		127307,
  		1,
  		"mv"
  	],
  	[
  		127308,
  		1,
  		"sd"
  	],
  	[
  		127309,
  		1,
  		"ss"
  	],
  	[
  		127310,
  		1,
  		"ppv"
  	],
  	[
  		127311,
  		1,
  		"wc"
  	],
  	[
  		[
  			127312,
  			127318
  		],
  		2
  	],
  	[
  		127319,
  		2
  	],
  	[
  		[
  			127320,
  			127326
  		],
  		2
  	],
  	[
  		127327,
  		2
  	],
  	[
  		[
  			127328,
  			127337
  		],
  		2
  	],
  	[
  		127338,
  		1,
  		"mc"
  	],
  	[
  		127339,
  		1,
  		"md"
  	],
  	[
  		127340,
  		1,
  		"mr"
  	],
  	[
  		[
  			127341,
  			127343
  		],
  		2
  	],
  	[
  		[
  			127344,
  			127352
  		],
  		2
  	],
  	[
  		127353,
  		2
  	],
  	[
  		127354,
  		2
  	],
  	[
  		[
  			127355,
  			127356
  		],
  		2
  	],
  	[
  		[
  			127357,
  			127358
  		],
  		2
  	],
  	[
  		127359,
  		2
  	],
  	[
  		[
  			127360,
  			127369
  		],
  		2
  	],
  	[
  		[
  			127370,
  			127373
  		],
  		2
  	],
  	[
  		[
  			127374,
  			127375
  		],
  		2
  	],
  	[
  		127376,
  		1,
  		"dj"
  	],
  	[
  		[
  			127377,
  			127386
  		],
  		2
  	],
  	[
  		[
  			127387,
  			127404
  		],
  		2
  	],
  	[
  		127405,
  		2
  	],
  	[
  		[
  			127406,
  			127461
  		],
  		3
  	],
  	[
  		[
  			127462,
  			127487
  		],
  		2
  	],
  	[
  		127488,
  		1,
  		"ほか"
  	],
  	[
  		127489,
  		1,
  		"ココ"
  	],
  	[
  		127490,
  		1,
  		"サ"
  	],
  	[
  		[
  			127491,
  			127503
  		],
  		3
  	],
  	[
  		127504,
  		1,
  		"手"
  	],
  	[
  		127505,
  		1,
  		"字"
  	],
  	[
  		127506,
  		1,
  		"双"
  	],
  	[
  		127507,
  		1,
  		"デ"
  	],
  	[
  		127508,
  		1,
  		"二"
  	],
  	[
  		127509,
  		1,
  		"多"
  	],
  	[
  		127510,
  		1,
  		"解"
  	],
  	[
  		127511,
  		1,
  		"天"
  	],
  	[
  		127512,
  		1,
  		"交"
  	],
  	[
  		127513,
  		1,
  		"映"
  	],
  	[
  		127514,
  		1,
  		"無"
  	],
  	[
  		127515,
  		1,
  		"料"
  	],
  	[
  		127516,
  		1,
  		"前"
  	],
  	[
  		127517,
  		1,
  		"後"
  	],
  	[
  		127518,
  		1,
  		"再"
  	],
  	[
  		127519,
  		1,
  		"新"
  	],
  	[
  		127520,
  		1,
  		"初"
  	],
  	[
  		127521,
  		1,
  		"終"
  	],
  	[
  		127522,
  		1,
  		"生"
  	],
  	[
  		127523,
  		1,
  		"販"
  	],
  	[
  		127524,
  		1,
  		"声"
  	],
  	[
  		127525,
  		1,
  		"吹"
  	],
  	[
  		127526,
  		1,
  		"演"
  	],
  	[
  		127527,
  		1,
  		"投"
  	],
  	[
  		127528,
  		1,
  		"捕"
  	],
  	[
  		127529,
  		1,
  		"一"
  	],
  	[
  		127530,
  		1,
  		"三"
  	],
  	[
  		127531,
  		1,
  		"遊"
  	],
  	[
  		127532,
  		1,
  		"左"
  	],
  	[
  		127533,
  		1,
  		"中"
  	],
  	[
  		127534,
  		1,
  		"右"
  	],
  	[
  		127535,
  		1,
  		"指"
  	],
  	[
  		127536,
  		1,
  		"走"
  	],
  	[
  		127537,
  		1,
  		"打"
  	],
  	[
  		127538,
  		1,
  		"禁"
  	],
  	[
  		127539,
  		1,
  		"空"
  	],
  	[
  		127540,
  		1,
  		"合"
  	],
  	[
  		127541,
  		1,
  		"満"
  	],
  	[
  		127542,
  		1,
  		"有"
  	],
  	[
  		127543,
  		1,
  		"月"
  	],
  	[
  		127544,
  		1,
  		"申"
  	],
  	[
  		127545,
  		1,
  		"割"
  	],
  	[
  		127546,
  		1,
  		"営"
  	],
  	[
  		127547,
  		1,
  		"配"
  	],
  	[
  		[
  			127548,
  			127551
  		],
  		3
  	],
  	[
  		127552,
  		1,
  		"〔本〕"
  	],
  	[
  		127553,
  		1,
  		"〔三〕"
  	],
  	[
  		127554,
  		1,
  		"〔二〕"
  	],
  	[
  		127555,
  		1,
  		"〔安〕"
  	],
  	[
  		127556,
  		1,
  		"〔点〕"
  	],
  	[
  		127557,
  		1,
  		"〔打〕"
  	],
  	[
  		127558,
  		1,
  		"〔盗〕"
  	],
  	[
  		127559,
  		1,
  		"〔勝〕"
  	],
  	[
  		127560,
  		1,
  		"〔敗〕"
  	],
  	[
  		[
  			127561,
  			127567
  		],
  		3
  	],
  	[
  		127568,
  		1,
  		"得"
  	],
  	[
  		127569,
  		1,
  		"可"
  	],
  	[
  		[
  			127570,
  			127583
  		],
  		3
  	],
  	[
  		[
  			127584,
  			127589
  		],
  		2
  	],
  	[
  		[
  			127590,
  			127743
  		],
  		3
  	],
  	[
  		[
  			127744,
  			127776
  		],
  		2
  	],
  	[
  		[
  			127777,
  			127788
  		],
  		2
  	],
  	[
  		[
  			127789,
  			127791
  		],
  		2
  	],
  	[
  		[
  			127792,
  			127797
  		],
  		2
  	],
  	[
  		127798,
  		2
  	],
  	[
  		[
  			127799,
  			127868
  		],
  		2
  	],
  	[
  		127869,
  		2
  	],
  	[
  		[
  			127870,
  			127871
  		],
  		2
  	],
  	[
  		[
  			127872,
  			127891
  		],
  		2
  	],
  	[
  		[
  			127892,
  			127903
  		],
  		2
  	],
  	[
  		[
  			127904,
  			127940
  		],
  		2
  	],
  	[
  		127941,
  		2
  	],
  	[
  		[
  			127942,
  			127946
  		],
  		2
  	],
  	[
  		[
  			127947,
  			127950
  		],
  		2
  	],
  	[
  		[
  			127951,
  			127955
  		],
  		2
  	],
  	[
  		[
  			127956,
  			127967
  		],
  		2
  	],
  	[
  		[
  			127968,
  			127984
  		],
  		2
  	],
  	[
  		[
  			127985,
  			127991
  		],
  		2
  	],
  	[
  		[
  			127992,
  			127999
  		],
  		2
  	],
  	[
  		[
  			128000,
  			128062
  		],
  		2
  	],
  	[
  		128063,
  		2
  	],
  	[
  		128064,
  		2
  	],
  	[
  		128065,
  		2
  	],
  	[
  		[
  			128066,
  			128247
  		],
  		2
  	],
  	[
  		128248,
  		2
  	],
  	[
  		[
  			128249,
  			128252
  		],
  		2
  	],
  	[
  		[
  			128253,
  			128254
  		],
  		2
  	],
  	[
  		128255,
  		2
  	],
  	[
  		[
  			128256,
  			128317
  		],
  		2
  	],
  	[
  		[
  			128318,
  			128319
  		],
  		2
  	],
  	[
  		[
  			128320,
  			128323
  		],
  		2
  	],
  	[
  		[
  			128324,
  			128330
  		],
  		2
  	],
  	[
  		[
  			128331,
  			128335
  		],
  		2
  	],
  	[
  		[
  			128336,
  			128359
  		],
  		2
  	],
  	[
  		[
  			128360,
  			128377
  		],
  		2
  	],
  	[
  		128378,
  		2
  	],
  	[
  		[
  			128379,
  			128419
  		],
  		2
  	],
  	[
  		128420,
  		2
  	],
  	[
  		[
  			128421,
  			128506
  		],
  		2
  	],
  	[
  		[
  			128507,
  			128511
  		],
  		2
  	],
  	[
  		128512,
  		2
  	],
  	[
  		[
  			128513,
  			128528
  		],
  		2
  	],
  	[
  		128529,
  		2
  	],
  	[
  		[
  			128530,
  			128532
  		],
  		2
  	],
  	[
  		128533,
  		2
  	],
  	[
  		128534,
  		2
  	],
  	[
  		128535,
  		2
  	],
  	[
  		128536,
  		2
  	],
  	[
  		128537,
  		2
  	],
  	[
  		128538,
  		2
  	],
  	[
  		128539,
  		2
  	],
  	[
  		[
  			128540,
  			128542
  		],
  		2
  	],
  	[
  		128543,
  		2
  	],
  	[
  		[
  			128544,
  			128549
  		],
  		2
  	],
  	[
  		[
  			128550,
  			128551
  		],
  		2
  	],
  	[
  		[
  			128552,
  			128555
  		],
  		2
  	],
  	[
  		128556,
  		2
  	],
  	[
  		128557,
  		2
  	],
  	[
  		[
  			128558,
  			128559
  		],
  		2
  	],
  	[
  		[
  			128560,
  			128563
  		],
  		2
  	],
  	[
  		128564,
  		2
  	],
  	[
  		[
  			128565,
  			128576
  		],
  		2
  	],
  	[
  		[
  			128577,
  			128578
  		],
  		2
  	],
  	[
  		[
  			128579,
  			128580
  		],
  		2
  	],
  	[
  		[
  			128581,
  			128591
  		],
  		2
  	],
  	[
  		[
  			128592,
  			128639
  		],
  		2
  	],
  	[
  		[
  			128640,
  			128709
  		],
  		2
  	],
  	[
  		[
  			128710,
  			128719
  		],
  		2
  	],
  	[
  		128720,
  		2
  	],
  	[
  		[
  			128721,
  			128722
  		],
  		2
  	],
  	[
  		[
  			128723,
  			128724
  		],
  		2
  	],
  	[
  		128725,
  		2
  	],
  	[
  		[
  			128726,
  			128727
  		],
  		2
  	],
  	[
  		[
  			128728,
  			128735
  		],
  		3
  	],
  	[
  		[
  			128736,
  			128748
  		],
  		2
  	],
  	[
  		[
  			128749,
  			128751
  		],
  		3
  	],
  	[
  		[
  			128752,
  			128755
  		],
  		2
  	],
  	[
  		[
  			128756,
  			128758
  		],
  		2
  	],
  	[
  		[
  			128759,
  			128760
  		],
  		2
  	],
  	[
  		128761,
  		2
  	],
  	[
  		128762,
  		2
  	],
  	[
  		[
  			128763,
  			128764
  		],
  		2
  	],
  	[
  		[
  			128765,
  			128767
  		],
  		3
  	],
  	[
  		[
  			128768,
  			128883
  		],
  		2
  	],
  	[
  		[
  			128884,
  			128895
  		],
  		3
  	],
  	[
  		[
  			128896,
  			128980
  		],
  		2
  	],
  	[
  		[
  			128981,
  			128984
  		],
  		2
  	],
  	[
  		[
  			128985,
  			128991
  		],
  		3
  	],
  	[
  		[
  			128992,
  			129003
  		],
  		2
  	],
  	[
  		[
  			129004,
  			129023
  		],
  		3
  	],
  	[
  		[
  			129024,
  			129035
  		],
  		2
  	],
  	[
  		[
  			129036,
  			129039
  		],
  		3
  	],
  	[
  		[
  			129040,
  			129095
  		],
  		2
  	],
  	[
  		[
  			129096,
  			129103
  		],
  		3
  	],
  	[
  		[
  			129104,
  			129113
  		],
  		2
  	],
  	[
  		[
  			129114,
  			129119
  		],
  		3
  	],
  	[
  		[
  			129120,
  			129159
  		],
  		2
  	],
  	[
  		[
  			129160,
  			129167
  		],
  		3
  	],
  	[
  		[
  			129168,
  			129197
  		],
  		2
  	],
  	[
  		[
  			129198,
  			129199
  		],
  		3
  	],
  	[
  		[
  			129200,
  			129201
  		],
  		2
  	],
  	[
  		[
  			129202,
  			129279
  		],
  		3
  	],
  	[
  		[
  			129280,
  			129291
  		],
  		2
  	],
  	[
  		129292,
  		2
  	],
  	[
  		[
  			129293,
  			129295
  		],
  		2
  	],
  	[
  		[
  			129296,
  			129304
  		],
  		2
  	],
  	[
  		[
  			129305,
  			129310
  		],
  		2
  	],
  	[
  		129311,
  		2
  	],
  	[
  		[
  			129312,
  			129319
  		],
  		2
  	],
  	[
  		[
  			129320,
  			129327
  		],
  		2
  	],
  	[
  		129328,
  		2
  	],
  	[
  		[
  			129329,
  			129330
  		],
  		2
  	],
  	[
  		[
  			129331,
  			129342
  		],
  		2
  	],
  	[
  		129343,
  		2
  	],
  	[
  		[
  			129344,
  			129355
  		],
  		2
  	],
  	[
  		129356,
  		2
  	],
  	[
  		[
  			129357,
  			129359
  		],
  		2
  	],
  	[
  		[
  			129360,
  			129374
  		],
  		2
  	],
  	[
  		[
  			129375,
  			129387
  		],
  		2
  	],
  	[
  		[
  			129388,
  			129392
  		],
  		2
  	],
  	[
  		129393,
  		2
  	],
  	[
  		129394,
  		2
  	],
  	[
  		[
  			129395,
  			129398
  		],
  		2
  	],
  	[
  		[
  			129399,
  			129400
  		],
  		2
  	],
  	[
  		129401,
  		3
  	],
  	[
  		129402,
  		2
  	],
  	[
  		129403,
  		2
  	],
  	[
  		[
  			129404,
  			129407
  		],
  		2
  	],
  	[
  		[
  			129408,
  			129412
  		],
  		2
  	],
  	[
  		[
  			129413,
  			129425
  		],
  		2
  	],
  	[
  		[
  			129426,
  			129431
  		],
  		2
  	],
  	[
  		[
  			129432,
  			129442
  		],
  		2
  	],
  	[
  		[
  			129443,
  			129444
  		],
  		2
  	],
  	[
  		[
  			129445,
  			129450
  		],
  		2
  	],
  	[
  		[
  			129451,
  			129453
  		],
  		2
  	],
  	[
  		[
  			129454,
  			129455
  		],
  		2
  	],
  	[
  		[
  			129456,
  			129465
  		],
  		2
  	],
  	[
  		[
  			129466,
  			129471
  		],
  		2
  	],
  	[
  		129472,
  		2
  	],
  	[
  		[
  			129473,
  			129474
  		],
  		2
  	],
  	[
  		[
  			129475,
  			129482
  		],
  		2
  	],
  	[
  		129483,
  		2
  	],
  	[
  		129484,
  		3
  	],
  	[
  		[
  			129485,
  			129487
  		],
  		2
  	],
  	[
  		[
  			129488,
  			129510
  		],
  		2
  	],
  	[
  		[
  			129511,
  			129535
  		],
  		2
  	],
  	[
  		[
  			129536,
  			129619
  		],
  		2
  	],
  	[
  		[
  			129620,
  			129631
  		],
  		3
  	],
  	[
  		[
  			129632,
  			129645
  		],
  		2
  	],
  	[
  		[
  			129646,
  			129647
  		],
  		3
  	],
  	[
  		[
  			129648,
  			129651
  		],
  		2
  	],
  	[
  		129652,
  		2
  	],
  	[
  		[
  			129653,
  			129655
  		],
  		3
  	],
  	[
  		[
  			129656,
  			129658
  		],
  		2
  	],
  	[
  		[
  			129659,
  			129663
  		],
  		3
  	],
  	[
  		[
  			129664,
  			129666
  		],
  		2
  	],
  	[
  		[
  			129667,
  			129670
  		],
  		2
  	],
  	[
  		[
  			129671,
  			129679
  		],
  		3
  	],
  	[
  		[
  			129680,
  			129685
  		],
  		2
  	],
  	[
  		[
  			129686,
  			129704
  		],
  		2
  	],
  	[
  		[
  			129705,
  			129711
  		],
  		3
  	],
  	[
  		[
  			129712,
  			129718
  		],
  		2
  	],
  	[
  		[
  			129719,
  			129727
  		],
  		3
  	],
  	[
  		[
  			129728,
  			129730
  		],
  		2
  	],
  	[
  		[
  			129731,
  			129743
  		],
  		3
  	],
  	[
  		[
  			129744,
  			129750
  		],
  		2
  	],
  	[
  		[
  			129751,
  			129791
  		],
  		3
  	],
  	[
  		[
  			129792,
  			129938
  		],
  		2
  	],
  	[
  		129939,
  		3
  	],
  	[
  		[
  			129940,
  			129994
  		],
  		2
  	],
  	[
  		[
  			129995,
  			130031
  		],
  		3
  	],
  	[
  		130032,
  		1,
  		"0"
  	],
  	[
  		130033,
  		1,
  		"1"
  	],
  	[
  		130034,
  		1,
  		"2"
  	],
  	[
  		130035,
  		1,
  		"3"
  	],
  	[
  		130036,
  		1,
  		"4"
  	],
  	[
  		130037,
  		1,
  		"5"
  	],
  	[
  		130038,
  		1,
  		"6"
  	],
  	[
  		130039,
  		1,
  		"7"
  	],
  	[
  		130040,
  		1,
  		"8"
  	],
  	[
  		130041,
  		1,
  		"9"
  	],
  	[
  		[
  			130042,
  			131069
  		],
  		3
  	],
  	[
  		[
  			131070,
  			131071
  		],
  		3
  	],
  	[
  		[
  			131072,
  			173782
  		],
  		2
  	],
  	[
  		[
  			173783,
  			173789
  		],
  		2
  	],
  	[
  		[
  			173790,
  			173823
  		],
  		3
  	],
  	[
  		[
  			173824,
  			177972
  		],
  		2
  	],
  	[
  		[
  			177973,
  			177983
  		],
  		3
  	],
  	[
  		[
  			177984,
  			178205
  		],
  		2
  	],
  	[
  		[
  			178206,
  			178207
  		],
  		3
  	],
  	[
  		[
  			178208,
  			183969
  		],
  		2
  	],
  	[
  		[
  			183970,
  			183983
  		],
  		3
  	],
  	[
  		[
  			183984,
  			191456
  		],
  		2
  	],
  	[
  		[
  			191457,
  			194559
  		],
  		3
  	],
  	[
  		194560,
  		1,
  		"丽"
  	],
  	[
  		194561,
  		1,
  		"丸"
  	],
  	[
  		194562,
  		1,
  		"乁"
  	],
  	[
  		194563,
  		1,
  		"𠄢"
  	],
  	[
  		194564,
  		1,
  		"你"
  	],
  	[
  		194565,
  		1,
  		"侮"
  	],
  	[
  		194566,
  		1,
  		"侻"
  	],
  	[
  		194567,
  		1,
  		"倂"
  	],
  	[
  		194568,
  		1,
  		"偺"
  	],
  	[
  		194569,
  		1,
  		"備"
  	],
  	[
  		194570,
  		1,
  		"僧"
  	],
  	[
  		194571,
  		1,
  		"像"
  	],
  	[
  		194572,
  		1,
  		"㒞"
  	],
  	[
  		194573,
  		1,
  		"𠘺"
  	],
  	[
  		194574,
  		1,
  		"免"
  	],
  	[
  		194575,
  		1,
  		"兔"
  	],
  	[
  		194576,
  		1,
  		"兤"
  	],
  	[
  		194577,
  		1,
  		"具"
  	],
  	[
  		194578,
  		1,
  		"𠔜"
  	],
  	[
  		194579,
  		1,
  		"㒹"
  	],
  	[
  		194580,
  		1,
  		"內"
  	],
  	[
  		194581,
  		1,
  		"再"
  	],
  	[
  		194582,
  		1,
  		"𠕋"
  	],
  	[
  		194583,
  		1,
  		"冗"
  	],
  	[
  		194584,
  		1,
  		"冤"
  	],
  	[
  		194585,
  		1,
  		"仌"
  	],
  	[
  		194586,
  		1,
  		"冬"
  	],
  	[
  		194587,
  		1,
  		"况"
  	],
  	[
  		194588,
  		1,
  		"𩇟"
  	],
  	[
  		194589,
  		1,
  		"凵"
  	],
  	[
  		194590,
  		1,
  		"刃"
  	],
  	[
  		194591,
  		1,
  		"㓟"
  	],
  	[
  		194592,
  		1,
  		"刻"
  	],
  	[
  		194593,
  		1,
  		"剆"
  	],
  	[
  		194594,
  		1,
  		"割"
  	],
  	[
  		194595,
  		1,
  		"剷"
  	],
  	[
  		194596,
  		1,
  		"㔕"
  	],
  	[
  		194597,
  		1,
  		"勇"
  	],
  	[
  		194598,
  		1,
  		"勉"
  	],
  	[
  		194599,
  		1,
  		"勤"
  	],
  	[
  		194600,
  		1,
  		"勺"
  	],
  	[
  		194601,
  		1,
  		"包"
  	],
  	[
  		194602,
  		1,
  		"匆"
  	],
  	[
  		194603,
  		1,
  		"北"
  	],
  	[
  		194604,
  		1,
  		"卉"
  	],
  	[
  		194605,
  		1,
  		"卑"
  	],
  	[
  		194606,
  		1,
  		"博"
  	],
  	[
  		194607,
  		1,
  		"即"
  	],
  	[
  		194608,
  		1,
  		"卽"
  	],
  	[
  		[
  			194609,
  			194611
  		],
  		1,
  		"卿"
  	],
  	[
  		194612,
  		1,
  		"𠨬"
  	],
  	[
  		194613,
  		1,
  		"灰"
  	],
  	[
  		194614,
  		1,
  		"及"
  	],
  	[
  		194615,
  		1,
  		"叟"
  	],
  	[
  		194616,
  		1,
  		"𠭣"
  	],
  	[
  		194617,
  		1,
  		"叫"
  	],
  	[
  		194618,
  		1,
  		"叱"
  	],
  	[
  		194619,
  		1,
  		"吆"
  	],
  	[
  		194620,
  		1,
  		"咞"
  	],
  	[
  		194621,
  		1,
  		"吸"
  	],
  	[
  		194622,
  		1,
  		"呈"
  	],
  	[
  		194623,
  		1,
  		"周"
  	],
  	[
  		194624,
  		1,
  		"咢"
  	],
  	[
  		194625,
  		1,
  		"哶"
  	],
  	[
  		194626,
  		1,
  		"唐"
  	],
  	[
  		194627,
  		1,
  		"啓"
  	],
  	[
  		194628,
  		1,
  		"啣"
  	],
  	[
  		[
  			194629,
  			194630
  		],
  		1,
  		"善"
  	],
  	[
  		194631,
  		1,
  		"喙"
  	],
  	[
  		194632,
  		1,
  		"喫"
  	],
  	[
  		194633,
  		1,
  		"喳"
  	],
  	[
  		194634,
  		1,
  		"嗂"
  	],
  	[
  		194635,
  		1,
  		"圖"
  	],
  	[
  		194636,
  		1,
  		"嘆"
  	],
  	[
  		194637,
  		1,
  		"圗"
  	],
  	[
  		194638,
  		1,
  		"噑"
  	],
  	[
  		194639,
  		1,
  		"噴"
  	],
  	[
  		194640,
  		1,
  		"切"
  	],
  	[
  		194641,
  		1,
  		"壮"
  	],
  	[
  		194642,
  		1,
  		"城"
  	],
  	[
  		194643,
  		1,
  		"埴"
  	],
  	[
  		194644,
  		1,
  		"堍"
  	],
  	[
  		194645,
  		1,
  		"型"
  	],
  	[
  		194646,
  		1,
  		"堲"
  	],
  	[
  		194647,
  		1,
  		"報"
  	],
  	[
  		194648,
  		1,
  		"墬"
  	],
  	[
  		194649,
  		1,
  		"𡓤"
  	],
  	[
  		194650,
  		1,
  		"売"
  	],
  	[
  		194651,
  		1,
  		"壷"
  	],
  	[
  		194652,
  		1,
  		"夆"
  	],
  	[
  		194653,
  		1,
  		"多"
  	],
  	[
  		194654,
  		1,
  		"夢"
  	],
  	[
  		194655,
  		1,
  		"奢"
  	],
  	[
  		194656,
  		1,
  		"𡚨"
  	],
  	[
  		194657,
  		1,
  		"𡛪"
  	],
  	[
  		194658,
  		1,
  		"姬"
  	],
  	[
  		194659,
  		1,
  		"娛"
  	],
  	[
  		194660,
  		1,
  		"娧"
  	],
  	[
  		194661,
  		1,
  		"姘"
  	],
  	[
  		194662,
  		1,
  		"婦"
  	],
  	[
  		194663,
  		1,
  		"㛮"
  	],
  	[
  		194664,
  		3
  	],
  	[
  		194665,
  		1,
  		"嬈"
  	],
  	[
  		[
  			194666,
  			194667
  		],
  		1,
  		"嬾"
  	],
  	[
  		194668,
  		1,
  		"𡧈"
  	],
  	[
  		194669,
  		1,
  		"寃"
  	],
  	[
  		194670,
  		1,
  		"寘"
  	],
  	[
  		194671,
  		1,
  		"寧"
  	],
  	[
  		194672,
  		1,
  		"寳"
  	],
  	[
  		194673,
  		1,
  		"𡬘"
  	],
  	[
  		194674,
  		1,
  		"寿"
  	],
  	[
  		194675,
  		1,
  		"将"
  	],
  	[
  		194676,
  		3
  	],
  	[
  		194677,
  		1,
  		"尢"
  	],
  	[
  		194678,
  		1,
  		"㞁"
  	],
  	[
  		194679,
  		1,
  		"屠"
  	],
  	[
  		194680,
  		1,
  		"屮"
  	],
  	[
  		194681,
  		1,
  		"峀"
  	],
  	[
  		194682,
  		1,
  		"岍"
  	],
  	[
  		194683,
  		1,
  		"𡷤"
  	],
  	[
  		194684,
  		1,
  		"嵃"
  	],
  	[
  		194685,
  		1,
  		"𡷦"
  	],
  	[
  		194686,
  		1,
  		"嵮"
  	],
  	[
  		194687,
  		1,
  		"嵫"
  	],
  	[
  		194688,
  		1,
  		"嵼"
  	],
  	[
  		194689,
  		1,
  		"巡"
  	],
  	[
  		194690,
  		1,
  		"巢"
  	],
  	[
  		194691,
  		1,
  		"㠯"
  	],
  	[
  		194692,
  		1,
  		"巽"
  	],
  	[
  		194693,
  		1,
  		"帨"
  	],
  	[
  		194694,
  		1,
  		"帽"
  	],
  	[
  		194695,
  		1,
  		"幩"
  	],
  	[
  		194696,
  		1,
  		"㡢"
  	],
  	[
  		194697,
  		1,
  		"𢆃"
  	],
  	[
  		194698,
  		1,
  		"㡼"
  	],
  	[
  		194699,
  		1,
  		"庰"
  	],
  	[
  		194700,
  		1,
  		"庳"
  	],
  	[
  		194701,
  		1,
  		"庶"
  	],
  	[
  		194702,
  		1,
  		"廊"
  	],
  	[
  		194703,
  		1,
  		"𪎒"
  	],
  	[
  		194704,
  		1,
  		"廾"
  	],
  	[
  		[
  			194705,
  			194706
  		],
  		1,
  		"𢌱"
  	],
  	[
  		194707,
  		1,
  		"舁"
  	],
  	[
  		[
  			194708,
  			194709
  		],
  		1,
  		"弢"
  	],
  	[
  		194710,
  		1,
  		"㣇"
  	],
  	[
  		194711,
  		1,
  		"𣊸"
  	],
  	[
  		194712,
  		1,
  		"𦇚"
  	],
  	[
  		194713,
  		1,
  		"形"
  	],
  	[
  		194714,
  		1,
  		"彫"
  	],
  	[
  		194715,
  		1,
  		"㣣"
  	],
  	[
  		194716,
  		1,
  		"徚"
  	],
  	[
  		194717,
  		1,
  		"忍"
  	],
  	[
  		194718,
  		1,
  		"志"
  	],
  	[
  		194719,
  		1,
  		"忹"
  	],
  	[
  		194720,
  		1,
  		"悁"
  	],
  	[
  		194721,
  		1,
  		"㤺"
  	],
  	[
  		194722,
  		1,
  		"㤜"
  	],
  	[
  		194723,
  		1,
  		"悔"
  	],
  	[
  		194724,
  		1,
  		"𢛔"
  	],
  	[
  		194725,
  		1,
  		"惇"
  	],
  	[
  		194726,
  		1,
  		"慈"
  	],
  	[
  		194727,
  		1,
  		"慌"
  	],
  	[
  		194728,
  		1,
  		"慎"
  	],
  	[
  		194729,
  		1,
  		"慌"
  	],
  	[
  		194730,
  		1,
  		"慺"
  	],
  	[
  		194731,
  		1,
  		"憎"
  	],
  	[
  		194732,
  		1,
  		"憲"
  	],
  	[
  		194733,
  		1,
  		"憤"
  	],
  	[
  		194734,
  		1,
  		"憯"
  	],
  	[
  		194735,
  		1,
  		"懞"
  	],
  	[
  		194736,
  		1,
  		"懲"
  	],
  	[
  		194737,
  		1,
  		"懶"
  	],
  	[
  		194738,
  		1,
  		"成"
  	],
  	[
  		194739,
  		1,
  		"戛"
  	],
  	[
  		194740,
  		1,
  		"扝"
  	],
  	[
  		194741,
  		1,
  		"抱"
  	],
  	[
  		194742,
  		1,
  		"拔"
  	],
  	[
  		194743,
  		1,
  		"捐"
  	],
  	[
  		194744,
  		1,
  		"𢬌"
  	],
  	[
  		194745,
  		1,
  		"挽"
  	],
  	[
  		194746,
  		1,
  		"拼"
  	],
  	[
  		194747,
  		1,
  		"捨"
  	],
  	[
  		194748,
  		1,
  		"掃"
  	],
  	[
  		194749,
  		1,
  		"揤"
  	],
  	[
  		194750,
  		1,
  		"𢯱"
  	],
  	[
  		194751,
  		1,
  		"搢"
  	],
  	[
  		194752,
  		1,
  		"揅"
  	],
  	[
  		194753,
  		1,
  		"掩"
  	],
  	[
  		194754,
  		1,
  		"㨮"
  	],
  	[
  		194755,
  		1,
  		"摩"
  	],
  	[
  		194756,
  		1,
  		"摾"
  	],
  	[
  		194757,
  		1,
  		"撝"
  	],
  	[
  		194758,
  		1,
  		"摷"
  	],
  	[
  		194759,
  		1,
  		"㩬"
  	],
  	[
  		194760,
  		1,
  		"敏"
  	],
  	[
  		194761,
  		1,
  		"敬"
  	],
  	[
  		194762,
  		1,
  		"𣀊"
  	],
  	[
  		194763,
  		1,
  		"旣"
  	],
  	[
  		194764,
  		1,
  		"書"
  	],
  	[
  		194765,
  		1,
  		"晉"
  	],
  	[
  		194766,
  		1,
  		"㬙"
  	],
  	[
  		194767,
  		1,
  		"暑"
  	],
  	[
  		194768,
  		1,
  		"㬈"
  	],
  	[
  		194769,
  		1,
  		"㫤"
  	],
  	[
  		194770,
  		1,
  		"冒"
  	],
  	[
  		194771,
  		1,
  		"冕"
  	],
  	[
  		194772,
  		1,
  		"最"
  	],
  	[
  		194773,
  		1,
  		"暜"
  	],
  	[
  		194774,
  		1,
  		"肭"
  	],
  	[
  		194775,
  		1,
  		"䏙"
  	],
  	[
  		194776,
  		1,
  		"朗"
  	],
  	[
  		194777,
  		1,
  		"望"
  	],
  	[
  		194778,
  		1,
  		"朡"
  	],
  	[
  		194779,
  		1,
  		"杞"
  	],
  	[
  		194780,
  		1,
  		"杓"
  	],
  	[
  		194781,
  		1,
  		"𣏃"
  	],
  	[
  		194782,
  		1,
  		"㭉"
  	],
  	[
  		194783,
  		1,
  		"柺"
  	],
  	[
  		194784,
  		1,
  		"枅"
  	],
  	[
  		194785,
  		1,
  		"桒"
  	],
  	[
  		194786,
  		1,
  		"梅"
  	],
  	[
  		194787,
  		1,
  		"𣑭"
  	],
  	[
  		194788,
  		1,
  		"梎"
  	],
  	[
  		194789,
  		1,
  		"栟"
  	],
  	[
  		194790,
  		1,
  		"椔"
  	],
  	[
  		194791,
  		1,
  		"㮝"
  	],
  	[
  		194792,
  		1,
  		"楂"
  	],
  	[
  		194793,
  		1,
  		"榣"
  	],
  	[
  		194794,
  		1,
  		"槪"
  	],
  	[
  		194795,
  		1,
  		"檨"
  	],
  	[
  		194796,
  		1,
  		"𣚣"
  	],
  	[
  		194797,
  		1,
  		"櫛"
  	],
  	[
  		194798,
  		1,
  		"㰘"
  	],
  	[
  		194799,
  		1,
  		"次"
  	],
  	[
  		194800,
  		1,
  		"𣢧"
  	],
  	[
  		194801,
  		1,
  		"歔"
  	],
  	[
  		194802,
  		1,
  		"㱎"
  	],
  	[
  		194803,
  		1,
  		"歲"
  	],
  	[
  		194804,
  		1,
  		"殟"
  	],
  	[
  		194805,
  		1,
  		"殺"
  	],
  	[
  		194806,
  		1,
  		"殻"
  	],
  	[
  		194807,
  		1,
  		"𣪍"
  	],
  	[
  		194808,
  		1,
  		"𡴋"
  	],
  	[
  		194809,
  		1,
  		"𣫺"
  	],
  	[
  		194810,
  		1,
  		"汎"
  	],
  	[
  		194811,
  		1,
  		"𣲼"
  	],
  	[
  		194812,
  		1,
  		"沿"
  	],
  	[
  		194813,
  		1,
  		"泍"
  	],
  	[
  		194814,
  		1,
  		"汧"
  	],
  	[
  		194815,
  		1,
  		"洖"
  	],
  	[
  		194816,
  		1,
  		"派"
  	],
  	[
  		194817,
  		1,
  		"海"
  	],
  	[
  		194818,
  		1,
  		"流"
  	],
  	[
  		194819,
  		1,
  		"浩"
  	],
  	[
  		194820,
  		1,
  		"浸"
  	],
  	[
  		194821,
  		1,
  		"涅"
  	],
  	[
  		194822,
  		1,
  		"𣴞"
  	],
  	[
  		194823,
  		1,
  		"洴"
  	],
  	[
  		194824,
  		1,
  		"港"
  	],
  	[
  		194825,
  		1,
  		"湮"
  	],
  	[
  		194826,
  		1,
  		"㴳"
  	],
  	[
  		194827,
  		1,
  		"滋"
  	],
  	[
  		194828,
  		1,
  		"滇"
  	],
  	[
  		194829,
  		1,
  		"𣻑"
  	],
  	[
  		194830,
  		1,
  		"淹"
  	],
  	[
  		194831,
  		1,
  		"潮"
  	],
  	[
  		194832,
  		1,
  		"𣽞"
  	],
  	[
  		194833,
  		1,
  		"𣾎"
  	],
  	[
  		194834,
  		1,
  		"濆"
  	],
  	[
  		194835,
  		1,
  		"瀹"
  	],
  	[
  		194836,
  		1,
  		"瀞"
  	],
  	[
  		194837,
  		1,
  		"瀛"
  	],
  	[
  		194838,
  		1,
  		"㶖"
  	],
  	[
  		194839,
  		1,
  		"灊"
  	],
  	[
  		194840,
  		1,
  		"災"
  	],
  	[
  		194841,
  		1,
  		"灷"
  	],
  	[
  		194842,
  		1,
  		"炭"
  	],
  	[
  		194843,
  		1,
  		"𠔥"
  	],
  	[
  		194844,
  		1,
  		"煅"
  	],
  	[
  		194845,
  		1,
  		"𤉣"
  	],
  	[
  		194846,
  		1,
  		"熜"
  	],
  	[
  		194847,
  		3
  	],
  	[
  		194848,
  		1,
  		"爨"
  	],
  	[
  		194849,
  		1,
  		"爵"
  	],
  	[
  		194850,
  		1,
  		"牐"
  	],
  	[
  		194851,
  		1,
  		"𤘈"
  	],
  	[
  		194852,
  		1,
  		"犀"
  	],
  	[
  		194853,
  		1,
  		"犕"
  	],
  	[
  		194854,
  		1,
  		"𤜵"
  	],
  	[
  		194855,
  		1,
  		"𤠔"
  	],
  	[
  		194856,
  		1,
  		"獺"
  	],
  	[
  		194857,
  		1,
  		"王"
  	],
  	[
  		194858,
  		1,
  		"㺬"
  	],
  	[
  		194859,
  		1,
  		"玥"
  	],
  	[
  		[
  			194860,
  			194861
  		],
  		1,
  		"㺸"
  	],
  	[
  		194862,
  		1,
  		"瑇"
  	],
  	[
  		194863,
  		1,
  		"瑜"
  	],
  	[
  		194864,
  		1,
  		"瑱"
  	],
  	[
  		194865,
  		1,
  		"璅"
  	],
  	[
  		194866,
  		1,
  		"瓊"
  	],
  	[
  		194867,
  		1,
  		"㼛"
  	],
  	[
  		194868,
  		1,
  		"甤"
  	],
  	[
  		194869,
  		1,
  		"𤰶"
  	],
  	[
  		194870,
  		1,
  		"甾"
  	],
  	[
  		194871,
  		1,
  		"𤲒"
  	],
  	[
  		194872,
  		1,
  		"異"
  	],
  	[
  		194873,
  		1,
  		"𢆟"
  	],
  	[
  		194874,
  		1,
  		"瘐"
  	],
  	[
  		194875,
  		1,
  		"𤾡"
  	],
  	[
  		194876,
  		1,
  		"𤾸"
  	],
  	[
  		194877,
  		1,
  		"𥁄"
  	],
  	[
  		194878,
  		1,
  		"㿼"
  	],
  	[
  		194879,
  		1,
  		"䀈"
  	],
  	[
  		194880,
  		1,
  		"直"
  	],
  	[
  		194881,
  		1,
  		"𥃳"
  	],
  	[
  		194882,
  		1,
  		"𥃲"
  	],
  	[
  		194883,
  		1,
  		"𥄙"
  	],
  	[
  		194884,
  		1,
  		"𥄳"
  	],
  	[
  		194885,
  		1,
  		"眞"
  	],
  	[
  		[
  			194886,
  			194887
  		],
  		1,
  		"真"
  	],
  	[
  		194888,
  		1,
  		"睊"
  	],
  	[
  		194889,
  		1,
  		"䀹"
  	],
  	[
  		194890,
  		1,
  		"瞋"
  	],
  	[
  		194891,
  		1,
  		"䁆"
  	],
  	[
  		194892,
  		1,
  		"䂖"
  	],
  	[
  		194893,
  		1,
  		"𥐝"
  	],
  	[
  		194894,
  		1,
  		"硎"
  	],
  	[
  		194895,
  		1,
  		"碌"
  	],
  	[
  		194896,
  		1,
  		"磌"
  	],
  	[
  		194897,
  		1,
  		"䃣"
  	],
  	[
  		194898,
  		1,
  		"𥘦"
  	],
  	[
  		194899,
  		1,
  		"祖"
  	],
  	[
  		194900,
  		1,
  		"𥚚"
  	],
  	[
  		194901,
  		1,
  		"𥛅"
  	],
  	[
  		194902,
  		1,
  		"福"
  	],
  	[
  		194903,
  		1,
  		"秫"
  	],
  	[
  		194904,
  		1,
  		"䄯"
  	],
  	[
  		194905,
  		1,
  		"穀"
  	],
  	[
  		194906,
  		1,
  		"穊"
  	],
  	[
  		194907,
  		1,
  		"穏"
  	],
  	[
  		194908,
  		1,
  		"𥥼"
  	],
  	[
  		[
  			194909,
  			194910
  		],
  		1,
  		"𥪧"
  	],
  	[
  		194911,
  		3
  	],
  	[
  		194912,
  		1,
  		"䈂"
  	],
  	[
  		194913,
  		1,
  		"𥮫"
  	],
  	[
  		194914,
  		1,
  		"篆"
  	],
  	[
  		194915,
  		1,
  		"築"
  	],
  	[
  		194916,
  		1,
  		"䈧"
  	],
  	[
  		194917,
  		1,
  		"𥲀"
  	],
  	[
  		194918,
  		1,
  		"糒"
  	],
  	[
  		194919,
  		1,
  		"䊠"
  	],
  	[
  		194920,
  		1,
  		"糨"
  	],
  	[
  		194921,
  		1,
  		"糣"
  	],
  	[
  		194922,
  		1,
  		"紀"
  	],
  	[
  		194923,
  		1,
  		"𥾆"
  	],
  	[
  		194924,
  		1,
  		"絣"
  	],
  	[
  		194925,
  		1,
  		"䌁"
  	],
  	[
  		194926,
  		1,
  		"緇"
  	],
  	[
  		194927,
  		1,
  		"縂"
  	],
  	[
  		194928,
  		1,
  		"繅"
  	],
  	[
  		194929,
  		1,
  		"䌴"
  	],
  	[
  		194930,
  		1,
  		"𦈨"
  	],
  	[
  		194931,
  		1,
  		"𦉇"
  	],
  	[
  		194932,
  		1,
  		"䍙"
  	],
  	[
  		194933,
  		1,
  		"𦋙"
  	],
  	[
  		194934,
  		1,
  		"罺"
  	],
  	[
  		194935,
  		1,
  		"𦌾"
  	],
  	[
  		194936,
  		1,
  		"羕"
  	],
  	[
  		194937,
  		1,
  		"翺"
  	],
  	[
  		194938,
  		1,
  		"者"
  	],
  	[
  		194939,
  		1,
  		"𦓚"
  	],
  	[
  		194940,
  		1,
  		"𦔣"
  	],
  	[
  		194941,
  		1,
  		"聠"
  	],
  	[
  		194942,
  		1,
  		"𦖨"
  	],
  	[
  		194943,
  		1,
  		"聰"
  	],
  	[
  		194944,
  		1,
  		"𣍟"
  	],
  	[
  		194945,
  		1,
  		"䏕"
  	],
  	[
  		194946,
  		1,
  		"育"
  	],
  	[
  		194947,
  		1,
  		"脃"
  	],
  	[
  		194948,
  		1,
  		"䐋"
  	],
  	[
  		194949,
  		1,
  		"脾"
  	],
  	[
  		194950,
  		1,
  		"媵"
  	],
  	[
  		194951,
  		1,
  		"𦞧"
  	],
  	[
  		194952,
  		1,
  		"𦞵"
  	],
  	[
  		194953,
  		1,
  		"𣎓"
  	],
  	[
  		194954,
  		1,
  		"𣎜"
  	],
  	[
  		194955,
  		1,
  		"舁"
  	],
  	[
  		194956,
  		1,
  		"舄"
  	],
  	[
  		194957,
  		1,
  		"辞"
  	],
  	[
  		194958,
  		1,
  		"䑫"
  	],
  	[
  		194959,
  		1,
  		"芑"
  	],
  	[
  		194960,
  		1,
  		"芋"
  	],
  	[
  		194961,
  		1,
  		"芝"
  	],
  	[
  		194962,
  		1,
  		"劳"
  	],
  	[
  		194963,
  		1,
  		"花"
  	],
  	[
  		194964,
  		1,
  		"芳"
  	],
  	[
  		194965,
  		1,
  		"芽"
  	],
  	[
  		194966,
  		1,
  		"苦"
  	],
  	[
  		194967,
  		1,
  		"𦬼"
  	],
  	[
  		194968,
  		1,
  		"若"
  	],
  	[
  		194969,
  		1,
  		"茝"
  	],
  	[
  		194970,
  		1,
  		"荣"
  	],
  	[
  		194971,
  		1,
  		"莭"
  	],
  	[
  		194972,
  		1,
  		"茣"
  	],
  	[
  		194973,
  		1,
  		"莽"
  	],
  	[
  		194974,
  		1,
  		"菧"
  	],
  	[
  		194975,
  		1,
  		"著"
  	],
  	[
  		194976,
  		1,
  		"荓"
  	],
  	[
  		194977,
  		1,
  		"菊"
  	],
  	[
  		194978,
  		1,
  		"菌"
  	],
  	[
  		194979,
  		1,
  		"菜"
  	],
  	[
  		194980,
  		1,
  		"𦰶"
  	],
  	[
  		194981,
  		1,
  		"𦵫"
  	],
  	[
  		194982,
  		1,
  		"𦳕"
  	],
  	[
  		194983,
  		1,
  		"䔫"
  	],
  	[
  		194984,
  		1,
  		"蓱"
  	],
  	[
  		194985,
  		1,
  		"蓳"
  	],
  	[
  		194986,
  		1,
  		"蔖"
  	],
  	[
  		194987,
  		1,
  		"𧏊"
  	],
  	[
  		194988,
  		1,
  		"蕤"
  	],
  	[
  		194989,
  		1,
  		"𦼬"
  	],
  	[
  		194990,
  		1,
  		"䕝"
  	],
  	[
  		194991,
  		1,
  		"䕡"
  	],
  	[
  		194992,
  		1,
  		"𦾱"
  	],
  	[
  		194993,
  		1,
  		"𧃒"
  	],
  	[
  		194994,
  		1,
  		"䕫"
  	],
  	[
  		194995,
  		1,
  		"虐"
  	],
  	[
  		194996,
  		1,
  		"虜"
  	],
  	[
  		194997,
  		1,
  		"虧"
  	],
  	[
  		194998,
  		1,
  		"虩"
  	],
  	[
  		194999,
  		1,
  		"蚩"
  	],
  	[
  		195000,
  		1,
  		"蚈"
  	],
  	[
  		195001,
  		1,
  		"蜎"
  	],
  	[
  		195002,
  		1,
  		"蛢"
  	],
  	[
  		195003,
  		1,
  		"蝹"
  	],
  	[
  		195004,
  		1,
  		"蜨"
  	],
  	[
  		195005,
  		1,
  		"蝫"
  	],
  	[
  		195006,
  		1,
  		"螆"
  	],
  	[
  		195007,
  		3
  	],
  	[
  		195008,
  		1,
  		"蟡"
  	],
  	[
  		195009,
  		1,
  		"蠁"
  	],
  	[
  		195010,
  		1,
  		"䗹"
  	],
  	[
  		195011,
  		1,
  		"衠"
  	],
  	[
  		195012,
  		1,
  		"衣"
  	],
  	[
  		195013,
  		1,
  		"𧙧"
  	],
  	[
  		195014,
  		1,
  		"裗"
  	],
  	[
  		195015,
  		1,
  		"裞"
  	],
  	[
  		195016,
  		1,
  		"䘵"
  	],
  	[
  		195017,
  		1,
  		"裺"
  	],
  	[
  		195018,
  		1,
  		"㒻"
  	],
  	[
  		195019,
  		1,
  		"𧢮"
  	],
  	[
  		195020,
  		1,
  		"𧥦"
  	],
  	[
  		195021,
  		1,
  		"䚾"
  	],
  	[
  		195022,
  		1,
  		"䛇"
  	],
  	[
  		195023,
  		1,
  		"誠"
  	],
  	[
  		195024,
  		1,
  		"諭"
  	],
  	[
  		195025,
  		1,
  		"變"
  	],
  	[
  		195026,
  		1,
  		"豕"
  	],
  	[
  		195027,
  		1,
  		"𧲨"
  	],
  	[
  		195028,
  		1,
  		"貫"
  	],
  	[
  		195029,
  		1,
  		"賁"
  	],
  	[
  		195030,
  		1,
  		"贛"
  	],
  	[
  		195031,
  		1,
  		"起"
  	],
  	[
  		195032,
  		1,
  		"𧼯"
  	],
  	[
  		195033,
  		1,
  		"𠠄"
  	],
  	[
  		195034,
  		1,
  		"跋"
  	],
  	[
  		195035,
  		1,
  		"趼"
  	],
  	[
  		195036,
  		1,
  		"跰"
  	],
  	[
  		195037,
  		1,
  		"𠣞"
  	],
  	[
  		195038,
  		1,
  		"軔"
  	],
  	[
  		195039,
  		1,
  		"輸"
  	],
  	[
  		195040,
  		1,
  		"𨗒"
  	],
  	[
  		195041,
  		1,
  		"𨗭"
  	],
  	[
  		195042,
  		1,
  		"邔"
  	],
  	[
  		195043,
  		1,
  		"郱"
  	],
  	[
  		195044,
  		1,
  		"鄑"
  	],
  	[
  		195045,
  		1,
  		"𨜮"
  	],
  	[
  		195046,
  		1,
  		"鄛"
  	],
  	[
  		195047,
  		1,
  		"鈸"
  	],
  	[
  		195048,
  		1,
  		"鋗"
  	],
  	[
  		195049,
  		1,
  		"鋘"
  	],
  	[
  		195050,
  		1,
  		"鉼"
  	],
  	[
  		195051,
  		1,
  		"鏹"
  	],
  	[
  		195052,
  		1,
  		"鐕"
  	],
  	[
  		195053,
  		1,
  		"𨯺"
  	],
  	[
  		195054,
  		1,
  		"開"
  	],
  	[
  		195055,
  		1,
  		"䦕"
  	],
  	[
  		195056,
  		1,
  		"閷"
  	],
  	[
  		195057,
  		1,
  		"𨵷"
  	],
  	[
  		195058,
  		1,
  		"䧦"
  	],
  	[
  		195059,
  		1,
  		"雃"
  	],
  	[
  		195060,
  		1,
  		"嶲"
  	],
  	[
  		195061,
  		1,
  		"霣"
  	],
  	[
  		195062,
  		1,
  		"𩅅"
  	],
  	[
  		195063,
  		1,
  		"𩈚"
  	],
  	[
  		195064,
  		1,
  		"䩮"
  	],
  	[
  		195065,
  		1,
  		"䩶"
  	],
  	[
  		195066,
  		1,
  		"韠"
  	],
  	[
  		195067,
  		1,
  		"𩐊"
  	],
  	[
  		195068,
  		1,
  		"䪲"
  	],
  	[
  		195069,
  		1,
  		"𩒖"
  	],
  	[
  		[
  			195070,
  			195071
  		],
  		1,
  		"頋"
  	],
  	[
  		195072,
  		1,
  		"頩"
  	],
  	[
  		195073,
  		1,
  		"𩖶"
  	],
  	[
  		195074,
  		1,
  		"飢"
  	],
  	[
  		195075,
  		1,
  		"䬳"
  	],
  	[
  		195076,
  		1,
  		"餩"
  	],
  	[
  		195077,
  		1,
  		"馧"
  	],
  	[
  		195078,
  		1,
  		"駂"
  	],
  	[
  		195079,
  		1,
  		"駾"
  	],
  	[
  		195080,
  		1,
  		"䯎"
  	],
  	[
  		195081,
  		1,
  		"𩬰"
  	],
  	[
  		195082,
  		1,
  		"鬒"
  	],
  	[
  		195083,
  		1,
  		"鱀"
  	],
  	[
  		195084,
  		1,
  		"鳽"
  	],
  	[
  		195085,
  		1,
  		"䳎"
  	],
  	[
  		195086,
  		1,
  		"䳭"
  	],
  	[
  		195087,
  		1,
  		"鵧"
  	],
  	[
  		195088,
  		1,
  		"𪃎"
  	],
  	[
  		195089,
  		1,
  		"䳸"
  	],
  	[
  		195090,
  		1,
  		"𪄅"
  	],
  	[
  		195091,
  		1,
  		"𪈎"
  	],
  	[
  		195092,
  		1,
  		"𪊑"
  	],
  	[
  		195093,
  		1,
  		"麻"
  	],
  	[
  		195094,
  		1,
  		"䵖"
  	],
  	[
  		195095,
  		1,
  		"黹"
  	],
  	[
  		195096,
  		1,
  		"黾"
  	],
  	[
  		195097,
  		1,
  		"鼅"
  	],
  	[
  		195098,
  		1,
  		"鼏"
  	],
  	[
  		195099,
  		1,
  		"鼖"
  	],
  	[
  		195100,
  		1,
  		"鼻"
  	],
  	[
  		195101,
  		1,
  		"𪘀"
  	],
  	[
  		[
  			195102,
  			196605
  		],
  		3
  	],
  	[
  		[
  			196606,
  			196607
  		],
  		3
  	],
  	[
  		[
  			196608,
  			201546
  		],
  		2
  	],
  	[
  		[
  			201547,
  			262141
  		],
  		3
  	],
  	[
  		[
  			262142,
  			262143
  		],
  		3
  	],
  	[
  		[
  			262144,
  			327677
  		],
  		3
  	],
  	[
  		[
  			327678,
  			327679
  		],
  		3
  	],
  	[
  		[
  			327680,
  			393213
  		],
  		3
  	],
  	[
  		[
  			393214,
  			393215
  		],
  		3
  	],
  	[
  		[
  			393216,
  			458749
  		],
  		3
  	],
  	[
  		[
  			458750,
  			458751
  		],
  		3
  	],
  	[
  		[
  			458752,
  			524285
  		],
  		3
  	],
  	[
  		[
  			524286,
  			524287
  		],
  		3
  	],
  	[
  		[
  			524288,
  			589821
  		],
  		3
  	],
  	[
  		[
  			589822,
  			589823
  		],
  		3
  	],
  	[
  		[
  			589824,
  			655357
  		],
  		3
  	],
  	[
  		[
  			655358,
  			655359
  		],
  		3
  	],
  	[
  		[
  			655360,
  			720893
  		],
  		3
  	],
  	[
  		[
  			720894,
  			720895
  		],
  		3
  	],
  	[
  		[
  			720896,
  			786429
  		],
  		3
  	],
  	[
  		[
  			786430,
  			786431
  		],
  		3
  	],
  	[
  		[
  			786432,
  			851965
  		],
  		3
  	],
  	[
  		[
  			851966,
  			851967
  		],
  		3
  	],
  	[
  		[
  			851968,
  			917501
  		],
  		3
  	],
  	[
  		[
  			917502,
  			917503
  		],
  		3
  	],
  	[
  		917504,
  		3
  	],
  	[
  		917505,
  		3
  	],
  	[
  		[
  			917506,
  			917535
  		],
  		3
  	],
  	[
  		[
  			917536,
  			917631
  		],
  		3
  	],
  	[
  		[
  			917632,
  			917759
  		],
  		3
  	],
  	[
  		[
  			917760,
  			917999
  		],
  		7
  	],
  	[
  		[
  			918000,
  			983037
  		],
  		3
  	],
  	[
  		[
  			983038,
  			983039
  		],
  		3
  	],
  	[
  		[
  			983040,
  			1048573
  		],
  		3
  	],
  	[
  		[
  			1048574,
  			1048575
  		],
  		3
  	],
  	[
  		[
  			1048576,
  			1114109
  		],
  		3
  	],
  	[
  		[
  			1114110,
  			1114111
  		],
  		3
  	]
  ];

  var STATUS_MAPPING$1 = {
    mapped: 1,
    valid: 2,
    disallowed: 3,
    disallowed_STD3_valid: 4, // eslint-disable-line camelcase
    disallowed_STD3_mapped: 5, // eslint-disable-line camelcase
    deviation: 6,
    ignored: 7
  };

  var statusMapping = {
  	STATUS_MAPPING: STATUS_MAPPING$1
  };

  var punycode = /*@__PURE__*/getAugmentedNamespace(punycode_es6);

  const { STATUS_MAPPING } = statusMapping;

  function containsNonASCII(str) {
    return /[^\x00-\x7F]/.test(str);
  }

  function findStatus(val, { useSTD3ASCIIRules }) {
    let start = 0;
    let end = mappingTable.length - 1;

    while (start <= end) {
      const mid = Math.floor((start + end) / 2);

      const target = mappingTable[mid];
      const min = Array.isArray(target[0]) ? target[0][0] : target[0];
      const max = Array.isArray(target[0]) ? target[0][1] : target[0];

      if (min <= val && max >= val) {
        if (useSTD3ASCIIRules &&
            (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {
          return [STATUS_MAPPING.disallowed, ...target.slice(2)];
        } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {
          return [STATUS_MAPPING.valid, ...target.slice(2)];
        } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {
          return [STATUS_MAPPING.mapped, ...target.slice(2)];
        }

        return target.slice(1);
      } else if (min > val) {
        end = mid - 1;
      } else {
        start = mid + 1;
      }
    }

    return null;
  }

  function mapChars(domainName, { useSTD3ASCIIRules, processingOption }) {
    let hasError = false;
    let processed = "";

    for (const ch of domainName) {
      const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });

      switch (status) {
        case STATUS_MAPPING.disallowed:
          hasError = true;
          processed += ch;
          break;
        case STATUS_MAPPING.ignored:
          break;
        case STATUS_MAPPING.mapped:
          processed += mapping;
          break;
        case STATUS_MAPPING.deviation:
          if (processingOption === "transitional") {
            processed += mapping;
          } else {
            processed += ch;
          }
          break;
        case STATUS_MAPPING.valid:
          processed += ch;
          break;
      }
    }

    return {
      string: processed,
      error: hasError
    };
  }

  function validateLabel(label, { checkHyphens, checkBidi, checkJoiners, processingOption, useSTD3ASCIIRules }) {
    if (label.normalize("NFC") !== label) {
      return false;
    }

    const codePoints = Array.from(label);

    if (checkHyphens) {
      if ((codePoints[2] === "-" && codePoints[3] === "-") ||
          (label.startsWith("-") || label.endsWith("-"))) {
        return false;
      }
    }

    if (label.includes(".") ||
        (codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0]))) {
      return false;
    }

    for (const ch of codePoints) {
      const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });
      if ((processingOption === "transitional" && status !== STATUS_MAPPING.valid) ||
          (processingOption === "nontransitional" &&
           status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation)) {
        return false;
      }
    }

    // https://tools.ietf.org/html/rfc5892#appendix-A
    if (checkJoiners) {
      let last = 0;
      for (const [i, ch] of codePoints.entries()) {
        if (ch === "\u200C" || ch === "\u200D") {
          if (i > 0) {
            if (regexes.combiningClassVirama.test(codePoints[i - 1])) {
              continue;
            }
            if (ch === "\u200C") {
              // TODO: make this more efficient
              const next = codePoints.indexOf("\u200C", i + 1);
              const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);
              if (regexes.validZWNJ.test(test.join(""))) {
                last = i + 1;
                continue;
              }
            }
          }
          return false;
        }
      }
    }

    // https://tools.ietf.org/html/rfc5893#section-2
    if (checkBidi) {
      let rtl;

      // 1
      if (regexes.bidiS1LTR.test(codePoints[0])) {
        rtl = false;
      } else if (regexes.bidiS1RTL.test(codePoints[0])) {
        rtl = true;
      } else {
        return false;
      }

      if (rtl) {
        // 2-4
        if (!regexes.bidiS2.test(label) ||
            !regexes.bidiS3.test(label) ||
            (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {
          return false;
        }
      } else if (!regexes.bidiS5.test(label) ||
                 !regexes.bidiS6.test(label)) { // 5-6
        return false;
      }
    }

    return true;
  }

  function isBidiDomain(labels) {
    const domain = labels.map(label => {
      if (label.startsWith("xn--")) {
        try {
          return punycode.decode(label.substring(4));
        } catch (err) {
          return "";
        }
      }
      return label;
    }).join(".");
    return regexes.bidiDomain.test(domain);
  }

  function processing(domainName, options) {
    const { processingOption } = options;

    // 1. Map.
    let { string, error } = mapChars(domainName, options);

    // 2. Normalize.
    string = string.normalize("NFC");

    // 3. Break.
    const labels = string.split(".");
    const isBidi = isBidiDomain(labels);

    // 4. Convert/Validate.
    for (const [i, origLabel] of labels.entries()) {
      let label = origLabel;
      let curProcessing = processingOption;
      if (label.startsWith("xn--")) {
        try {
          label = punycode.decode(label.substring(4));
          labels[i] = label;
        } catch (err) {
          error = true;
          continue;
        }
        curProcessing = "nontransitional";
      }

      // No need to validate if we already know there is an error.
      if (error) {
        continue;
      }
      const validation = validateLabel(label, Object.assign({}, options, {
        processingOption: curProcessing,
        checkBidi: options.checkBidi && isBidi
      }));
      if (!validation) {
        error = true;
      }
    }

    return {
      string: labels.join("."),
      error
    };
  }

  function toASCII(domainName, {
    checkHyphens = false,
    checkBidi = false,
    checkJoiners = false,
    useSTD3ASCIIRules = false,
    processingOption = "nontransitional",
    verifyDNSLength = false
  } = {}) {
    if (processingOption !== "transitional" && processingOption !== "nontransitional") {
      throw new RangeError("processingOption must be either transitional or nontransitional");
    }

    const result = processing(domainName, {
      processingOption,
      checkHyphens,
      checkBidi,
      checkJoiners,
      useSTD3ASCIIRules
    });
    let labels = result.string.split(".");
    labels = labels.map(l => {
      if (containsNonASCII(l)) {
        try {
          return "xn--" + punycode.encode(l);
        } catch (e) {
          result.error = true;
        }
      }
      return l;
    });

    if (verifyDNSLength) {
      const total = labels.join(".").length;
      if (total > 253 || total === 0) {
        result.error = true;
      }

      for (let i = 0; i < labels.length; ++i) {
        if (labels[i].length > 63 || labels[i].length === 0) {
          result.error = true;
          break;
        }
      }
    }

    if (result.error) {
      return null;
    }
    return labels.join(".");
  }

  function toUnicode(domainName, {
    checkHyphens = false,
    checkBidi = false,
    checkJoiners = false,
    useSTD3ASCIIRules = false,
    processingOption = "nontransitional"
  } = {}) {
    const result = processing(domainName, {
      processingOption,
      checkHyphens,
      checkBidi,
      checkJoiners,
      useSTD3ASCIIRules
    });

    return {
      domain: result.string,
      error: result.error
    };
  }

  var tr46 = {
    toASCII,
    toUnicode
  };

  // Note that we take code points as JS numbers, not JS strings.

  function isASCIIDigit(c) {
    return c >= 0x30 && c <= 0x39;
  }

  function isASCIIAlpha(c) {
    return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);
  }

  function isASCIIAlphanumeric(c) {
    return isASCIIAlpha(c) || isASCIIDigit(c);
  }

  function isASCIIHex$1(c) {
    return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);
  }

  var infra = {
    isASCIIDigit,
    isASCIIAlpha,
    isASCIIAlphanumeric,
    isASCIIHex: isASCIIHex$1
  };

  var encodingIndexes = createCommonjsModule(function (module) {
  (function(global) {

    if (module.exports) {
      module.exports = global;
    }

    global["encoding-indexes"] =
  {
    "big5":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,17392,19506,17923,17830,17784,160359,19831,17843,162993,19682,163013,15253,18230,18244,19527,19520,148159,144919,160594,159371,159954,19543,172881,18255,17882,19589,162924,19719,19108,18081,158499,29221,154196,137827,146950,147297,26189,22267,null,32149,22813,166841,15860,38708,162799,23515,138590,23204,13861,171696,23249,23479,23804,26478,34195,170309,29793,29853,14453,138579,145054,155681,16108,153822,15093,31484,40855,147809,166157,143850,133770,143966,17162,33924,40854,37935,18736,34323,22678,38730,37400,31184,31282,26208,27177,34973,29772,31685,26498,31276,21071,36934,13542,29636,155065,29894,40903,22451,18735,21580,16689,145038,22552,31346,162661,35727,18094,159368,16769,155033,31662,140476,40904,140481,140489,140492,40905,34052,144827,16564,40906,17633,175615,25281,28782,40907,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,12736,12737,12738,12739,12740,131340,12741,131281,131277,12742,12743,131275,139240,12744,131274,12745,12746,12747,12748,131342,12749,12750,256,193,461,192,274,201,282,200,332,211,465,210,null,7870,null,7872,202,257,225,462,224,593,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,null,7871,null,7873,234,609,9178,9179,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,172969,135493,null,25866,null,null,20029,28381,40270,37343,null,null,161589,25745,20250,20264,20392,20822,20852,20892,20964,21153,21160,21307,21326,21457,21464,22242,22768,22788,22791,22834,22836,23398,23454,23455,23706,24198,24635,25993,26622,26628,26725,27982,28860,30005,32420,32428,32442,32455,32463,32479,32518,32567,33402,33487,33647,35270,35774,35810,36710,36711,36718,29713,31996,32205,26950,31433,21031,null,null,null,null,37260,30904,37214,32956,null,36107,33014,133607,null,null,32927,40647,19661,40393,40460,19518,171510,159758,40458,172339,13761,null,28314,33342,29977,null,18705,39532,39567,40857,31111,164972,138698,132560,142054,20004,20097,20096,20103,20159,20203,20279,13388,20413,15944,20483,20616,13437,13459,13477,20870,22789,20955,20988,20997,20105,21113,21136,21287,13767,21417,13649,21424,13651,21442,21539,13677,13682,13953,21651,21667,21684,21689,21712,21743,21784,21795,21800,13720,21823,13733,13759,21975,13765,163204,21797,null,134210,134421,151851,21904,142534,14828,131905,36422,150968,169189,16467,164030,30586,142392,14900,18389,164189,158194,151018,25821,134524,135092,134357,135412,25741,36478,134806,134155,135012,142505,164438,148691,null,134470,170573,164073,18420,151207,142530,39602,14951,169460,16365,13574,152263,169940,161992,142660,40302,38933,null,17369,155813,25780,21731,142668,142282,135287,14843,135279,157402,157462,162208,25834,151634,134211,36456,139681,166732,132913,null,18443,131497,16378,22643,142733,null,148936,132348,155799,134988,134550,21881,16571,17338,null,19124,141926,135325,33194,39157,134556,25465,14846,141173,36288,22177,25724,15939,null,173569,134665,142031,142537,null,135368,145858,14738,14854,164507,13688,155209,139463,22098,134961,142514,169760,13500,27709,151099,null,null,161140,142987,139784,173659,167117,134778,134196,157724,32659,135375,141315,141625,13819,152035,134796,135053,134826,16275,134960,134471,135503,134732,null,134827,134057,134472,135360,135485,16377,140950,25650,135085,144372,161337,142286,134526,134527,142417,142421,14872,134808,135367,134958,173618,158544,167122,167321,167114,38314,21708,33476,21945,null,171715,39974,39606,161630,142830,28992,33133,33004,23580,157042,33076,14231,21343,164029,37302,134906,134671,134775,134907,13789,151019,13833,134358,22191,141237,135369,134672,134776,135288,135496,164359,136277,134777,151120,142756,23124,135197,135198,135413,135414,22428,134673,161428,164557,135093,134779,151934,14083,135094,135552,152280,172733,149978,137274,147831,164476,22681,21096,13850,153405,31666,23400,18432,19244,40743,18919,39967,39821,154484,143677,22011,13810,22153,20008,22786,138177,194680,38737,131206,20059,20155,13630,23587,24401,24516,14586,25164,25909,27514,27701,27706,28780,29227,20012,29357,149737,32594,31035,31993,32595,156266,13505,null,156491,32770,32896,157202,158033,21341,34916,35265,161970,35744,36125,38021,38264,38271,38376,167439,38886,39029,39118,39134,39267,170000,40060,40479,40644,27503,63751,20023,131207,38429,25143,38050,null,20539,28158,171123,40870,15817,34959,147790,28791,23797,19232,152013,13657,154928,24866,166450,36775,37366,29073,26393,29626,144001,172295,15499,137600,19216,30948,29698,20910,165647,16393,27235,172730,16931,34319,133743,31274,170311,166634,38741,28749,21284,139390,37876,30425,166371,40871,30685,20131,20464,20668,20015,20247,40872,21556,32139,22674,22736,138678,24210,24217,24514,141074,25995,144377,26905,27203,146531,27903,null,29184,148741,29580,16091,150035,23317,29881,35715,154788,153237,31379,31724,31939,32364,33528,34199,40873,34960,40874,36537,40875,36815,34143,39392,37409,40876,167353,136255,16497,17058,23066,null,null,null,39016,26475,17014,22333,null,34262,149883,33471,160013,19585,159092,23931,158485,159678,40877,40878,23446,40879,26343,32347,28247,31178,15752,17603,143958,141206,17306,17718,null,23765,146202,35577,23672,15634,144721,23928,40882,29015,17752,147692,138787,19575,14712,13386,131492,158785,35532,20404,131641,22975,33132,38998,170234,24379,134047,null,139713,166253,16642,18107,168057,16135,40883,172469,16632,14294,18167,158790,16764,165554,160767,17773,14548,152730,17761,17691,19849,19579,19830,17898,16328,150287,13921,17630,17597,16877,23870,23880,23894,15868,14351,23972,23993,14368,14392,24130,24253,24357,24451,14600,14612,14655,14669,24791,24893,23781,14729,25015,25017,25039,14776,25132,25232,25317,25368,14840,22193,14851,25570,25595,25607,25690,14923,25792,23829,22049,40863,14999,25990,15037,26111,26195,15090,26258,15138,26390,15170,26532,26624,15192,26698,26756,15218,15217,15227,26889,26947,29276,26980,27039,27013,15292,27094,15325,27237,27252,27249,27266,15340,27289,15346,27307,27317,27348,27382,27521,27585,27626,27765,27818,15563,27906,27910,27942,28033,15599,28068,28081,28181,28184,28201,28294,166336,28347,28386,28378,40831,28392,28393,28452,28468,15686,147265,28545,28606,15722,15733,29111,23705,15754,28716,15761,28752,28756,28783,28799,28809,131877,17345,13809,134872,147159,22462,159443,28990,153568,13902,27042,166889,23412,31305,153825,169177,31333,31357,154028,31419,31408,31426,31427,29137,156813,16842,31450,31453,31466,16879,21682,154625,31499,31573,31529,152334,154878,31650,31599,33692,154548,158847,31696,33825,31634,31672,154912,15789,154725,33938,31738,31750,31797,154817,31812,31875,149634,31910,26237,148856,31945,31943,31974,31860,31987,31989,31950,32359,17693,159300,32093,159446,29837,32137,32171,28981,32179,32210,147543,155689,32228,15635,32245,137209,32229,164717,32285,155937,155994,32366,32402,17195,37996,32295,32576,32577,32583,31030,156368,39393,32663,156497,32675,136801,131176,17756,145254,17667,164666,32762,156809,32773,32776,32797,32808,32815,172167,158915,32827,32828,32865,141076,18825,157222,146915,157416,26405,32935,166472,33031,33050,22704,141046,27775,156824,151480,25831,136330,33304,137310,27219,150117,150165,17530,33321,133901,158290,146814,20473,136445,34018,33634,158474,149927,144688,137075,146936,33450,26907,194964,16859,34123,33488,33562,134678,137140,14017,143741,144730,33403,33506,33560,147083,159139,158469,158615,144846,15807,33565,21996,33669,17675,159141,33708,33729,33747,13438,159444,27223,34138,13462,159298,143087,33880,154596,33905,15827,17636,27303,33866,146613,31064,33960,158614,159351,159299,34014,33807,33681,17568,33939,34020,154769,16960,154816,17731,34100,23282,159385,17703,34163,17686,26559,34326,165413,165435,34241,159880,34306,136578,159949,194994,17770,34344,13896,137378,21495,160666,34430,34673,172280,34798,142375,34737,34778,34831,22113,34412,26710,17935,34885,34886,161248,146873,161252,34910,34972,18011,34996,34997,25537,35013,30583,161551,35207,35210,35238,35241,35239,35260,166437,35303,162084,162493,35484,30611,37374,35472,162393,31465,162618,147343,18195,162616,29052,35596,35615,152624,152933,35647,35660,35661,35497,150138,35728,35739,35503,136927,17941,34895,35995,163156,163215,195028,14117,163155,36054,163224,163261,36114,36099,137488,36059,28764,36113,150729,16080,36215,36265,163842,135188,149898,15228,164284,160012,31463,36525,36534,36547,37588,36633,36653,164709,164882,36773,37635,172703,133712,36787,18730,166366,165181,146875,24312,143970,36857,172052,165564,165121,140069,14720,159447,36919,165180,162494,36961,165228,165387,37032,165651,37060,165606,37038,37117,37223,15088,37289,37316,31916,166195,138889,37390,27807,37441,37474,153017,37561,166598,146587,166668,153051,134449,37676,37739,166625,166891,28815,23235,166626,166629,18789,37444,166892,166969,166911,37747,37979,36540,38277,38310,37926,38304,28662,17081,140922,165592,135804,146990,18911,27676,38523,38550,16748,38563,159445,25050,38582,30965,166624,38589,21452,18849,158904,131700,156688,168111,168165,150225,137493,144138,38705,34370,38710,18959,17725,17797,150249,28789,23361,38683,38748,168405,38743,23370,168427,38751,37925,20688,143543,143548,38793,38815,38833,38846,38848,38866,38880,152684,38894,29724,169011,38911,38901,168989,162170,19153,38964,38963,38987,39014,15118,160117,15697,132656,147804,153350,39114,39095,39112,39111,19199,159015,136915,21936,39137,39142,39148,37752,39225,150057,19314,170071,170245,39413,39436,39483,39440,39512,153381,14020,168113,170965,39648,39650,170757,39668,19470,39700,39725,165376,20532,39732,158120,14531,143485,39760,39744,171326,23109,137315,39822,148043,39938,39935,39948,171624,40404,171959,172434,172459,172257,172323,172511,40318,40323,172340,40462,26760,40388,139611,172435,172576,137531,172595,40249,172217,172724,40592,40597,40606,40610,19764,40618,40623,148324,40641,15200,14821,15645,20274,14270,166955,40706,40712,19350,37924,159138,40727,40726,40761,22175,22154,40773,39352,168075,38898,33919,40802,40809,31452,40846,29206,19390,149877,149947,29047,150008,148296,150097,29598,166874,137466,31135,166270,167478,37737,37875,166468,37612,37761,37835,166252,148665,29207,16107,30578,31299,28880,148595,148472,29054,137199,28835,137406,144793,16071,137349,152623,137208,14114,136955,137273,14049,137076,137425,155467,14115,136896,22363,150053,136190,135848,136134,136374,34051,145062,34051,33877,149908,160101,146993,152924,147195,159826,17652,145134,170397,159526,26617,14131,15381,15847,22636,137506,26640,16471,145215,147681,147595,147727,158753,21707,22174,157361,22162,135135,134056,134669,37830,166675,37788,20216,20779,14361,148534,20156,132197,131967,20299,20362,153169,23144,131499,132043,14745,131850,132116,13365,20265,131776,167603,131701,35546,131596,20120,20685,20749,20386,20227,150030,147082,20290,20526,20588,20609,20428,20453,20568,20732,20825,20827,20829,20830,28278,144789,147001,147135,28018,137348,147081,20904,20931,132576,17629,132259,132242,132241,36218,166556,132878,21081,21156,133235,21217,37742,18042,29068,148364,134176,149932,135396,27089,134685,29817,16094,29849,29716,29782,29592,19342,150204,147597,21456,13700,29199,147657,21940,131909,21709,134086,22301,37469,38644,37734,22493,22413,22399,13886,22731,23193,166470,136954,137071,136976,23084,22968,37519,23166,23247,23058,153926,137715,137313,148117,14069,27909,29763,23073,155267,23169,166871,132115,37856,29836,135939,28933,18802,37896,166395,37821,14240,23582,23710,24158,24136,137622,137596,146158,24269,23375,137475,137476,14081,137376,14045,136958,14035,33066,166471,138682,144498,166312,24332,24334,137511,137131,23147,137019,23364,34324,161277,34912,24702,141408,140843,24539,16056,140719,140734,168072,159603,25024,131134,131142,140827,24985,24984,24693,142491,142599,149204,168269,25713,149093,142186,14889,142114,144464,170218,142968,25399,173147,25782,25393,25553,149987,142695,25252,142497,25659,25963,26994,15348,143502,144045,149897,144043,21773,144096,137433,169023,26318,144009,143795,15072,16784,152964,166690,152975,136956,152923,152613,30958,143619,137258,143924,13412,143887,143746,148169,26254,159012,26219,19347,26160,161904,138731,26211,144082,144097,26142,153714,14545,145466,145340,15257,145314,144382,29904,15254,26511,149034,26806,26654,15300,27326,14435,145365,148615,27187,27218,27337,27397,137490,25873,26776,27212,15319,27258,27479,147392,146586,37792,37618,166890,166603,37513,163870,166364,37991,28069,28427,149996,28007,147327,15759,28164,147516,23101,28170,22599,27940,30786,28987,148250,148086,28913,29264,29319,29332,149391,149285,20857,150180,132587,29818,147192,144991,150090,149783,155617,16134,16049,150239,166947,147253,24743,16115,29900,29756,37767,29751,17567,159210,17745,30083,16227,150745,150790,16216,30037,30323,173510,15129,29800,166604,149931,149902,15099,15821,150094,16127,149957,149747,37370,22322,37698,166627,137316,20703,152097,152039,30584,143922,30478,30479,30587,149143,145281,14942,149744,29752,29851,16063,150202,150215,16584,150166,156078,37639,152961,30750,30861,30856,30930,29648,31065,161601,153315,16654,31131,33942,31141,27181,147194,31290,31220,16750,136934,16690,37429,31217,134476,149900,131737,146874,137070,13719,21867,13680,13994,131540,134157,31458,23129,141045,154287,154268,23053,131675,30960,23082,154566,31486,16889,31837,31853,16913,154547,155324,155302,31949,150009,137136,31886,31868,31918,27314,32220,32263,32211,32590,156257,155996,162632,32151,155266,17002,158581,133398,26582,131150,144847,22468,156690,156664,149858,32733,31527,133164,154345,154947,31500,155150,39398,34373,39523,27164,144447,14818,150007,157101,39455,157088,33920,160039,158929,17642,33079,17410,32966,33033,33090,157620,39107,158274,33378,33381,158289,33875,159143,34320,160283,23174,16767,137280,23339,137377,23268,137432,34464,195004,146831,34861,160802,23042,34926,20293,34951,35007,35046,35173,35149,153219,35156,161669,161668,166901,166873,166812,166393,16045,33955,18165,18127,14322,35389,35356,169032,24397,37419,148100,26068,28969,28868,137285,40301,35999,36073,163292,22938,30659,23024,17262,14036,36394,36519,150537,36656,36682,17140,27736,28603,140065,18587,28537,28299,137178,39913,14005,149807,37051,37015,21873,18694,37307,37892,166475,16482,166652,37927,166941,166971,34021,35371,38297,38311,38295,38294,167220,29765,16066,149759,150082,148458,16103,143909,38543,167655,167526,167525,16076,149997,150136,147438,29714,29803,16124,38721,168112,26695,18973,168083,153567,38749,37736,166281,166950,166703,156606,37562,23313,35689,18748,29689,147995,38811,38769,39224,134950,24001,166853,150194,38943,169178,37622,169431,37349,17600,166736,150119,166756,39132,166469,16128,37418,18725,33812,39227,39245,162566,15869,39323,19311,39338,39516,166757,153800,27279,39457,23294,39471,170225,19344,170312,39356,19389,19351,37757,22642,135938,22562,149944,136424,30788,141087,146872,26821,15741,37976,14631,24912,141185,141675,24839,40015,40019,40059,39989,39952,39807,39887,171565,39839,172533,172286,40225,19630,147716,40472,19632,40204,172468,172269,172275,170287,40357,33981,159250,159711,158594,34300,17715,159140,159364,159216,33824,34286,159232,145367,155748,31202,144796,144960,18733,149982,15714,37851,37566,37704,131775,30905,37495,37965,20452,13376,36964,152925,30781,30804,30902,30795,137047,143817,149825,13978,20338,28634,28633,28702,28702,21524,147893,22459,22771,22410,40214,22487,28980,13487,147884,29163,158784,151447,23336,137141,166473,24844,23246,23051,17084,148616,14124,19323,166396,37819,37816,137430,134941,33906,158912,136211,148218,142374,148417,22932,146871,157505,32168,155995,155812,149945,149899,166394,37605,29666,16105,29876,166755,137375,16097,150195,27352,29683,29691,16086,150078,150164,137177,150118,132007,136228,149989,29768,149782,28837,149878,37508,29670,37727,132350,37681,166606,166422,37766,166887,153045,18741,166530,29035,149827,134399,22180,132634,134123,134328,21762,31172,137210,32254,136898,150096,137298,17710,37889,14090,166592,149933,22960,137407,137347,160900,23201,14050,146779,14000,37471,23161,166529,137314,37748,15565,133812,19094,14730,20724,15721,15692,136092,29045,17147,164376,28175,168164,17643,27991,163407,28775,27823,15574,147437,146989,28162,28428,15727,132085,30033,14012,13512,18048,16090,18545,22980,37486,18750,36673,166940,158656,22546,22472,14038,136274,28926,148322,150129,143331,135856,140221,26809,26983,136088,144613,162804,145119,166531,145366,144378,150687,27162,145069,158903,33854,17631,17614,159014,159057,158850,159710,28439,160009,33597,137018,33773,158848,159827,137179,22921,23170,137139,23137,23153,137477,147964,14125,23023,137020,14023,29070,37776,26266,148133,23150,23083,148115,27179,147193,161590,148571,148170,28957,148057,166369,20400,159016,23746,148686,163405,148413,27148,148054,135940,28838,28979,148457,15781,27871,194597,150095,32357,23019,23855,15859,24412,150109,137183,32164,33830,21637,146170,144128,131604,22398,133333,132633,16357,139166,172726,28675,168283,23920,29583,31955,166489,168992,20424,32743,29389,29456,162548,29496,29497,153334,29505,29512,16041,162584,36972,29173,149746,29665,33270,16074,30476,16081,27810,22269,29721,29726,29727,16098,16112,16116,16122,29907,16142,16211,30018,30061,30066,30093,16252,30152,30172,16320,30285,16343,30324,16348,30330,151388,29064,22051,35200,22633,16413,30531,16441,26465,16453,13787,30616,16490,16495,23646,30654,30667,22770,30744,28857,30748,16552,30777,30791,30801,30822,33864,152885,31027,26627,31026,16643,16649,31121,31129,36795,31238,36796,16743,31377,16818,31420,33401,16836,31439,31451,16847,20001,31586,31596,31611,31762,31771,16992,17018,31867,31900,17036,31928,17044,31981,36755,28864,134351,32207,32212,32208,32253,32686,32692,29343,17303,32800,32805,31545,32814,32817,32852,15820,22452,28832,32951,33001,17389,33036,29482,33038,33042,30048,33044,17409,15161,33110,33113,33114,17427,22586,33148,33156,17445,33171,17453,33189,22511,33217,33252,33364,17551,33446,33398,33482,33496,33535,17584,33623,38505,27018,33797,28917,33892,24803,33928,17668,33982,34017,34040,34064,34104,34130,17723,34159,34160,34272,17783,34418,34450,34482,34543,38469,34699,17926,17943,34990,35071,35108,35143,35217,162151,35369,35384,35476,35508,35921,36052,36082,36124,18328,22623,36291,18413,20206,36410,21976,22356,36465,22005,36528,18487,36558,36578,36580,36589,36594,36791,36801,36810,36812,36915,39364,18605,39136,37395,18718,37416,37464,37483,37553,37550,37567,37603,37611,37619,37620,37629,37699,37764,37805,18757,18769,40639,37911,21249,37917,37933,37950,18794,37972,38009,38189,38306,18855,38388,38451,18917,26528,18980,38720,18997,38834,38850,22100,19172,24808,39097,19225,39153,22596,39182,39193,20916,39196,39223,39234,39261,39266,19312,39365,19357,39484,39695,31363,39785,39809,39901,39921,39924,19565,39968,14191,138178,40265,39994,40702,22096,40339,40381,40384,40444,38134,36790,40571,40620,40625,40637,40646,38108,40674,40689,40696,31432,40772,131220,131767,132000,26906,38083,22956,132311,22592,38081,14265,132565,132629,132726,136890,22359,29043,133826,133837,134079,21610,194619,134091,21662,134139,134203,134227,134245,134268,24807,134285,22138,134325,134365,134381,134511,134578,134600,26965,39983,34725,134660,134670,134871,135056,134957,134771,23584,135100,24075,135260,135247,135286,26398,135291,135304,135318,13895,135359,135379,135471,135483,21348,33965,135907,136053,135990,35713,136567,136729,137155,137159,20088,28859,137261,137578,137773,137797,138282,138352,138412,138952,25283,138965,139029,29080,26709,139333,27113,14024,139900,140247,140282,141098,141425,141647,33533,141671,141715,142037,35237,142056,36768,142094,38840,142143,38983,39613,142412,null,142472,142519,154600,142600,142610,142775,142741,142914,143220,143308,143411,143462,144159,144350,24497,26184,26303,162425,144743,144883,29185,149946,30679,144922,145174,32391,131910,22709,26382,26904,146087,161367,155618,146961,147129,161278,139418,18640,19128,147737,166554,148206,148237,147515,148276,148374,150085,132554,20946,132625,22943,138920,15294,146687,148484,148694,22408,149108,14747,149295,165352,170441,14178,139715,35678,166734,39382,149522,149755,150037,29193,150208,134264,22885,151205,151430,132985,36570,151596,21135,22335,29041,152217,152601,147274,150183,21948,152646,152686,158546,37332,13427,152895,161330,152926,18200,152930,152934,153543,149823,153693,20582,13563,144332,24798,153859,18300,166216,154286,154505,154630,138640,22433,29009,28598,155906,162834,36950,156082,151450,35682,156674,156746,23899,158711,36662,156804,137500,35562,150006,156808,147439,156946,19392,157119,157365,141083,37989,153569,24981,23079,194765,20411,22201,148769,157436,20074,149812,38486,28047,158909,13848,35191,157593,157806,156689,157790,29151,157895,31554,168128,133649,157990,37124,158009,31301,40432,158202,39462,158253,13919,156777,131105,31107,158260,158555,23852,144665,33743,158621,18128,158884,30011,34917,159150,22710,14108,140685,159819,160205,15444,160384,160389,37505,139642,160395,37680,160486,149968,27705,38047,160848,134904,34855,35061,141606,164979,137137,28344,150058,137248,14756,14009,23568,31203,17727,26294,171181,170148,35139,161740,161880,22230,16607,136714,14753,145199,164072,136133,29101,33638,162269,168360,23143,19639,159919,166315,162301,162314,162571,163174,147834,31555,31102,163849,28597,172767,27139,164632,21410,159239,37823,26678,38749,164207,163875,158133,136173,143919,163912,23941,166960,163971,22293,38947,166217,23979,149896,26046,27093,21458,150181,147329,15377,26422,163984,164084,164142,139169,164175,164233,164271,164378,164614,164655,164746,13770,164968,165546,18682,25574,166230,30728,37461,166328,17394,166375,17375,166376,166726,166868,23032,166921,36619,167877,168172,31569,168208,168252,15863,168286,150218,36816,29327,22155,169191,169449,169392,169400,169778,170193,170313,170346,170435,170536,170766,171354,171419,32415,171768,171811,19620,38215,172691,29090,172799,19857,36882,173515,19868,134300,36798,21953,36794,140464,36793,150163,17673,32383,28502,27313,20202,13540,166700,161949,14138,36480,137205,163876,166764,166809,162366,157359,15851,161365,146615,153141,153942,20122,155265,156248,22207,134765,36366,23405,147080,150686,25566,25296,137206,137339,25904,22061,154698,21530,152337,15814,171416,19581,22050,22046,32585,155352,22901,146752,34672,19996,135146,134473,145082,33047,40286,36120,30267,40005,30286,30649,37701,21554,33096,33527,22053,33074,33816,32957,21994,31074,22083,21526,134813,13774,22021,22001,26353,164578,13869,30004,22000,21946,21655,21874,134209,134294,24272,151880,134774,142434,134818,40619,32090,21982,135285,25245,38765,21652,36045,29174,37238,25596,25529,25598,21865,142147,40050,143027,20890,13535,134567,20903,21581,21790,21779,30310,36397,157834,30129,32950,34820,34694,35015,33206,33820,135361,17644,29444,149254,23440,33547,157843,22139,141044,163119,147875,163187,159440,160438,37232,135641,37384,146684,173737,134828,134905,29286,138402,18254,151490,163833,135147,16634,40029,25887,142752,18675,149472,171388,135148,134666,24674,161187,135149,null,155720,135559,29091,32398,40272,19994,19972,13687,23309,27826,21351,13996,14812,21373,13989,149016,22682,150382,33325,21579,22442,154261,133497,null,14930,140389,29556,171692,19721,39917,146686,171824,19547,151465,169374,171998,33884,146870,160434,157619,145184,25390,32037,147191,146988,14890,36872,21196,15988,13946,17897,132238,30272,23280,134838,30842,163630,22695,16575,22140,39819,23924,30292,173108,40581,19681,30201,14331,24857,143578,148466,null,22109,135849,22439,149859,171526,21044,159918,13741,27722,40316,31830,39737,22494,137068,23635,25811,169168,156469,160100,34477,134440,159010,150242,134513,null,20990,139023,23950,38659,138705,40577,36940,31519,39682,23761,31651,25192,25397,39679,31695,39722,31870,39726,31810,31878,39957,31740,39689,40727,39963,149822,40794,21875,23491,20477,40600,20466,21088,15878,21201,22375,20566,22967,24082,38856,40363,36700,21609,38836,39232,38842,21292,24880,26924,21466,39946,40194,19515,38465,27008,20646,30022,137069,39386,21107,null,37209,38529,37212,null,37201,167575,25471,159011,27338,22033,37262,30074,25221,132092,29519,31856,154657,146685,null,149785,30422,39837,20010,134356,33726,34882,null,23626,27072,20717,22394,21023,24053,20174,27697,131570,20281,21660,21722,21146,36226,13822,24332,13811,null,27474,37244,40869,39831,38958,39092,39610,40616,40580,29050,31508,null,27642,34840,32632,null,22048,173642,36471,40787,null,36308,36431,40476,36353,25218,164733,36392,36469,31443,150135,31294,30936,27882,35431,30215,166490,40742,27854,34774,30147,172722,30803,194624,36108,29410,29553,35629,29442,29937,36075,150203,34351,24506,34976,17591,null,137275,159237,null,35454,140571,null,24829,30311,39639,40260,37742,39823,34805,null,34831,36087,29484,38689,39856,13782,29362,19463,31825,39242,155993,24921,19460,40598,24957,null,22367,24943,25254,25145,25294,14940,25058,21418,144373,25444,26626,13778,23895,166850,36826,167481,null,20697,138566,30982,21298,38456,134971,16485,null,30718,null,31938,155418,31962,31277,32870,32867,32077,29957,29938,35220,33306,26380,32866,160902,32859,29936,33027,30500,35209,157644,30035,159441,34729,34766,33224,34700,35401,36013,35651,30507,29944,34010,13877,27058,36262,null,35241,29800,28089,34753,147473,29927,15835,29046,24740,24988,15569,29026,24695,null,32625,166701,29264,24809,19326,21024,15384,146631,155351,161366,152881,137540,135934,170243,159196,159917,23745,156077,166415,145015,131310,157766,151310,17762,23327,156492,40784,40614,156267,12288,65292,12289,12290,65294,8231,65307,65306,65311,65281,65072,8230,8229,65104,65105,65106,183,65108,65109,65110,65111,65372,8211,65073,8212,65075,9588,65076,65103,65288,65289,65077,65078,65371,65373,65079,65080,12308,12309,65081,65082,12304,12305,65083,65084,12298,12299,65085,65086,12296,12297,65087,65088,12300,12301,65089,65090,12302,12303,65091,65092,65113,65114,65115,65116,65117,65118,8216,8217,8220,8221,12317,12318,8245,8242,65283,65286,65290,8251,167,12291,9675,9679,9651,9650,9678,9734,9733,9671,9670,9633,9632,9661,9660,12963,8453,175,65507,65343,717,65097,65098,65101,65102,65099,65100,65119,65120,65121,65291,65293,215,247,177,8730,65308,65310,65309,8806,8807,8800,8734,8786,8801,65122,65123,65124,65125,65126,65374,8745,8746,8869,8736,8735,8895,13266,13265,8747,8750,8757,8756,9792,9794,8853,8857,8593,8595,8592,8594,8598,8599,8601,8600,8741,8739,65295,65340,8725,65128,65284,65509,12306,65504,65505,65285,65312,8451,8457,65129,65130,65131,13269,13212,13213,13214,13262,13217,13198,13199,13252,176,20825,20827,20830,20829,20833,20835,21991,29929,31950,9601,9602,9603,9604,9605,9606,9607,9608,9615,9614,9613,9612,9611,9610,9609,9532,9524,9516,9508,9500,9620,9472,9474,9621,9484,9488,9492,9496,9581,9582,9584,9583,9552,9566,9578,9569,9698,9699,9701,9700,9585,9586,9587,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,12321,12322,12323,12324,12325,12326,12327,12328,12329,21313,21316,21317,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,729,713,714,711,715,9216,9217,9218,9219,9220,9221,9222,9223,9224,9225,9226,9227,9228,9229,9230,9231,9232,9233,9234,9235,9236,9237,9238,9239,9240,9241,9242,9243,9244,9245,9246,9247,9249,8364,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19968,20057,19969,19971,20035,20061,20102,20108,20154,20799,20837,20843,20960,20992,20993,21147,21269,21313,21340,21448,19977,19979,19976,19978,20011,20024,20961,20037,20040,20063,20062,20110,20129,20800,20995,21242,21315,21449,21475,22303,22763,22805,22823,22899,23376,23377,23379,23544,23567,23586,23608,23665,24029,24037,24049,24050,24051,24062,24178,24318,24331,24339,25165,19985,19984,19981,20013,20016,20025,20043,23609,20104,20113,20117,20114,20116,20130,20161,20160,20163,20166,20167,20173,20170,20171,20164,20803,20801,20839,20845,20846,20844,20887,20982,20998,20999,21000,21243,21246,21247,21270,21305,21320,21319,21317,21342,21380,21451,21450,21453,22764,22825,22827,22826,22829,23380,23569,23588,23610,23663,24052,24187,24319,24340,24341,24515,25096,25142,25163,25166,25903,25991,26007,26020,26041,26085,26352,26376,26408,27424,27490,27513,27595,27604,27611,27663,27700,28779,29226,29238,29243,29255,29273,29275,29356,29579,19993,19990,19989,19988,19992,20027,20045,20047,20046,20197,20184,20180,20181,20182,20183,20195,20196,20185,20190,20805,20804,20873,20874,20908,20985,20986,20984,21002,21152,21151,21253,21254,21271,21277,20191,21322,21321,21345,21344,21359,21358,21435,21487,21476,21491,21484,21486,21481,21480,21500,21496,21493,21483,21478,21482,21490,21489,21488,21477,21485,21499,22235,22234,22806,22830,22833,22900,22902,23381,23427,23612,24040,24039,24038,24066,24067,24179,24188,24321,24344,24343,24517,25098,25171,25172,25170,25169,26021,26086,26414,26412,26410,26411,26413,27491,27597,27665,27664,27704,27713,27712,27710,29359,29572,29577,29916,29926,29976,29983,29992,29993,30000,30001,30002,30003,30091,30333,30382,30399,30446,30683,30690,30707,31034,31166,31348,31435,19998,19999,20050,20051,20073,20121,20132,20134,20133,20223,20233,20249,20234,20245,20237,20240,20241,20239,20210,20214,20219,20208,20211,20221,20225,20235,20809,20807,20806,20808,20840,20849,20877,20912,21015,21009,21010,21006,21014,21155,21256,21281,21280,21360,21361,21513,21519,21516,21514,21520,21505,21515,21508,21521,21517,21512,21507,21518,21510,21522,22240,22238,22237,22323,22320,22312,22317,22316,22319,22313,22809,22810,22839,22840,22916,22904,22915,22909,22905,22914,22913,23383,23384,23431,23432,23429,23433,23546,23574,23673,24030,24070,24182,24180,24335,24347,24537,24534,25102,25100,25101,25104,25187,25179,25176,25910,26089,26088,26092,26093,26354,26355,26377,26429,26420,26417,26421,27425,27492,27515,27670,27741,27735,27737,27743,27744,27728,27733,27745,27739,27725,27726,28784,29279,29277,30334,31481,31859,31992,32566,32650,32701,32769,32771,32780,32786,32819,32895,32905,32907,32908,33251,33258,33267,33276,33292,33307,33311,33390,33394,33406,34411,34880,34892,34915,35199,38433,20018,20136,20301,20303,20295,20311,20318,20276,20315,20309,20272,20304,20305,20285,20282,20280,20291,20308,20284,20294,20323,20316,20320,20271,20302,20278,20313,20317,20296,20314,20812,20811,20813,20853,20918,20919,21029,21028,21033,21034,21032,21163,21161,21162,21164,21283,21363,21365,21533,21549,21534,21566,21542,21582,21543,21574,21571,21555,21576,21570,21531,21545,21578,21561,21563,21560,21550,21557,21558,21536,21564,21568,21553,21547,21535,21548,22250,22256,22244,22251,22346,22353,22336,22349,22343,22350,22334,22352,22351,22331,22767,22846,22941,22930,22952,22942,22947,22937,22934,22925,22948,22931,22922,22949,23389,23388,23386,23387,23436,23435,23439,23596,23616,23617,23615,23614,23696,23697,23700,23692,24043,24076,24207,24199,24202,24311,24324,24351,24420,24418,24439,24441,24536,24524,24535,24525,24561,24555,24568,24554,25106,25105,25220,25239,25238,25216,25206,25225,25197,25226,25212,25214,25209,25203,25234,25199,25240,25198,25237,25235,25233,25222,25913,25915,25912,26097,26356,26463,26446,26447,26448,26449,26460,26454,26462,26441,26438,26464,26451,26455,27493,27599,27714,27742,27801,27777,27784,27785,27781,27803,27754,27770,27792,27760,27788,27752,27798,27794,27773,27779,27762,27774,27764,27782,27766,27789,27796,27800,27778,28790,28796,28797,28792,29282,29281,29280,29380,29378,29590,29996,29995,30007,30008,30338,30447,30691,31169,31168,31167,31350,31995,32597,32918,32915,32925,32920,32923,32922,32946,33391,33426,33419,33421,35211,35282,35328,35895,35910,35925,35997,36196,36208,36275,36523,36554,36763,36784,36802,36806,36805,36804,24033,37009,37026,37034,37030,37027,37193,37318,37324,38450,38446,38449,38442,38444,20006,20054,20083,20107,20123,20126,20139,20140,20335,20381,20365,20339,20351,20332,20379,20363,20358,20355,20336,20341,20360,20329,20347,20374,20350,20367,20369,20346,20820,20818,20821,20841,20855,20854,20856,20925,20989,21051,21048,21047,21050,21040,21038,21046,21057,21182,21179,21330,21332,21331,21329,21350,21367,21368,21369,21462,21460,21463,21619,21621,21654,21624,21653,21632,21627,21623,21636,21650,21638,21628,21648,21617,21622,21644,21658,21602,21608,21643,21629,21646,22266,22403,22391,22378,22377,22369,22374,22372,22396,22812,22857,22855,22856,22852,22868,22974,22971,22996,22969,22958,22993,22982,22992,22989,22987,22995,22986,22959,22963,22994,22981,23391,23396,23395,23447,23450,23448,23452,23449,23451,23578,23624,23621,23622,23735,23713,23736,23721,23723,23729,23731,24088,24090,24086,24085,24091,24081,24184,24218,24215,24220,24213,24214,24310,24358,24359,24361,24448,24449,24447,24444,24541,24544,24573,24565,24575,24591,24596,24623,24629,24598,24618,24597,24609,24615,24617,24619,24603,25110,25109,25151,25150,25152,25215,25289,25292,25284,25279,25282,25273,25298,25307,25259,25299,25300,25291,25288,25256,25277,25276,25296,25305,25287,25293,25269,25306,25265,25304,25302,25303,25286,25260,25294,25918,26023,26044,26106,26132,26131,26124,26118,26114,26126,26112,26127,26133,26122,26119,26381,26379,26477,26507,26517,26481,26524,26483,26487,26503,26525,26519,26479,26480,26495,26505,26494,26512,26485,26522,26515,26492,26474,26482,27427,27494,27495,27519,27667,27675,27875,27880,27891,27825,27852,27877,27827,27837,27838,27836,27874,27819,27861,27859,27832,27844,27833,27841,27822,27863,27845,27889,27839,27835,27873,27867,27850,27820,27887,27868,27862,27872,28821,28814,28818,28810,28825,29228,29229,29240,29256,29287,29289,29376,29390,29401,29399,29392,29609,29608,29599,29611,29605,30013,30109,30105,30106,30340,30402,30450,30452,30693,30717,31038,31040,31041,31177,31176,31354,31353,31482,31998,32596,32652,32651,32773,32954,32933,32930,32945,32929,32939,32937,32948,32938,32943,33253,33278,33293,33459,33437,33433,33453,33469,33439,33465,33457,33452,33445,33455,33464,33443,33456,33470,33463,34382,34417,21021,34920,36555,36814,36820,36817,37045,37048,37041,37046,37319,37329,38263,38272,38428,38464,38463,38459,38468,38466,38585,38632,38738,38750,20127,20141,20142,20449,20405,20399,20415,20448,20433,20431,20445,20419,20406,20440,20447,20426,20439,20398,20432,20420,20418,20442,20430,20446,20407,20823,20882,20881,20896,21070,21059,21066,21069,21068,21067,21063,21191,21193,21187,21185,21261,21335,21371,21402,21467,21676,21696,21672,21710,21705,21688,21670,21683,21703,21698,21693,21674,21697,21700,21704,21679,21675,21681,21691,21673,21671,21695,22271,22402,22411,22432,22435,22434,22478,22446,22419,22869,22865,22863,22862,22864,23004,23000,23039,23011,23016,23043,23013,23018,23002,23014,23041,23035,23401,23459,23462,23460,23458,23461,23553,23630,23631,23629,23627,23769,23762,24055,24093,24101,24095,24189,24224,24230,24314,24328,24365,24421,24456,24453,24458,24459,24455,24460,24457,24594,24605,24608,24613,24590,24616,24653,24688,24680,24674,24646,24643,24684,24683,24682,24676,25153,25308,25366,25353,25340,25325,25345,25326,25341,25351,25329,25335,25327,25324,25342,25332,25361,25346,25919,25925,26027,26045,26082,26149,26157,26144,26151,26159,26143,26152,26161,26148,26359,26623,26579,26609,26580,26576,26604,26550,26543,26613,26601,26607,26564,26577,26548,26586,26597,26552,26575,26590,26611,26544,26585,26594,26589,26578,27498,27523,27526,27573,27602,27607,27679,27849,27915,27954,27946,27969,27941,27916,27953,27934,27927,27963,27965,27966,27958,27931,27893,27961,27943,27960,27945,27950,27957,27918,27947,28843,28858,28851,28844,28847,28845,28856,28846,28836,29232,29298,29295,29300,29417,29408,29409,29623,29642,29627,29618,29645,29632,29619,29978,29997,30031,30028,30030,30027,30123,30116,30117,30114,30115,30328,30342,30343,30344,30408,30406,30403,30405,30465,30457,30456,30473,30475,30462,30460,30471,30684,30722,30740,30732,30733,31046,31049,31048,31047,31161,31162,31185,31186,31179,31359,31361,31487,31485,31869,32002,32005,32000,32009,32007,32004,32006,32568,32654,32703,32772,32784,32781,32785,32822,32982,32997,32986,32963,32964,32972,32993,32987,32974,32990,32996,32989,33268,33314,33511,33539,33541,33507,33499,33510,33540,33509,33538,33545,33490,33495,33521,33537,33500,33492,33489,33502,33491,33503,33519,33542,34384,34425,34427,34426,34893,34923,35201,35284,35336,35330,35331,35998,36000,36212,36211,36276,36557,36556,36848,36838,36834,36842,36837,36845,36843,36836,36840,37066,37070,37057,37059,37195,37194,37325,38274,38480,38475,38476,38477,38754,38761,38859,38893,38899,38913,39080,39131,39135,39318,39321,20056,20147,20492,20493,20515,20463,20518,20517,20472,20521,20502,20486,20540,20511,20506,20498,20497,20474,20480,20500,20520,20465,20513,20491,20505,20504,20467,20462,20525,20522,20478,20523,20489,20860,20900,20901,20898,20941,20940,20934,20939,21078,21084,21076,21083,21085,21290,21375,21407,21405,21471,21736,21776,21761,21815,21756,21733,21746,21766,21754,21780,21737,21741,21729,21769,21742,21738,21734,21799,21767,21757,21775,22275,22276,22466,22484,22475,22467,22537,22799,22871,22872,22874,23057,23064,23068,23071,23067,23059,23020,23072,23075,23081,23077,23052,23049,23403,23640,23472,23475,23478,23476,23470,23477,23481,23480,23556,23633,23637,23632,23789,23805,23803,23786,23784,23792,23798,23809,23796,24046,24109,24107,24235,24237,24231,24369,24466,24465,24464,24665,24675,24677,24656,24661,24685,24681,24687,24708,24735,24730,24717,24724,24716,24709,24726,25159,25331,25352,25343,25422,25406,25391,25429,25410,25414,25423,25417,25402,25424,25405,25386,25387,25384,25421,25420,25928,25929,26009,26049,26053,26178,26185,26191,26179,26194,26188,26181,26177,26360,26388,26389,26391,26657,26680,26696,26694,26707,26681,26690,26708,26665,26803,26647,26700,26705,26685,26612,26704,26688,26684,26691,26666,26693,26643,26648,26689,27530,27529,27575,27683,27687,27688,27686,27684,27888,28010,28053,28040,28039,28006,28024,28023,27993,28051,28012,28041,28014,27994,28020,28009,28044,28042,28025,28037,28005,28052,28874,28888,28900,28889,28872,28879,29241,29305,29436,29433,29437,29432,29431,29574,29677,29705,29678,29664,29674,29662,30036,30045,30044,30042,30041,30142,30149,30151,30130,30131,30141,30140,30137,30146,30136,30347,30384,30410,30413,30414,30505,30495,30496,30504,30697,30768,30759,30776,30749,30772,30775,30757,30765,30752,30751,30770,31061,31056,31072,31071,31062,31070,31069,31063,31066,31204,31203,31207,31199,31206,31209,31192,31364,31368,31449,31494,31505,31881,32033,32023,32011,32010,32032,32034,32020,32016,32021,32026,32028,32013,32025,32027,32570,32607,32660,32709,32705,32774,32792,32789,32793,32791,32829,32831,33009,33026,33008,33029,33005,33012,33030,33016,33011,33032,33021,33034,33020,33007,33261,33260,33280,33296,33322,33323,33320,33324,33467,33579,33618,33620,33610,33592,33616,33609,33589,33588,33615,33586,33593,33590,33559,33600,33585,33576,33603,34388,34442,34474,34451,34468,34473,34444,34467,34460,34928,34935,34945,34946,34941,34937,35352,35344,35342,35340,35349,35338,35351,35347,35350,35343,35345,35912,35962,35961,36001,36002,36215,36524,36562,36564,36559,36785,36865,36870,36855,36864,36858,36852,36867,36861,36869,36856,37013,37089,37085,37090,37202,37197,37196,37336,37341,37335,37340,37337,38275,38498,38499,38497,38491,38493,38500,38488,38494,38587,39138,39340,39592,39640,39717,39730,39740,20094,20602,20605,20572,20551,20547,20556,20570,20553,20581,20598,20558,20565,20597,20596,20599,20559,20495,20591,20589,20828,20885,20976,21098,21103,21202,21209,21208,21205,21264,21263,21273,21311,21312,21310,21443,26364,21830,21866,21862,21828,21854,21857,21827,21834,21809,21846,21839,21845,21807,21860,21816,21806,21852,21804,21859,21811,21825,21847,22280,22283,22281,22495,22533,22538,22534,22496,22500,22522,22530,22581,22519,22521,22816,22882,23094,23105,23113,23142,23146,23104,23100,23138,23130,23110,23114,23408,23495,23493,23492,23490,23487,23494,23561,23560,23559,23648,23644,23645,23815,23814,23822,23835,23830,23842,23825,23849,23828,23833,23844,23847,23831,24034,24120,24118,24115,24119,24247,24248,24246,24245,24254,24373,24375,24407,24428,24425,24427,24471,24473,24478,24472,24481,24480,24476,24703,24739,24713,24736,24744,24779,24756,24806,24765,24773,24763,24757,24796,24764,24792,24789,24774,24799,24760,24794,24775,25114,25115,25160,25504,25511,25458,25494,25506,25509,25463,25447,25496,25514,25457,25513,25481,25475,25499,25451,25512,25476,25480,25497,25505,25516,25490,25487,25472,25467,25449,25448,25466,25949,25942,25937,25945,25943,21855,25935,25944,25941,25940,26012,26011,26028,26063,26059,26060,26062,26205,26202,26212,26216,26214,26206,26361,21207,26395,26753,26799,26786,26771,26805,26751,26742,26801,26791,26775,26800,26755,26820,26797,26758,26757,26772,26781,26792,26783,26785,26754,27442,27578,27627,27628,27691,28046,28092,28147,28121,28082,28129,28108,28132,28155,28154,28165,28103,28107,28079,28113,28078,28126,28153,28088,28151,28149,28101,28114,28186,28085,28122,28139,28120,28138,28145,28142,28136,28102,28100,28074,28140,28095,28134,28921,28937,28938,28925,28911,29245,29309,29313,29468,29467,29462,29459,29465,29575,29701,29706,29699,29702,29694,29709,29920,29942,29943,29980,29986,30053,30054,30050,30064,30095,30164,30165,30133,30154,30157,30350,30420,30418,30427,30519,30526,30524,30518,30520,30522,30827,30787,30798,31077,31080,31085,31227,31378,31381,31520,31528,31515,31532,31526,31513,31518,31534,31890,31895,31893,32070,32067,32113,32046,32057,32060,32064,32048,32051,32068,32047,32066,32050,32049,32573,32670,32666,32716,32718,32722,32796,32842,32838,33071,33046,33059,33067,33065,33072,33060,33282,33333,33335,33334,33337,33678,33694,33688,33656,33698,33686,33725,33707,33682,33674,33683,33673,33696,33655,33659,33660,33670,33703,34389,24426,34503,34496,34486,34500,34485,34502,34507,34481,34479,34505,34899,34974,34952,34987,34962,34966,34957,34955,35219,35215,35370,35357,35363,35365,35377,35373,35359,35355,35362,35913,35930,36009,36012,36011,36008,36010,36007,36199,36198,36286,36282,36571,36575,36889,36877,36890,36887,36899,36895,36893,36880,36885,36894,36896,36879,36898,36886,36891,36884,37096,37101,37117,37207,37326,37365,37350,37347,37351,37357,37353,38281,38506,38517,38515,38520,38512,38516,38518,38519,38508,38592,38634,38633,31456,31455,38914,38915,39770,40165,40565,40575,40613,40635,20642,20621,20613,20633,20625,20608,20630,20632,20634,26368,20977,21106,21108,21109,21097,21214,21213,21211,21338,21413,21883,21888,21927,21884,21898,21917,21912,21890,21916,21930,21908,21895,21899,21891,21939,21934,21919,21822,21938,21914,21947,21932,21937,21886,21897,21931,21913,22285,22575,22570,22580,22564,22576,22577,22561,22557,22560,22777,22778,22880,23159,23194,23167,23186,23195,23207,23411,23409,23506,23500,23507,23504,23562,23563,23601,23884,23888,23860,23879,24061,24133,24125,24128,24131,24190,24266,24257,24258,24260,24380,24429,24489,24490,24488,24785,24801,24754,24758,24800,24860,24867,24826,24853,24816,24827,24820,24936,24817,24846,24822,24841,24832,24850,25119,25161,25507,25484,25551,25536,25577,25545,25542,25549,25554,25571,25552,25569,25558,25581,25582,25462,25588,25578,25563,25682,25562,25593,25950,25958,25954,25955,26001,26000,26031,26222,26224,26228,26230,26223,26257,26234,26238,26231,26366,26367,26399,26397,26874,26837,26848,26840,26839,26885,26847,26869,26862,26855,26873,26834,26866,26851,26827,26829,26893,26898,26894,26825,26842,26990,26875,27454,27450,27453,27544,27542,27580,27631,27694,27695,27692,28207,28216,28244,28193,28210,28263,28234,28192,28197,28195,28187,28251,28248,28196,28246,28270,28205,28198,28271,28212,28237,28218,28204,28227,28189,28222,28363,28297,28185,28238,28259,28228,28274,28265,28255,28953,28954,28966,28976,28961,28982,29038,28956,29260,29316,29312,29494,29477,29492,29481,29754,29738,29747,29730,29733,29749,29750,29748,29743,29723,29734,29736,29989,29990,30059,30058,30178,30171,30179,30169,30168,30174,30176,30331,30332,30358,30355,30388,30428,30543,30701,30813,30828,30831,31245,31240,31243,31237,31232,31384,31383,31382,31461,31459,31561,31574,31558,31568,31570,31572,31565,31563,31567,31569,31903,31909,32094,32080,32104,32085,32043,32110,32114,32097,32102,32098,32112,32115,21892,32724,32725,32779,32850,32901,33109,33108,33099,33105,33102,33081,33094,33086,33100,33107,33140,33298,33308,33769,33795,33784,33805,33760,33733,33803,33729,33775,33777,33780,33879,33802,33776,33804,33740,33789,33778,33738,33848,33806,33796,33756,33799,33748,33759,34395,34527,34521,34541,34516,34523,34532,34512,34526,34903,35009,35010,34993,35203,35222,35387,35424,35413,35422,35388,35393,35412,35419,35408,35398,35380,35386,35382,35414,35937,35970,36015,36028,36019,36029,36033,36027,36032,36020,36023,36022,36031,36024,36234,36229,36225,36302,36317,36299,36314,36305,36300,36315,36294,36603,36600,36604,36764,36910,36917,36913,36920,36914,36918,37122,37109,37129,37118,37219,37221,37327,37396,37397,37411,37385,37406,37389,37392,37383,37393,38292,38287,38283,38289,38291,38290,38286,38538,38542,38539,38525,38533,38534,38541,38514,38532,38593,38597,38596,38598,38599,38639,38642,38860,38917,38918,38920,39143,39146,39151,39145,39154,39149,39342,39341,40643,40653,40657,20098,20653,20661,20658,20659,20677,20670,20652,20663,20667,20655,20679,21119,21111,21117,21215,21222,21220,21218,21219,21295,21983,21992,21971,21990,21966,21980,21959,21969,21987,21988,21999,21978,21985,21957,21958,21989,21961,22290,22291,22622,22609,22616,22615,22618,22612,22635,22604,22637,22602,22626,22610,22603,22887,23233,23241,23244,23230,23229,23228,23219,23234,23218,23913,23919,24140,24185,24265,24264,24338,24409,24492,24494,24858,24847,24904,24863,24819,24859,24825,24833,24840,24910,24908,24900,24909,24894,24884,24871,24845,24838,24887,25121,25122,25619,25662,25630,25642,25645,25661,25644,25615,25628,25620,25613,25654,25622,25623,25606,25964,26015,26032,26263,26249,26247,26248,26262,26244,26264,26253,26371,27028,26989,26970,26999,26976,26964,26997,26928,27010,26954,26984,26987,26974,26963,27001,27014,26973,26979,26971,27463,27506,27584,27583,27603,27645,28322,28335,28371,28342,28354,28304,28317,28359,28357,28325,28312,28348,28346,28331,28369,28310,28316,28356,28372,28330,28327,28340,29006,29017,29033,29028,29001,29031,29020,29036,29030,29004,29029,29022,28998,29032,29014,29242,29266,29495,29509,29503,29502,29807,29786,29781,29791,29790,29761,29759,29785,29787,29788,30070,30072,30208,30192,30209,30194,30193,30202,30207,30196,30195,30430,30431,30555,30571,30566,30558,30563,30585,30570,30572,30556,30565,30568,30562,30702,30862,30896,30871,30872,30860,30857,30844,30865,30867,30847,31098,31103,31105,33836,31165,31260,31258,31264,31252,31263,31262,31391,31392,31607,31680,31584,31598,31591,31921,31923,31925,32147,32121,32145,32129,32143,32091,32622,32617,32618,32626,32681,32680,32676,32854,32856,32902,32900,33137,33136,33144,33125,33134,33139,33131,33145,33146,33126,33285,33351,33922,33911,33853,33841,33909,33894,33899,33865,33900,33883,33852,33845,33889,33891,33897,33901,33862,34398,34396,34399,34553,34579,34568,34567,34560,34558,34555,34562,34563,34566,34570,34905,35039,35028,35033,35036,35032,35037,35041,35018,35029,35026,35228,35299,35435,35442,35443,35430,35433,35440,35463,35452,35427,35488,35441,35461,35437,35426,35438,35436,35449,35451,35390,35432,35938,35978,35977,36042,36039,36040,36036,36018,36035,36034,36037,36321,36319,36328,36335,36339,36346,36330,36324,36326,36530,36611,36617,36606,36618,36767,36786,36939,36938,36947,36930,36948,36924,36949,36944,36935,36943,36942,36941,36945,36926,36929,37138,37143,37228,37226,37225,37321,37431,37463,37432,37437,37440,37438,37467,37451,37476,37457,37428,37449,37453,37445,37433,37439,37466,38296,38552,38548,38549,38605,38603,38601,38602,38647,38651,38649,38646,38742,38772,38774,38928,38929,38931,38922,38930,38924,39164,39156,39165,39166,39347,39345,39348,39649,40169,40578,40718,40723,40736,20711,20718,20709,20694,20717,20698,20693,20687,20689,20721,20686,20713,20834,20979,21123,21122,21297,21421,22014,22016,22043,22039,22013,22036,22022,22025,22029,22030,22007,22038,22047,22024,22032,22006,22296,22294,22645,22654,22659,22675,22666,22649,22661,22653,22781,22821,22818,22820,22890,22889,23265,23270,23273,23255,23254,23256,23267,23413,23518,23527,23521,23525,23526,23528,23522,23524,23519,23565,23650,23940,23943,24155,24163,24149,24151,24148,24275,24278,24330,24390,24432,24505,24903,24895,24907,24951,24930,24931,24927,24922,24920,24949,25130,25735,25688,25684,25764,25720,25695,25722,25681,25703,25652,25709,25723,25970,26017,26071,26070,26274,26280,26269,27036,27048,27029,27073,27054,27091,27083,27035,27063,27067,27051,27060,27088,27085,27053,27084,27046,27075,27043,27465,27468,27699,28467,28436,28414,28435,28404,28457,28478,28448,28460,28431,28418,28450,28415,28399,28422,28465,28472,28466,28451,28437,28459,28463,28552,28458,28396,28417,28402,28364,28407,29076,29081,29053,29066,29060,29074,29246,29330,29334,29508,29520,29796,29795,29802,29808,29805,29956,30097,30247,30221,30219,30217,30227,30433,30435,30596,30589,30591,30561,30913,30879,30887,30899,30889,30883,31118,31119,31117,31278,31281,31402,31401,31469,31471,31649,31637,31627,31605,31639,31645,31636,31631,31672,31623,31620,31929,31933,31934,32187,32176,32156,32189,32190,32160,32202,32180,32178,32177,32186,32162,32191,32181,32184,32173,32210,32199,32172,32624,32736,32737,32735,32862,32858,32903,33104,33152,33167,33160,33162,33151,33154,33255,33274,33287,33300,33310,33355,33993,33983,33990,33988,33945,33950,33970,33948,33995,33976,33984,34003,33936,33980,34001,33994,34623,34588,34619,34594,34597,34612,34584,34645,34615,34601,35059,35074,35060,35065,35064,35069,35048,35098,35055,35494,35468,35486,35491,35469,35489,35475,35492,35498,35493,35496,35480,35473,35482,35495,35946,35981,35980,36051,36049,36050,36203,36249,36245,36348,36628,36626,36629,36627,36771,36960,36952,36956,36963,36953,36958,36962,36957,36955,37145,37144,37150,37237,37240,37239,37236,37496,37504,37509,37528,37526,37499,37523,37532,37544,37500,37521,38305,38312,38313,38307,38309,38308,38553,38556,38555,38604,38610,38656,38780,38789,38902,38935,38936,39087,39089,39171,39173,39180,39177,39361,39599,39600,39654,39745,39746,40180,40182,40179,40636,40763,40778,20740,20736,20731,20725,20729,20738,20744,20745,20741,20956,21127,21128,21129,21133,21130,21232,21426,22062,22075,22073,22066,22079,22068,22057,22099,22094,22103,22132,22070,22063,22064,22656,22687,22686,22707,22684,22702,22697,22694,22893,23305,23291,23307,23285,23308,23304,23534,23532,23529,23531,23652,23653,23965,23956,24162,24159,24161,24290,24282,24287,24285,24291,24288,24392,24433,24503,24501,24950,24935,24942,24925,24917,24962,24956,24944,24939,24958,24999,24976,25003,24974,25004,24986,24996,24980,25006,25134,25705,25711,25721,25758,25778,25736,25744,25776,25765,25747,25749,25769,25746,25774,25773,25771,25754,25772,25753,25762,25779,25973,25975,25976,26286,26283,26292,26289,27171,27167,27112,27137,27166,27161,27133,27169,27155,27146,27123,27138,27141,27117,27153,27472,27470,27556,27589,27590,28479,28540,28548,28497,28518,28500,28550,28525,28507,28536,28526,28558,28538,28528,28516,28567,28504,28373,28527,28512,28511,29087,29100,29105,29096,29270,29339,29518,29527,29801,29835,29827,29822,29824,30079,30240,30249,30239,30244,30246,30241,30242,30362,30394,30436,30606,30599,30604,30609,30603,30923,30917,30906,30922,30910,30933,30908,30928,31295,31292,31296,31293,31287,31291,31407,31406,31661,31665,31684,31668,31686,31687,31681,31648,31692,31946,32224,32244,32239,32251,32216,32236,32221,32232,32227,32218,32222,32233,32158,32217,32242,32249,32629,32631,32687,32745,32806,33179,33180,33181,33184,33178,33176,34071,34109,34074,34030,34092,34093,34067,34065,34083,34081,34068,34028,34085,34047,34054,34690,34676,34678,34656,34662,34680,34664,34649,34647,34636,34643,34907,34909,35088,35079,35090,35091,35093,35082,35516,35538,35527,35524,35477,35531,35576,35506,35529,35522,35519,35504,35542,35533,35510,35513,35547,35916,35918,35948,36064,36062,36070,36068,36076,36077,36066,36067,36060,36074,36065,36205,36255,36259,36395,36368,36381,36386,36367,36393,36383,36385,36382,36538,36637,36635,36639,36649,36646,36650,36636,36638,36645,36969,36974,36968,36973,36983,37168,37165,37159,37169,37255,37257,37259,37251,37573,37563,37559,37610,37548,37604,37569,37555,37564,37586,37575,37616,37554,38317,38321,38660,38662,38663,38665,38752,38797,38795,38799,38945,38955,38940,39091,39178,39187,39186,39192,39389,39376,39391,39387,39377,39381,39378,39385,39607,39662,39663,39719,39749,39748,39799,39791,40198,40201,40195,40617,40638,40654,22696,40786,20754,20760,20756,20752,20757,20864,20906,20957,21137,21139,21235,22105,22123,22137,22121,22116,22136,22122,22120,22117,22129,22127,22124,22114,22134,22721,22718,22727,22725,22894,23325,23348,23416,23536,23566,24394,25010,24977,25001,24970,25037,25014,25022,25034,25032,25136,25797,25793,25803,25787,25788,25818,25796,25799,25794,25805,25791,25810,25812,25790,25972,26310,26313,26297,26308,26311,26296,27197,27192,27194,27225,27243,27224,27193,27204,27234,27233,27211,27207,27189,27231,27208,27481,27511,27653,28610,28593,28577,28611,28580,28609,28583,28595,28608,28601,28598,28582,28576,28596,29118,29129,29136,29138,29128,29141,29113,29134,29145,29148,29123,29124,29544,29852,29859,29848,29855,29854,29922,29964,29965,30260,30264,30266,30439,30437,30624,30622,30623,30629,30952,30938,30956,30951,31142,31309,31310,31302,31308,31307,31418,31705,31761,31689,31716,31707,31713,31721,31718,31957,31958,32266,32273,32264,32283,32291,32286,32285,32265,32272,32633,32690,32752,32753,32750,32808,33203,33193,33192,33275,33288,33368,33369,34122,34137,34120,34152,34153,34115,34121,34157,34154,34142,34691,34719,34718,34722,34701,34913,35114,35122,35109,35115,35105,35242,35238,35558,35578,35563,35569,35584,35548,35559,35566,35582,35585,35586,35575,35565,35571,35574,35580,35947,35949,35987,36084,36420,36401,36404,36418,36409,36405,36667,36655,36664,36659,36776,36774,36981,36980,36984,36978,36988,36986,37172,37266,37664,37686,37624,37683,37679,37666,37628,37675,37636,37658,37648,37670,37665,37653,37678,37657,38331,38567,38568,38570,38613,38670,38673,38678,38669,38675,38671,38747,38748,38758,38808,38960,38968,38971,38967,38957,38969,38948,39184,39208,39198,39195,39201,39194,39405,39394,39409,39608,39612,39675,39661,39720,39825,40213,40227,40230,40232,40210,40219,40664,40660,40845,40860,20778,20767,20769,20786,21237,22158,22144,22160,22149,22151,22159,22741,22739,22737,22734,23344,23338,23332,23418,23607,23656,23996,23994,23997,23992,24171,24396,24509,25033,25026,25031,25062,25035,25138,25140,25806,25802,25816,25824,25840,25830,25836,25841,25826,25837,25986,25987,26329,26326,27264,27284,27268,27298,27292,27355,27299,27262,27287,27280,27296,27484,27566,27610,27656,28632,28657,28639,28640,28635,28644,28651,28655,28544,28652,28641,28649,28629,28654,28656,29159,29151,29166,29158,29157,29165,29164,29172,29152,29237,29254,29552,29554,29865,29872,29862,29864,30278,30274,30284,30442,30643,30634,30640,30636,30631,30637,30703,30967,30970,30964,30959,30977,31143,31146,31319,31423,31751,31757,31742,31735,31756,31712,31968,31964,31966,31970,31967,31961,31965,32302,32318,32326,32311,32306,32323,32299,32317,32305,32325,32321,32308,32313,32328,32309,32319,32303,32580,32755,32764,32881,32882,32880,32879,32883,33222,33219,33210,33218,33216,33215,33213,33225,33214,33256,33289,33393,34218,34180,34174,34204,34193,34196,34223,34203,34183,34216,34186,34407,34752,34769,34739,34770,34758,34731,34747,34746,34760,34763,35131,35126,35140,35128,35133,35244,35598,35607,35609,35611,35594,35616,35613,35588,35600,35905,35903,35955,36090,36093,36092,36088,36091,36264,36425,36427,36424,36426,36676,36670,36674,36677,36671,36991,36989,36996,36993,36994,36992,37177,37283,37278,37276,37709,37762,37672,37749,37706,37733,37707,37656,37758,37740,37723,37744,37722,37716,38346,38347,38348,38344,38342,38577,38584,38614,38684,38686,38816,38867,38982,39094,39221,39425,39423,39854,39851,39850,39853,40251,40255,40587,40655,40670,40668,40669,40667,40766,40779,21474,22165,22190,22745,22744,23352,24413,25059,25139,25844,25842,25854,25862,25850,25851,25847,26039,26332,26406,27315,27308,27331,27323,27320,27330,27310,27311,27487,27512,27567,28681,28683,28670,28678,28666,28689,28687,29179,29180,29182,29176,29559,29557,29863,29887,29973,30294,30296,30290,30653,30655,30651,30652,30990,31150,31329,31330,31328,31428,31429,31787,31783,31786,31774,31779,31777,31975,32340,32341,32350,32346,32353,32338,32345,32584,32761,32763,32887,32886,33229,33231,33290,34255,34217,34253,34256,34249,34224,34234,34233,34214,34799,34796,34802,34784,35206,35250,35316,35624,35641,35628,35627,35920,36101,36441,36451,36454,36452,36447,36437,36544,36681,36685,36999,36995,37000,37291,37292,37328,37780,37770,37782,37794,37811,37806,37804,37808,37784,37786,37783,38356,38358,38352,38357,38626,38620,38617,38619,38622,38692,38819,38822,38829,38905,38989,38991,38988,38990,38995,39098,39230,39231,39229,39214,39333,39438,39617,39683,39686,39759,39758,39757,39882,39881,39933,39880,39872,40273,40285,40288,40672,40725,40748,20787,22181,22750,22751,22754,23541,40848,24300,25074,25079,25078,25077,25856,25871,26336,26333,27365,27357,27354,27347,28699,28703,28712,28698,28701,28693,28696,29190,29197,29272,29346,29560,29562,29885,29898,29923,30087,30086,30303,30305,30663,31001,31153,31339,31337,31806,31807,31800,31805,31799,31808,32363,32365,32377,32361,32362,32645,32371,32694,32697,32696,33240,34281,34269,34282,34261,34276,34277,34295,34811,34821,34829,34809,34814,35168,35167,35158,35166,35649,35676,35672,35657,35674,35662,35663,35654,35673,36104,36106,36476,36466,36487,36470,36460,36474,36468,36692,36686,36781,37002,37003,37297,37294,37857,37841,37855,37827,37832,37852,37853,37846,37858,37837,37848,37860,37847,37864,38364,38580,38627,38698,38695,38753,38876,38907,39006,39000,39003,39100,39237,39241,39446,39449,39693,39912,39911,39894,39899,40329,40289,40306,40298,40300,40594,40599,40595,40628,21240,22184,22199,22198,22196,22204,22756,23360,23363,23421,23542,24009,25080,25082,25880,25876,25881,26342,26407,27372,28734,28720,28722,29200,29563,29903,30306,30309,31014,31018,31020,31019,31431,31478,31820,31811,31821,31983,31984,36782,32381,32380,32386,32588,32768,33242,33382,34299,34297,34321,34298,34310,34315,34311,34314,34836,34837,35172,35258,35320,35696,35692,35686,35695,35679,35691,36111,36109,36489,36481,36485,36482,37300,37323,37912,37891,37885,38369,38704,39108,39250,39249,39336,39467,39472,39479,39477,39955,39949,40569,40629,40680,40751,40799,40803,40801,20791,20792,22209,22208,22210,22804,23660,24013,25084,25086,25885,25884,26005,26345,27387,27396,27386,27570,28748,29211,29351,29910,29908,30313,30675,31824,32399,32396,32700,34327,34349,34330,34851,34850,34849,34847,35178,35180,35261,35700,35703,35709,36115,36490,36493,36491,36703,36783,37306,37934,37939,37941,37946,37944,37938,37931,38370,38712,38713,38706,38911,39015,39013,39255,39493,39491,39488,39486,39631,39764,39761,39981,39973,40367,40372,40386,40376,40605,40687,40729,40796,40806,40807,20796,20795,22216,22218,22217,23423,24020,24018,24398,25087,25892,27402,27489,28753,28760,29568,29924,30090,30318,30316,31155,31840,31839,32894,32893,33247,35186,35183,35324,35712,36118,36119,36497,36499,36705,37192,37956,37969,37970,38717,38718,38851,38849,39019,39253,39509,39501,39634,39706,40009,39985,39998,39995,40403,40407,40756,40812,40810,40852,22220,24022,25088,25891,25899,25898,26348,27408,29914,31434,31844,31843,31845,32403,32406,32404,33250,34360,34367,34865,35722,37008,37007,37987,37984,37988,38760,39023,39260,39514,39515,39511,39635,39636,39633,40020,40023,40022,40421,40607,40692,22225,22761,25900,28766,30321,30322,30679,32592,32648,34870,34873,34914,35731,35730,35734,33399,36123,37312,37994,38722,38728,38724,38854,39024,39519,39714,39768,40031,40441,40442,40572,40573,40711,40823,40818,24307,27414,28771,31852,31854,34875,35264,36513,37313,38002,38000,39025,39262,39638,39715,40652,28772,30682,35738,38007,38857,39522,39525,32412,35740,36522,37317,38013,38014,38012,40055,40056,40695,35924,38015,40474,29224,39530,39729,40475,40478,31858,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,20022,20031,20101,20128,20866,20886,20907,21241,21304,21353,21430,22794,23424,24027,12083,24191,24308,24400,24417,25908,26080,30098,30326,36789,38582,168,710,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,65339,65341,10045,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8679,8632,8633,12751,131276,20058,131210,20994,17553,40880,20872,40881,161287,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65506,65508,65287,65282,12849,8470,8481,12443,12444,11904,11908,11910,11911,11912,11914,11916,11917,11925,11932,11933,11941,11943,11946,11948,11950,11958,11964,11966,11974,11978,11980,11981,11983,11990,11991,11998,12003,null,null,null,643,592,603,596,629,339,248,331,650,618,20034,20060,20981,21274,21378,19975,19980,20039,20109,22231,64012,23662,24435,19983,20871,19982,20014,20115,20162,20169,20168,20888,21244,21356,21433,22304,22787,22828,23568,24063,26081,27571,27596,27668,29247,20017,20028,20200,20188,20201,20193,20189,20186,21004,21276,21324,22306,22307,22807,22831,23425,23428,23570,23611,23668,23667,24068,24192,24194,24521,25097,25168,27669,27702,27715,27711,27707,29358,29360,29578,31160,32906,38430,20238,20248,20268,20213,20244,20209,20224,20215,20232,20253,20226,20229,20258,20243,20228,20212,20242,20913,21011,21001,21008,21158,21282,21279,21325,21386,21511,22241,22239,22318,22314,22324,22844,22912,22908,22917,22907,22910,22903,22911,23382,23573,23589,23676,23674,23675,23678,24031,24181,24196,24322,24346,24436,24533,24532,24527,25180,25182,25188,25185,25190,25186,25177,25184,25178,25189,26095,26094,26430,26425,26424,26427,26426,26431,26428,26419,27672,27718,27730,27740,27727,27722,27732,27723,27724,28785,29278,29364,29365,29582,29994,30335,31349,32593,33400,33404,33408,33405,33407,34381,35198,37017,37015,37016,37019,37012,38434,38436,38432,38435,20310,20283,20322,20297,20307,20324,20286,20327,20306,20319,20289,20312,20269,20275,20287,20321,20879,20921,21020,21022,21025,21165,21166,21257,21347,21362,21390,21391,21552,21559,21546,21588,21573,21529,21532,21541,21528,21565,21583,21569,21544,21540,21575,22254,22247,22245,22337,22341,22348,22345,22347,22354,22790,22848,22950,22936,22944,22935,22926,22946,22928,22927,22951,22945,23438,23442,23592,23594,23693,23695,23688,23691,23689,23698,23690,23686,23699,23701,24032,24074,24078,24203,24201,24204,24200,24205,24325,24349,24440,24438,24530,24529,24528,24557,24552,24558,24563,24545,24548,24547,24570,24559,24567,24571,24576,24564,25146,25219,25228,25230,25231,25236,25223,25201,25211,25210,25200,25217,25224,25207,25213,25202,25204,25911,26096,26100,26099,26098,26101,26437,26439,26457,26453,26444,26440,26461,26445,26458,26443,27600,27673,27674,27768,27751,27755,27780,27787,27791,27761,27759,27753,27802,27757,27783,27797,27804,27750,27763,27749,27771,27790,28788,28794,29283,29375,29373,29379,29382,29377,29370,29381,29589,29591,29587,29588,29586,30010,30009,30100,30101,30337,31037,32820,32917,32921,32912,32914,32924,33424,33423,33413,33422,33425,33427,33418,33411,33412,35960,36809,36799,37023,37025,37029,37022,37031,37024,38448,38440,38447,38445,20019,20376,20348,20357,20349,20352,20359,20342,20340,20361,20356,20343,20300,20375,20330,20378,20345,20353,20344,20368,20380,20372,20382,20370,20354,20373,20331,20334,20894,20924,20926,21045,21042,21043,21062,21041,21180,21258,21259,21308,21394,21396,21639,21631,21633,21649,21634,21640,21611,21626,21630,21605,21612,21620,21606,21645,21615,21601,21600,21656,21603,21607,21604,22263,22265,22383,22386,22381,22379,22385,22384,22390,22400,22389,22395,22387,22388,22370,22376,22397,22796,22853,22965,22970,22991,22990,22962,22988,22977,22966,22972,22979,22998,22961,22973,22976,22984,22964,22983,23394,23397,23443,23445,23620,23623,23726,23716,23712,23733,23727,23720,23724,23711,23715,23725,23714,23722,23719,23709,23717,23734,23728,23718,24087,24084,24089,24360,24354,24355,24356,24404,24450,24446,24445,24542,24549,24621,24614,24601,24626,24587,24628,24586,24599,24627,24602,24606,24620,24610,24589,24592,24622,24595,24593,24588,24585,24604,25108,25149,25261,25268,25297,25278,25258,25270,25290,25262,25267,25263,25275,25257,25264,25272,25917,26024,26043,26121,26108,26116,26130,26120,26107,26115,26123,26125,26117,26109,26129,26128,26358,26378,26501,26476,26510,26514,26486,26491,26520,26502,26500,26484,26509,26508,26490,26527,26513,26521,26499,26493,26497,26488,26489,26516,27429,27520,27518,27614,27677,27795,27884,27883,27886,27865,27830,27860,27821,27879,27831,27856,27842,27834,27843,27846,27885,27890,27858,27869,27828,27786,27805,27776,27870,27840,27952,27853,27847,27824,27897,27855,27881,27857,28820,28824,28805,28819,28806,28804,28817,28822,28802,28826,28803,29290,29398,29387,29400,29385,29404,29394,29396,29402,29388,29393,29604,29601,29613,29606,29602,29600,29612,29597,29917,29928,30015,30016,30014,30092,30104,30383,30451,30449,30448,30453,30712,30716,30713,30715,30714,30711,31042,31039,31173,31352,31355,31483,31861,31997,32821,32911,32942,32931,32952,32949,32941,33312,33440,33472,33451,33434,33432,33435,33461,33447,33454,33468,33438,33466,33460,33448,33441,33449,33474,33444,33475,33462,33442,34416,34415,34413,34414,35926,36818,36811,36819,36813,36822,36821,36823,37042,37044,37039,37043,37040,38457,38461,38460,38458,38467,20429,20421,20435,20402,20425,20427,20417,20436,20444,20441,20411,20403,20443,20423,20438,20410,20416,20409,20460,21060,21065,21184,21186,21309,21372,21399,21398,21401,21400,21690,21665,21677,21669,21711,21699,33549,21687,21678,21718,21686,21701,21702,21664,21616,21692,21666,21694,21618,21726,21680,22453,22430,22431,22436,22412,22423,22429,22427,22420,22424,22415,22425,22437,22426,22421,22772,22797,22867,23009,23006,23022,23040,23025,23005,23034,23037,23036,23030,23012,23026,23031,23003,23017,23027,23029,23008,23038,23028,23021,23464,23628,23760,23768,23756,23767,23755,23771,23774,23770,23753,23751,23754,23766,23763,23764,23759,23752,23750,23758,23775,23800,24057,24097,24098,24099,24096,24100,24240,24228,24226,24219,24227,24229,24327,24366,24406,24454,24631,24633,24660,24690,24670,24645,24659,24647,24649,24667,24652,24640,24642,24671,24612,24644,24664,24678,24686,25154,25155,25295,25357,25355,25333,25358,25347,25323,25337,25359,25356,25336,25334,25344,25363,25364,25338,25365,25339,25328,25921,25923,26026,26047,26166,26145,26162,26165,26140,26150,26146,26163,26155,26170,26141,26164,26169,26158,26383,26384,26561,26610,26568,26554,26588,26555,26616,26584,26560,26551,26565,26603,26596,26591,26549,26573,26547,26615,26614,26606,26595,26562,26553,26574,26599,26608,26546,26620,26566,26605,26572,26542,26598,26587,26618,26569,26570,26563,26602,26571,27432,27522,27524,27574,27606,27608,27616,27680,27681,27944,27956,27949,27935,27964,27967,27922,27914,27866,27955,27908,27929,27962,27930,27921,27904,27933,27970,27905,27928,27959,27907,27919,27968,27911,27936,27948,27912,27938,27913,27920,28855,28831,28862,28849,28848,28833,28852,28853,28841,29249,29257,29258,29292,29296,29299,29294,29386,29412,29416,29419,29407,29418,29414,29411,29573,29644,29634,29640,29637,29625,29622,29621,29620,29675,29631,29639,29630,29635,29638,29624,29643,29932,29934,29998,30023,30024,30119,30122,30329,30404,30472,30467,30468,30469,30474,30455,30459,30458,30695,30696,30726,30737,30738,30725,30736,30735,30734,30729,30723,30739,31050,31052,31051,31045,31044,31189,31181,31183,31190,31182,31360,31358,31441,31488,31489,31866,31864,31865,31871,31872,31873,32003,32008,32001,32600,32657,32653,32702,32775,32782,32783,32788,32823,32984,32967,32992,32977,32968,32962,32976,32965,32995,32985,32988,32970,32981,32969,32975,32983,32998,32973,33279,33313,33428,33497,33534,33529,33543,33512,33536,33493,33594,33515,33494,33524,33516,33505,33522,33525,33548,33531,33526,33520,33514,33508,33504,33530,33523,33517,34423,34420,34428,34419,34881,34894,34919,34922,34921,35283,35332,35335,36210,36835,36833,36846,36832,37105,37053,37055,37077,37061,37054,37063,37067,37064,37332,37331,38484,38479,38481,38483,38474,38478,20510,20485,20487,20499,20514,20528,20507,20469,20468,20531,20535,20524,20470,20471,20503,20508,20512,20519,20533,20527,20529,20494,20826,20884,20883,20938,20932,20933,20936,20942,21089,21082,21074,21086,21087,21077,21090,21197,21262,21406,21798,21730,21783,21778,21735,21747,21732,21786,21759,21764,21768,21739,21777,21765,21745,21770,21755,21751,21752,21728,21774,21763,21771,22273,22274,22476,22578,22485,22482,22458,22470,22461,22460,22456,22454,22463,22471,22480,22457,22465,22798,22858,23065,23062,23085,23086,23061,23055,23063,23050,23070,23091,23404,23463,23469,23468,23555,23638,23636,23788,23807,23790,23793,23799,23808,23801,24105,24104,24232,24238,24234,24236,24371,24368,24423,24669,24666,24679,24641,24738,24712,24704,24722,24705,24733,24707,24725,24731,24727,24711,24732,24718,25113,25158,25330,25360,25430,25388,25412,25413,25398,25411,25572,25401,25419,25418,25404,25385,25409,25396,25432,25428,25433,25389,25415,25395,25434,25425,25400,25431,25408,25416,25930,25926,26054,26051,26052,26050,26186,26207,26183,26193,26386,26387,26655,26650,26697,26674,26675,26683,26699,26703,26646,26673,26652,26677,26667,26669,26671,26702,26692,26676,26653,26642,26644,26662,26664,26670,26701,26682,26661,26656,27436,27439,27437,27441,27444,27501,32898,27528,27622,27620,27624,27619,27618,27623,27685,28026,28003,28004,28022,27917,28001,28050,27992,28002,28013,28015,28049,28045,28143,28031,28038,27998,28007,28000,28055,28016,28028,27999,28034,28056,27951,28008,28043,28030,28032,28036,27926,28035,28027,28029,28021,28048,28892,28883,28881,28893,28875,32569,28898,28887,28882,28894,28896,28884,28877,28869,28870,28871,28890,28878,28897,29250,29304,29303,29302,29440,29434,29428,29438,29430,29427,29435,29441,29651,29657,29669,29654,29628,29671,29667,29673,29660,29650,29659,29652,29661,29658,29655,29656,29672,29918,29919,29940,29941,29985,30043,30047,30128,30145,30139,30148,30144,30143,30134,30138,30346,30409,30493,30491,30480,30483,30482,30499,30481,30485,30489,30490,30498,30503,30755,30764,30754,30773,30767,30760,30766,30763,30753,30761,30771,30762,30769,31060,31067,31055,31068,31059,31058,31057,31211,31212,31200,31214,31213,31210,31196,31198,31197,31366,31369,31365,31371,31372,31370,31367,31448,31504,31492,31507,31493,31503,31496,31498,31502,31497,31506,31876,31889,31882,31884,31880,31885,31877,32030,32029,32017,32014,32024,32022,32019,32031,32018,32015,32012,32604,32609,32606,32608,32605,32603,32662,32658,32707,32706,32704,32790,32830,32825,33018,33010,33017,33013,33025,33019,33024,33281,33327,33317,33587,33581,33604,33561,33617,33573,33622,33599,33601,33574,33564,33570,33602,33614,33563,33578,33544,33596,33613,33558,33572,33568,33591,33583,33577,33607,33605,33612,33619,33566,33580,33611,33575,33608,34387,34386,34466,34472,34454,34445,34449,34462,34439,34455,34438,34443,34458,34437,34469,34457,34465,34471,34453,34456,34446,34461,34448,34452,34883,34884,34925,34933,34934,34930,34944,34929,34943,34927,34947,34942,34932,34940,35346,35911,35927,35963,36004,36003,36214,36216,36277,36279,36278,36561,36563,36862,36853,36866,36863,36859,36868,36860,36854,37078,37088,37081,37082,37091,37087,37093,37080,37083,37079,37084,37092,37200,37198,37199,37333,37346,37338,38492,38495,38588,39139,39647,39727,20095,20592,20586,20577,20574,20576,20563,20555,20573,20594,20552,20557,20545,20571,20554,20578,20501,20549,20575,20585,20587,20579,20580,20550,20544,20590,20595,20567,20561,20944,21099,21101,21100,21102,21206,21203,21293,21404,21877,21878,21820,21837,21840,21812,21802,21841,21858,21814,21813,21808,21842,21829,21772,21810,21861,21838,21817,21832,21805,21819,21824,21835,22282,22279,22523,22548,22498,22518,22492,22516,22528,22509,22525,22536,22520,22539,22515,22479,22535,22510,22499,22514,22501,22508,22497,22542,22524,22544,22503,22529,22540,22513,22505,22512,22541,22532,22876,23136,23128,23125,23143,23134,23096,23093,23149,23120,23135,23141,23148,23123,23140,23127,23107,23133,23122,23108,23131,23112,23182,23102,23117,23097,23116,23152,23145,23111,23121,23126,23106,23132,23410,23406,23489,23488,23641,23838,23819,23837,23834,23840,23820,23848,23821,23846,23845,23823,23856,23826,23843,23839,23854,24126,24116,24241,24244,24249,24242,24243,24374,24376,24475,24470,24479,24714,24720,24710,24766,24752,24762,24787,24788,24783,24804,24793,24797,24776,24753,24795,24759,24778,24767,24771,24781,24768,25394,25445,25482,25474,25469,25533,25502,25517,25501,25495,25515,25486,25455,25479,25488,25454,25519,25461,25500,25453,25518,25468,25508,25403,25503,25464,25477,25473,25489,25485,25456,25939,26061,26213,26209,26203,26201,26204,26210,26392,26745,26759,26768,26780,26733,26734,26798,26795,26966,26735,26787,26796,26793,26741,26740,26802,26767,26743,26770,26748,26731,26738,26794,26752,26737,26750,26779,26774,26763,26784,26761,26788,26744,26747,26769,26764,26762,26749,27446,27443,27447,27448,27537,27535,27533,27534,27532,27690,28096,28075,28084,28083,28276,28076,28137,28130,28087,28150,28116,28160,28104,28128,28127,28118,28094,28133,28124,28125,28123,28148,28106,28093,28141,28144,28090,28117,28098,28111,28105,28112,28146,28115,28157,28119,28109,28131,28091,28922,28941,28919,28951,28916,28940,28912,28932,28915,28944,28924,28927,28934,28947,28928,28920,28918,28939,28930,28942,29310,29307,29308,29311,29469,29463,29447,29457,29464,29450,29448,29439,29455,29470,29576,29686,29688,29685,29700,29697,29693,29703,29696,29690,29692,29695,29708,29707,29684,29704,30052,30051,30158,30162,30159,30155,30156,30161,30160,30351,30345,30419,30521,30511,30509,30513,30514,30516,30515,30525,30501,30523,30517,30792,30802,30793,30797,30794,30796,30758,30789,30800,31076,31079,31081,31082,31075,31083,31073,31163,31226,31224,31222,31223,31375,31380,31376,31541,31559,31540,31525,31536,31522,31524,31539,31512,31530,31517,31537,31531,31533,31535,31538,31544,31514,31523,31892,31896,31894,31907,32053,32061,32056,32054,32058,32069,32044,32041,32065,32071,32062,32063,32074,32059,32040,32611,32661,32668,32669,32667,32714,32715,32717,32720,32721,32711,32719,32713,32799,32798,32795,32839,32835,32840,33048,33061,33049,33051,33069,33055,33068,33054,33057,33045,33063,33053,33058,33297,33336,33331,33338,33332,33330,33396,33680,33699,33704,33677,33658,33651,33700,33652,33679,33665,33685,33689,33653,33684,33705,33661,33667,33676,33693,33691,33706,33675,33662,33701,33711,33672,33687,33712,33663,33702,33671,33710,33654,33690,34393,34390,34495,34487,34498,34497,34501,34490,34480,34504,34489,34483,34488,34508,34484,34491,34492,34499,34493,34494,34898,34953,34965,34984,34978,34986,34970,34961,34977,34975,34968,34983,34969,34971,34967,34980,34988,34956,34963,34958,35202,35286,35289,35285,35376,35367,35372,35358,35897,35899,35932,35933,35965,36005,36221,36219,36217,36284,36290,36281,36287,36289,36568,36574,36573,36572,36567,36576,36577,36900,36875,36881,36892,36876,36897,37103,37098,37104,37108,37106,37107,37076,37099,37100,37097,37206,37208,37210,37203,37205,37356,37364,37361,37363,37368,37348,37369,37354,37355,37367,37352,37358,38266,38278,38280,38524,38509,38507,38513,38511,38591,38762,38916,39141,39319,20635,20629,20628,20638,20619,20643,20611,20620,20622,20637,20584,20636,20626,20610,20615,20831,20948,21266,21265,21412,21415,21905,21928,21925,21933,21879,22085,21922,21907,21896,21903,21941,21889,21923,21906,21924,21885,21900,21926,21887,21909,21921,21902,22284,22569,22583,22553,22558,22567,22563,22568,22517,22600,22565,22556,22555,22579,22591,22582,22574,22585,22584,22573,22572,22587,22881,23215,23188,23199,23162,23202,23198,23160,23206,23164,23205,23212,23189,23214,23095,23172,23178,23191,23171,23179,23209,23163,23165,23180,23196,23183,23187,23197,23530,23501,23499,23508,23505,23498,23502,23564,23600,23863,23875,23915,23873,23883,23871,23861,23889,23886,23893,23859,23866,23890,23869,23857,23897,23874,23865,23881,23864,23868,23858,23862,23872,23877,24132,24129,24408,24486,24485,24491,24777,24761,24780,24802,24782,24772,24852,24818,24842,24854,24837,24821,24851,24824,24828,24830,24769,24835,24856,24861,24848,24831,24836,24843,25162,25492,25521,25520,25550,25573,25576,25583,25539,25757,25587,25546,25568,25590,25557,25586,25589,25697,25567,25534,25565,25564,25540,25560,25555,25538,25543,25548,25547,25544,25584,25559,25561,25906,25959,25962,25956,25948,25960,25957,25996,26013,26014,26030,26064,26066,26236,26220,26235,26240,26225,26233,26218,26226,26369,26892,26835,26884,26844,26922,26860,26858,26865,26895,26838,26871,26859,26852,26870,26899,26896,26867,26849,26887,26828,26888,26992,26804,26897,26863,26822,26900,26872,26832,26877,26876,26856,26891,26890,26903,26830,26824,26845,26846,26854,26868,26833,26886,26836,26857,26901,26917,26823,27449,27451,27455,27452,27540,27543,27545,27541,27581,27632,27634,27635,27696,28156,28230,28231,28191,28233,28296,28220,28221,28229,28258,28203,28223,28225,28253,28275,28188,28211,28235,28224,28241,28219,28163,28206,28254,28264,28252,28257,28209,28200,28256,28273,28267,28217,28194,28208,28243,28261,28199,28280,28260,28279,28245,28281,28242,28262,28213,28214,28250,28960,28958,28975,28923,28974,28977,28963,28965,28962,28978,28959,28968,28986,28955,29259,29274,29320,29321,29318,29317,29323,29458,29451,29488,29474,29489,29491,29479,29490,29485,29478,29475,29493,29452,29742,29740,29744,29739,29718,29722,29729,29741,29745,29732,29731,29725,29737,29728,29746,29947,29999,30063,30060,30183,30170,30177,30182,30173,30175,30180,30167,30357,30354,30426,30534,30535,30532,30541,30533,30538,30542,30539,30540,30686,30700,30816,30820,30821,30812,30829,30833,30826,30830,30832,30825,30824,30814,30818,31092,31091,31090,31088,31234,31242,31235,31244,31236,31385,31462,31460,31562,31547,31556,31560,31564,31566,31552,31576,31557,31906,31902,31912,31905,32088,32111,32099,32083,32086,32103,32106,32079,32109,32092,32107,32082,32084,32105,32081,32095,32078,32574,32575,32613,32614,32674,32672,32673,32727,32849,32847,32848,33022,32980,33091,33098,33106,33103,33095,33085,33101,33082,33254,33262,33271,33272,33273,33284,33340,33341,33343,33397,33595,33743,33785,33827,33728,33768,33810,33767,33764,33788,33782,33808,33734,33736,33771,33763,33727,33793,33757,33765,33752,33791,33761,33739,33742,33750,33781,33737,33801,33807,33758,33809,33798,33730,33779,33749,33786,33735,33745,33770,33811,33731,33772,33774,33732,33787,33751,33762,33819,33755,33790,34520,34530,34534,34515,34531,34522,34538,34525,34539,34524,34540,34537,34519,34536,34513,34888,34902,34901,35002,35031,35001,35000,35008,35006,34998,35004,34999,35005,34994,35073,35017,35221,35224,35223,35293,35290,35291,35406,35405,35385,35417,35392,35415,35416,35396,35397,35410,35400,35409,35402,35404,35407,35935,35969,35968,36026,36030,36016,36025,36021,36228,36224,36233,36312,36307,36301,36295,36310,36316,36303,36309,36313,36296,36311,36293,36591,36599,36602,36601,36582,36590,36581,36597,36583,36584,36598,36587,36593,36588,36596,36585,36909,36916,36911,37126,37164,37124,37119,37116,37128,37113,37115,37121,37120,37127,37125,37123,37217,37220,37215,37218,37216,37377,37386,37413,37379,37402,37414,37391,37388,37376,37394,37375,37373,37382,37380,37415,37378,37404,37412,37401,37399,37381,37398,38267,38285,38284,38288,38535,38526,38536,38537,38531,38528,38594,38600,38595,38641,38640,38764,38768,38766,38919,39081,39147,40166,40697,20099,20100,20150,20669,20671,20678,20654,20676,20682,20660,20680,20674,20656,20673,20666,20657,20683,20681,20662,20664,20951,21114,21112,21115,21116,21955,21979,21964,21968,21963,21962,21981,21952,21972,21956,21993,21951,21970,21901,21967,21973,21986,21974,21960,22002,21965,21977,21954,22292,22611,22632,22628,22607,22605,22601,22639,22613,22606,22621,22617,22629,22619,22589,22627,22641,22780,23239,23236,23243,23226,23224,23217,23221,23216,23231,23240,23227,23238,23223,23232,23242,23220,23222,23245,23225,23184,23510,23512,23513,23583,23603,23921,23907,23882,23909,23922,23916,23902,23912,23911,23906,24048,24143,24142,24138,24141,24139,24261,24268,24262,24267,24263,24384,24495,24493,24823,24905,24906,24875,24901,24886,24882,24878,24902,24879,24911,24873,24896,25120,37224,25123,25125,25124,25541,25585,25579,25616,25618,25609,25632,25636,25651,25667,25631,25621,25624,25657,25655,25634,25635,25612,25638,25648,25640,25665,25653,25647,25610,25626,25664,25637,25639,25611,25575,25627,25646,25633,25614,25967,26002,26067,26246,26252,26261,26256,26251,26250,26265,26260,26232,26400,26982,26975,26936,26958,26978,26993,26943,26949,26986,26937,26946,26967,26969,27002,26952,26953,26933,26988,26931,26941,26981,26864,27000,26932,26985,26944,26991,26948,26998,26968,26945,26996,26956,26939,26955,26935,26972,26959,26961,26930,26962,26927,27003,26940,27462,27461,27459,27458,27464,27457,27547,64013,27643,27644,27641,27639,27640,28315,28374,28360,28303,28352,28319,28307,28308,28320,28337,28345,28358,28370,28349,28353,28318,28361,28343,28336,28365,28326,28367,28338,28350,28355,28380,28376,28313,28306,28302,28301,28324,28321,28351,28339,28368,28362,28311,28334,28323,28999,29012,29010,29027,29024,28993,29021,29026,29042,29048,29034,29025,28994,29016,28995,29003,29040,29023,29008,29011,28996,29005,29018,29263,29325,29324,29329,29328,29326,29500,29506,29499,29498,29504,29514,29513,29764,29770,29771,29778,29777,29783,29760,29775,29776,29774,29762,29766,29773,29780,29921,29951,29950,29949,29981,30073,30071,27011,30191,30223,30211,30199,30206,30204,30201,30200,30224,30203,30198,30189,30197,30205,30361,30389,30429,30549,30559,30560,30546,30550,30554,30569,30567,30548,30553,30573,30688,30855,30874,30868,30863,30852,30869,30853,30854,30881,30851,30841,30873,30848,30870,30843,31100,31106,31101,31097,31249,31256,31257,31250,31255,31253,31266,31251,31259,31248,31395,31394,31390,31467,31590,31588,31597,31604,31593,31602,31589,31603,31601,31600,31585,31608,31606,31587,31922,31924,31919,32136,32134,32128,32141,32127,32133,32122,32142,32123,32131,32124,32140,32148,32132,32125,32146,32621,32619,32615,32616,32620,32678,32677,32679,32731,32732,32801,33124,33120,33143,33116,33129,33115,33122,33138,26401,33118,33142,33127,33135,33092,33121,33309,33353,33348,33344,33346,33349,34033,33855,33878,33910,33913,33935,33933,33893,33873,33856,33926,33895,33840,33869,33917,33882,33881,33908,33907,33885,34055,33886,33847,33850,33844,33914,33859,33912,33842,33861,33833,33753,33867,33839,33858,33837,33887,33904,33849,33870,33868,33874,33903,33989,33934,33851,33863,33846,33843,33896,33918,33860,33835,33888,33876,33902,33872,34571,34564,34551,34572,34554,34518,34549,34637,34552,34574,34569,34561,34550,34573,34565,35030,35019,35021,35022,35038,35035,35034,35020,35024,35205,35227,35295,35301,35300,35297,35296,35298,35292,35302,35446,35462,35455,35425,35391,35447,35458,35460,35445,35459,35457,35444,35450,35900,35915,35914,35941,35940,35942,35974,35972,35973,36044,36200,36201,36241,36236,36238,36239,36237,36243,36244,36240,36242,36336,36320,36332,36337,36334,36304,36329,36323,36322,36327,36338,36331,36340,36614,36607,36609,36608,36613,36615,36616,36610,36619,36946,36927,36932,36937,36925,37136,37133,37135,37137,37142,37140,37131,37134,37230,37231,37448,37458,37424,37434,37478,37427,37477,37470,37507,37422,37450,37446,37485,37484,37455,37472,37479,37487,37430,37473,37488,37425,37460,37475,37456,37490,37454,37459,37452,37462,37426,38303,38300,38302,38299,38546,38547,38545,38551,38606,38650,38653,38648,38645,38771,38775,38776,38770,38927,38925,38926,39084,39158,39161,39343,39346,39344,39349,39597,39595,39771,40170,40173,40167,40576,40701,20710,20692,20695,20712,20723,20699,20714,20701,20708,20691,20716,20720,20719,20707,20704,20952,21120,21121,21225,21227,21296,21420,22055,22037,22028,22034,22012,22031,22044,22017,22035,22018,22010,22045,22020,22015,22009,22665,22652,22672,22680,22662,22657,22655,22644,22667,22650,22663,22673,22670,22646,22658,22664,22651,22676,22671,22782,22891,23260,23278,23269,23253,23274,23258,23277,23275,23283,23266,23264,23259,23276,23262,23261,23257,23272,23263,23415,23520,23523,23651,23938,23936,23933,23942,23930,23937,23927,23946,23945,23944,23934,23932,23949,23929,23935,24152,24153,24147,24280,24273,24279,24270,24284,24277,24281,24274,24276,24388,24387,24431,24502,24876,24872,24897,24926,24945,24947,24914,24915,24946,24940,24960,24948,24916,24954,24923,24933,24891,24938,24929,24918,25129,25127,25131,25643,25677,25691,25693,25716,25718,25714,25715,25725,25717,25702,25766,25678,25730,25694,25692,25675,25683,25696,25680,25727,25663,25708,25707,25689,25701,25719,25971,26016,26273,26272,26271,26373,26372,26402,27057,27062,27081,27040,27086,27030,27056,27052,27068,27025,27033,27022,27047,27021,27049,27070,27055,27071,27076,27069,27044,27092,27065,27082,27034,27087,27059,27027,27050,27041,27038,27097,27031,27024,27074,27061,27045,27078,27466,27469,27467,27550,27551,27552,27587,27588,27646,28366,28405,28401,28419,28453,28408,28471,28411,28462,28425,28494,28441,28442,28455,28440,28475,28434,28397,28426,28470,28531,28409,28398,28461,28480,28464,28476,28469,28395,28423,28430,28483,28421,28413,28406,28473,28444,28412,28474,28447,28429,28446,28424,28449,29063,29072,29065,29056,29061,29058,29071,29051,29062,29057,29079,29252,29267,29335,29333,29331,29507,29517,29521,29516,29794,29811,29809,29813,29810,29799,29806,29952,29954,29955,30077,30096,30230,30216,30220,30229,30225,30218,30228,30392,30593,30588,30597,30594,30574,30592,30575,30590,30595,30898,30890,30900,30893,30888,30846,30891,30878,30885,30880,30892,30882,30884,31128,31114,31115,31126,31125,31124,31123,31127,31112,31122,31120,31275,31306,31280,31279,31272,31270,31400,31403,31404,31470,31624,31644,31626,31633,31632,31638,31629,31628,31643,31630,31621,31640,21124,31641,31652,31618,31931,31935,31932,31930,32167,32183,32194,32163,32170,32193,32192,32197,32157,32206,32196,32198,32203,32204,32175,32185,32150,32188,32159,32166,32174,32169,32161,32201,32627,32738,32739,32741,32734,32804,32861,32860,33161,33158,33155,33159,33165,33164,33163,33301,33943,33956,33953,33951,33978,33998,33986,33964,33966,33963,33977,33972,33985,33997,33962,33946,33969,34000,33949,33959,33979,33954,33940,33991,33996,33947,33961,33967,33960,34006,33944,33974,33999,33952,34007,34004,34002,34011,33968,33937,34401,34611,34595,34600,34667,34624,34606,34590,34593,34585,34587,34627,34604,34625,34622,34630,34592,34610,34602,34605,34620,34578,34618,34609,34613,34626,34598,34599,34616,34596,34586,34608,34577,35063,35047,35057,35058,35066,35070,35054,35068,35062,35067,35056,35052,35051,35229,35233,35231,35230,35305,35307,35304,35499,35481,35467,35474,35471,35478,35901,35944,35945,36053,36047,36055,36246,36361,36354,36351,36365,36349,36362,36355,36359,36358,36357,36350,36352,36356,36624,36625,36622,36621,37155,37148,37152,37154,37151,37149,37146,37156,37153,37147,37242,37234,37241,37235,37541,37540,37494,37531,37498,37536,37524,37546,37517,37542,37530,37547,37497,37527,37503,37539,37614,37518,37506,37525,37538,37501,37512,37537,37514,37510,37516,37529,37543,37502,37511,37545,37533,37515,37421,38558,38561,38655,38744,38781,38778,38782,38787,38784,38786,38779,38788,38785,38783,38862,38861,38934,39085,39086,39170,39168,39175,39325,39324,39363,39353,39355,39354,39362,39357,39367,39601,39651,39655,39742,39743,39776,39777,39775,40177,40178,40181,40615,20735,20739,20784,20728,20742,20743,20726,20734,20747,20748,20733,20746,21131,21132,21233,21231,22088,22082,22092,22069,22081,22090,22089,22086,22104,22106,22080,22067,22077,22060,22078,22072,22058,22074,22298,22699,22685,22705,22688,22691,22703,22700,22693,22689,22783,23295,23284,23293,23287,23286,23299,23288,23298,23289,23297,23303,23301,23311,23655,23961,23959,23967,23954,23970,23955,23957,23968,23964,23969,23962,23966,24169,24157,24160,24156,32243,24283,24286,24289,24393,24498,24971,24963,24953,25009,25008,24994,24969,24987,24979,25007,25005,24991,24978,25002,24993,24973,24934,25011,25133,25710,25712,25750,25760,25733,25751,25756,25743,25739,25738,25740,25763,25759,25704,25777,25752,25974,25978,25977,25979,26034,26035,26293,26288,26281,26290,26295,26282,26287,27136,27142,27159,27109,27128,27157,27121,27108,27168,27135,27116,27106,27163,27165,27134,27175,27122,27118,27156,27127,27111,27200,27144,27110,27131,27149,27132,27115,27145,27140,27160,27173,27151,27126,27174,27143,27124,27158,27473,27557,27555,27554,27558,27649,27648,27647,27650,28481,28454,28542,28551,28614,28562,28557,28553,28556,28514,28495,28549,28506,28566,28534,28524,28546,28501,28530,28498,28496,28503,28564,28563,28509,28416,28513,28523,28541,28519,28560,28499,28555,28521,28543,28565,28515,28535,28522,28539,29106,29103,29083,29104,29088,29082,29097,29109,29085,29093,29086,29092,29089,29098,29084,29095,29107,29336,29338,29528,29522,29534,29535,29536,29533,29531,29537,29530,29529,29538,29831,29833,29834,29830,29825,29821,29829,29832,29820,29817,29960,29959,30078,30245,30238,30233,30237,30236,30243,30234,30248,30235,30364,30365,30366,30363,30605,30607,30601,30600,30925,30907,30927,30924,30929,30926,30932,30920,30915,30916,30921,31130,31137,31136,31132,31138,31131,27510,31289,31410,31412,31411,31671,31691,31678,31660,31694,31663,31673,31690,31669,31941,31944,31948,31947,32247,32219,32234,32231,32215,32225,32259,32250,32230,32246,32241,32240,32238,32223,32630,32684,32688,32685,32749,32747,32746,32748,32742,32744,32868,32871,33187,33183,33182,33173,33186,33177,33175,33302,33359,33363,33362,33360,33358,33361,34084,34107,34063,34048,34089,34062,34057,34061,34079,34058,34087,34076,34043,34091,34042,34056,34060,34036,34090,34034,34069,34039,34027,34035,34044,34066,34026,34025,34070,34046,34088,34077,34094,34050,34045,34078,34038,34097,34086,34023,34024,34032,34031,34041,34072,34080,34096,34059,34073,34095,34402,34646,34659,34660,34679,34785,34675,34648,34644,34651,34642,34657,34650,34641,34654,34669,34666,34640,34638,34655,34653,34671,34668,34682,34670,34652,34661,34639,34683,34677,34658,34663,34665,34906,35077,35084,35092,35083,35095,35096,35097,35078,35094,35089,35086,35081,35234,35236,35235,35309,35312,35308,35535,35526,35512,35539,35537,35540,35541,35515,35543,35518,35520,35525,35544,35523,35514,35517,35545,35902,35917,35983,36069,36063,36057,36072,36058,36061,36071,36256,36252,36257,36251,36384,36387,36389,36388,36398,36373,36379,36374,36369,36377,36390,36391,36372,36370,36376,36371,36380,36375,36378,36652,36644,36632,36634,36640,36643,36630,36631,36979,36976,36975,36967,36971,37167,37163,37161,37162,37170,37158,37166,37253,37254,37258,37249,37250,37252,37248,37584,37571,37572,37568,37593,37558,37583,37617,37599,37592,37609,37591,37597,37580,37615,37570,37608,37578,37576,37582,37606,37581,37589,37577,37600,37598,37607,37585,37587,37557,37601,37574,37556,38268,38316,38315,38318,38320,38564,38562,38611,38661,38664,38658,38746,38794,38798,38792,38864,38863,38942,38941,38950,38953,38952,38944,38939,38951,39090,39176,39162,39185,39188,39190,39191,39189,39388,39373,39375,39379,39380,39374,39369,39382,39384,39371,39383,39372,39603,39660,39659,39667,39666,39665,39750,39747,39783,39796,39793,39782,39798,39797,39792,39784,39780,39788,40188,40186,40189,40191,40183,40199,40192,40185,40187,40200,40197,40196,40579,40659,40719,40720,20764,20755,20759,20762,20753,20958,21300,21473,22128,22112,22126,22131,22118,22115,22125,22130,22110,22135,22300,22299,22728,22717,22729,22719,22714,22722,22716,22726,23319,23321,23323,23329,23316,23315,23312,23318,23336,23322,23328,23326,23535,23980,23985,23977,23975,23989,23984,23982,23978,23976,23986,23981,23983,23988,24167,24168,24166,24175,24297,24295,24294,24296,24293,24395,24508,24989,25000,24982,25029,25012,25030,25025,25036,25018,25023,25016,24972,25815,25814,25808,25807,25801,25789,25737,25795,25819,25843,25817,25907,25983,25980,26018,26312,26302,26304,26314,26315,26319,26301,26299,26298,26316,26403,27188,27238,27209,27239,27186,27240,27198,27229,27245,27254,27227,27217,27176,27226,27195,27199,27201,27242,27236,27216,27215,27220,27247,27241,27232,27196,27230,27222,27221,27213,27214,27206,27477,27476,27478,27559,27562,27563,27592,27591,27652,27651,27654,28589,28619,28579,28615,28604,28622,28616,28510,28612,28605,28574,28618,28584,28676,28581,28590,28602,28588,28586,28623,28607,28600,28578,28617,28587,28621,28591,28594,28592,29125,29122,29119,29112,29142,29120,29121,29131,29140,29130,29127,29135,29117,29144,29116,29126,29146,29147,29341,29342,29545,29542,29543,29548,29541,29547,29546,29823,29850,29856,29844,29842,29845,29857,29963,30080,30255,30253,30257,30269,30259,30268,30261,30258,30256,30395,30438,30618,30621,30625,30620,30619,30626,30627,30613,30617,30615,30941,30953,30949,30954,30942,30947,30939,30945,30946,30957,30943,30944,31140,31300,31304,31303,31414,31416,31413,31409,31415,31710,31715,31719,31709,31701,31717,31706,31720,31737,31700,31722,31714,31708,31723,31704,31711,31954,31956,31959,31952,31953,32274,32289,32279,32268,32287,32288,32275,32270,32284,32277,32282,32290,32267,32271,32278,32269,32276,32293,32292,32579,32635,32636,32634,32689,32751,32810,32809,32876,33201,33190,33198,33209,33205,33195,33200,33196,33204,33202,33207,33191,33266,33365,33366,33367,34134,34117,34155,34125,34131,34145,34136,34112,34118,34148,34113,34146,34116,34129,34119,34147,34110,34139,34161,34126,34158,34165,34133,34151,34144,34188,34150,34141,34132,34149,34156,34403,34405,34404,34715,34703,34711,34707,34706,34696,34689,34710,34712,34681,34695,34723,34693,34704,34705,34717,34692,34708,34716,34714,34697,35102,35110,35120,35117,35118,35111,35121,35106,35113,35107,35119,35116,35103,35313,35552,35554,35570,35572,35573,35549,35604,35556,35551,35568,35528,35550,35553,35560,35583,35567,35579,35985,35986,35984,36085,36078,36081,36080,36083,36204,36206,36261,36263,36403,36414,36408,36416,36421,36406,36412,36413,36417,36400,36415,36541,36662,36654,36661,36658,36665,36663,36660,36982,36985,36987,36998,37114,37171,37173,37174,37267,37264,37265,37261,37263,37671,37662,37640,37663,37638,37647,37754,37688,37692,37659,37667,37650,37633,37702,37677,37646,37645,37579,37661,37626,37669,37651,37625,37623,37684,37634,37668,37631,37673,37689,37685,37674,37652,37644,37643,37630,37641,37632,37627,37654,38332,38349,38334,38329,38330,38326,38335,38325,38333,38569,38612,38667,38674,38672,38809,38807,38804,38896,38904,38965,38959,38962,39204,39199,39207,39209,39326,39406,39404,39397,39396,39408,39395,39402,39401,39399,39609,39615,39604,39611,39670,39674,39673,39671,39731,39808,39813,39815,39804,39806,39803,39810,39827,39826,39824,39802,39829,39805,39816,40229,40215,40224,40222,40212,40233,40221,40216,40226,40208,40217,40223,40584,40582,40583,40622,40621,40661,40662,40698,40722,40765,20774,20773,20770,20772,20768,20777,21236,22163,22156,22157,22150,22148,22147,22142,22146,22143,22145,22742,22740,22735,22738,23341,23333,23346,23331,23340,23335,23334,23343,23342,23419,23537,23538,23991,24172,24170,24510,24507,25027,25013,25020,25063,25056,25061,25060,25064,25054,25839,25833,25827,25835,25828,25832,25985,25984,26038,26074,26322,27277,27286,27265,27301,27273,27295,27291,27297,27294,27271,27283,27278,27285,27267,27304,27300,27281,27263,27302,27290,27269,27276,27282,27483,27565,27657,28620,28585,28660,28628,28643,28636,28653,28647,28646,28638,28658,28637,28642,28648,29153,29169,29160,29170,29156,29168,29154,29555,29550,29551,29847,29874,29867,29840,29866,29869,29873,29861,29871,29968,29969,29970,29967,30084,30275,30280,30281,30279,30372,30441,30645,30635,30642,30647,30646,30644,30641,30632,30704,30963,30973,30978,30971,30972,30962,30981,30969,30974,30980,31147,31144,31324,31323,31318,31320,31316,31322,31422,31424,31425,31749,31759,31730,31744,31743,31739,31758,31732,31755,31731,31746,31753,31747,31745,31736,31741,31750,31728,31729,31760,31754,31976,32301,32316,32322,32307,38984,32312,32298,32329,32320,32327,32297,32332,32304,32315,32310,32324,32314,32581,32639,32638,32637,32756,32754,32812,33211,33220,33228,33226,33221,33223,33212,33257,33371,33370,33372,34179,34176,34191,34215,34197,34208,34187,34211,34171,34212,34202,34206,34167,34172,34185,34209,34170,34168,34135,34190,34198,34182,34189,34201,34205,34177,34210,34178,34184,34181,34169,34166,34200,34192,34207,34408,34750,34730,34733,34757,34736,34732,34745,34741,34748,34734,34761,34755,34754,34764,34743,34735,34756,34762,34740,34742,34751,34744,34749,34782,34738,35125,35123,35132,35134,35137,35154,35127,35138,35245,35247,35246,35314,35315,35614,35608,35606,35601,35589,35595,35618,35599,35602,35605,35591,35597,35592,35590,35612,35603,35610,35919,35952,35954,35953,35951,35989,35988,36089,36207,36430,36429,36435,36432,36428,36423,36675,36672,36997,36990,37176,37274,37282,37275,37273,37279,37281,37277,37280,37793,37763,37807,37732,37718,37703,37756,37720,37724,37750,37705,37712,37713,37728,37741,37775,37708,37738,37753,37719,37717,37714,37711,37745,37751,37755,37729,37726,37731,37735,37760,37710,37721,38343,38336,38345,38339,38341,38327,38574,38576,38572,38688,38687,38680,38685,38681,38810,38817,38812,38814,38813,38869,38868,38897,38977,38980,38986,38985,38981,38979,39205,39211,39212,39210,39219,39218,39215,39213,39217,39216,39320,39331,39329,39426,39418,39412,39415,39417,39416,39414,39419,39421,39422,39420,39427,39614,39678,39677,39681,39676,39752,39834,39848,39838,39835,39846,39841,39845,39844,39814,39842,39840,39855,40243,40257,40295,40246,40238,40239,40241,40248,40240,40261,40258,40259,40254,40247,40256,40253,32757,40237,40586,40585,40589,40624,40648,40666,40699,40703,40740,40739,40738,40788,40864,20785,20781,20782,22168,22172,22167,22170,22173,22169,22896,23356,23657,23658,24000,24173,24174,25048,25055,25069,25070,25073,25066,25072,25067,25046,25065,25855,25860,25853,25848,25857,25859,25852,26004,26075,26330,26331,26328,27333,27321,27325,27361,27334,27322,27318,27319,27335,27316,27309,27486,27593,27659,28679,28684,28685,28673,28677,28692,28686,28671,28672,28667,28710,28668,28663,28682,29185,29183,29177,29187,29181,29558,29880,29888,29877,29889,29886,29878,29883,29890,29972,29971,30300,30308,30297,30288,30291,30295,30298,30374,30397,30444,30658,30650,30975,30988,30995,30996,30985,30992,30994,30993,31149,31148,31327,31772,31785,31769,31776,31775,31789,31773,31782,31784,31778,31781,31792,32348,32336,32342,32355,32344,32354,32351,32337,32352,32343,32339,32693,32691,32759,32760,32885,33233,33234,33232,33375,33374,34228,34246,34240,34243,34242,34227,34229,34237,34247,34244,34239,34251,34254,34248,34245,34225,34230,34258,34340,34232,34231,34238,34409,34791,34790,34786,34779,34795,34794,34789,34783,34803,34788,34772,34780,34771,34797,34776,34787,34724,34775,34777,34817,34804,34792,34781,35155,35147,35151,35148,35142,35152,35153,35145,35626,35623,35619,35635,35632,35637,35655,35631,35644,35646,35633,35621,35639,35622,35638,35630,35620,35643,35645,35642,35906,35957,35993,35992,35991,36094,36100,36098,36096,36444,36450,36448,36439,36438,36446,36453,36455,36443,36442,36449,36445,36457,36436,36678,36679,36680,36683,37160,37178,37179,37182,37288,37285,37287,37295,37290,37813,37772,37778,37815,37787,37789,37769,37799,37774,37802,37790,37798,37781,37768,37785,37791,37773,37809,37777,37810,37796,37800,37812,37795,37797,38354,38355,38353,38579,38615,38618,24002,38623,38616,38621,38691,38690,38693,38828,38830,38824,38827,38820,38826,38818,38821,38871,38873,38870,38872,38906,38992,38993,38994,39096,39233,39228,39226,39439,39435,39433,39437,39428,39441,39434,39429,39431,39430,39616,39644,39688,39684,39685,39721,39733,39754,39756,39755,39879,39878,39875,39871,39873,39861,39864,39891,39862,39876,39865,39869,40284,40275,40271,40266,40283,40267,40281,40278,40268,40279,40274,40276,40287,40280,40282,40590,40588,40671,40705,40704,40726,40741,40747,40746,40745,40744,40780,40789,20788,20789,21142,21239,21428,22187,22189,22182,22183,22186,22188,22746,22749,22747,22802,23357,23358,23359,24003,24176,24511,25083,25863,25872,25869,25865,25868,25870,25988,26078,26077,26334,27367,27360,27340,27345,27353,27339,27359,27356,27344,27371,27343,27341,27358,27488,27568,27660,28697,28711,28704,28694,28715,28705,28706,28707,28713,28695,28708,28700,28714,29196,29194,29191,29186,29189,29349,29350,29348,29347,29345,29899,29893,29879,29891,29974,30304,30665,30666,30660,30705,31005,31003,31009,31004,30999,31006,31152,31335,31336,31795,31804,31801,31788,31803,31980,31978,32374,32373,32376,32368,32375,32367,32378,32370,32372,32360,32587,32586,32643,32646,32695,32765,32766,32888,33239,33237,33380,33377,33379,34283,34289,34285,34265,34273,34280,34266,34263,34284,34290,34296,34264,34271,34275,34268,34257,34288,34278,34287,34270,34274,34816,34810,34819,34806,34807,34825,34828,34827,34822,34812,34824,34815,34826,34818,35170,35162,35163,35159,35169,35164,35160,35165,35161,35208,35255,35254,35318,35664,35656,35658,35648,35667,35670,35668,35659,35669,35665,35650,35666,35671,35907,35959,35958,35994,36102,36103,36105,36268,36266,36269,36267,36461,36472,36467,36458,36463,36475,36546,36690,36689,36687,36688,36691,36788,37184,37183,37296,37293,37854,37831,37839,37826,37850,37840,37881,37868,37836,37849,37801,37862,37834,37844,37870,37859,37845,37828,37838,37824,37842,37863,38269,38362,38363,38625,38697,38699,38700,38696,38694,38835,38839,38838,38877,38878,38879,39004,39001,39005,38999,39103,39101,39099,39102,39240,39239,39235,39334,39335,39450,39445,39461,39453,39460,39451,39458,39456,39463,39459,39454,39452,39444,39618,39691,39690,39694,39692,39735,39914,39915,39904,39902,39908,39910,39906,39920,39892,39895,39916,39900,39897,39909,39893,39905,39898,40311,40321,40330,40324,40328,40305,40320,40312,40326,40331,40332,40317,40299,40308,40309,40304,40297,40325,40307,40315,40322,40303,40313,40319,40327,40296,40596,40593,40640,40700,40749,40768,40769,40781,40790,40791,40792,21303,22194,22197,22195,22755,23365,24006,24007,24302,24303,24512,24513,25081,25879,25878,25877,25875,26079,26344,26339,26340,27379,27376,27370,27368,27385,27377,27374,27375,28732,28725,28719,28727,28724,28721,28738,28728,28735,28730,28729,28736,28731,28723,28737,29203,29204,29352,29565,29564,29882,30379,30378,30398,30445,30668,30670,30671,30669,30706,31013,31011,31015,31016,31012,31017,31154,31342,31340,31341,31479,31817,31816,31818,31815,31813,31982,32379,32382,32385,32384,32698,32767,32889,33243,33241,33291,33384,33385,34338,34303,34305,34302,34331,34304,34294,34308,34313,34309,34316,34301,34841,34832,34833,34839,34835,34838,35171,35174,35257,35319,35680,35690,35677,35688,35683,35685,35687,35693,36270,36486,36488,36484,36697,36694,36695,36693,36696,36698,37005,37187,37185,37303,37301,37298,37299,37899,37907,37883,37920,37903,37908,37886,37909,37904,37928,37913,37901,37877,37888,37879,37895,37902,37910,37906,37882,37897,37880,37898,37887,37884,37900,37878,37905,37894,38366,38368,38367,38702,38703,38841,38843,38909,38910,39008,39010,39011,39007,39105,39106,39248,39246,39257,39244,39243,39251,39474,39476,39473,39468,39466,39478,39465,39470,39480,39469,39623,39626,39622,39696,39698,39697,39947,39944,39927,39941,39954,39928,40000,39943,39950,39942,39959,39956,39945,40351,40345,40356,40349,40338,40344,40336,40347,40352,40340,40348,40362,40343,40353,40346,40354,40360,40350,40355,40383,40361,40342,40358,40359,40601,40603,40602,40677,40676,40679,40678,40752,40750,40795,40800,40798,40797,40793,40849,20794,20793,21144,21143,22211,22205,22206,23368,23367,24011,24015,24305,25085,25883,27394,27388,27395,27384,27392,28739,28740,28746,28744,28745,28741,28742,29213,29210,29209,29566,29975,30314,30672,31021,31025,31023,31828,31827,31986,32394,32391,32392,32395,32390,32397,32589,32699,32816,33245,34328,34346,34342,34335,34339,34332,34329,34343,34350,34337,34336,34345,34334,34341,34857,34845,34843,34848,34852,34844,34859,34890,35181,35177,35182,35179,35322,35705,35704,35653,35706,35707,36112,36116,36271,36494,36492,36702,36699,36701,37190,37188,37189,37305,37951,37947,37942,37929,37949,37948,37936,37945,37930,37943,37932,37952,37937,38373,38372,38371,38709,38714,38847,38881,39012,39113,39110,39104,39256,39254,39481,39485,39494,39492,39490,39489,39482,39487,39629,39701,39703,39704,39702,39738,39762,39979,39965,39964,39980,39971,39976,39977,39972,39969,40375,40374,40380,40385,40391,40394,40399,40382,40389,40387,40379,40373,40398,40377,40378,40364,40392,40369,40365,40396,40371,40397,40370,40570,40604,40683,40686,40685,40731,40728,40730,40753,40782,40805,40804,40850,20153,22214,22213,22219,22897,23371,23372,24021,24017,24306,25889,25888,25894,25890,27403,27400,27401,27661,28757,28758,28759,28754,29214,29215,29353,29567,29912,29909,29913,29911,30317,30381,31029,31156,31344,31345,31831,31836,31833,31835,31834,31988,31985,32401,32591,32647,33246,33387,34356,34357,34355,34348,34354,34358,34860,34856,34854,34858,34853,35185,35263,35262,35323,35710,35716,35714,35718,35717,35711,36117,36501,36500,36506,36498,36496,36502,36503,36704,36706,37191,37964,37968,37962,37963,37967,37959,37957,37960,37961,37958,38719,38883,39018,39017,39115,39252,39259,39502,39507,39508,39500,39503,39496,39498,39497,39506,39504,39632,39705,39723,39739,39766,39765,40006,40008,39999,40004,39993,39987,40001,39996,39991,39988,39986,39997,39990,40411,40402,40414,40410,40395,40400,40412,40401,40415,40425,40409,40408,40406,40437,40405,40413,40630,40688,40757,40755,40754,40770,40811,40853,40866,20797,21145,22760,22759,22898,23373,24024,34863,24399,25089,25091,25092,25897,25893,26006,26347,27409,27410,27407,27594,28763,28762,29218,29570,29569,29571,30320,30676,31847,31846,32405,33388,34362,34368,34361,34364,34353,34363,34366,34864,34866,34862,34867,35190,35188,35187,35326,35724,35726,35723,35720,35909,36121,36504,36708,36707,37308,37986,37973,37981,37975,37982,38852,38853,38912,39510,39513,39710,39711,39712,40018,40024,40016,40010,40013,40011,40021,40025,40012,40014,40443,40439,40431,40419,40427,40440,40420,40438,40417,40430,40422,40434,40432,40418,40428,40436,40435,40424,40429,40642,40656,40690,40691,40710,40732,40760,40759,40758,40771,40783,40817,40816,40814,40815,22227,22221,23374,23661,25901,26349,26350,27411,28767,28769,28765,28768,29219,29915,29925,30677,31032,31159,31158,31850,32407,32649,33389,34371,34872,34871,34869,34891,35732,35733,36510,36511,36512,36509,37310,37309,37314,37995,37992,37993,38629,38726,38723,38727,38855,38885,39518,39637,39769,40035,40039,40038,40034,40030,40032,40450,40446,40455,40451,40454,40453,40448,40449,40457,40447,40445,40452,40608,40734,40774,40820,40821,40822,22228,25902,26040,27416,27417,27415,27418,28770,29222,29354,30680,30681,31033,31849,31851,31990,32410,32408,32411,32409,33248,33249,34374,34375,34376,35193,35194,35196,35195,35327,35736,35737,36517,36516,36515,37998,37997,37999,38001,38003,38729,39026,39263,40040,40046,40045,40459,40461,40464,40463,40466,40465,40609,40693,40713,40775,40824,40827,40826,40825,22302,28774,31855,34876,36274,36518,37315,38004,38008,38006,38005,39520,40052,40051,40049,40053,40468,40467,40694,40714,40868,28776,28773,31991,34410,34878,34877,34879,35742,35996,36521,36553,38731,39027,39028,39116,39265,39339,39524,39526,39527,39716,40469,40471,40776,25095,27422,29223,34380,36520,38018,38016,38017,39529,39528,39726,40473,29225,34379,35743,38019,40057,40631,30325,39531,40058,40477,28777,28778,40612,40830,40777,40856,30849,37561,35023,22715,24658,31911,23290,9556,9574,9559,9568,9580,9571,9562,9577,9565,9554,9572,9557,9566,9578,9569,9560,9575,9563,9555,9573,9558,9567,9579,9570,9561,9576,9564,9553,9552,9581,9582,9584,9583,65517,132423,37595,132575,147397,34124,17077,29679,20917,13897,149826,166372,37700,137691,33518,146632,30780,26436,25311,149811,166314,131744,158643,135941,20395,140525,20488,159017,162436,144896,150193,140563,20521,131966,24484,131968,131911,28379,132127,20605,20737,13434,20750,39020,14147,33814,149924,132231,20832,144308,20842,134143,139516,131813,140592,132494,143923,137603,23426,34685,132531,146585,20914,20920,40244,20937,20943,20945,15580,20947,150182,20915,20962,21314,20973,33741,26942,145197,24443,21003,21030,21052,21173,21079,21140,21177,21189,31765,34114,21216,34317,158483,21253,166622,21833,28377,147328,133460,147436,21299,21316,134114,27851,136998,26651,29653,24650,16042,14540,136936,29149,17570,21357,21364,165547,21374,21375,136598,136723,30694,21395,166555,21408,21419,21422,29607,153458,16217,29596,21441,21445,27721,20041,22526,21465,15019,134031,21472,147435,142755,21494,134263,21523,28793,21803,26199,27995,21613,158547,134516,21853,21647,21668,18342,136973,134877,15796,134477,166332,140952,21831,19693,21551,29719,21894,21929,22021,137431,147514,17746,148533,26291,135348,22071,26317,144010,26276,26285,22093,22095,30961,22257,38791,21502,22272,22255,22253,166758,13859,135759,22342,147877,27758,28811,22338,14001,158846,22502,136214,22531,136276,148323,22566,150517,22620,22698,13665,22752,22748,135740,22779,23551,22339,172368,148088,37843,13729,22815,26790,14019,28249,136766,23076,21843,136850,34053,22985,134478,158849,159018,137180,23001,137211,137138,159142,28017,137256,136917,23033,159301,23211,23139,14054,149929,23159,14088,23190,29797,23251,159649,140628,15749,137489,14130,136888,24195,21200,23414,25992,23420,162318,16388,18525,131588,23509,24928,137780,154060,132517,23539,23453,19728,23557,138052,23571,29646,23572,138405,158504,23625,18653,23685,23785,23791,23947,138745,138807,23824,23832,23878,138916,23738,24023,33532,14381,149761,139337,139635,33415,14390,15298,24110,27274,24181,24186,148668,134355,21414,20151,24272,21416,137073,24073,24308,164994,24313,24315,14496,24316,26686,37915,24333,131521,194708,15070,18606,135994,24378,157832,140240,24408,140401,24419,38845,159342,24434,37696,166454,24487,23990,15711,152144,139114,159992,140904,37334,131742,166441,24625,26245,137335,14691,15815,13881,22416,141236,31089,15936,24734,24740,24755,149890,149903,162387,29860,20705,23200,24932,33828,24898,194726,159442,24961,20980,132694,24967,23466,147383,141407,25043,166813,170333,25040,14642,141696,141505,24611,24924,25886,25483,131352,25285,137072,25301,142861,25452,149983,14871,25656,25592,136078,137212,25744,28554,142902,38932,147596,153373,25825,25829,38011,14950,25658,14935,25933,28438,150056,150051,25989,25965,25951,143486,26037,149824,19255,26065,16600,137257,26080,26083,24543,144384,26136,143863,143864,26180,143780,143781,26187,134773,26215,152038,26227,26228,138813,143921,165364,143816,152339,30661,141559,39332,26370,148380,150049,15147,27130,145346,26462,26471,26466,147917,168173,26583,17641,26658,28240,37436,26625,144358,159136,26717,144495,27105,27147,166623,26995,26819,144845,26881,26880,15666,14849,144956,15232,26540,26977,166474,17148,26934,27032,15265,132041,33635,20624,27129,144985,139562,27205,145155,27293,15347,26545,27336,168348,15373,27421,133411,24798,27445,27508,141261,28341,146139,132021,137560,14144,21537,146266,27617,147196,27612,27703,140427,149745,158545,27738,33318,27769,146876,17605,146877,147876,149772,149760,146633,14053,15595,134450,39811,143865,140433,32655,26679,159013,159137,159211,28054,27996,28284,28420,149887,147589,159346,34099,159604,20935,27804,28189,33838,166689,28207,146991,29779,147330,31180,28239,23185,143435,28664,14093,28573,146992,28410,136343,147517,17749,37872,28484,28508,15694,28532,168304,15675,28575,147780,28627,147601,147797,147513,147440,147380,147775,20959,147798,147799,147776,156125,28747,28798,28839,28801,28876,28885,28886,28895,16644,15848,29108,29078,148087,28971,28997,23176,29002,29038,23708,148325,29007,37730,148161,28972,148570,150055,150050,29114,166888,28861,29198,37954,29205,22801,37955,29220,37697,153093,29230,29248,149876,26813,29269,29271,15957,143428,26637,28477,29314,29482,29483,149539,165931,18669,165892,29480,29486,29647,29610,134202,158254,29641,29769,147938,136935,150052,26147,14021,149943,149901,150011,29687,29717,26883,150054,29753,132547,16087,29788,141485,29792,167602,29767,29668,29814,33721,29804,14128,29812,37873,27180,29826,18771,150156,147807,150137,166799,23366,166915,137374,29896,137608,29966,29929,29982,167641,137803,23511,167596,37765,30029,30026,30055,30062,151426,16132,150803,30094,29789,30110,30132,30210,30252,30289,30287,30319,30326,156661,30352,33263,14328,157969,157966,30369,30373,30391,30412,159647,33890,151709,151933,138780,30494,30502,30528,25775,152096,30552,144044,30639,166244,166248,136897,30708,30729,136054,150034,26826,30895,30919,30931,38565,31022,153056,30935,31028,30897,161292,36792,34948,166699,155779,140828,31110,35072,26882,31104,153687,31133,162617,31036,31145,28202,160038,16040,31174,168205,31188],
    "euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,null,null,null,null,null,null,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,null,null,null,null,null,null,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,null,null,null,null,null,null,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,null,null,null,null,null,null,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,null,null,null,null,null,null,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,null,null,null,null,null,null,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,null,null,null,null,null,null,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,null,null,null,null,null,null,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,null,null,null,null,null,null,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,null,null,null,null,null,null,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,null,null,null,null,null,null,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,null,null,null,null,null,null,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,null,null,null,null,null,null,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,null,null,null,null,null,null,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,null,null,null,null,null,null,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,null,null,null,null,null,null,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,null,null,null,null,null,null,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,null,null,null,null,null,null,45998,45999,46000,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,null,null,null,null,null,null,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,null,null,null,null,null,null,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,null,null,null,null,null,null,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,null,null,null,null,null,null,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,null,null,null,null,null,null,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,null,null,null,null,null,null,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,null,null,null,null,null,null,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,null,null,null,null,null,null,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,null,null,null,null,null,null,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,null,null,null,null,null,null,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,null,null,null,null,null,null,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,null,null,null,null,null,null,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,null,null,null,null,null,null,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,null,null,null,null,null,null,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,null,null,null,null,null,null,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,null,null,null,null,null,null,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,null,null,null,null,null,null,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,null,null,null,null,null,null,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48000,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,null,null,null,null,null,null,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,null,null,null,null,null,null,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,null,null,null,null,null,null,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,null,null,null,null,null,null,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,null,null,null,null,null,null,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,null,null,null,null,null,null,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,null,null,null,null,null,null,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,null,null,null,null,null,null,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49000,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,null,null,null,null,null,null,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,null,null,null,null,null,null,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,null,null,null,null,null,null,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,null,null,null,null,null,null,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,null,null,null,null,null,null,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,null,null,null,null,null,null,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,null,null,null,null,null,null,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,null,null,null,null,null,null,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,null,null,null,null,null,null,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,null,null,null,null,null,null,49998,49999,50000,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,null,null,null,null,null,null,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,null,null,null,null,null,null,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,null,null,null,null,null,null,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,null,null,null,null,null,null,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,null,null,null,null,null,null,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,null,null,null,null,null,null,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,null,null,null,null,null,null,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,null,null,null,null,null,null,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51000,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,null,null,null,null,null,null,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,null,null,null,null,null,null,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,null,null,null,null,null,null,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,null,null,null,null,null,null,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,null,null,null,null,null,null,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,null,null,null,null,null,null,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,null,null,null,null,null,null,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,null,null,null,null,null,null,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,null,null,null,null,null,null,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,null,null,null,null,null,null,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,null,null,null,null,null,null,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,null,null,null,null,null,null,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,null,null,null,null,null,null,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,null,null,null,null,null,null,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,null,null,null,null,null,null,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,null,null,null,null,null,null,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,null,null,null,null,null,null,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,null,null,null,null,null,null,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,null,null,null,null,null,null,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,null,null,null,null,null,null,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,null,null,null,null,null,null,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,null,null,null,null,null,null,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,null,null,null,null,null,null,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,null,null,null,null,null,null,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,null,null,null,null,null,null,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,null,null,null,null,null,null,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,null,null,null,null,null,null,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,null,null,null,null,null,null,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,null,null,null,null,null,null,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,null,null,null,null,null,null,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,null,null,null,null,null,null,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,null,null,null,null,null,null,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,null,null,null,null,null,null,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,null,null,null,null,null,null,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,null,null,null,null,null,null,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,null,null,null,null,null,null,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,null,null,null,null,null,null,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,null,null,null,null,null,null,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45000,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,null,null,null,null,null,null,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,null,null,null,null,null,null,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,null,null,null,null,null,null,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,null,null,null,null,null,null,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,null,null,null,null,null,null,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,null,null,null,null,null,null,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,null,null,null,null,null,null,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,null,null,null,null,null,null,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,null,null,null,null,null,null,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,null,null,null,null,null,null,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47000,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,null,null,null,null,null,null,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,null,null,null,null,null,null,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,null,null,null,null,null,null,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,null,null,null,null,null,null,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,null,null,null,null,null,null,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,null,null,null,null,null,null,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,null,null,null,null,null,null,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,null,null,null,null,null,null,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,null,null,null,null,null,null,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,null,null,null,null,null,null,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,null,null,null,null,null,null,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,null,null,null,null,null,null,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,null,null,null,null,null,null,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,null,null,null,null,null,null,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,null,null,null,null,null,null,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,null,null,null,null,null,null,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,null,null,null,null,null,null,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,null,null,null,null,null,null,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,null,null,null,null,null,null,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,null,null,null,null,null,null,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,null,null,null,null,null,null,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,null,null,null,null,null,null,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52000,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,null,null,null,null,null,null,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,null,null,null,null,null,null,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,null,null,null,null,null,null,54989,54990,54991,54992,54994,54995,54997,54998,55000,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,null,null,null,null,null,null,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53000,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,null,null,null,null,null,null,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,null,null,null,null,null,null,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54000,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32000,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37000,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36000,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26000,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21000,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39000,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29006,29728,30000,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64000,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27000,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "gb18030":[19970,19972,19973,19974,19983,19986,19991,19999,20000,20001,20003,20006,20009,20014,20015,20017,20019,20021,20023,20028,20032,20033,20034,20036,20038,20042,20049,20053,20055,20058,20059,20066,20067,20068,20069,20071,20072,20074,20075,20076,20077,20078,20079,20082,20084,20085,20086,20087,20088,20089,20090,20091,20092,20093,20095,20096,20097,20098,20099,20100,20101,20103,20106,20112,20118,20119,20121,20124,20125,20126,20131,20138,20143,20144,20145,20148,20150,20151,20152,20153,20156,20157,20158,20168,20172,20175,20176,20178,20186,20187,20188,20192,20194,20198,20199,20201,20205,20206,20207,20209,20212,20216,20217,20218,20220,20222,20224,20226,20227,20228,20229,20230,20231,20232,20235,20236,20242,20243,20244,20245,20246,20252,20253,20257,20259,20264,20265,20268,20269,20270,20273,20275,20277,20279,20281,20283,20286,20287,20288,20289,20290,20292,20293,20295,20296,20297,20298,20299,20300,20306,20308,20310,20321,20322,20326,20328,20330,20331,20333,20334,20337,20338,20341,20343,20344,20345,20346,20349,20352,20353,20354,20357,20358,20359,20362,20364,20366,20368,20370,20371,20373,20374,20376,20377,20378,20380,20382,20383,20385,20386,20388,20395,20397,20400,20401,20402,20403,20404,20406,20407,20408,20409,20410,20411,20412,20413,20414,20416,20417,20418,20422,20423,20424,20425,20427,20428,20429,20434,20435,20436,20437,20438,20441,20443,20448,20450,20452,20453,20455,20459,20460,20464,20466,20468,20469,20470,20471,20473,20475,20476,20477,20479,20480,20481,20482,20483,20484,20485,20486,20487,20488,20489,20490,20491,20494,20496,20497,20499,20501,20502,20503,20507,20509,20510,20512,20514,20515,20516,20519,20523,20527,20528,20529,20530,20531,20532,20533,20534,20535,20536,20537,20539,20541,20543,20544,20545,20546,20548,20549,20550,20553,20554,20555,20557,20560,20561,20562,20563,20564,20566,20567,20568,20569,20571,20573,20574,20575,20576,20577,20578,20579,20580,20582,20583,20584,20585,20586,20587,20589,20590,20591,20592,20593,20594,20595,20596,20597,20600,20601,20602,20604,20605,20609,20610,20611,20612,20614,20615,20617,20618,20619,20620,20622,20623,20624,20625,20626,20627,20628,20629,20630,20631,20632,20633,20634,20635,20636,20637,20638,20639,20640,20641,20642,20644,20646,20650,20651,20653,20654,20655,20656,20657,20659,20660,20661,20662,20663,20664,20665,20668,20669,20670,20671,20672,20673,20674,20675,20676,20677,20678,20679,20680,20681,20682,20683,20684,20685,20686,20688,20689,20690,20691,20692,20693,20695,20696,20697,20699,20700,20701,20702,20703,20704,20705,20706,20707,20708,20709,20712,20713,20714,20715,20719,20720,20721,20722,20724,20726,20727,20728,20729,20730,20732,20733,20734,20735,20736,20737,20738,20739,20740,20741,20744,20745,20746,20748,20749,20750,20751,20752,20753,20755,20756,20757,20758,20759,20760,20761,20762,20763,20764,20765,20766,20767,20768,20770,20771,20772,20773,20774,20775,20776,20777,20778,20779,20780,20781,20782,20783,20784,20785,20786,20787,20788,20789,20790,20791,20792,20793,20794,20795,20796,20797,20798,20802,20807,20810,20812,20814,20815,20816,20818,20819,20823,20824,20825,20827,20829,20830,20831,20832,20833,20835,20836,20838,20839,20841,20842,20847,20850,20858,20862,20863,20867,20868,20870,20871,20874,20875,20878,20879,20880,20881,20883,20884,20888,20890,20893,20894,20895,20897,20899,20902,20903,20904,20905,20906,20909,20910,20916,20920,20921,20922,20926,20927,20929,20930,20931,20933,20936,20938,20941,20942,20944,20946,20947,20948,20949,20950,20951,20952,20953,20954,20956,20958,20959,20962,20963,20965,20966,20967,20968,20969,20970,20972,20974,20977,20978,20980,20983,20990,20996,20997,21001,21003,21004,21007,21008,21011,21012,21013,21020,21022,21023,21025,21026,21027,21029,21030,21031,21034,21036,21039,21041,21042,21044,21045,21052,21054,21060,21061,21062,21063,21064,21065,21067,21070,21071,21074,21075,21077,21079,21080,21081,21082,21083,21085,21087,21088,21090,21091,21092,21094,21096,21099,21100,21101,21102,21104,21105,21107,21108,21109,21110,21111,21112,21113,21114,21115,21116,21118,21120,21123,21124,21125,21126,21127,21129,21130,21131,21132,21133,21134,21135,21137,21138,21140,21141,21142,21143,21144,21145,21146,21148,21156,21157,21158,21159,21166,21167,21168,21172,21173,21174,21175,21176,21177,21178,21179,21180,21181,21184,21185,21186,21188,21189,21190,21192,21194,21196,21197,21198,21199,21201,21203,21204,21205,21207,21209,21210,21211,21212,21213,21214,21216,21217,21218,21219,21221,21222,21223,21224,21225,21226,21227,21228,21229,21230,21231,21233,21234,21235,21236,21237,21238,21239,21240,21243,21244,21245,21249,21250,21251,21252,21255,21257,21258,21259,21260,21262,21265,21266,21267,21268,21272,21275,21276,21278,21279,21282,21284,21285,21287,21288,21289,21291,21292,21293,21295,21296,21297,21298,21299,21300,21301,21302,21303,21304,21308,21309,21312,21314,21316,21318,21323,21324,21325,21328,21332,21336,21337,21339,21341,21349,21352,21354,21356,21357,21362,21366,21369,21371,21372,21373,21374,21376,21377,21379,21383,21384,21386,21390,21391,21392,21393,21394,21395,21396,21398,21399,21401,21403,21404,21406,21408,21409,21412,21415,21418,21419,21420,21421,21423,21424,21425,21426,21427,21428,21429,21431,21432,21433,21434,21436,21437,21438,21440,21443,21444,21445,21446,21447,21454,21455,21456,21458,21459,21461,21466,21468,21469,21470,21473,21474,21479,21492,21498,21502,21503,21504,21506,21509,21511,21515,21524,21528,21529,21530,21532,21538,21540,21541,21546,21552,21555,21558,21559,21562,21565,21567,21569,21570,21572,21573,21575,21577,21580,21581,21582,21583,21585,21594,21597,21598,21599,21600,21601,21603,21605,21607,21609,21610,21611,21612,21613,21614,21615,21616,21620,21625,21626,21630,21631,21633,21635,21637,21639,21640,21641,21642,21645,21649,21651,21655,21656,21660,21662,21663,21664,21665,21666,21669,21678,21680,21682,21685,21686,21687,21689,21690,21692,21694,21699,21701,21706,21707,21718,21720,21723,21728,21729,21730,21731,21732,21739,21740,21743,21744,21745,21748,21749,21750,21751,21752,21753,21755,21758,21760,21762,21763,21764,21765,21768,21770,21771,21772,21773,21774,21778,21779,21781,21782,21783,21784,21785,21786,21788,21789,21790,21791,21793,21797,21798,21800,21801,21803,21805,21810,21812,21813,21814,21816,21817,21818,21819,21821,21824,21826,21829,21831,21832,21835,21836,21837,21838,21839,21841,21842,21843,21844,21847,21848,21849,21850,21851,21853,21854,21855,21856,21858,21859,21864,21865,21867,21871,21872,21873,21874,21875,21876,21881,21882,21885,21887,21893,21894,21900,21901,21902,21904,21906,21907,21909,21910,21911,21914,21915,21918,21920,21921,21922,21923,21924,21925,21926,21928,21929,21930,21931,21932,21933,21934,21935,21936,21938,21940,21942,21944,21946,21948,21951,21952,21953,21954,21955,21958,21959,21960,21962,21963,21966,21967,21968,21973,21975,21976,21977,21978,21979,21982,21984,21986,21991,21993,21997,21998,22000,22001,22004,22006,22008,22009,22010,22011,22012,22015,22018,22019,22020,22021,22022,22023,22026,22027,22029,22032,22033,22034,22035,22036,22037,22038,22039,22041,22042,22044,22045,22048,22049,22050,22053,22054,22056,22057,22058,22059,22062,22063,22064,22067,22069,22071,22072,22074,22076,22077,22078,22080,22081,22082,22083,22084,22085,22086,22087,22088,22089,22090,22091,22095,22096,22097,22098,22099,22101,22102,22106,22107,22109,22110,22111,22112,22113,22115,22117,22118,22119,22125,22126,22127,22128,22130,22131,22132,22133,22135,22136,22137,22138,22141,22142,22143,22144,22145,22146,22147,22148,22151,22152,22153,22154,22155,22156,22157,22160,22161,22162,22164,22165,22166,22167,22168,22169,22170,22171,22172,22173,22174,22175,22176,22177,22178,22180,22181,22182,22183,22184,22185,22186,22187,22188,22189,22190,22192,22193,22194,22195,22196,22197,22198,22200,22201,22202,22203,22205,22206,22207,22208,22209,22210,22211,22212,22213,22214,22215,22216,22217,22219,22220,22221,22222,22223,22224,22225,22226,22227,22229,22230,22232,22233,22236,22243,22245,22246,22247,22248,22249,22250,22252,22254,22255,22258,22259,22262,22263,22264,22267,22268,22272,22273,22274,22277,22279,22283,22284,22285,22286,22287,22288,22289,22290,22291,22292,22293,22294,22295,22296,22297,22298,22299,22301,22302,22304,22305,22306,22308,22309,22310,22311,22315,22321,22322,22324,22325,22326,22327,22328,22332,22333,22335,22337,22339,22340,22341,22342,22344,22345,22347,22354,22355,22356,22357,22358,22360,22361,22370,22371,22373,22375,22380,22382,22384,22385,22386,22388,22389,22392,22393,22394,22397,22398,22399,22400,22401,22407,22408,22409,22410,22413,22414,22415,22416,22417,22420,22421,22422,22423,22424,22425,22426,22428,22429,22430,22431,22437,22440,22442,22444,22447,22448,22449,22451,22453,22454,22455,22457,22458,22459,22460,22461,22462,22463,22464,22465,22468,22469,22470,22471,22472,22473,22474,22476,22477,22480,22481,22483,22486,22487,22491,22492,22494,22497,22498,22499,22501,22502,22503,22504,22505,22506,22507,22508,22510,22512,22513,22514,22515,22517,22518,22519,22523,22524,22526,22527,22529,22531,22532,22533,22536,22537,22538,22540,22542,22543,22544,22546,22547,22548,22550,22551,22552,22554,22555,22556,22557,22559,22562,22563,22565,22566,22567,22568,22569,22571,22572,22573,22574,22575,22577,22578,22579,22580,22582,22583,22584,22585,22586,22587,22588,22589,22590,22591,22592,22593,22594,22595,22597,22598,22599,22600,22601,22602,22603,22606,22607,22608,22610,22611,22613,22614,22615,22617,22618,22619,22620,22621,22623,22624,22625,22626,22627,22628,22630,22631,22632,22633,22634,22637,22638,22639,22640,22641,22642,22643,22644,22645,22646,22647,22648,22649,22650,22651,22652,22653,22655,22658,22660,22662,22663,22664,22666,22667,22668,22669,22670,22671,22672,22673,22676,22677,22678,22679,22680,22683,22684,22685,22688,22689,22690,22691,22692,22693,22694,22695,22698,22699,22700,22701,22702,22703,22704,22705,22706,22707,22708,22709,22710,22711,22712,22713,22714,22715,22717,22718,22719,22720,22722,22723,22724,22726,22727,22728,22729,22730,22731,22732,22733,22734,22735,22736,22738,22739,22740,22742,22743,22744,22745,22746,22747,22748,22749,22750,22751,22752,22753,22754,22755,22757,22758,22759,22760,22761,22762,22765,22767,22769,22770,22772,22773,22775,22776,22778,22779,22780,22781,22782,22783,22784,22785,22787,22789,22790,22792,22793,22794,22795,22796,22798,22800,22801,22802,22803,22807,22808,22811,22813,22814,22816,22817,22818,22819,22822,22824,22828,22832,22834,22835,22837,22838,22843,22845,22846,22847,22848,22851,22853,22854,22858,22860,22861,22864,22866,22867,22873,22875,22876,22877,22878,22879,22881,22883,22884,22886,22887,22888,22889,22890,22891,22892,22893,22894,22895,22896,22897,22898,22901,22903,22906,22907,22908,22910,22911,22912,22917,22921,22923,22924,22926,22927,22928,22929,22932,22933,22936,22938,22939,22940,22941,22943,22944,22945,22946,22950,22951,22956,22957,22960,22961,22963,22964,22965,22966,22967,22968,22970,22972,22973,22975,22976,22977,22978,22979,22980,22981,22983,22984,22985,22988,22989,22990,22991,22997,22998,23001,23003,23006,23007,23008,23009,23010,23012,23014,23015,23017,23018,23019,23021,23022,23023,23024,23025,23026,23027,23028,23029,23030,23031,23032,23034,23036,23037,23038,23040,23042,23050,23051,23053,23054,23055,23056,23058,23060,23061,23062,23063,23065,23066,23067,23069,23070,23073,23074,23076,23078,23079,23080,23082,23083,23084,23085,23086,23087,23088,23091,23093,23095,23096,23097,23098,23099,23101,23102,23103,23105,23106,23107,23108,23109,23111,23112,23115,23116,23117,23118,23119,23120,23121,23122,23123,23124,23126,23127,23128,23129,23131,23132,23133,23134,23135,23136,23137,23139,23140,23141,23142,23144,23145,23147,23148,23149,23150,23151,23152,23153,23154,23155,23160,23161,23163,23164,23165,23166,23168,23169,23170,23171,23172,23173,23174,23175,23176,23177,23178,23179,23180,23181,23182,23183,23184,23185,23187,23188,23189,23190,23191,23192,23193,23196,23197,23198,23199,23200,23201,23202,23203,23204,23205,23206,23207,23208,23209,23211,23212,23213,23214,23215,23216,23217,23220,23222,23223,23225,23226,23227,23228,23229,23231,23232,23235,23236,23237,23238,23239,23240,23242,23243,23245,23246,23247,23248,23249,23251,23253,23255,23257,23258,23259,23261,23262,23263,23266,23268,23269,23271,23272,23274,23276,23277,23278,23279,23280,23282,23283,23284,23285,23286,23287,23288,23289,23290,23291,23292,23293,23294,23295,23296,23297,23298,23299,23300,23301,23302,23303,23304,23306,23307,23308,23309,23310,23311,23312,23313,23314,23315,23316,23317,23320,23321,23322,23323,23324,23325,23326,23327,23328,23329,23330,23331,23332,23333,23334,23335,23336,23337,23338,23339,23340,23341,23342,23343,23344,23345,23347,23349,23350,23352,23353,23354,23355,23356,23357,23358,23359,23361,23362,23363,23364,23365,23366,23367,23368,23369,23370,23371,23372,23373,23374,23375,23378,23382,23390,23392,23393,23399,23400,23403,23405,23406,23407,23410,23412,23414,23415,23416,23417,23419,23420,23422,23423,23426,23430,23434,23437,23438,23440,23441,23442,23444,23446,23455,23463,23464,23465,23468,23469,23470,23471,23473,23474,23479,23482,23483,23484,23488,23489,23491,23496,23497,23498,23499,23501,23502,23503,23505,23508,23509,23510,23511,23512,23513,23514,23515,23516,23520,23522,23523,23526,23527,23529,23530,23531,23532,23533,23535,23537,23538,23539,23540,23541,23542,23543,23549,23550,23552,23554,23555,23557,23559,23560,23563,23564,23565,23566,23568,23570,23571,23575,23577,23579,23582,23583,23584,23585,23587,23590,23592,23593,23594,23595,23597,23598,23599,23600,23602,23603,23605,23606,23607,23619,23620,23622,23623,23628,23629,23634,23635,23636,23638,23639,23640,23642,23643,23644,23645,23647,23650,23652,23655,23656,23657,23658,23659,23660,23661,23664,23666,23667,23668,23669,23670,23671,23672,23675,23676,23677,23678,23680,23683,23684,23685,23686,23687,23689,23690,23691,23694,23695,23698,23699,23701,23709,23710,23711,23712,23713,23716,23717,23718,23719,23720,23722,23726,23727,23728,23730,23732,23734,23737,23738,23739,23740,23742,23744,23746,23747,23749,23750,23751,23752,23753,23754,23756,23757,23758,23759,23760,23761,23763,23764,23765,23766,23767,23768,23770,23771,23772,23773,23774,23775,23776,23778,23779,23783,23785,23787,23788,23790,23791,23793,23794,23795,23796,23797,23798,23799,23800,23801,23802,23804,23805,23806,23807,23808,23809,23812,23813,23816,23817,23818,23819,23820,23821,23823,23824,23825,23826,23827,23829,23831,23832,23833,23834,23836,23837,23839,23840,23841,23842,23843,23845,23848,23850,23851,23852,23855,23856,23857,23858,23859,23861,23862,23863,23864,23865,23866,23867,23868,23871,23872,23873,23874,23875,23876,23877,23878,23880,23881,23885,23886,23887,23888,23889,23890,23891,23892,23893,23894,23895,23897,23898,23900,23902,23903,23904,23905,23906,23907,23908,23909,23910,23911,23912,23914,23917,23918,23920,23921,23922,23923,23925,23926,23927,23928,23929,23930,23931,23932,23933,23934,23935,23936,23937,23939,23940,23941,23942,23943,23944,23945,23946,23947,23948,23949,23950,23951,23952,23953,23954,23955,23956,23957,23958,23959,23960,23962,23963,23964,23966,23967,23968,23969,23970,23971,23972,23973,23974,23975,23976,23977,23978,23979,23980,23981,23982,23983,23984,23985,23986,23987,23988,23989,23990,23992,23993,23994,23995,23996,23997,23998,23999,24000,24001,24002,24003,24004,24006,24007,24008,24009,24010,24011,24012,24014,24015,24016,24017,24018,24019,24020,24021,24022,24023,24024,24025,24026,24028,24031,24032,24035,24036,24042,24044,24045,24048,24053,24054,24056,24057,24058,24059,24060,24063,24064,24068,24071,24073,24074,24075,24077,24078,24082,24083,24087,24094,24095,24096,24097,24098,24099,24100,24101,24104,24105,24106,24107,24108,24111,24112,24114,24115,24116,24117,24118,24121,24122,24126,24127,24128,24129,24131,24134,24135,24136,24137,24138,24139,24141,24142,24143,24144,24145,24146,24147,24150,24151,24152,24153,24154,24156,24157,24159,24160,24163,24164,24165,24166,24167,24168,24169,24170,24171,24172,24173,24174,24175,24176,24177,24181,24183,24185,24190,24193,24194,24195,24197,24200,24201,24204,24205,24206,24210,24216,24219,24221,24225,24226,24227,24228,24232,24233,24234,24235,24236,24238,24239,24240,24241,24242,24244,24250,24251,24252,24253,24255,24256,24257,24258,24259,24260,24261,24262,24263,24264,24267,24268,24269,24270,24271,24272,24276,24277,24279,24280,24281,24282,24284,24285,24286,24287,24288,24289,24290,24291,24292,24293,24294,24295,24297,24299,24300,24301,24302,24303,24304,24305,24306,24307,24309,24312,24313,24315,24316,24317,24325,24326,24327,24329,24332,24333,24334,24336,24338,24340,24342,24345,24346,24348,24349,24350,24353,24354,24355,24356,24360,24363,24364,24366,24368,24370,24371,24372,24373,24374,24375,24376,24379,24381,24382,24383,24385,24386,24387,24388,24389,24390,24391,24392,24393,24394,24395,24396,24397,24398,24399,24401,24404,24409,24410,24411,24412,24414,24415,24416,24419,24421,24423,24424,24427,24430,24431,24434,24436,24437,24438,24440,24442,24445,24446,24447,24451,24454,24461,24462,24463,24465,24467,24468,24470,24474,24475,24477,24478,24479,24480,24482,24483,24484,24485,24486,24487,24489,24491,24492,24495,24496,24497,24498,24499,24500,24502,24504,24505,24506,24507,24510,24511,24512,24513,24514,24519,24520,24522,24523,24526,24531,24532,24533,24538,24539,24540,24542,24543,24546,24547,24549,24550,24552,24553,24556,24559,24560,24562,24563,24564,24566,24567,24569,24570,24572,24583,24584,24585,24587,24588,24592,24593,24595,24599,24600,24602,24606,24607,24610,24611,24612,24620,24621,24622,24624,24625,24626,24627,24628,24630,24631,24632,24633,24634,24637,24638,24640,24644,24645,24646,24647,24648,24649,24650,24652,24654,24655,24657,24659,24660,24662,24663,24664,24667,24668,24670,24671,24672,24673,24677,24678,24686,24689,24690,24692,24693,24695,24702,24704,24705,24706,24709,24710,24711,24712,24714,24715,24718,24719,24720,24721,24723,24725,24727,24728,24729,24732,24734,24737,24738,24740,24741,24743,24745,24746,24750,24752,24755,24757,24758,24759,24761,24762,24765,24766,24767,24768,24769,24770,24771,24772,24775,24776,24777,24780,24781,24782,24783,24784,24786,24787,24788,24790,24791,24793,24795,24798,24801,24802,24803,24804,24805,24810,24817,24818,24821,24823,24824,24827,24828,24829,24830,24831,24834,24835,24836,24837,24839,24842,24843,24844,24848,24849,24850,24851,24852,24854,24855,24856,24857,24859,24860,24861,24862,24865,24866,24869,24872,24873,24874,24876,24877,24878,24879,24880,24881,24882,24883,24884,24885,24886,24887,24888,24889,24890,24891,24892,24893,24894,24896,24897,24898,24899,24900,24901,24902,24903,24905,24907,24909,24911,24912,24914,24915,24916,24918,24919,24920,24921,24922,24923,24924,24926,24927,24928,24929,24931,24932,24933,24934,24937,24938,24939,24940,24941,24942,24943,24945,24946,24947,24948,24950,24952,24953,24954,24955,24956,24957,24958,24959,24960,24961,24962,24963,24964,24965,24966,24967,24968,24969,24970,24972,24973,24975,24976,24977,24978,24979,24981,24982,24983,24984,24985,24986,24987,24988,24990,24991,24992,24993,24994,24995,24996,24997,24998,25002,25003,25005,25006,25007,25008,25009,25010,25011,25012,25013,25014,25016,25017,25018,25019,25020,25021,25023,25024,25025,25027,25028,25029,25030,25031,25033,25036,25037,25038,25039,25040,25043,25045,25046,25047,25048,25049,25050,25051,25052,25053,25054,25055,25056,25057,25058,25059,25060,25061,25063,25064,25065,25066,25067,25068,25069,25070,25071,25072,25073,25074,25075,25076,25078,25079,25080,25081,25082,25083,25084,25085,25086,25088,25089,25090,25091,25092,25093,25095,25097,25107,25108,25113,25116,25117,25118,25120,25123,25126,25127,25128,25129,25131,25133,25135,25136,25137,25138,25141,25142,25144,25145,25146,25147,25148,25154,25156,25157,25158,25162,25167,25168,25173,25174,25175,25177,25178,25180,25181,25182,25183,25184,25185,25186,25188,25189,25192,25201,25202,25204,25205,25207,25208,25210,25211,25213,25217,25218,25219,25221,25222,25223,25224,25227,25228,25229,25230,25231,25232,25236,25241,25244,25245,25246,25251,25254,25255,25257,25258,25261,25262,25263,25264,25266,25267,25268,25270,25271,25272,25274,25278,25280,25281,25283,25291,25295,25297,25301,25309,25310,25312,25313,25316,25322,25323,25328,25330,25333,25336,25337,25338,25339,25344,25347,25348,25349,25350,25354,25355,25356,25357,25359,25360,25362,25363,25364,25365,25367,25368,25369,25372,25382,25383,25385,25388,25389,25390,25392,25393,25395,25396,25397,25398,25399,25400,25403,25404,25406,25407,25408,25409,25412,25415,25416,25418,25425,25426,25427,25428,25430,25431,25432,25433,25434,25435,25436,25437,25440,25444,25445,25446,25448,25450,25451,25452,25455,25456,25458,25459,25460,25461,25464,25465,25468,25469,25470,25471,25473,25475,25476,25477,25478,25483,25485,25489,25491,25492,25493,25495,25497,25498,25499,25500,25501,25502,25503,25505,25508,25510,25515,25519,25521,25522,25525,25526,25529,25531,25533,25535,25536,25537,25538,25539,25541,25543,25544,25546,25547,25548,25553,25555,25556,25557,25559,25560,25561,25562,25563,25564,25565,25567,25570,25572,25573,25574,25575,25576,25579,25580,25582,25583,25584,25585,25587,25589,25591,25593,25594,25595,25596,25598,25603,25604,25606,25607,25608,25609,25610,25613,25614,25617,25618,25621,25622,25623,25624,25625,25626,25629,25631,25634,25635,25636,25637,25639,25640,25641,25643,25646,25647,25648,25649,25650,25651,25653,25654,25655,25656,25657,25659,25660,25662,25664,25666,25667,25673,25675,25676,25677,25678,25679,25680,25681,25683,25685,25686,25687,25689,25690,25691,25692,25693,25695,25696,25697,25698,25699,25700,25701,25702,25704,25706,25707,25708,25710,25711,25712,25713,25714,25715,25716,25717,25718,25719,25723,25724,25725,25726,25727,25728,25729,25731,25734,25736,25737,25738,25739,25740,25741,25742,25743,25744,25747,25748,25751,25752,25754,25755,25756,25757,25759,25760,25761,25762,25763,25765,25766,25767,25768,25770,25771,25775,25777,25778,25779,25780,25782,25785,25787,25789,25790,25791,25793,25795,25796,25798,25799,25800,25801,25802,25803,25804,25807,25809,25811,25812,25813,25814,25817,25818,25819,25820,25821,25823,25824,25825,25827,25829,25831,25832,25833,25834,25835,25836,25837,25838,25839,25840,25841,25842,25843,25844,25845,25846,25847,25848,25849,25850,25851,25852,25853,25854,25855,25857,25858,25859,25860,25861,25862,25863,25864,25866,25867,25868,25869,25870,25871,25872,25873,25875,25876,25877,25878,25879,25881,25882,25883,25884,25885,25886,25887,25888,25889,25890,25891,25892,25894,25895,25896,25897,25898,25900,25901,25904,25905,25906,25907,25911,25914,25916,25917,25920,25921,25922,25923,25924,25926,25927,25930,25931,25933,25934,25936,25938,25939,25940,25943,25944,25946,25948,25951,25952,25953,25956,25957,25959,25960,25961,25962,25965,25966,25967,25969,25971,25973,25974,25976,25977,25978,25979,25980,25981,25982,25983,25984,25985,25986,25987,25988,25989,25990,25992,25993,25994,25997,25998,25999,26002,26004,26005,26006,26008,26010,26013,26014,26016,26018,26019,26022,26024,26026,26028,26030,26033,26034,26035,26036,26037,26038,26039,26040,26042,26043,26046,26047,26048,26050,26055,26056,26057,26058,26061,26064,26065,26067,26068,26069,26072,26073,26074,26075,26076,26077,26078,26079,26081,26083,26084,26090,26091,26098,26099,26100,26101,26104,26105,26107,26108,26109,26110,26111,26113,26116,26117,26119,26120,26121,26123,26125,26128,26129,26130,26134,26135,26136,26138,26139,26140,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26162,26163,26167,26168,26169,26170,26171,26173,26175,26176,26178,26180,26181,26182,26183,26184,26185,26186,26189,26190,26192,26193,26200,26201,26203,26204,26205,26206,26208,26210,26211,26213,26215,26217,26218,26219,26220,26221,26225,26226,26227,26229,26232,26233,26235,26236,26237,26239,26240,26241,26243,26245,26246,26248,26249,26250,26251,26253,26254,26255,26256,26258,26259,26260,26261,26264,26265,26266,26267,26268,26270,26271,26272,26273,26274,26275,26276,26277,26278,26281,26282,26283,26284,26285,26287,26288,26289,26290,26291,26293,26294,26295,26296,26298,26299,26300,26301,26303,26304,26305,26306,26307,26308,26309,26310,26311,26312,26313,26314,26315,26316,26317,26318,26319,26320,26321,26322,26323,26324,26325,26326,26327,26328,26330,26334,26335,26336,26337,26338,26339,26340,26341,26343,26344,26346,26347,26348,26349,26350,26351,26353,26357,26358,26360,26362,26363,26365,26369,26370,26371,26372,26373,26374,26375,26380,26382,26383,26385,26386,26387,26390,26392,26393,26394,26396,26398,26400,26401,26402,26403,26404,26405,26407,26409,26414,26416,26418,26419,26422,26423,26424,26425,26427,26428,26430,26431,26433,26436,26437,26439,26442,26443,26445,26450,26452,26453,26455,26456,26457,26458,26459,26461,26466,26467,26468,26470,26471,26475,26476,26478,26481,26484,26486,26488,26489,26490,26491,26493,26496,26498,26499,26501,26502,26504,26506,26508,26509,26510,26511,26513,26514,26515,26516,26518,26521,26523,26527,26528,26529,26532,26534,26537,26540,26542,26545,26546,26548,26553,26554,26555,26556,26557,26558,26559,26560,26562,26565,26566,26567,26568,26569,26570,26571,26572,26573,26574,26581,26582,26583,26587,26591,26593,26595,26596,26598,26599,26600,26602,26603,26605,26606,26610,26613,26614,26615,26616,26617,26618,26619,26620,26622,26625,26626,26627,26628,26630,26637,26640,26642,26644,26645,26648,26649,26650,26651,26652,26654,26655,26656,26658,26659,26660,26661,26662,26663,26664,26667,26668,26669,26670,26671,26672,26673,26676,26677,26678,26682,26683,26687,26695,26699,26701,26703,26706,26710,26711,26712,26713,26714,26715,26716,26717,26718,26719,26730,26732,26733,26734,26735,26736,26737,26738,26739,26741,26744,26745,26746,26747,26748,26749,26750,26751,26752,26754,26756,26759,26760,26761,26762,26763,26764,26765,26766,26768,26769,26770,26772,26773,26774,26776,26777,26778,26779,26780,26781,26782,26783,26784,26785,26787,26788,26789,26793,26794,26795,26796,26798,26801,26802,26804,26806,26807,26808,26809,26810,26811,26812,26813,26814,26815,26817,26819,26820,26821,26822,26823,26824,26826,26828,26830,26831,26832,26833,26835,26836,26838,26839,26841,26843,26844,26845,26846,26847,26849,26850,26852,26853,26854,26855,26856,26857,26858,26859,26860,26861,26863,26866,26867,26868,26870,26871,26872,26875,26877,26878,26879,26880,26882,26883,26884,26886,26887,26888,26889,26890,26892,26895,26897,26899,26900,26901,26902,26903,26904,26905,26906,26907,26908,26909,26910,26913,26914,26915,26917,26918,26919,26920,26921,26922,26923,26924,26926,26927,26929,26930,26931,26933,26934,26935,26936,26938,26939,26940,26942,26944,26945,26947,26948,26949,26950,26951,26952,26953,26954,26955,26956,26957,26958,26959,26960,26961,26962,26963,26965,26966,26968,26969,26971,26972,26975,26977,26978,26980,26981,26983,26984,26985,26986,26988,26989,26991,26992,26994,26995,26996,26997,26998,27002,27003,27005,27006,27007,27009,27011,27013,27018,27019,27020,27022,27023,27024,27025,27026,27027,27030,27031,27033,27034,27037,27038,27039,27040,27041,27042,27043,27044,27045,27046,27049,27050,27052,27054,27055,27056,27058,27059,27061,27062,27064,27065,27066,27068,27069,27070,27071,27072,27074,27075,27076,27077,27078,27079,27080,27081,27083,27085,27087,27089,27090,27091,27093,27094,27095,27096,27097,27098,27100,27101,27102,27105,27106,27107,27108,27109,27110,27111,27112,27113,27114,27115,27116,27118,27119,27120,27121,27123,27124,27125,27126,27127,27128,27129,27130,27131,27132,27134,27136,27137,27138,27139,27140,27141,27142,27143,27144,27145,27147,27148,27149,27150,27151,27152,27153,27154,27155,27156,27157,27158,27161,27162,27163,27164,27165,27166,27168,27170,27171,27172,27173,27174,27175,27177,27179,27180,27181,27182,27184,27186,27187,27188,27190,27191,27192,27193,27194,27195,27196,27199,27200,27201,27202,27203,27205,27206,27208,27209,27210,27211,27212,27213,27214,27215,27217,27218,27219,27220,27221,27222,27223,27226,27228,27229,27230,27231,27232,27234,27235,27236,27238,27239,27240,27241,27242,27243,27244,27245,27246,27247,27248,27250,27251,27252,27253,27254,27255,27256,27258,27259,27261,27262,27263,27265,27266,27267,27269,27270,27271,27272,27273,27274,27275,27276,27277,27279,27282,27283,27284,27285,27286,27288,27289,27290,27291,27292,27293,27294,27295,27297,27298,27299,27300,27301,27302,27303,27304,27306,27309,27310,27311,27312,27313,27314,27315,27316,27317,27318,27319,27320,27321,27322,27323,27324,27325,27326,27327,27328,27329,27330,27331,27332,27333,27334,27335,27336,27337,27338,27339,27340,27341,27342,27343,27344,27345,27346,27347,27348,27349,27350,27351,27352,27353,27354,27355,27356,27357,27358,27359,27360,27361,27362,27363,27364,27365,27366,27367,27368,27369,27370,27371,27372,27373,27374,27375,27376,27377,27378,27379,27380,27381,27382,27383,27384,27385,27386,27387,27388,27389,27390,27391,27392,27393,27394,27395,27396,27397,27398,27399,27400,27401,27402,27403,27404,27405,27406,27407,27408,27409,27410,27411,27412,27413,27414,27415,27416,27417,27418,27419,27420,27421,27422,27423,27429,27430,27432,27433,27434,27435,27436,27437,27438,27439,27440,27441,27443,27444,27445,27446,27448,27451,27452,27453,27455,27456,27457,27458,27460,27461,27464,27466,27467,27469,27470,27471,27472,27473,27474,27475,27476,27477,27478,27479,27480,27482,27483,27484,27485,27486,27487,27488,27489,27496,27497,27499,27500,27501,27502,27503,27504,27505,27506,27507,27508,27509,27510,27511,27512,27514,27517,27518,27519,27520,27525,27528,27532,27534,27535,27536,27537,27540,27541,27543,27544,27545,27548,27549,27550,27551,27552,27554,27555,27556,27557,27558,27559,27560,27561,27563,27564,27565,27566,27567,27568,27569,27570,27574,27576,27577,27578,27579,27580,27581,27582,27584,27587,27588,27590,27591,27592,27593,27594,27596,27598,27600,27601,27608,27610,27612,27613,27614,27615,27616,27618,27619,27620,27621,27622,27623,27624,27625,27628,27629,27630,27632,27633,27634,27636,27638,27639,27640,27642,27643,27644,27646,27647,27648,27649,27650,27651,27652,27656,27657,27658,27659,27660,27662,27666,27671,27676,27677,27678,27680,27683,27685,27691,27692,27693,27697,27699,27702,27703,27705,27706,27707,27708,27710,27711,27715,27716,27717,27720,27723,27724,27725,27726,27727,27729,27730,27731,27734,27736,27737,27738,27746,27747,27749,27750,27751,27755,27756,27757,27758,27759,27761,27763,27765,27767,27768,27770,27771,27772,27775,27776,27780,27783,27786,27787,27789,27790,27793,27794,27797,27798,27799,27800,27802,27804,27805,27806,27808,27810,27816,27820,27823,27824,27828,27829,27830,27831,27834,27840,27841,27842,27843,27846,27847,27848,27851,27853,27854,27855,27857,27858,27864,27865,27866,27868,27869,27871,27876,27878,27879,27881,27884,27885,27890,27892,27897,27903,27904,27906,27907,27909,27910,27912,27913,27914,27917,27919,27920,27921,27923,27924,27925,27926,27928,27932,27933,27935,27936,27937,27938,27939,27940,27942,27944,27945,27948,27949,27951,27952,27956,27958,27959,27960,27962,27967,27968,27970,27972,27977,27980,27984,27989,27990,27991,27992,27995,27997,27999,28001,28002,28004,28005,28007,28008,28011,28012,28013,28016,28017,28018,28019,28021,28022,28025,28026,28027,28029,28030,28031,28032,28033,28035,28036,28038,28039,28042,28043,28045,28047,28048,28050,28054,28055,28056,28057,28058,28060,28066,28069,28076,28077,28080,28081,28083,28084,28086,28087,28089,28090,28091,28092,28093,28094,28097,28098,28099,28104,28105,28106,28109,28110,28111,28112,28114,28115,28116,28117,28119,28122,28123,28124,28127,28130,28131,28133,28135,28136,28137,28138,28141,28143,28144,28146,28148,28149,28150,28152,28154,28157,28158,28159,28160,28161,28162,28163,28164,28166,28167,28168,28169,28171,28175,28178,28179,28181,28184,28185,28187,28188,28190,28191,28194,28198,28199,28200,28202,28204,28206,28208,28209,28211,28213,28214,28215,28217,28219,28220,28221,28222,28223,28224,28225,28226,28229,28230,28231,28232,28233,28234,28235,28236,28239,28240,28241,28242,28245,28247,28249,28250,28252,28253,28254,28256,28257,28258,28259,28260,28261,28262,28263,28264,28265,28266,28268,28269,28271,28272,28273,28274,28275,28276,28277,28278,28279,28280,28281,28282,28283,28284,28285,28288,28289,28290,28292,28295,28296,28298,28299,28300,28301,28302,28305,28306,28307,28308,28309,28310,28311,28313,28314,28315,28317,28318,28320,28321,28323,28324,28326,28328,28329,28331,28332,28333,28334,28336,28339,28341,28344,28345,28348,28350,28351,28352,28355,28356,28357,28358,28360,28361,28362,28364,28365,28366,28368,28370,28374,28376,28377,28379,28380,28381,28387,28391,28394,28395,28396,28397,28398,28399,28400,28401,28402,28403,28405,28406,28407,28408,28410,28411,28412,28413,28414,28415,28416,28417,28419,28420,28421,28423,28424,28426,28427,28428,28429,28430,28432,28433,28434,28438,28439,28440,28441,28442,28443,28444,28445,28446,28447,28449,28450,28451,28453,28454,28455,28456,28460,28462,28464,28466,28468,28469,28471,28472,28473,28474,28475,28476,28477,28479,28480,28481,28482,28483,28484,28485,28488,28489,28490,28492,28494,28495,28496,28497,28498,28499,28500,28501,28502,28503,28505,28506,28507,28509,28511,28512,28513,28515,28516,28517,28519,28520,28521,28522,28523,28524,28527,28528,28529,28531,28533,28534,28535,28537,28539,28541,28542,28543,28544,28545,28546,28547,28549,28550,28551,28554,28555,28559,28560,28561,28562,28563,28564,28565,28566,28567,28568,28569,28570,28571,28573,28574,28575,28576,28578,28579,28580,28581,28582,28584,28585,28586,28587,28588,28589,28590,28591,28592,28593,28594,28596,28597,28599,28600,28602,28603,28604,28605,28606,28607,28609,28611,28612,28613,28614,28615,28616,28618,28619,28620,28621,28622,28623,28624,28627,28628,28629,28630,28631,28632,28633,28634,28635,28636,28637,28639,28642,28643,28644,28645,28646,28647,28648,28649,28650,28651,28652,28653,28656,28657,28658,28659,28660,28661,28662,28663,28664,28665,28666,28667,28668,28669,28670,28671,28672,28673,28674,28675,28676,28677,28678,28679,28680,28681,28682,28683,28684,28685,28686,28687,28688,28690,28691,28692,28693,28694,28695,28696,28697,28700,28701,28702,28703,28704,28705,28706,28708,28709,28710,28711,28712,28713,28714,28715,28716,28717,28718,28719,28720,28721,28722,28723,28724,28726,28727,28728,28730,28731,28732,28733,28734,28735,28736,28737,28738,28739,28740,28741,28742,28743,28744,28745,28746,28747,28749,28750,28752,28753,28754,28755,28756,28757,28758,28759,28760,28761,28762,28763,28764,28765,28767,28768,28769,28770,28771,28772,28773,28774,28775,28776,28777,28778,28782,28785,28786,28787,28788,28791,28793,28794,28795,28797,28801,28802,28803,28804,28806,28807,28808,28811,28812,28813,28815,28816,28817,28819,28823,28824,28826,28827,28830,28831,28832,28833,28834,28835,28836,28837,28838,28839,28840,28841,28842,28848,28850,28852,28853,28854,28858,28862,28863,28868,28869,28870,28871,28873,28875,28876,28877,28878,28879,28880,28881,28882,28883,28884,28885,28886,28887,28890,28892,28893,28894,28896,28897,28898,28899,28901,28906,28910,28912,28913,28914,28915,28916,28917,28918,28920,28922,28923,28924,28926,28927,28928,28929,28930,28931,28932,28933,28934,28935,28936,28939,28940,28941,28942,28943,28945,28946,28948,28951,28955,28956,28957,28958,28959,28960,28961,28962,28963,28964,28965,28967,28968,28969,28970,28971,28972,28973,28974,28978,28979,28980,28981,28983,28984,28985,28986,28987,28988,28989,28990,28991,28992,28993,28994,28995,28996,28998,28999,29000,29001,29003,29005,29007,29008,29009,29010,29011,29012,29013,29014,29015,29016,29017,29018,29019,29021,29023,29024,29025,29026,29027,29029,29033,29034,29035,29036,29037,29039,29040,29041,29044,29045,29046,29047,29049,29051,29052,29054,29055,29056,29057,29058,29059,29061,29062,29063,29064,29065,29067,29068,29069,29070,29072,29073,29074,29075,29077,29078,29079,29082,29083,29084,29085,29086,29089,29090,29091,29092,29093,29094,29095,29097,29098,29099,29101,29102,29103,29104,29105,29106,29108,29110,29111,29112,29114,29115,29116,29117,29118,29119,29120,29121,29122,29124,29125,29126,29127,29128,29129,29130,29131,29132,29133,29135,29136,29137,29138,29139,29142,29143,29144,29145,29146,29147,29148,29149,29150,29151,29153,29154,29155,29156,29158,29160,29161,29162,29163,29164,29165,29167,29168,29169,29170,29171,29172,29173,29174,29175,29176,29178,29179,29180,29181,29182,29183,29184,29185,29186,29187,29188,29189,29191,29192,29193,29194,29195,29196,29197,29198,29199,29200,29201,29202,29203,29204,29205,29206,29207,29208,29209,29210,29211,29212,29214,29215,29216,29217,29218,29219,29220,29221,29222,29223,29225,29227,29229,29230,29231,29234,29235,29236,29242,29244,29246,29248,29249,29250,29251,29252,29253,29254,29257,29258,29259,29262,29263,29264,29265,29267,29268,29269,29271,29272,29274,29276,29278,29280,29283,29284,29285,29288,29290,29291,29292,29293,29296,29297,29299,29300,29302,29303,29304,29307,29308,29309,29314,29315,29317,29318,29319,29320,29321,29324,29326,29328,29329,29331,29332,29333,29334,29335,29336,29337,29338,29339,29340,29341,29342,29344,29345,29346,29347,29348,29349,29350,29351,29352,29353,29354,29355,29358,29361,29362,29363,29365,29370,29371,29372,29373,29374,29375,29376,29381,29382,29383,29385,29386,29387,29388,29391,29393,29395,29396,29397,29398,29400,29402,29403,58566,58567,58568,58569,58570,58571,58572,58573,58574,58575,58576,58577,58578,58579,58580,58581,58582,58583,58584,58585,58586,58587,58588,58589,58590,58591,58592,58593,58594,58595,58596,58597,58598,58599,58600,58601,58602,58603,58604,58605,58606,58607,58608,58609,58610,58611,58612,58613,58614,58615,58616,58617,58618,58619,58620,58621,58622,58623,58624,58625,58626,58627,58628,58629,58630,58631,58632,58633,58634,58635,58636,58637,58638,58639,58640,58641,58642,58643,58644,58645,58646,58647,58648,58649,58650,58651,58652,58653,58654,58655,58656,58657,58658,58659,58660,58661,12288,12289,12290,183,713,711,168,12291,12293,8212,65374,8214,8230,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12310,12311,12304,12305,177,215,247,8758,8743,8744,8721,8719,8746,8745,8712,8759,8730,8869,8741,8736,8978,8857,8747,8750,8801,8780,8776,8765,8733,8800,8814,8815,8804,8805,8734,8757,8756,9794,9792,176,8242,8243,8451,65284,164,65504,65505,8240,167,8470,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,8251,8594,8592,8593,8595,12307,58662,58663,58664,58665,58666,58667,58668,58669,58670,58671,58672,58673,58674,58675,58676,58677,58678,58679,58680,58681,58682,58683,58684,58685,58686,58687,58688,58689,58690,58691,58692,58693,58694,58695,58696,58697,58698,58699,58700,58701,58702,58703,58704,58705,58706,58707,58708,58709,58710,58711,58712,58713,58714,58715,58716,58717,58718,58719,58720,58721,58722,58723,58724,58725,58726,58727,58728,58729,58730,58731,58732,58733,58734,58735,58736,58737,58738,58739,58740,58741,58742,58743,58744,58745,58746,58747,58748,58749,58750,58751,58752,58753,58754,58755,58756,58757,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,59238,59239,59240,59241,59242,59243,9352,9353,9354,9355,9356,9357,9358,9359,9360,9361,9362,9363,9364,9365,9366,9367,9368,9369,9370,9371,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,9347,9348,9349,9350,9351,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,8364,59245,12832,12833,12834,12835,12836,12837,12838,12839,12840,12841,59246,59247,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,8554,8555,59248,59249,58758,58759,58760,58761,58762,58763,58764,58765,58766,58767,58768,58769,58770,58771,58772,58773,58774,58775,58776,58777,58778,58779,58780,58781,58782,58783,58784,58785,58786,58787,58788,58789,58790,58791,58792,58793,58794,58795,58796,58797,58798,58799,58800,58801,58802,58803,58804,58805,58806,58807,58808,58809,58810,58811,58812,58813,58814,58815,58816,58817,58818,58819,58820,58821,58822,58823,58824,58825,58826,58827,58828,58829,58830,58831,58832,58833,58834,58835,58836,58837,58838,58839,58840,58841,58842,58843,58844,58845,58846,58847,58848,58849,58850,58851,58852,12288,65281,65282,65283,65509,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65340,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,58854,58855,58856,58857,58858,58859,58860,58861,58862,58863,58864,58865,58866,58867,58868,58869,58870,58871,58872,58873,58874,58875,58876,58877,58878,58879,58880,58881,58882,58883,58884,58885,58886,58887,58888,58889,58890,58891,58892,58893,58894,58895,58896,58897,58898,58899,58900,58901,58902,58903,58904,58905,58906,58907,58908,58909,58910,58911,58912,58913,58914,58915,58916,58917,58918,58919,58920,58921,58922,58923,58924,58925,58926,58927,58928,58929,58930,58931,58932,58933,58934,58935,58936,58937,58938,58939,58940,58941,58942,58943,58944,58945,58946,58947,58948,58949,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,59250,59251,59252,59253,59254,59255,59256,59257,59258,59259,59260,58950,58951,58952,58953,58954,58955,58956,58957,58958,58959,58960,58961,58962,58963,58964,58965,58966,58967,58968,58969,58970,58971,58972,58973,58974,58975,58976,58977,58978,58979,58980,58981,58982,58983,58984,58985,58986,58987,58988,58989,58990,58991,58992,58993,58994,58995,58996,58997,58998,58999,59000,59001,59002,59003,59004,59005,59006,59007,59008,59009,59010,59011,59012,59013,59014,59015,59016,59017,59018,59019,59020,59021,59022,59023,59024,59025,59026,59027,59028,59029,59030,59031,59032,59033,59034,59035,59036,59037,59038,59039,59040,59041,59042,59043,59044,59045,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,59261,59262,59263,59264,59265,59266,59267,59268,59046,59047,59048,59049,59050,59051,59052,59053,59054,59055,59056,59057,59058,59059,59060,59061,59062,59063,59064,59065,59066,59067,59068,59069,59070,59071,59072,59073,59074,59075,59076,59077,59078,59079,59080,59081,59082,59083,59084,59085,59086,59087,59088,59089,59090,59091,59092,59093,59094,59095,59096,59097,59098,59099,59100,59101,59102,59103,59104,59105,59106,59107,59108,59109,59110,59111,59112,59113,59114,59115,59116,59117,59118,59119,59120,59121,59122,59123,59124,59125,59126,59127,59128,59129,59130,59131,59132,59133,59134,59135,59136,59137,59138,59139,59140,59141,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,59269,59270,59271,59272,59273,59274,59275,59276,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,59277,59278,59279,59280,59281,59282,59283,65077,65078,65081,65082,65087,65088,65085,65086,65089,65090,65091,65092,59284,59285,65083,65084,65079,65080,65073,59286,65075,65076,59287,59288,59289,59290,59291,59292,59293,59294,59295,59142,59143,59144,59145,59146,59147,59148,59149,59150,59151,59152,59153,59154,59155,59156,59157,59158,59159,59160,59161,59162,59163,59164,59165,59166,59167,59168,59169,59170,59171,59172,59173,59174,59175,59176,59177,59178,59179,59180,59181,59182,59183,59184,59185,59186,59187,59188,59189,59190,59191,59192,59193,59194,59195,59196,59197,59198,59199,59200,59201,59202,59203,59204,59205,59206,59207,59208,59209,59210,59211,59212,59213,59214,59215,59216,59217,59218,59219,59220,59221,59222,59223,59224,59225,59226,59227,59228,59229,59230,59231,59232,59233,59234,59235,59236,59237,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,59296,59297,59298,59299,59300,59301,59302,59303,59304,59305,59306,59307,59308,59309,59310,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,59311,59312,59313,59314,59315,59316,59317,59318,59319,59320,59321,59322,59323,714,715,729,8211,8213,8229,8245,8453,8457,8598,8599,8600,8601,8725,8735,8739,8786,8806,8807,8895,9552,9553,9554,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,9581,9582,9583,9584,9585,9586,9587,9601,9602,9603,9604,9605,9606,9607,9608,9609,9610,9611,9612,9613,9614,9615,9619,9620,9621,9660,9661,9698,9699,9700,9701,9737,8853,12306,12317,12318,59324,59325,59326,59327,59328,59329,59330,59331,59332,59333,59334,257,225,462,224,275,233,283,232,299,237,464,236,333,243,466,242,363,250,468,249,470,472,474,476,252,234,593,7743,324,328,505,609,59337,59338,59339,59340,12549,12550,12551,12552,12553,12554,12555,12556,12557,12558,12559,12560,12561,12562,12563,12564,12565,12566,12567,12568,12569,12570,12571,12572,12573,12574,12575,12576,12577,12578,12579,12580,12581,12582,12583,12584,12585,59341,59342,59343,59344,59345,59346,59347,59348,59349,59350,59351,59352,59353,59354,59355,59356,59357,59358,59359,59360,59361,12321,12322,12323,12324,12325,12326,12327,12328,12329,12963,13198,13199,13212,13213,13214,13217,13252,13262,13265,13266,13269,65072,65506,65508,59362,8481,12849,59363,8208,59364,59365,59366,12540,12443,12444,12541,12542,12294,12445,12446,65097,65098,65099,65100,65101,65102,65103,65104,65105,65106,65108,65109,65110,65111,65113,65114,65115,65116,65117,65118,65119,65120,65121,65122,65123,65124,65125,65126,65128,65129,65130,65131,12350,12272,12273,12274,12275,12276,12277,12278,12279,12280,12281,12282,12283,12295,59380,59381,59382,59383,59384,59385,59386,59387,59388,59389,59390,59391,59392,9472,9473,9474,9475,9476,9477,9478,9479,9480,9481,9482,9483,9484,9485,9486,9487,9488,9489,9490,9491,9492,9493,9494,9495,9496,9497,9498,9499,9500,9501,9502,9503,9504,9505,9506,9507,9508,9509,9510,9511,9512,9513,9514,9515,9516,9517,9518,9519,9520,9521,9522,9523,9524,9525,9526,9527,9528,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9545,9546,9547,59393,59394,59395,59396,59397,59398,59399,59400,59401,59402,59403,59404,59405,59406,59407,29404,29405,29407,29410,29411,29412,29413,29414,29415,29418,29419,29429,29430,29433,29437,29438,29439,29440,29442,29444,29445,29446,29447,29448,29449,29451,29452,29453,29455,29456,29457,29458,29460,29464,29465,29466,29471,29472,29475,29476,29478,29479,29480,29485,29487,29488,29490,29491,29493,29494,29498,29499,29500,29501,29504,29505,29506,29507,29508,29509,29510,29511,29512,29513,29514,29515,29516,29518,29519,29521,29523,29524,29525,29526,29528,29529,29530,29531,29532,29533,29534,29535,29537,29538,29539,29540,29541,29542,29543,29544,29545,29546,29547,29550,29552,29553,57344,57345,57346,57347,57348,57349,57350,57351,57352,57353,57354,57355,57356,57357,57358,57359,57360,57361,57362,57363,57364,57365,57366,57367,57368,57369,57370,57371,57372,57373,57374,57375,57376,57377,57378,57379,57380,57381,57382,57383,57384,57385,57386,57387,57388,57389,57390,57391,57392,57393,57394,57395,57396,57397,57398,57399,57400,57401,57402,57403,57404,57405,57406,57407,57408,57409,57410,57411,57412,57413,57414,57415,57416,57417,57418,57419,57420,57421,57422,57423,57424,57425,57426,57427,57428,57429,57430,57431,57432,57433,57434,57435,57436,57437,29554,29555,29556,29557,29558,29559,29560,29561,29562,29563,29564,29565,29567,29568,29569,29570,29571,29573,29574,29576,29578,29580,29581,29583,29584,29586,29587,29588,29589,29591,29592,29593,29594,29596,29597,29598,29600,29601,29603,29604,29605,29606,29607,29608,29610,29612,29613,29617,29620,29621,29622,29624,29625,29628,29629,29630,29631,29633,29635,29636,29637,29638,29639,29643,29644,29646,29650,29651,29652,29653,29654,29655,29656,29658,29659,29660,29661,29663,29665,29666,29667,29668,29670,29672,29674,29675,29676,29678,29679,29680,29681,29683,29684,29685,29686,29687,57438,57439,57440,57441,57442,57443,57444,57445,57446,57447,57448,57449,57450,57451,57452,57453,57454,57455,57456,57457,57458,57459,57460,57461,57462,57463,57464,57465,57466,57467,57468,57469,57470,57471,57472,57473,57474,57475,57476,57477,57478,57479,57480,57481,57482,57483,57484,57485,57486,57487,57488,57489,57490,57491,57492,57493,57494,57495,57496,57497,57498,57499,57500,57501,57502,57503,57504,57505,57506,57507,57508,57509,57510,57511,57512,57513,57514,57515,57516,57517,57518,57519,57520,57521,57522,57523,57524,57525,57526,57527,57528,57529,57530,57531,29688,29689,29690,29691,29692,29693,29694,29695,29696,29697,29698,29700,29703,29704,29707,29708,29709,29710,29713,29714,29715,29716,29717,29718,29719,29720,29721,29724,29725,29726,29727,29728,29729,29731,29732,29735,29737,29739,29741,29743,29745,29746,29751,29752,29753,29754,29755,29757,29758,29759,29760,29762,29763,29764,29765,29766,29767,29768,29769,29770,29771,29772,29773,29774,29775,29776,29777,29778,29779,29780,29782,29784,29789,29792,29793,29794,29795,29796,29797,29798,29799,29800,29801,29802,29803,29804,29806,29807,29809,29810,29811,29812,29813,29816,29817,29818,57532,57533,57534,57535,57536,57537,57538,57539,57540,57541,57542,57543,57544,57545,57546,57547,57548,57549,57550,57551,57552,57553,57554,57555,57556,57557,57558,57559,57560,57561,57562,57563,57564,57565,57566,57567,57568,57569,57570,57571,57572,57573,57574,57575,57576,57577,57578,57579,57580,57581,57582,57583,57584,57585,57586,57587,57588,57589,57590,57591,57592,57593,57594,57595,57596,57597,57598,57599,57600,57601,57602,57603,57604,57605,57606,57607,57608,57609,57610,57611,57612,57613,57614,57615,57616,57617,57618,57619,57620,57621,57622,57623,57624,57625,29819,29820,29821,29823,29826,29828,29829,29830,29832,29833,29834,29836,29837,29839,29841,29842,29843,29844,29845,29846,29847,29848,29849,29850,29851,29853,29855,29856,29857,29858,29859,29860,29861,29862,29866,29867,29868,29869,29870,29871,29872,29873,29874,29875,29876,29877,29878,29879,29880,29881,29883,29884,29885,29886,29887,29888,29889,29890,29891,29892,29893,29894,29895,29896,29897,29898,29899,29900,29901,29902,29903,29904,29905,29907,29908,29909,29910,29911,29912,29913,29914,29915,29917,29919,29921,29925,29927,29928,29929,29930,29931,29932,29933,29936,29937,29938,57626,57627,57628,57629,57630,57631,57632,57633,57634,57635,57636,57637,57638,57639,57640,57641,57642,57643,57644,57645,57646,57647,57648,57649,57650,57651,57652,57653,57654,57655,57656,57657,57658,57659,57660,57661,57662,57663,57664,57665,57666,57667,57668,57669,57670,57671,57672,57673,57674,57675,57676,57677,57678,57679,57680,57681,57682,57683,57684,57685,57686,57687,57688,57689,57690,57691,57692,57693,57694,57695,57696,57697,57698,57699,57700,57701,57702,57703,57704,57705,57706,57707,57708,57709,57710,57711,57712,57713,57714,57715,57716,57717,57718,57719,29939,29941,29944,29945,29946,29947,29948,29949,29950,29952,29953,29954,29955,29957,29958,29959,29960,29961,29962,29963,29964,29966,29968,29970,29972,29973,29974,29975,29979,29981,29982,29984,29985,29986,29987,29988,29990,29991,29994,29998,30004,30006,30009,30012,30013,30015,30017,30018,30019,30020,30022,30023,30025,30026,30029,30032,30033,30034,30035,30037,30038,30039,30040,30045,30046,30047,30048,30049,30050,30051,30052,30055,30056,30057,30059,30060,30061,30062,30063,30064,30065,30067,30069,30070,30071,30074,30075,30076,30077,30078,30080,30081,30082,30084,30085,30087,57720,57721,57722,57723,57724,57725,57726,57727,57728,57729,57730,57731,57732,57733,57734,57735,57736,57737,57738,57739,57740,57741,57742,57743,57744,57745,57746,57747,57748,57749,57750,57751,57752,57753,57754,57755,57756,57757,57758,57759,57760,57761,57762,57763,57764,57765,57766,57767,57768,57769,57770,57771,57772,57773,57774,57775,57776,57777,57778,57779,57780,57781,57782,57783,57784,57785,57786,57787,57788,57789,57790,57791,57792,57793,57794,57795,57796,57797,57798,57799,57800,57801,57802,57803,57804,57805,57806,57807,57808,57809,57810,57811,57812,57813,30088,30089,30090,30092,30093,30094,30096,30099,30101,30104,30107,30108,30110,30114,30118,30119,30120,30121,30122,30125,30134,30135,30138,30139,30143,30144,30145,30150,30155,30156,30158,30159,30160,30161,30163,30167,30169,30170,30172,30173,30175,30176,30177,30181,30185,30188,30189,30190,30191,30194,30195,30197,30198,30199,30200,30202,30203,30205,30206,30210,30212,30214,30215,30216,30217,30219,30221,30222,30223,30225,30226,30227,30228,30230,30234,30236,30237,30238,30241,30243,30247,30248,30252,30254,30255,30257,30258,30262,30263,30265,30266,30267,30269,30273,30274,30276,57814,57815,57816,57817,57818,57819,57820,57821,57822,57823,57824,57825,57826,57827,57828,57829,57830,57831,57832,57833,57834,57835,57836,57837,57838,57839,57840,57841,57842,57843,57844,57845,57846,57847,57848,57849,57850,57851,57852,57853,57854,57855,57856,57857,57858,57859,57860,57861,57862,57863,57864,57865,57866,57867,57868,57869,57870,57871,57872,57873,57874,57875,57876,57877,57878,57879,57880,57881,57882,57883,57884,57885,57886,57887,57888,57889,57890,57891,57892,57893,57894,57895,57896,57897,57898,57899,57900,57901,57902,57903,57904,57905,57906,57907,30277,30278,30279,30280,30281,30282,30283,30286,30287,30288,30289,30290,30291,30293,30295,30296,30297,30298,30299,30301,30303,30304,30305,30306,30308,30309,30310,30311,30312,30313,30314,30316,30317,30318,30320,30321,30322,30323,30324,30325,30326,30327,30329,30330,30332,30335,30336,30337,30339,30341,30345,30346,30348,30349,30351,30352,30354,30356,30357,30359,30360,30362,30363,30364,30365,30366,30367,30368,30369,30370,30371,30373,30374,30375,30376,30377,30378,30379,30380,30381,30383,30384,30387,30389,30390,30391,30392,30393,30394,30395,30396,30397,30398,30400,30401,30403,21834,38463,22467,25384,21710,21769,21696,30353,30284,34108,30702,33406,30861,29233,38552,38797,27688,23433,20474,25353,26263,23736,33018,26696,32942,26114,30414,20985,25942,29100,32753,34948,20658,22885,25034,28595,33453,25420,25170,21485,21543,31494,20843,30116,24052,25300,36299,38774,25226,32793,22365,38712,32610,29240,30333,26575,30334,25670,20336,36133,25308,31255,26001,29677,25644,25203,33324,39041,26495,29256,25198,25292,20276,29923,21322,21150,32458,37030,24110,26758,27036,33152,32465,26834,30917,34444,38225,20621,35876,33502,32990,21253,35090,21093,30404,30407,30409,30411,30412,30419,30421,30425,30426,30428,30429,30430,30432,30433,30434,30435,30436,30438,30439,30440,30441,30442,30443,30444,30445,30448,30451,30453,30454,30455,30458,30459,30461,30463,30464,30466,30467,30469,30470,30474,30476,30478,30479,30480,30481,30482,30483,30484,30485,30486,30487,30488,30491,30492,30493,30494,30497,30499,30500,30501,30503,30506,30507,30508,30510,30512,30513,30514,30515,30516,30521,30523,30525,30526,30527,30530,30532,30533,30534,30536,30537,30538,30539,30540,30541,30542,30543,30546,30547,30548,30549,30550,30551,30552,30553,30556,34180,38649,20445,22561,39281,23453,25265,25253,26292,35961,40077,29190,26479,30865,24754,21329,21271,36744,32972,36125,38049,20493,29384,22791,24811,28953,34987,22868,33519,26412,31528,23849,32503,29997,27893,36454,36856,36924,40763,27604,37145,31508,24444,30887,34006,34109,27605,27609,27606,24065,24199,30201,38381,25949,24330,24517,36767,22721,33218,36991,38491,38829,36793,32534,36140,25153,20415,21464,21342,36776,36777,36779,36941,26631,24426,33176,34920,40150,24971,21035,30250,24428,25996,28626,28392,23486,25672,20853,20912,26564,19993,31177,39292,28851,30557,30558,30559,30560,30564,30567,30569,30570,30573,30574,30575,30576,30577,30578,30579,30580,30581,30582,30583,30584,30586,30587,30588,30593,30594,30595,30598,30599,30600,30601,30602,30603,30607,30608,30611,30612,30613,30614,30615,30616,30617,30618,30619,30620,30621,30622,30625,30627,30628,30630,30632,30635,30637,30638,30639,30641,30642,30644,30646,30647,30648,30649,30650,30652,30654,30656,30657,30658,30659,30660,30661,30662,30663,30664,30665,30666,30667,30668,30670,30671,30672,30673,30674,30675,30676,30677,30678,30680,30681,30682,30685,30686,30687,30688,30689,30692,30149,24182,29627,33760,25773,25320,38069,27874,21338,21187,25615,38082,31636,20271,24091,33334,33046,33162,28196,27850,39539,25429,21340,21754,34917,22496,19981,24067,27493,31807,37096,24598,25830,29468,35009,26448,25165,36130,30572,36393,37319,24425,33756,34081,39184,21442,34453,27531,24813,24808,28799,33485,33329,20179,27815,34255,25805,31961,27133,26361,33609,21397,31574,20391,20876,27979,23618,36461,25554,21449,33580,33590,26597,30900,25661,23519,23700,24046,35815,25286,26612,35962,25600,25530,34633,39307,35863,32544,38130,20135,38416,39076,26124,29462,30694,30696,30698,30703,30704,30705,30706,30708,30709,30711,30713,30714,30715,30716,30723,30724,30725,30726,30727,30728,30730,30731,30734,30735,30736,30739,30741,30745,30747,30750,30752,30753,30754,30756,30760,30762,30763,30766,30767,30769,30770,30771,30773,30774,30781,30783,30785,30786,30787,30788,30790,30792,30793,30794,30795,30797,30799,30801,30803,30804,30808,30809,30810,30811,30812,30814,30815,30816,30817,30818,30819,30820,30821,30822,30823,30824,30825,30831,30832,30833,30834,30835,30836,30837,30838,30840,30841,30842,30843,30845,30846,30847,30848,30849,30850,30851,22330,23581,24120,38271,20607,32928,21378,25950,30021,21809,20513,36229,25220,38046,26397,22066,28526,24034,21557,28818,36710,25199,25764,25507,24443,28552,37108,33251,36784,23576,26216,24561,27785,38472,36225,34924,25745,31216,22478,27225,25104,21576,20056,31243,24809,28548,35802,25215,36894,39563,31204,21507,30196,25345,21273,27744,36831,24347,39536,32827,40831,20360,23610,36196,32709,26021,28861,20805,20914,34411,23815,23456,25277,37228,30068,36364,31264,24833,31609,20167,32504,30597,19985,33261,21021,20986,27249,21416,36487,38148,38607,28353,38500,26970,30852,30853,30854,30856,30858,30859,30863,30864,30866,30868,30869,30870,30873,30877,30878,30880,30882,30884,30886,30888,30889,30890,30891,30892,30893,30894,30895,30901,30902,30903,30904,30906,30907,30908,30909,30911,30912,30914,30915,30916,30918,30919,30920,30924,30925,30926,30927,30929,30930,30931,30934,30935,30936,30938,30939,30940,30941,30942,30943,30944,30945,30946,30947,30948,30949,30950,30951,30953,30954,30955,30957,30958,30959,30960,30961,30963,30965,30966,30968,30969,30971,30972,30973,30974,30975,30976,30978,30979,30980,30982,30983,30984,30985,30986,30987,30988,30784,20648,30679,25616,35302,22788,25571,24029,31359,26941,20256,33337,21912,20018,30126,31383,24162,24202,38383,21019,21561,28810,25462,38180,22402,26149,26943,37255,21767,28147,32431,34850,25139,32496,30133,33576,30913,38604,36766,24904,29943,35789,27492,21050,36176,27425,32874,33905,22257,21254,20174,19995,20945,31895,37259,31751,20419,36479,31713,31388,25703,23828,20652,33030,30209,31929,28140,32736,26449,23384,23544,30923,25774,25619,25514,25387,38169,25645,36798,31572,30249,25171,22823,21574,27513,20643,25140,24102,27526,20195,36151,34955,24453,36910,30989,30990,30991,30992,30993,30994,30996,30997,30998,30999,31000,31001,31002,31003,31004,31005,31007,31008,31009,31010,31011,31013,31014,31015,31016,31017,31018,31019,31020,31021,31022,31023,31024,31025,31026,31027,31029,31030,31031,31032,31033,31037,31039,31042,31043,31044,31045,31047,31050,31051,31052,31053,31054,31055,31056,31057,31058,31060,31061,31064,31065,31073,31075,31076,31078,31081,31082,31083,31084,31086,31088,31089,31090,31091,31092,31093,31094,31097,31099,31100,31101,31102,31103,31106,31107,31110,31111,31112,31113,31115,31116,31117,31118,31120,31121,31122,24608,32829,25285,20025,21333,37112,25528,32966,26086,27694,20294,24814,28129,35806,24377,34507,24403,25377,20826,33633,26723,20992,25443,36424,20498,23707,31095,23548,21040,31291,24764,36947,30423,24503,24471,30340,36460,28783,30331,31561,30634,20979,37011,22564,20302,28404,36842,25932,31515,29380,28068,32735,23265,25269,24213,22320,33922,31532,24093,24351,36882,32532,39072,25474,28359,30872,28857,20856,38747,22443,30005,20291,30008,24215,24806,22880,28096,27583,30857,21500,38613,20939,20993,25481,21514,38035,35843,36300,29241,30879,34678,36845,35853,21472,31123,31124,31125,31126,31127,31128,31129,31131,31132,31133,31134,31135,31136,31137,31138,31139,31140,31141,31142,31144,31145,31146,31147,31148,31149,31150,31151,31152,31153,31154,31156,31157,31158,31159,31160,31164,31167,31170,31172,31173,31175,31176,31178,31180,31182,31183,31184,31187,31188,31190,31191,31193,31194,31195,31196,31197,31198,31200,31201,31202,31205,31208,31210,31212,31214,31217,31218,31219,31220,31221,31222,31223,31225,31226,31228,31230,31231,31233,31236,31237,31239,31240,31241,31242,31244,31247,31248,31249,31250,31251,31253,31254,31256,31257,31259,31260,19969,30447,21486,38025,39030,40718,38189,23450,35746,20002,19996,20908,33891,25026,21160,26635,20375,24683,20923,27934,20828,25238,26007,38497,35910,36887,30168,37117,30563,27602,29322,29420,35835,22581,30585,36172,26460,38208,32922,24230,28193,22930,31471,30701,38203,27573,26029,32526,22534,20817,38431,23545,22697,21544,36466,25958,39039,22244,38045,30462,36929,25479,21702,22810,22842,22427,36530,26421,36346,33333,21057,24816,22549,34558,23784,40517,20420,39069,35769,23077,24694,21380,25212,36943,37122,39295,24681,32780,20799,32819,23572,39285,27953,20108,31261,31263,31265,31266,31268,31269,31270,31271,31272,31273,31274,31275,31276,31277,31278,31279,31280,31281,31282,31284,31285,31286,31288,31290,31294,31296,31297,31298,31299,31300,31301,31303,31304,31305,31306,31307,31308,31309,31310,31311,31312,31314,31315,31316,31317,31318,31320,31321,31322,31323,31324,31325,31326,31327,31328,31329,31330,31331,31332,31333,31334,31335,31336,31337,31338,31339,31340,31341,31342,31343,31345,31346,31347,31349,31355,31356,31357,31358,31362,31365,31367,31369,31370,31371,31372,31374,31375,31376,31379,31380,31385,31386,31387,31390,31393,31394,36144,21457,32602,31567,20240,20047,38400,27861,29648,34281,24070,30058,32763,27146,30718,38034,32321,20961,28902,21453,36820,33539,36137,29359,39277,27867,22346,33459,26041,32938,25151,38450,22952,20223,35775,32442,25918,33778,38750,21857,39134,32933,21290,35837,21536,32954,24223,27832,36153,33452,37210,21545,27675,20998,32439,22367,28954,27774,31881,22859,20221,24575,24868,31914,20016,23553,26539,34562,23792,38155,39118,30127,28925,36898,20911,32541,35773,22857,20964,20315,21542,22827,25975,32932,23413,25206,25282,36752,24133,27679,31526,20239,20440,26381,31395,31396,31399,31401,31402,31403,31406,31407,31408,31409,31410,31412,31413,31414,31415,31416,31417,31418,31419,31420,31421,31422,31424,31425,31426,31427,31428,31429,31430,31431,31432,31433,31434,31436,31437,31438,31439,31440,31441,31442,31443,31444,31445,31447,31448,31450,31451,31452,31453,31457,31458,31460,31463,31464,31465,31466,31467,31468,31470,31472,31473,31474,31475,31476,31477,31478,31479,31480,31483,31484,31486,31488,31489,31490,31493,31495,31497,31500,31501,31502,31504,31506,31507,31510,31511,31512,31514,31516,31517,31519,31521,31522,31523,31527,31529,31533,28014,28074,31119,34993,24343,29995,25242,36741,20463,37340,26023,33071,33105,24220,33104,36212,21103,35206,36171,22797,20613,20184,38428,29238,33145,36127,23500,35747,38468,22919,32538,21648,22134,22030,35813,25913,27010,38041,30422,28297,24178,29976,26438,26577,31487,32925,36214,24863,31174,25954,36195,20872,21018,38050,32568,32923,32434,23703,28207,26464,31705,30347,39640,33167,32660,31957,25630,38224,31295,21578,21733,27468,25601,25096,40509,33011,30105,21106,38761,33883,26684,34532,38401,38548,38124,20010,21508,32473,26681,36319,32789,26356,24218,32697,31535,31536,31538,31540,31541,31542,31543,31545,31547,31549,31551,31552,31553,31554,31555,31556,31558,31560,31562,31565,31566,31571,31573,31575,31577,31580,31582,31583,31585,31587,31588,31589,31590,31591,31592,31593,31594,31595,31596,31597,31599,31600,31603,31604,31606,31608,31610,31612,31613,31615,31617,31618,31619,31620,31622,31623,31624,31625,31626,31627,31628,31630,31631,31633,31634,31635,31638,31640,31641,31642,31643,31646,31647,31648,31651,31652,31653,31662,31663,31664,31666,31667,31669,31670,31671,31673,31674,31675,31676,31677,31678,31679,31680,31682,31683,31684,22466,32831,26775,24037,25915,21151,24685,40858,20379,36524,20844,23467,24339,24041,27742,25329,36129,20849,38057,21246,27807,33503,29399,22434,26500,36141,22815,36764,33735,21653,31629,20272,27837,23396,22993,40723,21476,34506,39592,35895,32929,25925,39038,22266,38599,21038,29916,21072,23521,25346,35074,20054,25296,24618,26874,20851,23448,20896,35266,31649,39302,32592,24815,28748,36143,20809,24191,36891,29808,35268,22317,30789,24402,40863,38394,36712,39740,35809,30328,26690,26588,36330,36149,21053,36746,28378,26829,38149,37101,22269,26524,35065,36807,21704,31685,31688,31689,31690,31691,31693,31694,31695,31696,31698,31700,31701,31702,31703,31704,31707,31708,31710,31711,31712,31714,31715,31716,31719,31720,31721,31723,31724,31725,31727,31728,31730,31731,31732,31733,31734,31736,31737,31738,31739,31741,31743,31744,31745,31746,31747,31748,31749,31750,31752,31753,31754,31757,31758,31760,31761,31762,31763,31764,31765,31767,31768,31769,31770,31771,31772,31773,31774,31776,31777,31778,31779,31780,31781,31784,31785,31787,31788,31789,31790,31791,31792,31793,31794,31795,31796,31797,31798,31799,31801,31802,31803,31804,31805,31806,31810,39608,23401,28023,27686,20133,23475,39559,37219,25000,37039,38889,21547,28085,23506,20989,21898,32597,32752,25788,25421,26097,25022,24717,28938,27735,27721,22831,26477,33322,22741,22158,35946,27627,37085,22909,32791,21495,28009,21621,21917,33655,33743,26680,31166,21644,20309,21512,30418,35977,38402,27827,28088,36203,35088,40548,36154,22079,40657,30165,24456,29408,24680,21756,20136,27178,34913,24658,36720,21700,28888,34425,40511,27946,23439,24344,32418,21897,20399,29492,21564,21402,20505,21518,21628,20046,24573,29786,22774,33899,32993,34676,29392,31946,28246,31811,31812,31813,31814,31815,31816,31817,31818,31819,31820,31822,31823,31824,31825,31826,31827,31828,31829,31830,31831,31832,31833,31834,31835,31836,31837,31838,31839,31840,31841,31842,31843,31844,31845,31846,31847,31848,31849,31850,31851,31852,31853,31854,31855,31856,31857,31858,31861,31862,31863,31864,31865,31866,31870,31871,31872,31873,31874,31875,31876,31877,31878,31879,31880,31882,31883,31884,31885,31886,31887,31888,31891,31892,31894,31897,31898,31899,31904,31905,31907,31910,31911,31912,31913,31915,31916,31917,31919,31920,31924,31925,31926,31927,31928,31930,31931,24359,34382,21804,25252,20114,27818,25143,33457,21719,21326,29502,28369,30011,21010,21270,35805,27088,24458,24576,28142,22351,27426,29615,26707,36824,32531,25442,24739,21796,30186,35938,28949,28067,23462,24187,33618,24908,40644,30970,34647,31783,30343,20976,24822,29004,26179,24140,24653,35854,28784,25381,36745,24509,24674,34516,22238,27585,24724,24935,21321,24800,26214,36159,31229,20250,28905,27719,35763,35826,32472,33636,26127,23130,39746,27985,28151,35905,27963,20249,28779,33719,25110,24785,38669,36135,31096,20987,22334,22522,26426,30072,31293,31215,31637,31935,31936,31938,31939,31940,31942,31945,31947,31950,31951,31952,31953,31954,31955,31956,31960,31962,31963,31965,31966,31969,31970,31971,31972,31973,31974,31975,31977,31978,31979,31980,31981,31982,31984,31985,31986,31987,31988,31989,31990,31991,31993,31994,31996,31997,31998,31999,32000,32001,32002,32003,32004,32005,32006,32007,32008,32009,32011,32012,32013,32014,32015,32016,32017,32018,32019,32020,32021,32022,32023,32024,32025,32026,32027,32028,32029,32030,32031,32033,32035,32036,32037,32038,32040,32041,32042,32044,32045,32046,32048,32049,32050,32051,32052,32053,32054,32908,39269,36857,28608,35749,40481,23020,32489,32521,21513,26497,26840,36753,31821,38598,21450,24613,30142,27762,21363,23241,32423,25380,20960,33034,24049,34015,25216,20864,23395,20238,31085,21058,24760,27982,23492,23490,35745,35760,26082,24524,38469,22931,32487,32426,22025,26551,22841,20339,23478,21152,33626,39050,36158,30002,38078,20551,31292,20215,26550,39550,23233,27516,30417,22362,23574,31546,38388,29006,20860,32937,33392,22904,32516,33575,26816,26604,30897,30839,25315,25441,31616,20461,21098,20943,33616,27099,37492,36341,36145,35265,38190,31661,20214,32055,32056,32057,32058,32059,32060,32061,32062,32063,32064,32065,32066,32067,32068,32069,32070,32071,32072,32073,32074,32075,32076,32077,32078,32079,32080,32081,32082,32083,32084,32085,32086,32087,32088,32089,32090,32091,32092,32093,32094,32095,32096,32097,32098,32099,32100,32101,32102,32103,32104,32105,32106,32107,32108,32109,32111,32112,32113,32114,32115,32116,32117,32118,32120,32121,32122,32123,32124,32125,32126,32127,32128,32129,32130,32131,32132,32133,32134,32135,32136,32137,32138,32139,32140,32141,32142,32143,32144,32145,32146,32147,32148,32149,32150,32151,32152,20581,33328,21073,39279,28176,28293,28071,24314,20725,23004,23558,27974,27743,30086,33931,26728,22870,35762,21280,37233,38477,34121,26898,30977,28966,33014,20132,37066,27975,39556,23047,22204,25605,38128,30699,20389,33050,29409,35282,39290,32564,32478,21119,25945,37237,36735,36739,21483,31382,25581,25509,30342,31224,34903,38454,25130,21163,33410,26708,26480,25463,30571,31469,27905,32467,35299,22992,25106,34249,33445,30028,20511,20171,30117,35819,23626,24062,31563,26020,37329,20170,27941,35167,32039,38182,20165,35880,36827,38771,26187,31105,36817,28908,28024,32153,32154,32155,32156,32157,32158,32159,32160,32161,32162,32163,32164,32165,32167,32168,32169,32170,32171,32172,32173,32175,32176,32177,32178,32179,32180,32181,32182,32183,32184,32185,32186,32187,32188,32189,32190,32191,32192,32193,32194,32195,32196,32197,32198,32199,32200,32201,32202,32203,32204,32205,32206,32207,32208,32209,32210,32211,32212,32213,32214,32215,32216,32217,32218,32219,32220,32221,32222,32223,32224,32225,32226,32227,32228,32229,32230,32231,32232,32233,32234,32235,32236,32237,32238,32239,32240,32241,32242,32243,32244,32245,32246,32247,32248,32249,32250,23613,21170,33606,20834,33550,30555,26230,40120,20140,24778,31934,31923,32463,20117,35686,26223,39048,38745,22659,25964,38236,24452,30153,38742,31455,31454,20928,28847,31384,25578,31350,32416,29590,38893,20037,28792,20061,37202,21417,25937,26087,33276,33285,21646,23601,30106,38816,25304,29401,30141,23621,39545,33738,23616,21632,30697,20030,27822,32858,25298,25454,24040,20855,36317,36382,38191,20465,21477,24807,28844,21095,25424,40515,23071,20518,30519,21367,32482,25733,25899,25225,25496,20500,29237,35273,20915,35776,32477,22343,33740,38055,20891,21531,23803,32251,32252,32253,32254,32255,32256,32257,32258,32259,32260,32261,32262,32263,32264,32265,32266,32267,32268,32269,32270,32271,32272,32273,32274,32275,32276,32277,32278,32279,32280,32281,32282,32283,32284,32285,32286,32287,32288,32289,32290,32291,32292,32293,32294,32295,32296,32297,32298,32299,32300,32301,32302,32303,32304,32305,32306,32307,32308,32309,32310,32311,32312,32313,32314,32316,32317,32318,32319,32320,32322,32323,32324,32325,32326,32328,32329,32330,32331,32332,32333,32334,32335,32336,32337,32338,32339,32340,32341,32342,32343,32344,32345,32346,32347,32348,32349,20426,31459,27994,37089,39567,21888,21654,21345,21679,24320,25577,26999,20975,24936,21002,22570,21208,22350,30733,30475,24247,24951,31968,25179,25239,20130,28821,32771,25335,28900,38752,22391,33499,26607,26869,30933,39063,31185,22771,21683,21487,28212,20811,21051,23458,35838,32943,21827,22438,24691,22353,21549,31354,24656,23380,25511,25248,21475,25187,23495,26543,21741,31391,33510,37239,24211,35044,22840,22446,25358,36328,33007,22359,31607,20393,24555,23485,27454,21281,31568,29378,26694,30719,30518,26103,20917,20111,30420,23743,31397,33909,22862,39745,20608,32350,32351,32352,32353,32354,32355,32356,32357,32358,32359,32360,32361,32362,32363,32364,32365,32366,32367,32368,32369,32370,32371,32372,32373,32374,32375,32376,32377,32378,32379,32380,32381,32382,32383,32384,32385,32387,32388,32389,32390,32391,32392,32393,32394,32395,32396,32397,32398,32399,32400,32401,32402,32403,32404,32405,32406,32407,32408,32409,32410,32412,32413,32414,32430,32436,32443,32444,32470,32484,32492,32505,32522,32528,32542,32567,32569,32571,32572,32573,32574,32575,32576,32577,32579,32582,32583,32584,32585,32586,32587,32588,32589,32590,32591,32594,32595,39304,24871,28291,22372,26118,25414,22256,25324,25193,24275,38420,22403,25289,21895,34593,33098,36771,21862,33713,26469,36182,34013,23146,26639,25318,31726,38417,20848,28572,35888,25597,35272,25042,32518,28866,28389,29701,27028,29436,24266,37070,26391,28010,25438,21171,29282,32769,20332,23013,37226,28889,28061,21202,20048,38647,38253,34174,30922,32047,20769,22418,25794,32907,31867,27882,26865,26974,20919,21400,26792,29313,40654,31729,29432,31163,28435,29702,26446,37324,40100,31036,33673,33620,21519,26647,20029,21385,21169,30782,21382,21033,20616,20363,20432,32598,32601,32603,32604,32605,32606,32608,32611,32612,32613,32614,32615,32619,32620,32621,32623,32624,32627,32629,32630,32631,32632,32634,32635,32636,32637,32639,32640,32642,32643,32644,32645,32646,32647,32648,32649,32651,32653,32655,32656,32657,32658,32659,32661,32662,32663,32664,32665,32667,32668,32672,32674,32675,32677,32678,32680,32681,32682,32683,32684,32685,32686,32689,32691,32692,32693,32694,32695,32698,32699,32702,32704,32706,32707,32708,32710,32711,32712,32713,32715,32717,32719,32720,32721,32722,32723,32726,32727,32729,32730,32731,32732,32733,32734,32738,32739,30178,31435,31890,27813,38582,21147,29827,21737,20457,32852,33714,36830,38256,24265,24604,28063,24088,25947,33080,38142,24651,28860,32451,31918,20937,26753,31921,33391,20004,36742,37327,26238,20142,35845,25769,32842,20698,30103,29134,23525,36797,28518,20102,25730,38243,24278,26009,21015,35010,28872,21155,29454,29747,26519,30967,38678,20020,37051,40158,28107,20955,36161,21533,25294,29618,33777,38646,40836,38083,20278,32666,20940,28789,38517,23725,39046,21478,20196,28316,29705,27060,30827,39311,30041,21016,30244,27969,26611,20845,40857,32843,21657,31548,31423,32740,32743,32744,32746,32747,32748,32749,32751,32754,32756,32757,32758,32759,32760,32761,32762,32765,32766,32767,32770,32775,32776,32777,32778,32782,32783,32785,32787,32794,32795,32797,32798,32799,32801,32803,32804,32811,32812,32813,32814,32815,32816,32818,32820,32825,32826,32828,32830,32832,32833,32836,32837,32839,32840,32841,32846,32847,32848,32849,32851,32853,32854,32855,32857,32859,32860,32861,32862,32863,32864,32865,32866,32867,32868,32869,32870,32871,32872,32875,32876,32877,32878,32879,32880,32882,32883,32884,32885,32886,32887,32888,32889,32890,32891,32892,32893,38534,22404,25314,38471,27004,23044,25602,31699,28431,38475,33446,21346,39045,24208,28809,25523,21348,34383,40065,40595,30860,38706,36335,36162,40575,28510,31108,24405,38470,25134,39540,21525,38109,20387,26053,23653,23649,32533,34385,27695,24459,29575,28388,32511,23782,25371,23402,28390,21365,20081,25504,30053,25249,36718,20262,20177,27814,32438,35770,33821,34746,32599,36923,38179,31657,39585,35064,33853,27931,39558,32476,22920,40635,29595,30721,34434,39532,39554,22043,21527,22475,20080,40614,21334,36808,33033,30610,39314,34542,28385,34067,26364,24930,28459,32894,32897,32898,32901,32904,32906,32909,32910,32911,32912,32913,32914,32916,32917,32919,32921,32926,32931,32934,32935,32936,32940,32944,32947,32949,32950,32952,32953,32955,32965,32967,32968,32969,32970,32971,32975,32976,32977,32978,32979,32980,32981,32984,32991,32992,32994,32995,32998,33006,33013,33015,33017,33019,33022,33023,33024,33025,33027,33028,33029,33031,33032,33035,33036,33045,33047,33049,33051,33052,33053,33055,33056,33057,33058,33059,33060,33061,33062,33063,33064,33065,33066,33067,33069,33070,33072,33075,33076,33077,33079,33081,33082,33083,33084,33085,33087,35881,33426,33579,30450,27667,24537,33725,29483,33541,38170,27611,30683,38086,21359,33538,20882,24125,35980,36152,20040,29611,26522,26757,37238,38665,29028,27809,30473,23186,38209,27599,32654,26151,23504,22969,23194,38376,38391,20204,33804,33945,27308,30431,38192,29467,26790,23391,30511,37274,38753,31964,36855,35868,24357,31859,31192,35269,27852,34588,23494,24130,26825,30496,32501,20885,20813,21193,23081,32517,38754,33495,25551,30596,34256,31186,28218,24217,22937,34065,28781,27665,25279,30399,25935,24751,38397,26126,34719,40483,38125,21517,21629,35884,25720,33088,33089,33090,33091,33092,33093,33095,33097,33101,33102,33103,33106,33110,33111,33112,33115,33116,33117,33118,33119,33121,33122,33123,33124,33126,33128,33130,33131,33132,33135,33138,33139,33141,33142,33143,33144,33153,33155,33156,33157,33158,33159,33161,33163,33164,33165,33166,33168,33170,33171,33172,33173,33174,33175,33177,33178,33182,33183,33184,33185,33186,33188,33189,33191,33193,33195,33196,33197,33198,33199,33200,33201,33202,33204,33205,33206,33207,33208,33209,33212,33213,33214,33215,33220,33221,33223,33224,33225,33227,33229,33230,33231,33232,33233,33234,33235,25721,34321,27169,33180,30952,25705,39764,25273,26411,33707,22696,40664,27819,28448,23518,38476,35851,29279,26576,25287,29281,20137,22982,27597,22675,26286,24149,21215,24917,26408,30446,30566,29287,31302,25343,21738,21584,38048,37027,23068,32435,27670,20035,22902,32784,22856,21335,30007,38590,22218,25376,33041,24700,38393,28118,21602,39297,20869,23273,33021,22958,38675,20522,27877,23612,25311,20320,21311,33147,36870,28346,34091,25288,24180,30910,25781,25467,24565,23064,37247,40479,23615,25423,32834,23421,21870,38218,38221,28037,24744,26592,29406,20957,23425,33236,33237,33238,33239,33240,33241,33242,33243,33244,33245,33246,33247,33248,33249,33250,33252,33253,33254,33256,33257,33259,33262,33263,33264,33265,33266,33269,33270,33271,33272,33273,33274,33277,33279,33283,33287,33288,33289,33290,33291,33294,33295,33297,33299,33301,33302,33303,33304,33305,33306,33309,33312,33316,33317,33318,33319,33321,33326,33330,33338,33340,33341,33343,33344,33345,33346,33347,33349,33350,33352,33354,33356,33357,33358,33360,33361,33362,33363,33364,33365,33366,33367,33369,33371,33372,33373,33374,33376,33377,33378,33379,33380,33381,33382,33383,33385,25319,27870,29275,25197,38062,32445,33043,27987,20892,24324,22900,21162,24594,22899,26262,34384,30111,25386,25062,31983,35834,21734,27431,40485,27572,34261,21589,20598,27812,21866,36276,29228,24085,24597,29750,25293,25490,29260,24472,28227,27966,25856,28504,30424,30928,30460,30036,21028,21467,20051,24222,26049,32810,32982,25243,21638,21032,28846,34957,36305,27873,21624,32986,22521,35060,36180,38506,37197,20329,27803,21943,30406,30768,25256,28921,28558,24429,34028,26842,30844,31735,33192,26379,40527,25447,30896,22383,30738,38713,25209,25259,21128,29749,27607,33386,33387,33388,33389,33393,33397,33398,33399,33400,33403,33404,33408,33409,33411,33413,33414,33415,33417,33420,33424,33427,33428,33429,33430,33434,33435,33438,33440,33442,33443,33447,33458,33461,33462,33466,33467,33468,33471,33472,33474,33475,33477,33478,33481,33488,33494,33497,33498,33501,33506,33511,33512,33513,33514,33516,33517,33518,33520,33522,33523,33525,33526,33528,33530,33532,33533,33534,33535,33536,33546,33547,33549,33552,33554,33555,33558,33560,33561,33565,33566,33567,33568,33569,33570,33571,33572,33573,33574,33577,33578,33582,33584,33586,33591,33595,33597,21860,33086,30130,30382,21305,30174,20731,23617,35692,31687,20559,29255,39575,39128,28418,29922,31080,25735,30629,25340,39057,36139,21697,32856,20050,22378,33529,33805,24179,20973,29942,35780,23631,22369,27900,39047,23110,30772,39748,36843,31893,21078,25169,38138,20166,33670,33889,33769,33970,22484,26420,22275,26222,28006,35889,26333,28689,26399,27450,26646,25114,22971,19971,20932,28422,26578,27791,20854,26827,22855,27495,30054,23822,33040,40784,26071,31048,31041,39569,36215,23682,20062,20225,21551,22865,30732,22120,27668,36804,24323,27773,27875,35755,25488,33598,33599,33601,33602,33604,33605,33608,33610,33611,33612,33613,33614,33619,33621,33622,33623,33624,33625,33629,33634,33648,33649,33650,33651,33652,33653,33654,33657,33658,33662,33663,33664,33665,33666,33667,33668,33671,33672,33674,33675,33676,33677,33679,33680,33681,33684,33685,33686,33687,33689,33690,33693,33695,33697,33698,33699,33700,33701,33702,33703,33708,33709,33710,33711,33717,33723,33726,33727,33730,33731,33732,33734,33736,33737,33739,33741,33742,33744,33745,33746,33747,33749,33751,33753,33754,33755,33758,33762,33763,33764,33766,33767,33768,33771,33772,33773,24688,27965,29301,25190,38030,38085,21315,36801,31614,20191,35878,20094,40660,38065,38067,21069,28508,36963,27973,35892,22545,23884,27424,27465,26538,21595,33108,32652,22681,34103,24378,25250,27207,38201,25970,24708,26725,30631,20052,20392,24039,38808,25772,32728,23789,20431,31373,20999,33540,19988,24623,31363,38054,20405,20146,31206,29748,21220,33465,25810,31165,23517,27777,38738,36731,27682,20542,21375,28165,25806,26228,27696,24773,39031,35831,24198,29756,31351,31179,19992,37041,29699,27714,22234,37195,27845,36235,21306,34502,26354,36527,23624,39537,28192,33774,33775,33779,33780,33781,33782,33783,33786,33787,33788,33790,33791,33792,33794,33797,33799,33800,33801,33802,33808,33810,33811,33812,33813,33814,33815,33817,33818,33819,33822,33823,33824,33825,33826,33827,33833,33834,33835,33836,33837,33838,33839,33840,33842,33843,33844,33845,33846,33847,33849,33850,33851,33854,33855,33856,33857,33858,33859,33860,33861,33863,33864,33865,33866,33867,33868,33869,33870,33871,33872,33874,33875,33876,33877,33878,33880,33885,33886,33887,33888,33890,33892,33893,33894,33895,33896,33898,33902,33903,33904,33906,33908,33911,33913,33915,33916,21462,23094,40843,36259,21435,22280,39079,26435,37275,27849,20840,30154,25331,29356,21048,21149,32570,28820,30264,21364,40522,27063,30830,38592,35033,32676,28982,29123,20873,26579,29924,22756,25880,22199,35753,39286,25200,32469,24825,28909,22764,20161,20154,24525,38887,20219,35748,20995,22922,32427,25172,20173,26085,25102,33592,33993,33635,34701,29076,28342,23481,32466,20887,25545,26580,32905,33593,34837,20754,23418,22914,36785,20083,27741,20837,35109,36719,38446,34122,29790,38160,38384,28070,33509,24369,25746,27922,33832,33134,40131,22622,36187,19977,21441,33917,33918,33919,33920,33921,33923,33924,33925,33926,33930,33933,33935,33936,33937,33938,33939,33940,33941,33942,33944,33946,33947,33949,33950,33951,33952,33954,33955,33956,33957,33958,33959,33960,33961,33962,33963,33964,33965,33966,33968,33969,33971,33973,33974,33975,33979,33980,33982,33984,33986,33987,33989,33990,33991,33992,33995,33996,33998,33999,34002,34004,34005,34007,34008,34009,34010,34011,34012,34014,34017,34018,34020,34023,34024,34025,34026,34027,34029,34030,34031,34033,34034,34035,34036,34037,34038,34039,34040,34041,34042,34043,34045,34046,34048,34049,34050,20254,25955,26705,21971,20007,25620,39578,25195,23234,29791,33394,28073,26862,20711,33678,30722,26432,21049,27801,32433,20667,21861,29022,31579,26194,29642,33515,26441,23665,21024,29053,34923,38378,38485,25797,36193,33203,21892,27733,25159,32558,22674,20260,21830,36175,26188,19978,23578,35059,26786,25422,31245,28903,33421,21242,38902,23569,21736,37045,32461,22882,36170,34503,33292,33293,36198,25668,23556,24913,28041,31038,35774,30775,30003,21627,20280,36523,28145,23072,32453,31070,27784,23457,23158,29978,32958,24910,28183,22768,29983,29989,29298,21319,32499,34051,34052,34053,34054,34055,34056,34057,34058,34059,34061,34062,34063,34064,34066,34068,34069,34070,34072,34073,34075,34076,34077,34078,34080,34082,34083,34084,34085,34086,34087,34088,34089,34090,34093,34094,34095,34096,34097,34098,34099,34100,34101,34102,34110,34111,34112,34113,34114,34116,34117,34118,34119,34123,34124,34125,34126,34127,34128,34129,34130,34131,34132,34133,34135,34136,34138,34139,34140,34141,34143,34144,34145,34146,34147,34149,34150,34151,34153,34154,34155,34156,34157,34158,34159,34160,34161,34163,34165,34166,34167,34168,34172,34173,34175,34176,34177,30465,30427,21097,32988,22307,24072,22833,29422,26045,28287,35799,23608,34417,21313,30707,25342,26102,20160,39135,34432,23454,35782,21490,30690,20351,23630,39542,22987,24335,31034,22763,19990,26623,20107,25325,35475,36893,21183,26159,21980,22124,36866,20181,20365,37322,39280,27663,24066,24643,23460,35270,35797,25910,25163,39318,23432,23551,25480,21806,21463,30246,20861,34092,26530,26803,27530,25234,36755,21460,33298,28113,30095,20070,36174,23408,29087,34223,26257,26329,32626,34560,40653,40736,23646,26415,36848,26641,26463,25101,31446,22661,24246,25968,28465,34178,34179,34182,34184,34185,34186,34187,34188,34189,34190,34192,34193,34194,34195,34196,34197,34198,34199,34200,34201,34202,34205,34206,34207,34208,34209,34210,34211,34213,34214,34215,34217,34219,34220,34221,34225,34226,34227,34228,34229,34230,34232,34234,34235,34236,34237,34238,34239,34240,34242,34243,34244,34245,34246,34247,34248,34250,34251,34252,34253,34254,34257,34258,34260,34262,34263,34264,34265,34266,34267,34269,34270,34271,34272,34273,34274,34275,34277,34278,34279,34280,34282,34283,34284,34285,34286,34287,34288,34289,34290,34291,34292,34293,34294,34295,34296,24661,21047,32781,25684,34928,29993,24069,26643,25332,38684,21452,29245,35841,27700,30561,31246,21550,30636,39034,33308,35828,30805,26388,28865,26031,25749,22070,24605,31169,21496,19997,27515,32902,23546,21987,22235,20282,20284,39282,24051,26494,32824,24578,39042,36865,23435,35772,35829,25628,33368,25822,22013,33487,37221,20439,32032,36895,31903,20723,22609,28335,23487,35785,32899,37240,33948,31639,34429,38539,38543,32485,39635,30862,23681,31319,36930,38567,31071,23385,25439,31499,34001,26797,21766,32553,29712,32034,38145,25152,22604,20182,23427,22905,22612,34297,34298,34300,34301,34302,34304,34305,34306,34307,34308,34310,34311,34312,34313,34314,34315,34316,34317,34318,34319,34320,34322,34323,34324,34325,34327,34328,34329,34330,34331,34332,34333,34334,34335,34336,34337,34338,34339,34340,34341,34342,34344,34346,34347,34348,34349,34350,34351,34352,34353,34354,34355,34356,34357,34358,34359,34361,34362,34363,34365,34366,34367,34368,34369,34370,34371,34372,34373,34374,34375,34376,34377,34378,34379,34380,34386,34387,34389,34390,34391,34392,34393,34395,34396,34397,34399,34400,34401,34403,34404,34405,34406,34407,34408,34409,34410,29549,25374,36427,36367,32974,33492,25260,21488,27888,37214,22826,24577,27760,22349,25674,36138,30251,28393,22363,27264,30192,28525,35885,35848,22374,27631,34962,30899,25506,21497,28845,27748,22616,25642,22530,26848,33179,21776,31958,20504,36538,28108,36255,28907,25487,28059,28372,32486,33796,26691,36867,28120,38518,35752,22871,29305,34276,33150,30140,35466,26799,21076,36386,38161,25552,39064,36420,21884,20307,26367,22159,24789,28053,21059,23625,22825,28155,22635,30000,29980,24684,33300,33094,25361,26465,36834,30522,36339,36148,38081,24086,21381,21548,28867,34413,34415,34416,34418,34419,34420,34421,34422,34423,34424,34435,34436,34437,34438,34439,34440,34441,34446,34447,34448,34449,34450,34452,34454,34455,34456,34457,34458,34459,34462,34463,34464,34465,34466,34469,34470,34475,34477,34478,34482,34483,34487,34488,34489,34491,34492,34493,34494,34495,34497,34498,34499,34501,34504,34508,34509,34514,34515,34517,34518,34519,34522,34524,34525,34528,34529,34530,34531,34533,34534,34535,34536,34538,34539,34540,34543,34549,34550,34551,34554,34555,34556,34557,34559,34561,34564,34565,34566,34571,34572,34574,34575,34576,34577,34580,34582,27712,24311,20572,20141,24237,25402,33351,36890,26704,37230,30643,21516,38108,24420,31461,26742,25413,31570,32479,30171,20599,25237,22836,36879,20984,31171,31361,22270,24466,36884,28034,23648,22303,21520,20820,28237,22242,25512,39059,33151,34581,35114,36864,21534,23663,33216,25302,25176,33073,40501,38464,39534,39548,26925,22949,25299,21822,25366,21703,34521,27964,23043,29926,34972,27498,22806,35916,24367,28286,29609,39037,20024,28919,23436,30871,25405,26202,30358,24779,23451,23113,19975,33109,27754,29579,20129,26505,32593,24448,26106,26395,24536,22916,23041,34585,34587,34589,34591,34592,34596,34598,34599,34600,34602,34603,34604,34605,34607,34608,34610,34611,34613,34614,34616,34617,34618,34620,34621,34624,34625,34626,34627,34628,34629,34630,34634,34635,34637,34639,34640,34641,34642,34644,34645,34646,34648,34650,34651,34652,34653,34654,34655,34657,34658,34662,34663,34664,34665,34666,34667,34668,34669,34671,34673,34674,34675,34677,34679,34680,34681,34682,34687,34688,34689,34692,34694,34695,34697,34698,34700,34702,34703,34704,34705,34706,34708,34709,34710,34712,34713,34714,34715,34716,34717,34718,34720,34721,34722,34723,34724,24013,24494,21361,38886,36829,26693,22260,21807,24799,20026,28493,32500,33479,33806,22996,20255,20266,23614,32428,26410,34074,21619,30031,32963,21890,39759,20301,28205,35859,23561,24944,21355,30239,28201,34442,25991,38395,32441,21563,31283,32010,38382,21985,32705,29934,25373,34583,28065,31389,25105,26017,21351,25569,27779,24043,21596,38056,20044,27745,35820,23627,26080,33436,26791,21566,21556,27595,27494,20116,25410,21320,33310,20237,20398,22366,25098,38654,26212,29289,21247,21153,24735,35823,26132,29081,26512,35199,30802,30717,26224,22075,21560,38177,29306,34725,34726,34727,34729,34730,34734,34736,34737,34738,34740,34742,34743,34744,34745,34747,34748,34750,34751,34753,34754,34755,34756,34757,34759,34760,34761,34764,34765,34766,34767,34768,34772,34773,34774,34775,34776,34777,34778,34780,34781,34782,34783,34785,34786,34787,34788,34790,34791,34792,34793,34795,34796,34797,34799,34800,34801,34802,34803,34804,34805,34806,34807,34808,34810,34811,34812,34813,34815,34816,34817,34818,34820,34821,34822,34823,34824,34825,34827,34828,34829,34830,34831,34832,34833,34834,34836,34839,34840,34841,34842,34844,34845,34846,34847,34848,34851,31232,24687,24076,24713,33181,22805,24796,29060,28911,28330,27728,29312,27268,34989,24109,20064,23219,21916,38115,27927,31995,38553,25103,32454,30606,34430,21283,38686,36758,26247,23777,20384,29421,19979,21414,22799,21523,25472,38184,20808,20185,40092,32420,21688,36132,34900,33335,38386,28046,24358,23244,26174,38505,29616,29486,21439,33146,39301,32673,23466,38519,38480,32447,30456,21410,38262,39321,31665,35140,28248,20065,32724,31077,35814,24819,21709,20139,39033,24055,27233,20687,21521,35937,33831,30813,38660,21066,21742,22179,38144,28040,23477,28102,26195,34852,34853,34854,34855,34856,34857,34858,34859,34860,34861,34862,34863,34864,34865,34867,34868,34869,34870,34871,34872,34874,34875,34877,34878,34879,34881,34882,34883,34886,34887,34888,34889,34890,34891,34894,34895,34896,34897,34898,34899,34901,34902,34904,34906,34907,34908,34909,34910,34911,34912,34918,34919,34922,34925,34927,34929,34931,34932,34933,34934,34936,34937,34938,34939,34940,34944,34947,34950,34951,34953,34954,34956,34958,34959,34960,34961,34963,34964,34965,34967,34968,34969,34970,34971,34973,34974,34975,34976,34977,34979,34981,34982,34983,34984,34985,34986,23567,23389,26657,32918,21880,31505,25928,26964,20123,27463,34638,38795,21327,25375,25658,37034,26012,32961,35856,20889,26800,21368,34809,25032,27844,27899,35874,23633,34218,33455,38156,27427,36763,26032,24571,24515,20449,34885,26143,33125,29481,24826,20852,21009,22411,24418,37026,34892,37266,24184,26447,24615,22995,20804,20982,33016,21256,27769,38596,29066,20241,20462,32670,26429,21957,38152,31168,34966,32483,22687,25100,38656,34394,22040,39035,24464,35768,33988,37207,21465,26093,24207,30044,24676,32110,23167,32490,32493,36713,21927,23459,24748,26059,29572,34988,34990,34991,34992,34994,34995,34996,34997,34998,35000,35001,35002,35003,35005,35006,35007,35008,35011,35012,35015,35016,35018,35019,35020,35021,35023,35024,35025,35027,35030,35031,35034,35035,35036,35037,35038,35040,35041,35046,35047,35049,35050,35051,35052,35053,35054,35055,35058,35061,35062,35063,35066,35067,35069,35071,35072,35073,35075,35076,35077,35078,35079,35080,35081,35083,35084,35085,35086,35087,35089,35092,35093,35094,35095,35096,35100,35101,35102,35103,35104,35106,35107,35108,35110,35111,35112,35113,35116,35117,35118,35119,35121,35122,35123,35125,35127,36873,30307,30505,32474,38772,34203,23398,31348,38634,34880,21195,29071,24490,26092,35810,23547,39535,24033,27529,27739,35757,35759,36874,36805,21387,25276,40486,40493,21568,20011,33469,29273,34460,23830,34905,28079,38597,21713,20122,35766,28937,21693,38409,28895,28153,30416,20005,30740,34578,23721,24310,35328,39068,38414,28814,27839,22852,25513,30524,34893,28436,33395,22576,29141,21388,30746,38593,21761,24422,28976,23476,35866,39564,27523,22830,40495,31207,26472,25196,20335,30113,32650,27915,38451,27687,20208,30162,20859,26679,28478,36992,33136,22934,29814,35128,35129,35130,35131,35132,35133,35134,35135,35136,35138,35139,35141,35142,35143,35144,35145,35146,35147,35148,35149,35150,35151,35152,35153,35154,35155,35156,35157,35158,35159,35160,35161,35162,35163,35164,35165,35168,35169,35170,35171,35172,35173,35175,35176,35177,35178,35179,35180,35181,35182,35183,35184,35185,35186,35187,35188,35189,35190,35191,35192,35193,35194,35196,35197,35198,35200,35202,35204,35205,35207,35208,35209,35210,35211,35212,35213,35214,35215,35216,35217,35218,35219,35220,35221,35222,35223,35224,35225,35226,35227,35228,35229,35230,35231,35232,35233,25671,23591,36965,31377,35875,23002,21676,33280,33647,35201,32768,26928,22094,32822,29239,37326,20918,20063,39029,25494,19994,21494,26355,33099,22812,28082,19968,22777,21307,25558,38129,20381,20234,34915,39056,22839,36951,31227,20202,33008,30097,27778,23452,23016,24413,26885,34433,20506,24050,20057,30691,20197,33402,25233,26131,37009,23673,20159,24441,33222,36920,32900,30123,20134,35028,24847,27589,24518,20041,30410,28322,35811,35758,35850,35793,24322,32764,32716,32462,33589,33643,22240,27575,38899,38452,23035,21535,38134,28139,23493,39278,23609,24341,38544,35234,35235,35236,35237,35238,35239,35240,35241,35242,35243,35244,35245,35246,35247,35248,35249,35250,35251,35252,35253,35254,35255,35256,35257,35258,35259,35260,35261,35262,35263,35264,35267,35277,35283,35284,35285,35287,35288,35289,35291,35293,35295,35296,35297,35298,35300,35303,35304,35305,35306,35308,35309,35310,35312,35313,35314,35316,35317,35318,35319,35320,35321,35322,35323,35324,35325,35326,35327,35329,35330,35331,35332,35333,35334,35336,35337,35338,35339,35340,35341,35342,35343,35344,35345,35346,35347,35348,35349,35350,35351,35352,35353,35354,35355,35356,35357,21360,33521,27185,23156,40560,24212,32552,33721,33828,33829,33639,34631,36814,36194,30408,24433,39062,30828,26144,21727,25317,20323,33219,30152,24248,38605,36362,34553,21647,27891,28044,27704,24703,21191,29992,24189,20248,24736,24551,23588,30001,37038,38080,29369,27833,28216,37193,26377,21451,21491,20305,37321,35825,21448,24188,36802,28132,20110,30402,27014,34398,24858,33286,20313,20446,36926,40060,24841,28189,28180,38533,20104,23089,38632,19982,23679,31161,23431,35821,32701,29577,22495,33419,37057,21505,36935,21947,23786,24481,24840,27442,29425,32946,35465,35358,35359,35360,35361,35362,35363,35364,35365,35366,35367,35368,35369,35370,35371,35372,35373,35374,35375,35376,35377,35378,35379,35380,35381,35382,35383,35384,35385,35386,35387,35388,35389,35391,35392,35393,35394,35395,35396,35397,35398,35399,35401,35402,35403,35404,35405,35406,35407,35408,35409,35410,35411,35412,35413,35414,35415,35416,35417,35418,35419,35420,35421,35422,35423,35424,35425,35426,35427,35428,35429,35430,35431,35432,35433,35434,35435,35436,35437,35438,35439,35440,35441,35442,35443,35444,35445,35446,35447,35448,35450,35451,35452,35453,35454,35455,35456,28020,23507,35029,39044,35947,39533,40499,28170,20900,20803,22435,34945,21407,25588,36757,22253,21592,22278,29503,28304,32536,36828,33489,24895,24616,38498,26352,32422,36234,36291,38053,23731,31908,26376,24742,38405,32792,20113,37095,21248,38504,20801,36816,34164,37213,26197,38901,23381,21277,30776,26434,26685,21705,28798,23472,36733,20877,22312,21681,25874,26242,36190,36163,33039,33900,36973,31967,20991,34299,26531,26089,28577,34468,36481,22122,36896,30338,28790,29157,36131,25321,21017,27901,36156,24590,22686,24974,26366,36192,25166,21939,28195,26413,36711,35457,35458,35459,35460,35461,35462,35463,35464,35467,35468,35469,35470,35471,35472,35473,35474,35476,35477,35478,35479,35480,35481,35482,35483,35484,35485,35486,35487,35488,35489,35490,35491,35492,35493,35494,35495,35496,35497,35498,35499,35500,35501,35502,35503,35504,35505,35506,35507,35508,35509,35510,35511,35512,35513,35514,35515,35516,35517,35518,35519,35520,35521,35522,35523,35524,35525,35526,35527,35528,35529,35530,35531,35532,35533,35534,35535,35536,35537,35538,35539,35540,35541,35542,35543,35544,35545,35546,35547,35548,35549,35550,35551,35552,35553,35554,35555,38113,38392,30504,26629,27048,21643,20045,28856,35784,25688,25995,23429,31364,20538,23528,30651,27617,35449,31896,27838,30415,26025,36759,23853,23637,34360,26632,21344,25112,31449,28251,32509,27167,31456,24432,28467,24352,25484,28072,26454,19976,24080,36134,20183,32960,30260,38556,25307,26157,25214,27836,36213,29031,32617,20806,32903,21484,36974,25240,21746,34544,36761,32773,38167,34071,36825,27993,29645,26015,30495,29956,30759,33275,36126,38024,20390,26517,30137,35786,38663,25391,38215,38453,33976,25379,30529,24449,29424,20105,24596,25972,25327,27491,25919,35556,35557,35558,35559,35560,35561,35562,35563,35564,35565,35566,35567,35568,35569,35570,35571,35572,35573,35574,35575,35576,35577,35578,35579,35580,35581,35582,35583,35584,35585,35586,35587,35588,35589,35590,35592,35593,35594,35595,35596,35597,35598,35599,35600,35601,35602,35603,35604,35605,35606,35607,35608,35609,35610,35611,35612,35613,35614,35615,35616,35617,35618,35619,35620,35621,35623,35624,35625,35626,35627,35628,35629,35630,35631,35632,35633,35634,35635,35636,35637,35638,35639,35640,35641,35642,35643,35644,35645,35646,35647,35648,35649,35650,35651,35652,35653,24103,30151,37073,35777,33437,26525,25903,21553,34584,30693,32930,33026,27713,20043,32455,32844,30452,26893,27542,25191,20540,20356,22336,25351,27490,36286,21482,26088,32440,24535,25370,25527,33267,33268,32622,24092,23769,21046,26234,31209,31258,36136,28825,30164,28382,27835,31378,20013,30405,24544,38047,34935,32456,31181,32959,37325,20210,20247,33311,21608,24030,27954,35788,31909,36724,32920,24090,21650,30385,23449,26172,39588,29664,26666,34523,26417,29482,35832,35803,36880,31481,28891,29038,25284,30633,22065,20027,33879,26609,21161,34496,36142,38136,31569,35654,35655,35656,35657,35658,35659,35660,35661,35662,35663,35664,35665,35666,35667,35668,35669,35670,35671,35672,35673,35674,35675,35676,35677,35678,35679,35680,35681,35682,35683,35684,35685,35687,35688,35689,35690,35691,35693,35694,35695,35696,35697,35698,35699,35700,35701,35702,35703,35704,35705,35706,35707,35708,35709,35710,35711,35712,35713,35714,35715,35716,35717,35718,35719,35720,35721,35722,35723,35724,35725,35726,35727,35728,35729,35730,35731,35732,35733,35734,35735,35736,35737,35738,35739,35740,35741,35742,35743,35756,35761,35771,35783,35792,35818,35849,35870,20303,27880,31069,39547,25235,29226,25341,19987,30742,36716,25776,36186,31686,26729,24196,35013,22918,25758,22766,29366,26894,38181,36861,36184,22368,32512,35846,20934,25417,25305,21331,26700,29730,33537,37196,21828,30528,28796,27978,20857,21672,36164,23039,28363,28100,23388,32043,20180,31869,28371,23376,33258,28173,23383,39683,26837,36394,23447,32508,24635,32437,37049,36208,22863,25549,31199,36275,21330,26063,31062,35781,38459,32452,38075,32386,22068,37257,26368,32618,23562,36981,26152,24038,20304,26590,20570,20316,22352,24231,59408,59409,59410,59411,59412,35896,35897,35898,35899,35900,35901,35902,35903,35904,35906,35907,35908,35909,35912,35914,35915,35917,35918,35919,35920,35921,35922,35923,35924,35926,35927,35928,35929,35931,35932,35933,35934,35935,35936,35939,35940,35941,35942,35943,35944,35945,35948,35949,35950,35951,35952,35953,35954,35956,35957,35958,35959,35963,35964,35965,35966,35967,35968,35969,35971,35972,35974,35975,35976,35979,35981,35982,35983,35984,35985,35986,35987,35989,35990,35991,35993,35994,35995,35996,35997,35998,35999,36000,36001,36002,36003,36004,36005,36006,36007,36008,36009,36010,36011,36012,36013,20109,19980,20800,19984,24319,21317,19989,20120,19998,39730,23404,22121,20008,31162,20031,21269,20039,22829,29243,21358,27664,22239,32996,39319,27603,30590,40727,20022,20127,40720,20060,20073,20115,33416,23387,21868,22031,20164,21389,21405,21411,21413,21422,38757,36189,21274,21493,21286,21294,21310,36188,21350,21347,20994,21000,21006,21037,21043,21055,21056,21068,21086,21089,21084,33967,21117,21122,21121,21136,21139,20866,32596,20155,20163,20169,20162,20200,20193,20203,20190,20251,20211,20258,20324,20213,20261,20263,20233,20267,20318,20327,25912,20314,20317,36014,36015,36016,36017,36018,36019,36020,36021,36022,36023,36024,36025,36026,36027,36028,36029,36030,36031,36032,36033,36034,36035,36036,36037,36038,36039,36040,36041,36042,36043,36044,36045,36046,36047,36048,36049,36050,36051,36052,36053,36054,36055,36056,36057,36058,36059,36060,36061,36062,36063,36064,36065,36066,36067,36068,36069,36070,36071,36072,36073,36074,36075,36076,36077,36078,36079,36080,36081,36082,36083,36084,36085,36086,36087,36088,36089,36090,36091,36092,36093,36094,36095,36096,36097,36098,36099,36100,36101,36102,36103,36104,36105,36106,36107,36108,36109,20319,20311,20274,20285,20342,20340,20369,20361,20355,20367,20350,20347,20394,20348,20396,20372,20454,20456,20458,20421,20442,20451,20444,20433,20447,20472,20521,20556,20467,20524,20495,20526,20525,20478,20508,20492,20517,20520,20606,20547,20565,20552,20558,20588,20603,20645,20647,20649,20666,20694,20742,20717,20716,20710,20718,20743,20747,20189,27709,20312,20325,20430,40864,27718,31860,20846,24061,40649,39320,20865,22804,21241,21261,35335,21264,20971,22809,20821,20128,20822,20147,34926,34980,20149,33044,35026,31104,23348,34819,32696,20907,20913,20925,20924,36110,36111,36112,36113,36114,36115,36116,36117,36118,36119,36120,36121,36122,36123,36124,36128,36177,36178,36183,36191,36197,36200,36201,36202,36204,36206,36207,36209,36210,36216,36217,36218,36219,36220,36221,36222,36223,36224,36226,36227,36230,36231,36232,36233,36236,36237,36238,36239,36240,36242,36243,36245,36246,36247,36248,36249,36250,36251,36252,36253,36254,36256,36257,36258,36260,36261,36262,36263,36264,36265,36266,36267,36268,36269,36270,36271,36272,36274,36278,36279,36281,36283,36285,36288,36289,36290,36293,36295,36296,36297,36298,36301,36304,36306,36307,36308,20935,20886,20898,20901,35744,35750,35751,35754,35764,35765,35767,35778,35779,35787,35791,35790,35794,35795,35796,35798,35800,35801,35804,35807,35808,35812,35816,35817,35822,35824,35827,35830,35833,35836,35839,35840,35842,35844,35847,35852,35855,35857,35858,35860,35861,35862,35865,35867,35864,35869,35871,35872,35873,35877,35879,35882,35883,35886,35887,35890,35891,35893,35894,21353,21370,38429,38434,38433,38449,38442,38461,38460,38466,38473,38484,38495,38503,38508,38514,38516,38536,38541,38551,38576,37015,37019,37021,37017,37036,37025,37044,37043,37046,37050,36309,36312,36313,36316,36320,36321,36322,36325,36326,36327,36329,36333,36334,36336,36337,36338,36340,36342,36348,36350,36351,36352,36353,36354,36355,36356,36358,36359,36360,36363,36365,36366,36368,36369,36370,36371,36373,36374,36375,36376,36377,36378,36379,36380,36384,36385,36388,36389,36390,36391,36392,36395,36397,36400,36402,36403,36404,36406,36407,36408,36411,36412,36414,36415,36419,36421,36422,36428,36429,36430,36431,36432,36435,36436,36437,36438,36439,36440,36442,36443,36444,36445,36446,36447,36448,36449,36450,36451,36452,36453,36455,36456,36458,36459,36462,36465,37048,37040,37071,37061,37054,37072,37060,37063,37075,37094,37090,37084,37079,37083,37099,37103,37118,37124,37154,37150,37155,37169,37167,37177,37187,37190,21005,22850,21154,21164,21165,21182,21759,21200,21206,21232,21471,29166,30669,24308,20981,20988,39727,21430,24321,30042,24047,22348,22441,22433,22654,22716,22725,22737,22313,22316,22314,22323,22329,22318,22319,22364,22331,22338,22377,22405,22379,22406,22396,22395,22376,22381,22390,22387,22445,22436,22412,22450,22479,22439,22452,22419,22432,22485,22488,22490,22489,22482,22456,22516,22511,22520,22500,22493,36467,36469,36471,36472,36473,36474,36475,36477,36478,36480,36482,36483,36484,36486,36488,36489,36490,36491,36492,36493,36494,36497,36498,36499,36501,36502,36503,36504,36505,36506,36507,36509,36511,36512,36513,36514,36515,36516,36517,36518,36519,36520,36521,36522,36525,36526,36528,36529,36531,36532,36533,36534,36535,36536,36537,36539,36540,36541,36542,36543,36544,36545,36546,36547,36548,36549,36550,36551,36552,36553,36554,36555,36556,36557,36559,36560,36561,36562,36563,36564,36565,36566,36567,36568,36569,36570,36571,36572,36573,36574,36575,36576,36577,36578,36579,36580,22539,22541,22525,22509,22528,22558,22553,22596,22560,22629,22636,22657,22665,22682,22656,39336,40729,25087,33401,33405,33407,33423,33418,33448,33412,33422,33425,33431,33433,33451,33464,33470,33456,33480,33482,33507,33432,33463,33454,33483,33484,33473,33449,33460,33441,33450,33439,33476,33486,33444,33505,33545,33527,33508,33551,33543,33500,33524,33490,33496,33548,33531,33491,33553,33562,33542,33556,33557,33504,33493,33564,33617,33627,33628,33544,33682,33596,33588,33585,33691,33630,33583,33615,33607,33603,33631,33600,33559,33632,33581,33594,33587,33638,33637,36581,36582,36583,36584,36585,36586,36587,36588,36589,36590,36591,36592,36593,36594,36595,36596,36597,36598,36599,36600,36601,36602,36603,36604,36605,36606,36607,36608,36609,36610,36611,36612,36613,36614,36615,36616,36617,36618,36619,36620,36621,36622,36623,36624,36625,36626,36627,36628,36629,36630,36631,36632,36633,36634,36635,36636,36637,36638,36639,36640,36641,36642,36643,36644,36645,36646,36647,36648,36649,36650,36651,36652,36653,36654,36655,36656,36657,36658,36659,36660,36661,36662,36663,36664,36665,36666,36667,36668,36669,36670,36671,36672,36673,36674,36675,36676,33640,33563,33641,33644,33642,33645,33646,33712,33656,33715,33716,33696,33706,33683,33692,33669,33660,33718,33705,33661,33720,33659,33688,33694,33704,33722,33724,33729,33793,33765,33752,22535,33816,33803,33757,33789,33750,33820,33848,33809,33798,33748,33759,33807,33795,33784,33785,33770,33733,33728,33830,33776,33761,33884,33873,33882,33881,33907,33927,33928,33914,33929,33912,33852,33862,33897,33910,33932,33934,33841,33901,33985,33997,34000,34022,33981,34003,33994,33983,33978,34016,33953,33977,33972,33943,34021,34019,34060,29965,34104,34032,34105,34079,34106,36677,36678,36679,36680,36681,36682,36683,36684,36685,36686,36687,36688,36689,36690,36691,36692,36693,36694,36695,36696,36697,36698,36699,36700,36701,36702,36703,36704,36705,36706,36707,36708,36709,36714,36736,36748,36754,36765,36768,36769,36770,36772,36773,36774,36775,36778,36780,36781,36782,36783,36786,36787,36788,36789,36791,36792,36794,36795,36796,36799,36800,36803,36806,36809,36810,36811,36812,36813,36815,36818,36822,36823,36826,36832,36833,36835,36839,36844,36847,36849,36850,36852,36853,36854,36858,36859,36860,36862,36863,36871,36872,36876,36878,36883,36885,36888,34134,34107,34047,34044,34137,34120,34152,34148,34142,34170,30626,34115,34162,34171,34212,34216,34183,34191,34169,34222,34204,34181,34233,34231,34224,34259,34241,34268,34303,34343,34309,34345,34326,34364,24318,24328,22844,22849,32823,22869,22874,22872,21263,23586,23589,23596,23604,25164,25194,25247,25275,25290,25306,25303,25326,25378,25334,25401,25419,25411,25517,25590,25457,25466,25486,25524,25453,25516,25482,25449,25518,25532,25586,25592,25568,25599,25540,25566,25550,25682,25542,25534,25669,25665,25611,25627,25632,25612,25638,25633,25694,25732,25709,25750,36889,36892,36899,36900,36901,36903,36904,36905,36906,36907,36908,36912,36913,36914,36915,36916,36919,36921,36922,36925,36927,36928,36931,36933,36934,36936,36937,36938,36939,36940,36942,36948,36949,36950,36953,36954,36956,36957,36958,36959,36960,36961,36964,36966,36967,36969,36970,36971,36972,36975,36976,36977,36978,36979,36982,36983,36984,36985,36986,36987,36988,36990,36993,36996,36997,36998,36999,37001,37002,37004,37005,37006,37007,37008,37010,37012,37014,37016,37018,37020,37022,37023,37024,37028,37029,37031,37032,37033,37035,37037,37042,37047,37052,37053,37055,37056,25722,25783,25784,25753,25786,25792,25808,25815,25828,25826,25865,25893,25902,24331,24530,29977,24337,21343,21489,21501,21481,21480,21499,21522,21526,21510,21579,21586,21587,21588,21590,21571,21537,21591,21593,21539,21554,21634,21652,21623,21617,21604,21658,21659,21636,21622,21606,21661,21712,21677,21698,21684,21714,21671,21670,21715,21716,21618,21667,21717,21691,21695,21708,21721,21722,21724,21673,21674,21668,21725,21711,21726,21787,21735,21792,21757,21780,21747,21794,21795,21775,21777,21799,21802,21863,21903,21941,21833,21869,21825,21845,21823,21840,21820,37058,37059,37062,37064,37065,37067,37068,37069,37074,37076,37077,37078,37080,37081,37082,37086,37087,37088,37091,37092,37093,37097,37098,37100,37102,37104,37105,37106,37107,37109,37110,37111,37113,37114,37115,37116,37119,37120,37121,37123,37125,37126,37127,37128,37129,37130,37131,37132,37133,37134,37135,37136,37137,37138,37139,37140,37141,37142,37143,37144,37146,37147,37148,37149,37151,37152,37153,37156,37157,37158,37159,37160,37161,37162,37163,37164,37165,37166,37168,37170,37171,37172,37173,37174,37175,37176,37178,37179,37180,37181,37182,37183,37184,37185,37186,37188,21815,21846,21877,21878,21879,21811,21808,21852,21899,21970,21891,21937,21945,21896,21889,21919,21886,21974,21905,21883,21983,21949,21950,21908,21913,21994,22007,21961,22047,21969,21995,21996,21972,21990,21981,21956,21999,21989,22002,22003,21964,21965,21992,22005,21988,36756,22046,22024,22028,22017,22052,22051,22014,22016,22055,22061,22104,22073,22103,22060,22093,22114,22105,22108,22092,22100,22150,22116,22129,22123,22139,22140,22149,22163,22191,22228,22231,22237,22241,22261,22251,22265,22271,22276,22282,22281,22300,24079,24089,24084,24081,24113,24123,24124,37189,37191,37192,37201,37203,37204,37205,37206,37208,37209,37211,37212,37215,37216,37222,37223,37224,37227,37229,37235,37242,37243,37244,37248,37249,37250,37251,37252,37254,37256,37258,37262,37263,37267,37268,37269,37270,37271,37272,37273,37276,37277,37278,37279,37280,37281,37284,37285,37286,37287,37288,37289,37291,37292,37296,37297,37298,37299,37302,37303,37304,37305,37307,37308,37309,37310,37311,37312,37313,37314,37315,37316,37317,37318,37320,37323,37328,37330,37331,37332,37333,37334,37335,37336,37337,37338,37339,37341,37342,37343,37344,37345,37346,37347,37348,37349,24119,24132,24148,24155,24158,24161,23692,23674,23693,23696,23702,23688,23704,23705,23697,23706,23708,23733,23714,23741,23724,23723,23729,23715,23745,23735,23748,23762,23780,23755,23781,23810,23811,23847,23846,23854,23844,23838,23814,23835,23896,23870,23860,23869,23916,23899,23919,23901,23915,23883,23882,23913,23924,23938,23961,23965,35955,23991,24005,24435,24439,24450,24455,24457,24460,24469,24473,24476,24488,24493,24501,24508,34914,24417,29357,29360,29364,29367,29368,29379,29377,29390,29389,29394,29416,29423,29417,29426,29428,29431,29441,29427,29443,29434,37350,37351,37352,37353,37354,37355,37356,37357,37358,37359,37360,37361,37362,37363,37364,37365,37366,37367,37368,37369,37370,37371,37372,37373,37374,37375,37376,37377,37378,37379,37380,37381,37382,37383,37384,37385,37386,37387,37388,37389,37390,37391,37392,37393,37394,37395,37396,37397,37398,37399,37400,37401,37402,37403,37404,37405,37406,37407,37408,37409,37410,37411,37412,37413,37414,37415,37416,37417,37418,37419,37420,37421,37422,37423,37424,37425,37426,37427,37428,37429,37430,37431,37432,37433,37434,37435,37436,37437,37438,37439,37440,37441,37442,37443,37444,37445,29435,29463,29459,29473,29450,29470,29469,29461,29474,29497,29477,29484,29496,29489,29520,29517,29527,29536,29548,29551,29566,33307,22821,39143,22820,22786,39267,39271,39272,39273,39274,39275,39276,39284,39287,39293,39296,39300,39303,39306,39309,39312,39313,39315,39316,39317,24192,24209,24203,24214,24229,24224,24249,24245,24254,24243,36179,24274,24273,24283,24296,24298,33210,24516,24521,24534,24527,24579,24558,24580,24545,24548,24574,24581,24582,24554,24557,24568,24601,24629,24614,24603,24591,24589,24617,24619,24586,24639,24609,24696,24697,24699,24698,24642,37446,37447,37448,37449,37450,37451,37452,37453,37454,37455,37456,37457,37458,37459,37460,37461,37462,37463,37464,37465,37466,37467,37468,37469,37470,37471,37472,37473,37474,37475,37476,37477,37478,37479,37480,37481,37482,37483,37484,37485,37486,37487,37488,37489,37490,37491,37493,37494,37495,37496,37497,37498,37499,37500,37501,37502,37503,37504,37505,37506,37507,37508,37509,37510,37511,37512,37513,37514,37515,37516,37517,37519,37520,37521,37522,37523,37524,37525,37526,37527,37528,37529,37530,37531,37532,37533,37534,37535,37536,37537,37538,37539,37540,37541,37542,37543,24682,24701,24726,24730,24749,24733,24707,24722,24716,24731,24812,24763,24753,24797,24792,24774,24794,24756,24864,24870,24853,24867,24820,24832,24846,24875,24906,24949,25004,24980,24999,25015,25044,25077,24541,38579,38377,38379,38385,38387,38389,38390,38396,38398,38403,38404,38406,38408,38410,38411,38412,38413,38415,38418,38421,38422,38423,38425,38426,20012,29247,25109,27701,27732,27740,27722,27811,27781,27792,27796,27788,27752,27753,27764,27766,27782,27817,27856,27860,27821,27895,27896,27889,27863,27826,27872,27862,27898,27883,27886,27825,27859,27887,27902,37544,37545,37546,37547,37548,37549,37551,37552,37553,37554,37555,37556,37557,37558,37559,37560,37561,37562,37563,37564,37565,37566,37567,37568,37569,37570,37571,37572,37573,37574,37575,37577,37578,37579,37580,37581,37582,37583,37584,37585,37586,37587,37588,37589,37590,37591,37592,37593,37594,37595,37596,37597,37598,37599,37600,37601,37602,37603,37604,37605,37606,37607,37608,37609,37610,37611,37612,37613,37614,37615,37616,37617,37618,37619,37620,37621,37622,37623,37624,37625,37626,37627,37628,37629,37630,37631,37632,37633,37634,37635,37636,37637,37638,37639,37640,37641,27961,27943,27916,27971,27976,27911,27908,27929,27918,27947,27981,27950,27957,27930,27983,27986,27988,27955,28049,28015,28062,28064,27998,28051,28052,27996,28000,28028,28003,28186,28103,28101,28126,28174,28095,28128,28177,28134,28125,28121,28182,28075,28172,28078,28203,28270,28238,28267,28338,28255,28294,28243,28244,28210,28197,28228,28383,28337,28312,28384,28461,28386,28325,28327,28349,28347,28343,28375,28340,28367,28303,28354,28319,28514,28486,28487,28452,28437,28409,28463,28470,28491,28532,28458,28425,28457,28553,28557,28556,28536,28530,28540,28538,28625,37642,37643,37644,37645,37646,37647,37648,37649,37650,37651,37652,37653,37654,37655,37656,37657,37658,37659,37660,37661,37662,37663,37664,37665,37666,37667,37668,37669,37670,37671,37672,37673,37674,37675,37676,37677,37678,37679,37680,37681,37682,37683,37684,37685,37686,37687,37688,37689,37690,37691,37692,37693,37695,37696,37697,37698,37699,37700,37701,37702,37703,37704,37705,37706,37707,37708,37709,37710,37711,37712,37713,37714,37715,37716,37717,37718,37719,37720,37721,37722,37723,37724,37725,37726,37727,37728,37729,37730,37731,37732,37733,37734,37735,37736,37737,37739,28617,28583,28601,28598,28610,28641,28654,28638,28640,28655,28698,28707,28699,28729,28725,28751,28766,23424,23428,23445,23443,23461,23480,29999,39582,25652,23524,23534,35120,23536,36423,35591,36790,36819,36821,36837,36846,36836,36841,36838,36851,36840,36869,36868,36875,36902,36881,36877,36886,36897,36917,36918,36909,36911,36932,36945,36946,36944,36968,36952,36962,36955,26297,36980,36989,36994,37000,36995,37003,24400,24407,24406,24408,23611,21675,23632,23641,23409,23651,23654,32700,24362,24361,24365,33396,24380,39739,23662,22913,22915,22925,22953,22954,22947,37740,37741,37742,37743,37744,37745,37746,37747,37748,37749,37750,37751,37752,37753,37754,37755,37756,37757,37758,37759,37760,37761,37762,37763,37764,37765,37766,37767,37768,37769,37770,37771,37772,37773,37774,37776,37777,37778,37779,37780,37781,37782,37783,37784,37785,37786,37787,37788,37789,37790,37791,37792,37793,37794,37795,37796,37797,37798,37799,37800,37801,37802,37803,37804,37805,37806,37807,37808,37809,37810,37811,37812,37813,37814,37815,37816,37817,37818,37819,37820,37821,37822,37823,37824,37825,37826,37827,37828,37829,37830,37831,37832,37833,37835,37836,37837,22935,22986,22955,22942,22948,22994,22962,22959,22999,22974,23045,23046,23005,23048,23011,23000,23033,23052,23049,23090,23092,23057,23075,23059,23104,23143,23114,23125,23100,23138,23157,33004,23210,23195,23159,23162,23230,23275,23218,23250,23252,23224,23264,23267,23281,23254,23270,23256,23260,23305,23319,23318,23346,23351,23360,23573,23580,23386,23397,23411,23377,23379,23394,39541,39543,39544,39546,39551,39549,39552,39553,39557,39560,39562,39568,39570,39571,39574,39576,39579,39580,39581,39583,39584,39586,39587,39589,39591,32415,32417,32419,32421,32424,32425,37838,37839,37840,37841,37842,37843,37844,37845,37847,37848,37849,37850,37851,37852,37853,37854,37855,37856,37857,37858,37859,37860,37861,37862,37863,37864,37865,37866,37867,37868,37869,37870,37871,37872,37873,37874,37875,37876,37877,37878,37879,37880,37881,37882,37883,37884,37885,37886,37887,37888,37889,37890,37891,37892,37893,37894,37895,37896,37897,37898,37899,37900,37901,37902,37903,37904,37905,37906,37907,37908,37909,37910,37911,37912,37913,37914,37915,37916,37917,37918,37919,37920,37921,37922,37923,37924,37925,37926,37927,37928,37929,37930,37931,37932,37933,37934,32429,32432,32446,32448,32449,32450,32457,32459,32460,32464,32468,32471,32475,32480,32481,32488,32491,32494,32495,32497,32498,32525,32502,32506,32507,32510,32513,32514,32515,32519,32520,32523,32524,32527,32529,32530,32535,32537,32540,32539,32543,32545,32546,32547,32548,32549,32550,32551,32554,32555,32556,32557,32559,32560,32561,32562,32563,32565,24186,30079,24027,30014,37013,29582,29585,29614,29602,29599,29647,29634,29649,29623,29619,29632,29641,29640,29669,29657,39036,29706,29673,29671,29662,29626,29682,29711,29738,29787,29734,29733,29736,29744,29742,29740,37935,37936,37937,37938,37939,37940,37941,37942,37943,37944,37945,37946,37947,37948,37949,37951,37952,37953,37954,37955,37956,37957,37958,37959,37960,37961,37962,37963,37964,37965,37966,37967,37968,37969,37970,37971,37972,37973,37974,37975,37976,37977,37978,37979,37980,37981,37982,37983,37984,37985,37986,37987,37988,37989,37990,37991,37992,37993,37994,37996,37997,37998,37999,38000,38001,38002,38003,38004,38005,38006,38007,38008,38009,38010,38011,38012,38013,38014,38015,38016,38017,38018,38019,38020,38033,38038,38040,38087,38095,38099,38100,38106,38118,38139,38172,38176,29723,29722,29761,29788,29783,29781,29785,29815,29805,29822,29852,29838,29824,29825,29831,29835,29854,29864,29865,29840,29863,29906,29882,38890,38891,38892,26444,26451,26462,26440,26473,26533,26503,26474,26483,26520,26535,26485,26536,26526,26541,26507,26487,26492,26608,26633,26584,26634,26601,26544,26636,26585,26549,26586,26547,26589,26624,26563,26552,26594,26638,26561,26621,26674,26675,26720,26721,26702,26722,26692,26724,26755,26653,26709,26726,26689,26727,26688,26686,26698,26697,26665,26805,26767,26740,26743,26771,26731,26818,26990,26876,26911,26912,26873,38183,38195,38205,38211,38216,38219,38229,38234,38240,38254,38260,38261,38263,38264,38265,38266,38267,38268,38269,38270,38272,38273,38274,38275,38276,38277,38278,38279,38280,38281,38282,38283,38284,38285,38286,38287,38288,38289,38290,38291,38292,38293,38294,38295,38296,38297,38298,38299,38300,38301,38302,38303,38304,38305,38306,38307,38308,38309,38310,38311,38312,38313,38314,38315,38316,38317,38318,38319,38320,38321,38322,38323,38324,38325,38326,38327,38328,38329,38330,38331,38332,38333,38334,38335,38336,38337,38338,38339,38340,38341,38342,38343,38344,38345,38346,38347,26916,26864,26891,26881,26967,26851,26896,26993,26937,26976,26946,26973,27012,26987,27008,27032,27000,26932,27084,27015,27016,27086,27017,26982,26979,27001,27035,27047,27067,27051,27053,27092,27057,27073,27082,27103,27029,27104,27021,27135,27183,27117,27159,27160,27237,27122,27204,27198,27296,27216,27227,27189,27278,27257,27197,27176,27224,27260,27281,27280,27305,27287,27307,29495,29522,27521,27522,27527,27524,27538,27539,27533,27546,27547,27553,27562,36715,36717,36721,36722,36723,36725,36726,36728,36727,36729,36730,36732,36734,36737,36738,36740,36743,36747,38348,38349,38350,38351,38352,38353,38354,38355,38356,38357,38358,38359,38360,38361,38362,38363,38364,38365,38366,38367,38368,38369,38370,38371,38372,38373,38374,38375,38380,38399,38407,38419,38424,38427,38430,38432,38435,38436,38437,38438,38439,38440,38441,38443,38444,38445,38447,38448,38455,38456,38457,38458,38462,38465,38467,38474,38478,38479,38481,38482,38483,38486,38487,38488,38489,38490,38492,38493,38494,38496,38499,38501,38502,38507,38509,38510,38511,38512,38513,38515,38520,38521,38522,38523,38524,38525,38526,38527,38528,38529,38530,38531,38532,38535,38537,38538,36749,36750,36751,36760,36762,36558,25099,25111,25115,25119,25122,25121,25125,25124,25132,33255,29935,29940,29951,29967,29969,29971,25908,26094,26095,26096,26122,26137,26482,26115,26133,26112,28805,26359,26141,26164,26161,26166,26165,32774,26207,26196,26177,26191,26198,26209,26199,26231,26244,26252,26279,26269,26302,26331,26332,26342,26345,36146,36147,36150,36155,36157,36160,36165,36166,36168,36169,36167,36173,36181,36185,35271,35274,35275,35276,35278,35279,35280,35281,29294,29343,29277,29286,29295,29310,29311,29316,29323,29325,29327,29330,25352,25394,25520,38540,38542,38545,38546,38547,38549,38550,38554,38555,38557,38558,38559,38560,38561,38562,38563,38564,38565,38566,38568,38569,38570,38571,38572,38573,38574,38575,38577,38578,38580,38581,38583,38584,38586,38587,38591,38594,38595,38600,38602,38603,38608,38609,38611,38612,38614,38615,38616,38617,38618,38619,38620,38621,38622,38623,38625,38626,38627,38628,38629,38630,38631,38635,38636,38637,38638,38640,38641,38642,38644,38645,38648,38650,38651,38652,38653,38655,38658,38659,38661,38666,38667,38668,38672,38673,38674,38676,38677,38679,38680,38681,38682,38683,38685,38687,38688,25663,25816,32772,27626,27635,27645,27637,27641,27653,27655,27654,27661,27669,27672,27673,27674,27681,27689,27684,27690,27698,25909,25941,25963,29261,29266,29270,29232,34402,21014,32927,32924,32915,32956,26378,32957,32945,32939,32941,32948,32951,32999,33000,33001,33002,32987,32962,32964,32985,32973,32983,26384,32989,33003,33009,33012,33005,33037,33038,33010,33020,26389,33042,35930,33078,33054,33068,33048,33074,33096,33100,33107,33140,33113,33114,33137,33120,33129,33148,33149,33133,33127,22605,23221,33160,33154,33169,28373,33187,33194,33228,26406,33226,33211,38689,38690,38691,38692,38693,38694,38695,38696,38697,38699,38700,38702,38703,38705,38707,38708,38709,38710,38711,38714,38715,38716,38717,38719,38720,38721,38722,38723,38724,38725,38726,38727,38728,38729,38730,38731,38732,38733,38734,38735,38736,38737,38740,38741,38743,38744,38746,38748,38749,38751,38755,38756,38758,38759,38760,38762,38763,38764,38765,38766,38767,38768,38769,38770,38773,38775,38776,38777,38778,38779,38781,38782,38783,38784,38785,38786,38787,38788,38790,38791,38792,38793,38794,38796,38798,38799,38800,38803,38805,38806,38807,38809,38810,38811,38812,38813,33217,33190,27428,27447,27449,27459,27462,27481,39121,39122,39123,39125,39129,39130,27571,24384,27586,35315,26000,40785,26003,26044,26054,26052,26051,26060,26062,26066,26070,28800,28828,28822,28829,28859,28864,28855,28843,28849,28904,28874,28944,28947,28950,28975,28977,29043,29020,29032,28997,29042,29002,29048,29050,29080,29107,29109,29096,29088,29152,29140,29159,29177,29213,29224,28780,28952,29030,29113,25150,25149,25155,25160,25161,31035,31040,31046,31049,31067,31068,31059,31066,31074,31063,31072,31087,31079,31098,31109,31114,31130,31143,31155,24529,24528,38814,38815,38817,38818,38820,38821,38822,38823,38824,38825,38826,38828,38830,38832,38833,38835,38837,38838,38839,38840,38841,38842,38843,38844,38845,38846,38847,38848,38849,38850,38851,38852,38853,38854,38855,38856,38857,38858,38859,38860,38861,38862,38863,38864,38865,38866,38867,38868,38869,38870,38871,38872,38873,38874,38875,38876,38877,38878,38879,38880,38881,38882,38883,38884,38885,38888,38894,38895,38896,38897,38898,38900,38903,38904,38905,38906,38907,38908,38909,38910,38911,38912,38913,38914,38915,38916,38917,38918,38919,38920,38921,38922,38923,38924,38925,38926,24636,24669,24666,24679,24641,24665,24675,24747,24838,24845,24925,25001,24989,25035,25041,25094,32896,32895,27795,27894,28156,30710,30712,30720,30729,30743,30744,30737,26027,30765,30748,30749,30777,30778,30779,30751,30780,30757,30764,30755,30761,30798,30829,30806,30807,30758,30800,30791,30796,30826,30875,30867,30874,30855,30876,30881,30883,30898,30905,30885,30932,30937,30921,30956,30962,30981,30964,30995,31012,31006,31028,40859,40697,40699,40700,30449,30468,30477,30457,30471,30472,30490,30498,30489,30509,30502,30517,30520,30544,30545,30535,30531,30554,30568,38927,38928,38929,38930,38931,38932,38933,38934,38935,38936,38937,38938,38939,38940,38941,38942,38943,38944,38945,38946,38947,38948,38949,38950,38951,38952,38953,38954,38955,38956,38957,38958,38959,38960,38961,38962,38963,38964,38965,38966,38967,38968,38969,38970,38971,38972,38973,38974,38975,38976,38977,38978,38979,38980,38981,38982,38983,38984,38985,38986,38987,38988,38989,38990,38991,38992,38993,38994,38995,38996,38997,38998,38999,39000,39001,39002,39003,39004,39005,39006,39007,39008,39009,39010,39011,39012,39013,39014,39015,39016,39017,39018,39019,39020,39021,39022,30562,30565,30591,30605,30589,30592,30604,30609,30623,30624,30640,30645,30653,30010,30016,30030,30027,30024,30043,30066,30073,30083,32600,32609,32607,35400,32616,32628,32625,32633,32641,32638,30413,30437,34866,38021,38022,38023,38027,38026,38028,38029,38031,38032,38036,38039,38037,38042,38043,38044,38051,38052,38059,38058,38061,38060,38063,38064,38066,38068,38070,38071,38072,38073,38074,38076,38077,38079,38084,38088,38089,38090,38091,38092,38093,38094,38096,38097,38098,38101,38102,38103,38105,38104,38107,38110,38111,38112,38114,38116,38117,38119,38120,38122,39023,39024,39025,39026,39027,39028,39051,39054,39058,39061,39065,39075,39080,39081,39082,39083,39084,39085,39086,39087,39088,39089,39090,39091,39092,39093,39094,39095,39096,39097,39098,39099,39100,39101,39102,39103,39104,39105,39106,39107,39108,39109,39110,39111,39112,39113,39114,39115,39116,39117,39119,39120,39124,39126,39127,39131,39132,39133,39136,39137,39138,39139,39140,39141,39142,39145,39146,39147,39148,39149,39150,39151,39152,39153,39154,39155,39156,39157,39158,39159,39160,39161,39162,39163,39164,39165,39166,39167,39168,39169,39170,39171,39172,39173,39174,39175,38121,38123,38126,38127,38131,38132,38133,38135,38137,38140,38141,38143,38147,38146,38150,38151,38153,38154,38157,38158,38159,38162,38163,38164,38165,38166,38168,38171,38173,38174,38175,38178,38186,38187,38185,38188,38193,38194,38196,38198,38199,38200,38204,38206,38207,38210,38197,38212,38213,38214,38217,38220,38222,38223,38226,38227,38228,38230,38231,38232,38233,38235,38238,38239,38237,38241,38242,38244,38245,38246,38247,38248,38249,38250,38251,38252,38255,38257,38258,38259,38202,30695,30700,38601,31189,31213,31203,31211,31238,23879,31235,31234,31262,31252,39176,39177,39178,39179,39180,39182,39183,39185,39186,39187,39188,39189,39190,39191,39192,39193,39194,39195,39196,39197,39198,39199,39200,39201,39202,39203,39204,39205,39206,39207,39208,39209,39210,39211,39212,39213,39215,39216,39217,39218,39219,39220,39221,39222,39223,39224,39225,39226,39227,39228,39229,39230,39231,39232,39233,39234,39235,39236,39237,39238,39239,39240,39241,39242,39243,39244,39245,39246,39247,39248,39249,39250,39251,39254,39255,39256,39257,39258,39259,39260,39261,39262,39263,39264,39265,39266,39268,39270,39283,39288,39289,39291,39294,39298,39299,39305,31289,31287,31313,40655,39333,31344,30344,30350,30355,30361,30372,29918,29920,29996,40480,40482,40488,40489,40490,40491,40492,40498,40497,40502,40504,40503,40505,40506,40510,40513,40514,40516,40518,40519,40520,40521,40523,40524,40526,40529,40533,40535,40538,40539,40540,40542,40547,40550,40551,40552,40553,40554,40555,40556,40561,40557,40563,30098,30100,30102,30112,30109,30124,30115,30131,30132,30136,30148,30129,30128,30147,30146,30166,30157,30179,30184,30182,30180,30187,30183,30211,30193,30204,30207,30224,30208,30213,30220,30231,30218,30245,30232,30229,30233,39308,39310,39322,39323,39324,39325,39326,39327,39328,39329,39330,39331,39332,39334,39335,39337,39338,39339,39340,39341,39342,39343,39344,39345,39346,39347,39348,39349,39350,39351,39352,39353,39354,39355,39356,39357,39358,39359,39360,39361,39362,39363,39364,39365,39366,39367,39368,39369,39370,39371,39372,39373,39374,39375,39376,39377,39378,39379,39380,39381,39382,39383,39384,39385,39386,39387,39388,39389,39390,39391,39392,39393,39394,39395,39396,39397,39398,39399,39400,39401,39402,39403,39404,39405,39406,39407,39408,39409,39410,39411,39412,39413,39414,39415,39416,39417,30235,30268,30242,30240,30272,30253,30256,30271,30261,30275,30270,30259,30285,30302,30292,30300,30294,30315,30319,32714,31462,31352,31353,31360,31366,31368,31381,31398,31392,31404,31400,31405,31411,34916,34921,34930,34941,34943,34946,34978,35014,34999,35004,35017,35042,35022,35043,35045,35057,35098,35068,35048,35070,35056,35105,35097,35091,35099,35082,35124,35115,35126,35137,35174,35195,30091,32997,30386,30388,30684,32786,32788,32790,32796,32800,32802,32805,32806,32807,32809,32808,32817,32779,32821,32835,32838,32845,32850,32873,32881,35203,39032,39040,39043,39418,39419,39420,39421,39422,39423,39424,39425,39426,39427,39428,39429,39430,39431,39432,39433,39434,39435,39436,39437,39438,39439,39440,39441,39442,39443,39444,39445,39446,39447,39448,39449,39450,39451,39452,39453,39454,39455,39456,39457,39458,39459,39460,39461,39462,39463,39464,39465,39466,39467,39468,39469,39470,39471,39472,39473,39474,39475,39476,39477,39478,39479,39480,39481,39482,39483,39484,39485,39486,39487,39488,39489,39490,39491,39492,39493,39494,39495,39496,39497,39498,39499,39500,39501,39502,39503,39504,39505,39506,39507,39508,39509,39510,39511,39512,39513,39049,39052,39053,39055,39060,39066,39067,39070,39071,39073,39074,39077,39078,34381,34388,34412,34414,34431,34426,34428,34427,34472,34445,34443,34476,34461,34471,34467,34474,34451,34473,34486,34500,34485,34510,34480,34490,34481,34479,34505,34511,34484,34537,34545,34546,34541,34547,34512,34579,34526,34548,34527,34520,34513,34563,34567,34552,34568,34570,34573,34569,34595,34619,34590,34597,34606,34586,34622,34632,34612,34609,34601,34615,34623,34690,34594,34685,34686,34683,34656,34672,34636,34670,34699,34643,34659,34684,34660,34649,34661,34707,34735,34728,34770,39514,39515,39516,39517,39518,39519,39520,39521,39522,39523,39524,39525,39526,39527,39528,39529,39530,39531,39538,39555,39561,39565,39566,39572,39573,39577,39590,39593,39594,39595,39596,39597,39598,39599,39602,39603,39604,39605,39609,39611,39613,39614,39615,39619,39620,39622,39623,39624,39625,39626,39629,39630,39631,39632,39634,39636,39637,39638,39639,39641,39642,39643,39644,39645,39646,39648,39650,39651,39652,39653,39655,39656,39657,39658,39660,39662,39664,39665,39666,39667,39668,39669,39670,39671,39672,39674,39676,39677,39678,39679,39680,39681,39682,39684,39685,39686,34758,34696,34693,34733,34711,34691,34731,34789,34732,34741,34739,34763,34771,34749,34769,34752,34762,34779,34794,34784,34798,34838,34835,34814,34826,34843,34849,34873,34876,32566,32578,32580,32581,33296,31482,31485,31496,31491,31492,31509,31498,31531,31503,31559,31544,31530,31513,31534,31537,31520,31525,31524,31539,31550,31518,31576,31578,31557,31605,31564,31581,31584,31598,31611,31586,31602,31601,31632,31654,31655,31672,31660,31645,31656,31621,31658,31644,31650,31659,31668,31697,31681,31692,31709,31706,31717,31718,31722,31756,31742,31740,31759,31766,31755,39687,39689,39690,39691,39692,39693,39694,39696,39697,39698,39700,39701,39702,39703,39704,39705,39706,39707,39708,39709,39710,39712,39713,39714,39716,39717,39718,39719,39720,39721,39722,39723,39724,39725,39726,39728,39729,39731,39732,39733,39734,39735,39736,39737,39738,39741,39742,39743,39744,39750,39754,39755,39756,39758,39760,39762,39763,39765,39766,39767,39768,39769,39770,39771,39772,39773,39774,39775,39776,39777,39778,39779,39780,39781,39782,39783,39784,39785,39786,39787,39788,39789,39790,39791,39792,39793,39794,39795,39796,39797,39798,39799,39800,39801,39802,39803,31775,31786,31782,31800,31809,31808,33278,33281,33282,33284,33260,34884,33313,33314,33315,33325,33327,33320,33323,33336,33339,33331,33332,33342,33348,33353,33355,33359,33370,33375,33384,34942,34949,34952,35032,35039,35166,32669,32671,32679,32687,32688,32690,31868,25929,31889,31901,31900,31902,31906,31922,31932,31933,31937,31943,31948,31949,31944,31941,31959,31976,33390,26280,32703,32718,32725,32741,32737,32742,32745,32750,32755,31992,32119,32166,32174,32327,32411,40632,40628,36211,36228,36244,36241,36273,36199,36205,35911,35913,37194,37200,37198,37199,37220,39804,39805,39806,39807,39808,39809,39810,39811,39812,39813,39814,39815,39816,39817,39818,39819,39820,39821,39822,39823,39824,39825,39826,39827,39828,39829,39830,39831,39832,39833,39834,39835,39836,39837,39838,39839,39840,39841,39842,39843,39844,39845,39846,39847,39848,39849,39850,39851,39852,39853,39854,39855,39856,39857,39858,39859,39860,39861,39862,39863,39864,39865,39866,39867,39868,39869,39870,39871,39872,39873,39874,39875,39876,39877,39878,39879,39880,39881,39882,39883,39884,39885,39886,39887,39888,39889,39890,39891,39892,39893,39894,39895,39896,39897,39898,39899,37218,37217,37232,37225,37231,37245,37246,37234,37236,37241,37260,37253,37264,37261,37265,37282,37283,37290,37293,37294,37295,37301,37300,37306,35925,40574,36280,36331,36357,36441,36457,36277,36287,36284,36282,36292,36310,36311,36314,36318,36302,36303,36315,36294,36332,36343,36344,36323,36345,36347,36324,36361,36349,36372,36381,36383,36396,36398,36387,36399,36410,36416,36409,36405,36413,36401,36425,36417,36418,36433,36434,36426,36464,36470,36476,36463,36468,36485,36495,36500,36496,36508,36510,35960,35970,35978,35973,35992,35988,26011,35286,35294,35290,35292,39900,39901,39902,39903,39904,39905,39906,39907,39908,39909,39910,39911,39912,39913,39914,39915,39916,39917,39918,39919,39920,39921,39922,39923,39924,39925,39926,39927,39928,39929,39930,39931,39932,39933,39934,39935,39936,39937,39938,39939,39940,39941,39942,39943,39944,39945,39946,39947,39948,39949,39950,39951,39952,39953,39954,39955,39956,39957,39958,39959,39960,39961,39962,39963,39964,39965,39966,39967,39968,39969,39970,39971,39972,39973,39974,39975,39976,39977,39978,39979,39980,39981,39982,39983,39984,39985,39986,39987,39988,39989,39990,39991,39992,39993,39994,39995,35301,35307,35311,35390,35622,38739,38633,38643,38639,38662,38657,38664,38671,38670,38698,38701,38704,38718,40832,40835,40837,40838,40839,40840,40841,40842,40844,40702,40715,40717,38585,38588,38589,38606,38610,30655,38624,37518,37550,37576,37694,37738,37834,37775,37950,37995,40063,40066,40069,40070,40071,40072,31267,40075,40078,40080,40081,40082,40084,40085,40090,40091,40094,40095,40096,40097,40098,40099,40101,40102,40103,40104,40105,40107,40109,40110,40112,40113,40114,40115,40116,40117,40118,40119,40122,40123,40124,40125,40132,40133,40134,40135,40138,40139,39996,39997,39998,39999,40000,40001,40002,40003,40004,40005,40006,40007,40008,40009,40010,40011,40012,40013,40014,40015,40016,40017,40018,40019,40020,40021,40022,40023,40024,40025,40026,40027,40028,40029,40030,40031,40032,40033,40034,40035,40036,40037,40038,40039,40040,40041,40042,40043,40044,40045,40046,40047,40048,40049,40050,40051,40052,40053,40054,40055,40056,40057,40058,40059,40061,40062,40064,40067,40068,40073,40074,40076,40079,40083,40086,40087,40088,40089,40093,40106,40108,40111,40121,40126,40127,40128,40129,40130,40136,40137,40145,40146,40154,40155,40160,40161,40140,40141,40142,40143,40144,40147,40148,40149,40151,40152,40153,40156,40157,40159,40162,38780,38789,38801,38802,38804,38831,38827,38819,38834,38836,39601,39600,39607,40536,39606,39610,39612,39617,39616,39621,39618,39627,39628,39633,39749,39747,39751,39753,39752,39757,39761,39144,39181,39214,39253,39252,39647,39649,39654,39663,39659,39675,39661,39673,39688,39695,39699,39711,39715,40637,40638,32315,40578,40583,40584,40587,40594,37846,40605,40607,40667,40668,40669,40672,40671,40674,40681,40679,40677,40682,40687,40738,40748,40751,40761,40759,40765,40766,40772,40163,40164,40165,40166,40167,40168,40169,40170,40171,40172,40173,40174,40175,40176,40177,40178,40179,40180,40181,40182,40183,40184,40185,40186,40187,40188,40189,40190,40191,40192,40193,40194,40195,40196,40197,40198,40199,40200,40201,40202,40203,40204,40205,40206,40207,40208,40209,40210,40211,40212,40213,40214,40215,40216,40217,40218,40219,40220,40221,40222,40223,40224,40225,40226,40227,40228,40229,40230,40231,40232,40233,40234,40235,40236,40237,40238,40239,40240,40241,40242,40243,40244,40245,40246,40247,40248,40249,40250,40251,40252,40253,40254,40255,40256,40257,40258,57908,57909,57910,57911,57912,57913,57914,57915,57916,57917,57918,57919,57920,57921,57922,57923,57924,57925,57926,57927,57928,57929,57930,57931,57932,57933,57934,57935,57936,57937,57938,57939,57940,57941,57942,57943,57944,57945,57946,57947,57948,57949,57950,57951,57952,57953,57954,57955,57956,57957,57958,57959,57960,57961,57962,57963,57964,57965,57966,57967,57968,57969,57970,57971,57972,57973,57974,57975,57976,57977,57978,57979,57980,57981,57982,57983,57984,57985,57986,57987,57988,57989,57990,57991,57992,57993,57994,57995,57996,57997,57998,57999,58000,58001,40259,40260,40261,40262,40263,40264,40265,40266,40267,40268,40269,40270,40271,40272,40273,40274,40275,40276,40277,40278,40279,40280,40281,40282,40283,40284,40285,40286,40287,40288,40289,40290,40291,40292,40293,40294,40295,40296,40297,40298,40299,40300,40301,40302,40303,40304,40305,40306,40307,40308,40309,40310,40311,40312,40313,40314,40315,40316,40317,40318,40319,40320,40321,40322,40323,40324,40325,40326,40327,40328,40329,40330,40331,40332,40333,40334,40335,40336,40337,40338,40339,40340,40341,40342,40343,40344,40345,40346,40347,40348,40349,40350,40351,40352,40353,40354,58002,58003,58004,58005,58006,58007,58008,58009,58010,58011,58012,58013,58014,58015,58016,58017,58018,58019,58020,58021,58022,58023,58024,58025,58026,58027,58028,58029,58030,58031,58032,58033,58034,58035,58036,58037,58038,58039,58040,58041,58042,58043,58044,58045,58046,58047,58048,58049,58050,58051,58052,58053,58054,58055,58056,58057,58058,58059,58060,58061,58062,58063,58064,58065,58066,58067,58068,58069,58070,58071,58072,58073,58074,58075,58076,58077,58078,58079,58080,58081,58082,58083,58084,58085,58086,58087,58088,58089,58090,58091,58092,58093,58094,58095,40355,40356,40357,40358,40359,40360,40361,40362,40363,40364,40365,40366,40367,40368,40369,40370,40371,40372,40373,40374,40375,40376,40377,40378,40379,40380,40381,40382,40383,40384,40385,40386,40387,40388,40389,40390,40391,40392,40393,40394,40395,40396,40397,40398,40399,40400,40401,40402,40403,40404,40405,40406,40407,40408,40409,40410,40411,40412,40413,40414,40415,40416,40417,40418,40419,40420,40421,40422,40423,40424,40425,40426,40427,40428,40429,40430,40431,40432,40433,40434,40435,40436,40437,40438,40439,40440,40441,40442,40443,40444,40445,40446,40447,40448,40449,40450,58096,58097,58098,58099,58100,58101,58102,58103,58104,58105,58106,58107,58108,58109,58110,58111,58112,58113,58114,58115,58116,58117,58118,58119,58120,58121,58122,58123,58124,58125,58126,58127,58128,58129,58130,58131,58132,58133,58134,58135,58136,58137,58138,58139,58140,58141,58142,58143,58144,58145,58146,58147,58148,58149,58150,58151,58152,58153,58154,58155,58156,58157,58158,58159,58160,58161,58162,58163,58164,58165,58166,58167,58168,58169,58170,58171,58172,58173,58174,58175,58176,58177,58178,58179,58180,58181,58182,58183,58184,58185,58186,58187,58188,58189,40451,40452,40453,40454,40455,40456,40457,40458,40459,40460,40461,40462,40463,40464,40465,40466,40467,40468,40469,40470,40471,40472,40473,40474,40475,40476,40477,40478,40484,40487,40494,40496,40500,40507,40508,40512,40525,40528,40530,40531,40532,40534,40537,40541,40543,40544,40545,40546,40549,40558,40559,40562,40564,40565,40566,40567,40568,40569,40570,40571,40572,40573,40576,40577,40579,40580,40581,40582,40585,40586,40588,40589,40590,40591,40592,40593,40596,40597,40598,40599,40600,40601,40602,40603,40604,40606,40608,40609,40610,40611,40612,40613,40615,40616,40617,40618,58190,58191,58192,58193,58194,58195,58196,58197,58198,58199,58200,58201,58202,58203,58204,58205,58206,58207,58208,58209,58210,58211,58212,58213,58214,58215,58216,58217,58218,58219,58220,58221,58222,58223,58224,58225,58226,58227,58228,58229,58230,58231,58232,58233,58234,58235,58236,58237,58238,58239,58240,58241,58242,58243,58244,58245,58246,58247,58248,58249,58250,58251,58252,58253,58254,58255,58256,58257,58258,58259,58260,58261,58262,58263,58264,58265,58266,58267,58268,58269,58270,58271,58272,58273,58274,58275,58276,58277,58278,58279,58280,58281,58282,58283,40619,40620,40621,40622,40623,40624,40625,40626,40627,40629,40630,40631,40633,40634,40636,40639,40640,40641,40642,40643,40645,40646,40647,40648,40650,40651,40652,40656,40658,40659,40661,40662,40663,40665,40666,40670,40673,40675,40676,40678,40680,40683,40684,40685,40686,40688,40689,40690,40691,40692,40693,40694,40695,40696,40698,40701,40703,40704,40705,40706,40707,40708,40709,40710,40711,40712,40713,40714,40716,40719,40721,40722,40724,40725,40726,40728,40730,40731,40732,40733,40734,40735,40737,40739,40740,40741,40742,40743,40744,40745,40746,40747,40749,40750,40752,40753,58284,58285,58286,58287,58288,58289,58290,58291,58292,58293,58294,58295,58296,58297,58298,58299,58300,58301,58302,58303,58304,58305,58306,58307,58308,58309,58310,58311,58312,58313,58314,58315,58316,58317,58318,58319,58320,58321,58322,58323,58324,58325,58326,58327,58328,58329,58330,58331,58332,58333,58334,58335,58336,58337,58338,58339,58340,58341,58342,58343,58344,58345,58346,58347,58348,58349,58350,58351,58352,58353,58354,58355,58356,58357,58358,58359,58360,58361,58362,58363,58364,58365,58366,58367,58368,58369,58370,58371,58372,58373,58374,58375,58376,58377,40754,40755,40756,40757,40758,40760,40762,40764,40767,40768,40769,40770,40771,40773,40774,40775,40776,40777,40778,40779,40780,40781,40782,40783,40786,40787,40788,40789,40790,40791,40792,40793,40794,40795,40796,40797,40798,40799,40800,40801,40802,40803,40804,40805,40806,40807,40808,40809,40810,40811,40812,40813,40814,40815,40816,40817,40818,40819,40820,40821,40822,40823,40824,40825,40826,40827,40828,40829,40830,40833,40834,40845,40846,40847,40848,40849,40850,40851,40852,40853,40854,40855,40856,40860,40861,40862,40865,40866,40867,40868,40869,63788,63865,63893,63975,63985,58378,58379,58380,58381,58382,58383,58384,58385,58386,58387,58388,58389,58390,58391,58392,58393,58394,58395,58396,58397,58398,58399,58400,58401,58402,58403,58404,58405,58406,58407,58408,58409,58410,58411,58412,58413,58414,58415,58416,58417,58418,58419,58420,58421,58422,58423,58424,58425,58426,58427,58428,58429,58430,58431,58432,58433,58434,58435,58436,58437,58438,58439,58440,58441,58442,58443,58444,58445,58446,58447,58448,58449,58450,58451,58452,58453,58454,58455,58456,58457,58458,58459,58460,58461,58462,58463,58464,58465,58466,58467,58468,58469,58470,58471,64012,64013,64014,64015,64017,64019,64020,64024,64031,64032,64033,64035,64036,64039,64040,64041,11905,59414,59415,59416,11908,13427,13383,11912,11915,59422,13726,13850,13838,11916,11927,14702,14616,59430,14799,14815,14963,14800,59435,59436,15182,15470,15584,11943,59441,59442,11946,16470,16735,11950,17207,11955,11958,11959,59451,17329,17324,11963,17373,17622,18017,17996,59459,18211,18217,18300,18317,11978,18759,18810,18813,18818,18819,18821,18822,18847,18843,18871,18870,59476,59477,19619,19615,19616,19617,19575,19618,19731,19732,19733,19734,19735,19736,19737,19886,59492,58472,58473,58474,58475,58476,58477,58478,58479,58480,58481,58482,58483,58484,58485,58486,58487,58488,58489,58490,58491,58492,58493,58494,58495,58496,58497,58498,58499,58500,58501,58502,58503,58504,58505,58506,58507,58508,58509,58510,58511,58512,58513,58514,58515,58516,58517,58518,58519,58520,58521,58522,58523,58524,58525,58526,58527,58528,58529,58530,58531,58532,58533,58534,58535,58536,58537,58538,58539,58540,58541,58542,58543,58544,58545,58546,58547,58548,58549,58550,58551,58552,58553,58554,58555,58556,58557,58558,58559,58560,58561,58562,58563,58564,58565],
    "gb18030-ranges":[[0,128],[36,165],[38,169],[45,178],[50,184],[81,216],[89,226],[95,235],[96,238],[100,244],[103,248],[104,251],[105,253],[109,258],[126,276],[133,284],[148,300],[172,325],[175,329],[179,334],[208,364],[306,463],[307,465],[308,467],[309,469],[310,471],[311,473],[312,475],[313,477],[341,506],[428,594],[443,610],[544,712],[545,716],[558,730],[741,930],[742,938],[749,962],[750,970],[805,1026],[819,1104],[820,1106],[7922,8209],[7924,8215],[7925,8218],[7927,8222],[7934,8231],[7943,8241],[7944,8244],[7945,8246],[7950,8252],[8062,8365],[8148,8452],[8149,8454],[8152,8458],[8164,8471],[8174,8482],[8236,8556],[8240,8570],[8262,8596],[8264,8602],[8374,8713],[8380,8720],[8381,8722],[8384,8726],[8388,8731],[8390,8737],[8392,8740],[8393,8742],[8394,8748],[8396,8751],[8401,8760],[8406,8766],[8416,8777],[8419,8781],[8424,8787],[8437,8802],[8439,8808],[8445,8816],[8482,8854],[8485,8858],[8496,8870],[8521,8896],[8603,8979],[8936,9322],[8946,9372],[9046,9548],[9050,9588],[9063,9616],[9066,9622],[9076,9634],[9092,9652],[9100,9662],[9108,9672],[9111,9676],[9113,9680],[9131,9702],[9162,9735],[9164,9738],[9218,9793],[9219,9795],[11329,11906],[11331,11909],[11334,11913],[11336,11917],[11346,11928],[11361,11944],[11363,11947],[11366,11951],[11370,11956],[11372,11960],[11375,11964],[11389,11979],[11682,12284],[11686,12292],[11687,12312],[11692,12319],[11694,12330],[11714,12351],[11716,12436],[11723,12447],[11725,12535],[11730,12543],[11736,12586],[11982,12842],[11989,12850],[12102,12964],[12336,13200],[12348,13215],[12350,13218],[12384,13253],[12393,13263],[12395,13267],[12397,13270],[12510,13384],[12553,13428],[12851,13727],[12962,13839],[12973,13851],[13738,14617],[13823,14703],[13919,14801],[13933,14816],[14080,14964],[14298,15183],[14585,15471],[14698,15585],[15583,16471],[15847,16736],[16318,17208],[16434,17325],[16438,17330],[16481,17374],[16729,17623],[17102,17997],[17122,18018],[17315,18212],[17320,18218],[17402,18301],[17418,18318],[17859,18760],[17909,18811],[17911,18814],[17915,18820],[17916,18823],[17936,18844],[17939,18848],[17961,18872],[18664,19576],[18703,19620],[18814,19738],[18962,19887],[19043,40870],[33469,59244],[33470,59336],[33471,59367],[33484,59413],[33485,59417],[33490,59423],[33497,59431],[33501,59437],[33505,59443],[33513,59452],[33520,59460],[33536,59478],[33550,59493],[37845,63789],[37921,63866],[37948,63894],[38029,63976],[38038,63986],[38064,64016],[38065,64018],[38066,64021],[38069,64025],[38075,64034],[38076,64037],[38078,64042],[39108,65074],[39109,65093],[39113,65107],[39114,65112],[39115,65127],[39116,65132],[39265,65375],[39394,65510],[189000,65536]],
    "jis0208":[12288,12289,12290,65292,65294,12539,65306,65307,65311,65281,12443,12444,180,65344,168,65342,65507,65343,12541,12542,12445,12446,12291,20189,12293,12294,12295,12540,8213,8208,65295,65340,65374,8741,65372,8230,8229,8216,8217,8220,8221,65288,65289,12308,12309,65339,65341,65371,65373,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,65291,65293,177,215,247,65309,8800,65308,65310,8806,8807,8734,8756,9794,9792,176,8242,8243,8451,65509,65284,65504,65505,65285,65283,65286,65290,65312,167,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8251,12306,8594,8592,8593,8595,12307,null,null,null,null,null,null,null,null,null,null,null,8712,8715,8838,8839,8834,8835,8746,8745,null,null,null,null,null,null,null,null,8743,8744,65506,8658,8660,8704,8707,null,null,null,null,null,null,null,null,null,null,null,8736,8869,8978,8706,8711,8801,8786,8810,8811,8730,8765,8733,8757,8747,8748,null,null,null,null,null,null,null,8491,8240,9839,9837,9834,8224,8225,182,null,null,null,null,9711,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,null,null,null,null,null,null,null,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,null,null,null,null,null,null,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,null,null,null,null,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,9327,9328,9329,9330,9331,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,13129,13076,13090,13133,13080,13095,13059,13110,13137,13143,13069,13094,13091,13099,13130,13115,13212,13213,13214,13198,13199,13252,13217,null,null,null,null,null,null,null,null,13179,12317,12319,8470,13261,8481,12964,12965,12966,12967,12968,12849,12850,12857,13182,13181,13180,8786,8801,8747,8750,8721,8730,8869,8736,8735,8895,8757,8745,8746,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20124,21782,23043,38463,21696,24859,25384,23030,36898,33909,33564,31312,24746,25569,28197,26093,33894,33446,39925,26771,22311,26017,25201,23451,22992,34427,39156,32098,32190,39822,25110,31903,34999,23433,24245,25353,26263,26696,38343,38797,26447,20197,20234,20301,20381,20553,22258,22839,22996,23041,23561,24799,24847,24944,26131,26885,28858,30031,30064,31227,32173,32239,32963,33806,34915,35586,36949,36986,21307,20117,20133,22495,32946,37057,30959,19968,22769,28322,36920,31282,33576,33419,39983,20801,21360,21693,21729,22240,23035,24341,39154,28139,32996,34093,38498,38512,38560,38907,21515,21491,23431,28879,32701,36802,38632,21359,40284,31418,19985,30867,33276,28198,22040,21764,27421,34074,39995,23013,21417,28006,29916,38287,22082,20113,36939,38642,33615,39180,21473,21942,23344,24433,26144,26355,26628,27704,27891,27945,29787,30408,31310,38964,33521,34907,35424,37613,28082,30123,30410,39365,24742,35585,36234,38322,27022,21421,20870,22290,22576,22852,23476,24310,24616,25513,25588,27839,28436,28814,28948,29017,29141,29503,32257,33398,33489,34199,36960,37467,40219,22633,26044,27738,29989,20985,22830,22885,24448,24540,25276,26106,27178,27431,27572,29579,32705,35158,40236,40206,40644,23713,27798,33659,20740,23627,25014,33222,26742,29281,20057,20474,21368,24681,28201,31311,38899,19979,21270,20206,20309,20285,20385,20339,21152,21487,22025,22799,23233,23478,23521,31185,26247,26524,26550,27468,27827,28779,29634,31117,31166,31292,31623,33457,33499,33540,33655,33775,33747,34662,35506,22057,36008,36838,36942,38686,34442,20420,23784,25105,29273,30011,33253,33469,34558,36032,38597,39187,39381,20171,20250,35299,22238,22602,22730,24315,24555,24618,24724,24674,25040,25106,25296,25913,39745,26214,26800,28023,28784,30028,30342,32117,33445,34809,38283,38542,35997,20977,21182,22806,21683,23475,23830,24936,27010,28079,30861,33995,34903,35442,37799,39608,28012,39336,34521,22435,26623,34510,37390,21123,22151,21508,24275,25313,25785,26684,26680,27579,29554,30906,31339,35226,35282,36203,36611,37101,38307,38548,38761,23398,23731,27005,38989,38990,25499,31520,27179,27263,26806,39949,28511,21106,21917,24688,25324,27963,28167,28369,33883,35088,36676,19988,39993,21494,26907,27194,38788,26666,20828,31427,33970,37340,37772,22107,40232,26658,33541,33841,31909,21000,33477,29926,20094,20355,20896,23506,21002,21208,21223,24059,21914,22570,23014,23436,23448,23515,24178,24185,24739,24863,24931,25022,25563,25954,26577,26707,26874,27454,27475,27735,28450,28567,28485,29872,29976,30435,30475,31487,31649,31777,32233,32566,32752,32925,33382,33694,35251,35532,36011,36996,37969,38291,38289,38306,38501,38867,39208,33304,20024,21547,23736,24012,29609,30284,30524,23721,32747,36107,38593,38929,38996,39000,20225,20238,21361,21916,22120,22522,22855,23305,23492,23696,24076,24190,24524,25582,26426,26071,26082,26399,26827,26820,27231,24112,27589,27671,27773,30079,31048,23395,31232,32000,24509,35215,35352,36020,36215,36556,36637,39138,39438,39740,20096,20605,20736,22931,23452,25135,25216,25836,27450,29344,30097,31047,32681,34811,35516,35696,25516,33738,38816,21513,21507,21931,26708,27224,35440,30759,26485,40653,21364,23458,33050,34384,36870,19992,20037,20167,20241,21450,21560,23470,24339,24613,25937,26429,27714,27762,27875,28792,29699,31350,31406,31496,32026,31998,32102,26087,29275,21435,23621,24040,25298,25312,25369,28192,34394,35377,36317,37624,28417,31142,39770,20136,20139,20140,20379,20384,20689,20807,31478,20849,20982,21332,21281,21375,21483,21932,22659,23777,24375,24394,24623,24656,24685,25375,25945,27211,27841,29378,29421,30703,33016,33029,33288,34126,37111,37857,38911,39255,39514,20208,20957,23597,26241,26989,23616,26354,26997,29577,26704,31873,20677,21220,22343,24062,37670,26020,27427,27453,29748,31105,31165,31563,32202,33465,33740,34943,35167,35641,36817,37329,21535,37504,20061,20534,21477,21306,29399,29590,30697,33510,36527,39366,39368,39378,20855,24858,34398,21936,31354,20598,23507,36935,38533,20018,27355,37351,23633,23624,25496,31391,27795,38772,36705,31402,29066,38536,31874,26647,32368,26705,37740,21234,21531,34219,35347,32676,36557,37089,21350,34952,31041,20418,20670,21009,20804,21843,22317,29674,22411,22865,24418,24452,24693,24950,24935,25001,25522,25658,25964,26223,26690,28179,30054,31293,31995,32076,32153,32331,32619,33550,33610,34509,35336,35427,35686,36605,38938,40335,33464,36814,39912,21127,25119,25731,28608,38553,26689,20625,27424,27770,28500,31348,32080,34880,35363,26376,20214,20537,20518,20581,20860,21048,21091,21927,22287,22533,23244,24314,25010,25080,25331,25458,26908,27177,29309,29356,29486,30740,30831,32121,30476,32937,35211,35609,36066,36562,36963,37749,38522,38997,39443,40568,20803,21407,21427,24187,24358,28187,28304,29572,29694,32067,33335,35328,35578,38480,20046,20491,21476,21628,22266,22993,23396,24049,24235,24359,25144,25925,26543,28246,29392,31946,34996,32929,32993,33776,34382,35463,36328,37431,38599,39015,40723,20116,20114,20237,21320,21577,21566,23087,24460,24481,24735,26791,27278,29786,30849,35486,35492,35703,37264,20062,39881,20132,20348,20399,20505,20502,20809,20844,21151,21177,21246,21402,21475,21521,21518,21897,22353,22434,22909,23380,23389,23439,24037,24039,24055,24184,24195,24218,24247,24344,24658,24908,25239,25304,25511,25915,26114,26179,26356,26477,26657,26775,27083,27743,27946,28009,28207,28317,30002,30343,30828,31295,31968,32005,32024,32094,32177,32789,32771,32943,32945,33108,33167,33322,33618,34892,34913,35611,36002,36092,37066,37237,37489,30783,37628,38308,38477,38917,39321,39640,40251,21083,21163,21495,21512,22741,25335,28640,35946,36703,40633,20811,21051,21578,22269,31296,37239,40288,40658,29508,28425,33136,29969,24573,24794,39592,29403,36796,27492,38915,20170,22256,22372,22718,23130,24680,25031,26127,26118,26681,26801,28151,30165,32058,33390,39746,20123,20304,21449,21766,23919,24038,24046,26619,27801,29811,30722,35408,37782,35039,22352,24231,25387,20661,20652,20877,26368,21705,22622,22971,23472,24425,25165,25505,26685,27507,28168,28797,37319,29312,30741,30758,31085,25998,32048,33756,35009,36617,38555,21092,22312,26448,32618,36001,20916,22338,38442,22586,27018,32948,21682,23822,22524,30869,40442,20316,21066,21643,25662,26152,26388,26613,31364,31574,32034,37679,26716,39853,31545,21273,20874,21047,23519,25334,25774,25830,26413,27578,34217,38609,30352,39894,25420,37638,39851,30399,26194,19977,20632,21442,23665,24808,25746,25955,26719,29158,29642,29987,31639,32386,34453,35715,36059,37240,39184,26028,26283,27531,20181,20180,20282,20351,21050,21496,21490,21987,22235,22763,22987,22985,23039,23376,23629,24066,24107,24535,24605,25351,25903,23388,26031,26045,26088,26525,27490,27515,27663,29509,31049,31169,31992,32025,32043,32930,33026,33267,35222,35422,35433,35430,35468,35566,36039,36060,38604,39164,27503,20107,20284,20365,20816,23383,23546,24904,25345,26178,27425,28363,27835,29246,29885,30164,30913,31034,32780,32819,33258,33940,36766,27728,40575,24335,35672,40235,31482,36600,23437,38635,19971,21489,22519,22833,23241,23460,24713,28287,28422,30142,36074,23455,34048,31712,20594,26612,33437,23649,34122,32286,33294,20889,23556,25448,36198,26012,29038,31038,32023,32773,35613,36554,36974,34503,37034,20511,21242,23610,26451,28796,29237,37196,37320,37675,33509,23490,24369,24825,20027,21462,23432,25163,26417,27530,29417,29664,31278,33131,36259,37202,39318,20754,21463,21610,23551,25480,27193,32172,38656,22234,21454,21608,23447,23601,24030,20462,24833,25342,27954,31168,31179,32066,32333,32722,33261,33311,33936,34886,35186,35728,36468,36655,36913,37195,37228,38598,37276,20160,20303,20805,21313,24467,25102,26580,27713,28171,29539,32294,37325,37507,21460,22809,23487,28113,31069,32302,31899,22654,29087,20986,34899,36848,20426,23803,26149,30636,31459,33308,39423,20934,24490,26092,26991,27529,28147,28310,28516,30462,32020,24033,36981,37255,38918,20966,21021,25152,26257,26329,28186,24246,32210,32626,26360,34223,34295,35576,21161,21465,22899,24207,24464,24661,37604,38500,20663,20767,21213,21280,21319,21484,21736,21830,21809,22039,22888,22974,23100,23477,23558,23567,23569,23578,24196,24202,24288,24432,25215,25220,25307,25484,25463,26119,26124,26157,26230,26494,26786,27167,27189,27836,28040,28169,28248,28988,28966,29031,30151,30465,30813,30977,31077,31216,31456,31505,31911,32057,32918,33750,33931,34121,34909,35059,35359,35388,35412,35443,35937,36062,37284,37478,37758,37912,38556,38808,19978,19976,19998,20055,20887,21104,22478,22580,22732,23330,24120,24773,25854,26465,26454,27972,29366,30067,31331,33976,35698,37304,37664,22065,22516,39166,25325,26893,27542,29165,32340,32887,33394,35302,39135,34645,36785,23611,20280,20449,20405,21767,23072,23517,23529,24515,24910,25391,26032,26187,26862,27035,28024,28145,30003,30137,30495,31070,31206,32051,33251,33455,34218,35242,35386,36523,36763,36914,37341,38663,20154,20161,20995,22645,22764,23563,29978,23613,33102,35338,36805,38499,38765,31525,35535,38920,37218,22259,21416,36887,21561,22402,24101,25512,27700,28810,30561,31883,32736,34928,36930,37204,37648,37656,38543,29790,39620,23815,23913,25968,26530,36264,38619,25454,26441,26905,33733,38935,38592,35070,28548,25722,23544,19990,28716,30045,26159,20932,21046,21218,22995,24449,24615,25104,25919,25972,26143,26228,26866,26646,27491,28165,29298,29983,30427,31934,32854,22768,35069,35199,35488,35475,35531,36893,37266,38738,38745,25993,31246,33030,38587,24109,24796,25114,26021,26132,26512,30707,31309,31821,32318,33034,36012,36196,36321,36447,30889,20999,25305,25509,25666,25240,35373,31363,31680,35500,38634,32118,33292,34633,20185,20808,21315,21344,23459,23554,23574,24029,25126,25159,25776,26643,26676,27849,27973,27927,26579,28508,29006,29053,26059,31359,31661,32218,32330,32680,33146,33307,33337,34214,35438,36046,36341,36984,36983,37549,37521,38275,39854,21069,21892,28472,28982,20840,31109,32341,33203,31950,22092,22609,23720,25514,26366,26365,26970,29401,30095,30094,30990,31062,31199,31895,32032,32068,34311,35380,38459,36961,40736,20711,21109,21452,21474,20489,21930,22766,22863,29245,23435,23652,21277,24803,24819,25436,25475,25407,25531,25805,26089,26361,24035,27085,27133,28437,29157,20105,30185,30456,31379,31967,32207,32156,32865,33609,33624,33900,33980,34299,35013,36208,36865,36973,37783,38684,39442,20687,22679,24974,33235,34101,36104,36896,20419,20596,21063,21363,24687,25417,26463,28204,36275,36895,20439,23646,36042,26063,32154,21330,34966,20854,25539,23384,23403,23562,25613,26449,36956,20182,22810,22826,27760,35409,21822,22549,22949,24816,25171,26561,33333,26965,38464,39364,39464,20307,22534,23550,32784,23729,24111,24453,24608,24907,25140,26367,27888,28382,32974,33151,33492,34955,36024,36864,36910,38538,40667,39899,20195,21488,22823,31532,37261,38988,40441,28381,28711,21331,21828,23429,25176,25246,25299,27810,28655,29730,35351,37944,28609,35582,33592,20967,34552,21482,21481,20294,36948,36784,22890,33073,24061,31466,36799,26842,35895,29432,40008,27197,35504,20025,21336,22022,22374,25285,25506,26086,27470,28129,28251,28845,30701,31471,31658,32187,32829,32966,34507,35477,37723,22243,22727,24382,26029,26262,27264,27573,30007,35527,20516,30693,22320,24347,24677,26234,27744,30196,31258,32622,33268,34584,36933,39347,31689,30044,31481,31569,33988,36880,31209,31378,33590,23265,30528,20013,20210,23449,24544,25277,26172,26609,27880,34411,34935,35387,37198,37619,39376,27159,28710,29482,33511,33879,36015,19969,20806,20939,21899,23541,24086,24115,24193,24340,24373,24427,24500,25074,25361,26274,26397,28526,29266,30010,30522,32884,33081,33144,34678,35519,35548,36229,36339,37530,38263,38914,40165,21189,25431,30452,26389,27784,29645,36035,37806,38515,27941,22684,26894,27084,36861,37786,30171,36890,22618,26626,25524,27131,20291,28460,26584,36795,34086,32180,37716,26943,28528,22378,22775,23340,32044,29226,21514,37347,40372,20141,20302,20572,20597,21059,35998,21576,22564,23450,24093,24213,24237,24311,24351,24716,25269,25402,25552,26799,27712,30855,31118,31243,32224,33351,35330,35558,36420,36883,37048,37165,37336,40718,27877,25688,25826,25973,28404,30340,31515,36969,37841,28346,21746,24505,25764,36685,36845,37444,20856,22635,22825,23637,24215,28155,32399,29980,36028,36578,39003,28857,20253,27583,28593,30000,38651,20814,21520,22581,22615,22956,23648,24466,26007,26460,28193,30331,33759,36077,36884,37117,37709,30757,30778,21162,24230,22303,22900,24594,20498,20826,20908,20941,20992,21776,22612,22616,22871,23445,23798,23947,24764,25237,25645,26481,26691,26812,26847,30423,28120,28271,28059,28783,29128,24403,30168,31095,31561,31572,31570,31958,32113,21040,33891,34153,34276,35342,35588,35910,36367,36867,36879,37913,38518,38957,39472,38360,20685,21205,21516,22530,23566,24999,25758,27934,30643,31461,33012,33796,36947,37509,23776,40199,21311,24471,24499,28060,29305,30563,31167,31716,27602,29420,35501,26627,27233,20984,31361,26932,23626,40182,33515,23493,37193,28702,22136,23663,24775,25958,27788,35930,36929,38931,21585,26311,37389,22856,37027,20869,20045,20970,34201,35598,28760,25466,37707,26978,39348,32260,30071,21335,26976,36575,38627,27741,20108,23612,24336,36841,21250,36049,32905,34425,24319,26085,20083,20837,22914,23615,38894,20219,22922,24525,35469,28641,31152,31074,23527,33905,29483,29105,24180,24565,25467,25754,29123,31896,20035,24316,20043,22492,22178,24745,28611,32013,33021,33075,33215,36786,35223,34468,24052,25226,25773,35207,26487,27874,27966,29750,30772,23110,32629,33453,39340,20467,24259,25309,25490,25943,26479,30403,29260,32972,32954,36649,37197,20493,22521,23186,26757,26995,29028,29437,36023,22770,36064,38506,36889,34687,31204,30695,33833,20271,21093,21338,25293,26575,27850,30333,31636,31893,33334,34180,36843,26333,28448,29190,32283,33707,39361,40614,20989,31665,30834,31672,32903,31560,27368,24161,32908,30033,30048,20843,37474,28300,30330,37271,39658,20240,32624,25244,31567,38309,40169,22138,22617,34532,38588,20276,21028,21322,21453,21467,24070,25644,26001,26495,27710,27726,29256,29359,29677,30036,32321,33324,34281,36009,31684,37318,29033,38930,39151,25405,26217,30058,30436,30928,34115,34542,21290,21329,21542,22915,24199,24444,24754,25161,25209,25259,26000,27604,27852,30130,30382,30865,31192,32203,32631,32933,34987,35513,36027,36991,38750,39131,27147,31800,20633,23614,24494,26503,27608,29749,30473,32654,40763,26570,31255,21305,30091,39661,24422,33181,33777,32920,24380,24517,30050,31558,36924,26727,23019,23195,32016,30334,35628,20469,24426,27161,27703,28418,29922,31080,34920,35413,35961,24287,25551,30149,31186,33495,37672,37618,33948,34541,39981,21697,24428,25996,27996,28693,36007,36051,38971,25935,29942,19981,20184,22496,22827,23142,23500,20904,24067,24220,24598,25206,25975,26023,26222,28014,29238,31526,33104,33178,33433,35676,36000,36070,36212,38428,38468,20398,25771,27494,33310,33889,34154,37096,23553,26963,39080,33914,34135,20239,21103,24489,24133,26381,31119,33145,35079,35206,28149,24343,25173,27832,20175,29289,39826,20998,21563,22132,22707,24996,25198,28954,22894,31881,31966,32027,38640,25991,32862,19993,20341,20853,22592,24163,24179,24330,26564,20006,34109,38281,38491,31859,38913,20731,22721,30294,30887,21029,30629,34065,31622,20559,22793,29255,31687,32232,36794,36820,36941,20415,21193,23081,24321,38829,20445,33303,37610,22275,25429,27497,29995,35036,36628,31298,21215,22675,24917,25098,26286,27597,31807,33769,20515,20472,21253,21574,22577,22857,23453,23792,23791,23849,24214,25265,25447,25918,26041,26379,27861,27873,28921,30770,32299,32990,33459,33804,34028,34562,35090,35370,35914,37030,37586,39165,40179,40300,20047,20129,20621,21078,22346,22952,24125,24536,24537,25151,26292,26395,26576,26834,20882,32033,32938,33192,35584,35980,36031,37502,38450,21536,38956,21271,20693,21340,22696,25778,26420,29287,30566,31302,37350,21187,27809,27526,22528,24140,22868,26412,32763,20961,30406,25705,30952,39764,40635,22475,22969,26151,26522,27598,21737,27097,24149,33180,26517,39850,26622,40018,26717,20134,20451,21448,25273,26411,27819,36804,20397,32365,40639,19975,24930,28288,28459,34067,21619,26410,39749,24051,31637,23724,23494,34588,28234,34001,31252,33032,22937,31885,27665,30496,21209,22818,28961,29279,30683,38695,40289,26891,23167,23064,20901,21517,21629,26126,30431,36855,37528,40180,23018,29277,28357,20813,26825,32191,32236,38754,40634,25720,27169,33538,22916,23391,27611,29467,30450,32178,32791,33945,20786,26408,40665,30446,26466,21247,39173,23588,25147,31870,36016,21839,24758,32011,38272,21249,20063,20918,22812,29242,32822,37326,24357,30690,21380,24441,32004,34220,35379,36493,38742,26611,34222,37971,24841,24840,27833,30290,35565,36664,21807,20305,20778,21191,21451,23461,24189,24736,24962,25558,26377,26586,28263,28044,29494,29495,30001,31056,35029,35480,36938,37009,37109,38596,34701,22805,20104,20313,19982,35465,36671,38928,20653,24188,22934,23481,24248,25562,25594,25793,26332,26954,27096,27915,28342,29076,29992,31407,32650,32768,33865,33993,35201,35617,36362,36965,38525,39178,24958,25233,27442,27779,28020,32716,32764,28096,32645,34746,35064,26469,33713,38972,38647,27931,32097,33853,37226,20081,21365,23888,27396,28651,34253,34349,35239,21033,21519,23653,26446,26792,29702,29827,30178,35023,35041,37324,38626,38520,24459,29575,31435,33870,25504,30053,21129,27969,28316,29705,30041,30827,31890,38534,31452,40845,20406,24942,26053,34396,20102,20142,20698,20001,20940,23534,26009,26753,28092,29471,30274,30637,31260,31975,33391,35538,36988,37327,38517,38936,21147,32209,20523,21400,26519,28107,29136,29747,33256,36650,38563,40023,40607,29792,22593,28057,32047,39006,20196,20278,20363,20919,21169,23994,24604,29618,31036,33491,37428,38583,38646,38666,40599,40802,26278,27508,21015,21155,28872,35010,24265,24651,24976,28451,29001,31806,32244,32879,34030,36899,37676,21570,39791,27347,28809,36034,36335,38706,21172,23105,24266,24324,26391,27004,27028,28010,28431,29282,29436,31725,32769,32894,34635,37070,20845,40595,31108,32907,37682,35542,20525,21644,35441,27498,36036,33031,24785,26528,40434,20121,20120,39952,35435,34241,34152,26880,28286,30871,33109,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,24332,19984,19989,20010,20017,20022,20028,20031,20034,20054,20056,20098,20101,35947,20106,33298,24333,20110,20126,20127,20128,20130,20144,20147,20150,20174,20173,20164,20166,20162,20183,20190,20205,20191,20215,20233,20314,20272,20315,20317,20311,20295,20342,20360,20367,20376,20347,20329,20336,20369,20335,20358,20374,20760,20436,20447,20430,20440,20443,20433,20442,20432,20452,20453,20506,20520,20500,20522,20517,20485,20252,20470,20513,20521,20524,20478,20463,20497,20486,20547,20551,26371,20565,20560,20552,20570,20566,20588,20600,20608,20634,20613,20660,20658,20681,20682,20659,20674,20694,20702,20709,20717,20707,20718,20729,20725,20745,20737,20738,20758,20757,20756,20762,20769,20794,20791,20796,20795,20799,20800,20818,20812,20820,20834,31480,20841,20842,20846,20864,20866,22232,20876,20873,20879,20881,20883,20885,20886,20900,20902,20898,20905,20906,20907,20915,20913,20914,20912,20917,20925,20933,20937,20955,20960,34389,20969,20973,20976,20981,20990,20996,21003,21012,21006,21031,21034,21038,21043,21049,21071,21060,21067,21068,21086,21076,21098,21108,21097,21107,21119,21117,21133,21140,21138,21105,21128,21137,36776,36775,21164,21165,21180,21173,21185,21197,21207,21214,21219,21222,39149,21216,21235,21237,21240,21241,21254,21256,30008,21261,21264,21263,21269,21274,21283,21295,21297,21299,21304,21312,21318,21317,19991,21321,21325,20950,21342,21353,21358,22808,21371,21367,21378,21398,21408,21414,21413,21422,21424,21430,21443,31762,38617,21471,26364,29166,21486,21480,21485,21498,21505,21565,21568,21548,21549,21564,21550,21558,21545,21533,21582,21647,21621,21646,21599,21617,21623,21616,21650,21627,21632,21622,21636,21648,21638,21703,21666,21688,21669,21676,21700,21704,21672,21675,21698,21668,21694,21692,21720,21733,21734,21775,21780,21757,21742,21741,21754,21730,21817,21824,21859,21836,21806,21852,21829,21846,21847,21816,21811,21853,21913,21888,21679,21898,21919,21883,21886,21912,21918,21934,21884,21891,21929,21895,21928,21978,21957,21983,21956,21980,21988,21972,22036,22007,22038,22014,22013,22043,22009,22094,22096,29151,22068,22070,22066,22072,22123,22116,22063,22124,22122,22150,22144,22154,22176,22164,22159,22181,22190,22198,22196,22210,22204,22209,22211,22208,22216,22222,22225,22227,22231,22254,22265,22272,22271,22276,22281,22280,22283,22285,22291,22296,22294,21959,22300,22310,22327,22328,22350,22331,22336,22351,22377,22464,22408,22369,22399,22409,22419,22432,22451,22436,22442,22448,22467,22470,22484,22482,22483,22538,22486,22499,22539,22553,22557,22642,22561,22626,22603,22640,27584,22610,22589,22649,22661,22713,22687,22699,22714,22750,22715,22712,22702,22725,22739,22737,22743,22745,22744,22757,22748,22756,22751,22767,22778,22777,22779,22780,22781,22786,22794,22800,22811,26790,22821,22828,22829,22834,22840,22846,31442,22869,22864,22862,22874,22872,22882,22880,22887,22892,22889,22904,22913,22941,20318,20395,22947,22962,22982,23016,23004,22925,23001,23002,23077,23071,23057,23068,23049,23066,23104,23148,23113,23093,23094,23138,23146,23194,23228,23230,23243,23234,23229,23267,23255,23270,23273,23254,23290,23291,23308,23307,23318,23346,23248,23338,23350,23358,23363,23365,23360,23377,23381,23386,23387,23397,23401,23408,23411,23413,23416,25992,23418,23424,23427,23462,23480,23491,23495,23497,23508,23504,23524,23526,23522,23518,23525,23531,23536,23542,23539,23557,23559,23560,23565,23571,23584,23586,23592,23608,23609,23617,23622,23630,23635,23632,23631,23409,23660,23662,20066,23670,23673,23692,23697,23700,22939,23723,23739,23734,23740,23735,23749,23742,23751,23769,23785,23805,23802,23789,23948,23786,23819,23829,23831,23900,23839,23835,23825,23828,23842,23834,23833,23832,23884,23890,23886,23883,23916,23923,23926,23943,23940,23938,23970,23965,23980,23982,23997,23952,23991,23996,24009,24013,24019,24018,24022,24027,24043,24050,24053,24075,24090,24089,24081,24091,24118,24119,24132,24131,24128,24142,24151,24148,24159,24162,24164,24135,24181,24182,24186,40636,24191,24224,24257,24258,24264,24272,24271,24278,24291,24285,24282,24283,24290,24289,24296,24297,24300,24305,24307,24304,24308,24312,24318,24323,24329,24413,24412,24331,24337,24342,24361,24365,24376,24385,24392,24396,24398,24367,24401,24406,24407,24409,24417,24429,24435,24439,24451,24450,24447,24458,24456,24465,24455,24478,24473,24472,24480,24488,24493,24508,24534,24571,24548,24568,24561,24541,24755,24575,24609,24672,24601,24592,24617,24590,24625,24603,24597,24619,24614,24591,24634,24666,24641,24682,24695,24671,24650,24646,24653,24675,24643,24676,24642,24684,24683,24665,24705,24717,24807,24707,24730,24708,24731,24726,24727,24722,24743,24715,24801,24760,24800,24787,24756,24560,24765,24774,24757,24792,24909,24853,24838,24822,24823,24832,24820,24826,24835,24865,24827,24817,24845,24846,24903,24894,24872,24871,24906,24895,24892,24876,24884,24893,24898,24900,24947,24951,24920,24921,24922,24939,24948,24943,24933,24945,24927,24925,24915,24949,24985,24982,24967,25004,24980,24986,24970,24977,25003,25006,25036,25034,25033,25079,25032,25027,25030,25018,25035,32633,25037,25062,25059,25078,25082,25076,25087,25085,25084,25086,25088,25096,25097,25101,25100,25108,25115,25118,25121,25130,25134,25136,25138,25139,25153,25166,25182,25187,25179,25184,25192,25212,25218,25225,25214,25234,25235,25238,25300,25219,25236,25303,25297,25275,25295,25343,25286,25812,25288,25308,25292,25290,25282,25287,25243,25289,25356,25326,25329,25383,25346,25352,25327,25333,25424,25406,25421,25628,25423,25494,25486,25472,25515,25462,25507,25487,25481,25503,25525,25451,25449,25534,25577,25536,25542,25571,25545,25554,25590,25540,25622,25652,25606,25619,25638,25654,25885,25623,25640,25615,25703,25711,25718,25678,25898,25749,25747,25765,25769,25736,25788,25818,25810,25797,25799,25787,25816,25794,25841,25831,33289,25824,25825,25260,25827,25839,25900,25846,25844,25842,25850,25856,25853,25880,25884,25861,25892,25891,25899,25908,25909,25911,25910,25912,30027,25928,25942,25941,25933,25944,25950,25949,25970,25976,25986,25987,35722,26011,26015,26027,26039,26051,26054,26049,26052,26060,26066,26075,26073,26080,26081,26097,26482,26122,26115,26107,26483,26165,26166,26164,26140,26191,26180,26185,26177,26206,26205,26212,26215,26216,26207,26210,26224,26243,26248,26254,26249,26244,26264,26269,26305,26297,26313,26302,26300,26308,26296,26326,26330,26336,26175,26342,26345,26352,26357,26359,26383,26390,26398,26406,26407,38712,26414,26431,26422,26433,26424,26423,26438,26462,26464,26457,26467,26468,26505,26480,26537,26492,26474,26508,26507,26534,26529,26501,26551,26607,26548,26604,26547,26601,26552,26596,26590,26589,26594,26606,26553,26574,26566,26599,27292,26654,26694,26665,26688,26701,26674,26702,26803,26667,26713,26723,26743,26751,26783,26767,26797,26772,26781,26779,26755,27310,26809,26740,26805,26784,26810,26895,26765,26750,26881,26826,26888,26840,26914,26918,26849,26892,26829,26836,26855,26837,26934,26898,26884,26839,26851,26917,26873,26848,26863,26920,26922,26906,26915,26913,26822,27001,26999,26972,27000,26987,26964,27006,26990,26937,26996,26941,26969,26928,26977,26974,26973,27009,26986,27058,27054,27088,27071,27073,27091,27070,27086,23528,27082,27101,27067,27075,27047,27182,27025,27040,27036,27029,27060,27102,27112,27138,27163,27135,27402,27129,27122,27111,27141,27057,27166,27117,27156,27115,27146,27154,27329,27171,27155,27204,27148,27250,27190,27256,27207,27234,27225,27238,27208,27192,27170,27280,27277,27296,27268,27298,27299,27287,34327,27323,27331,27330,27320,27315,27308,27358,27345,27359,27306,27354,27370,27387,27397,34326,27386,27410,27414,39729,27423,27448,27447,30428,27449,39150,27463,27459,27465,27472,27481,27476,27483,27487,27489,27512,27513,27519,27520,27524,27523,27533,27544,27541,27550,27556,27562,27563,27567,27570,27569,27571,27575,27580,27590,27595,27603,27615,27628,27627,27635,27631,40638,27656,27667,27668,27675,27684,27683,27742,27733,27746,27754,27778,27789,27802,27777,27803,27774,27752,27763,27794,27792,27844,27889,27859,27837,27863,27845,27869,27822,27825,27838,27834,27867,27887,27865,27882,27935,34893,27958,27947,27965,27960,27929,27957,27955,27922,27916,28003,28051,28004,27994,28025,27993,28046,28053,28644,28037,28153,28181,28170,28085,28103,28134,28088,28102,28140,28126,28108,28136,28114,28101,28154,28121,28132,28117,28138,28142,28205,28270,28206,28185,28274,28255,28222,28195,28267,28203,28278,28237,28191,28227,28218,28238,28196,28415,28189,28216,28290,28330,28312,28361,28343,28371,28349,28335,28356,28338,28372,28373,28303,28325,28354,28319,28481,28433,28748,28396,28408,28414,28479,28402,28465,28399,28466,28364,28478,28435,28407,28550,28538,28536,28545,28544,28527,28507,28659,28525,28546,28540,28504,28558,28561,28610,28518,28595,28579,28577,28580,28601,28614,28586,28639,28629,28652,28628,28632,28657,28654,28635,28681,28683,28666,28689,28673,28687,28670,28699,28698,28532,28701,28696,28703,28720,28734,28722,28753,28771,28825,28818,28847,28913,28844,28856,28851,28846,28895,28875,28893,28889,28937,28925,28956,28953,29029,29013,29064,29030,29026,29004,29014,29036,29071,29179,29060,29077,29096,29100,29143,29113,29118,29138,29129,29140,29134,29152,29164,29159,29173,29180,29177,29183,29197,29200,29211,29224,29229,29228,29232,29234,29243,29244,29247,29248,29254,29259,29272,29300,29310,29314,29313,29319,29330,29334,29346,29351,29369,29362,29379,29382,29380,29390,29394,29410,29408,29409,29433,29431,20495,29463,29450,29468,29462,29469,29492,29487,29481,29477,29502,29518,29519,40664,29527,29546,29544,29552,29560,29557,29563,29562,29640,29619,29646,29627,29632,29669,29678,29662,29858,29701,29807,29733,29688,29746,29754,29781,29759,29791,29785,29761,29788,29801,29808,29795,29802,29814,29822,29835,29854,29863,29898,29903,29908,29681,29920,29923,29927,29929,29934,29938,29936,29937,29944,29943,29956,29955,29957,29964,29966,29965,29973,29971,29982,29990,29996,30012,30020,30029,30026,30025,30043,30022,30042,30057,30052,30055,30059,30061,30072,30070,30086,30087,30068,30090,30089,30082,30100,30106,30109,30117,30115,30146,30131,30147,30133,30141,30136,30140,30129,30157,30154,30162,30169,30179,30174,30206,30207,30204,30209,30192,30202,30194,30195,30219,30221,30217,30239,30247,30240,30241,30242,30244,30260,30256,30267,30279,30280,30278,30300,30296,30305,30306,30312,30313,30314,30311,30316,30320,30322,30326,30328,30332,30336,30339,30344,30347,30350,30358,30355,30361,30362,30384,30388,30392,30393,30394,30402,30413,30422,30418,30430,30433,30437,30439,30442,34351,30459,30472,30471,30468,30505,30500,30494,30501,30502,30491,30519,30520,30535,30554,30568,30571,30555,30565,30591,30590,30585,30606,30603,30609,30624,30622,30640,30646,30649,30655,30652,30653,30651,30663,30669,30679,30682,30684,30691,30702,30716,30732,30738,31014,30752,31018,30789,30862,30836,30854,30844,30874,30860,30883,30901,30890,30895,30929,30918,30923,30932,30910,30908,30917,30922,30956,30951,30938,30973,30964,30983,30994,30993,31001,31020,31019,31040,31072,31063,31071,31066,31061,31059,31098,31103,31114,31133,31143,40779,31146,31150,31155,31161,31162,31177,31189,31207,31212,31201,31203,31240,31245,31256,31257,31264,31263,31104,31281,31291,31294,31287,31299,31319,31305,31329,31330,31337,40861,31344,31353,31357,31368,31383,31381,31384,31382,31401,31432,31408,31414,31429,31428,31423,36995,31431,31434,31437,31439,31445,31443,31449,31450,31453,31457,31458,31462,31469,31472,31490,31503,31498,31494,31539,31512,31513,31518,31541,31528,31542,31568,31610,31492,31565,31499,31564,31557,31605,31589,31604,31591,31600,31601,31596,31598,31645,31640,31647,31629,31644,31642,31627,31634,31631,31581,31641,31691,31681,31692,31695,31668,31686,31709,31721,31761,31764,31718,31717,31840,31744,31751,31763,31731,31735,31767,31757,31734,31779,31783,31786,31775,31799,31787,31805,31820,31811,31828,31823,31808,31824,31832,31839,31844,31830,31845,31852,31861,31875,31888,31908,31917,31906,31915,31905,31912,31923,31922,31921,31918,31929,31933,31936,31941,31938,31960,31954,31964,31970,39739,31983,31986,31988,31990,31994,32006,32002,32028,32021,32010,32069,32075,32046,32050,32063,32053,32070,32115,32086,32078,32114,32104,32110,32079,32099,32147,32137,32091,32143,32125,32155,32186,32174,32163,32181,32199,32189,32171,32317,32162,32175,32220,32184,32159,32176,32216,32221,32228,32222,32251,32242,32225,32261,32266,32291,32289,32274,32305,32287,32265,32267,32290,32326,32358,32315,32309,32313,32323,32311,32306,32314,32359,32349,32342,32350,32345,32346,32377,32362,32361,32380,32379,32387,32213,32381,36782,32383,32392,32393,32396,32402,32400,32403,32404,32406,32398,32411,32412,32568,32570,32581,32588,32589,32590,32592,32593,32597,32596,32600,32607,32608,32616,32617,32615,32632,32642,32646,32643,32648,32647,32652,32660,32670,32669,32666,32675,32687,32690,32697,32686,32694,32696,35697,32709,32710,32714,32725,32724,32737,32742,32745,32755,32761,39132,32774,32772,32779,32786,32792,32793,32796,32801,32808,32831,32827,32842,32838,32850,32856,32858,32863,32866,32872,32883,32882,32880,32886,32889,32893,32895,32900,32902,32901,32923,32915,32922,32941,20880,32940,32987,32997,32985,32989,32964,32986,32982,33033,33007,33009,33051,33065,33059,33071,33099,38539,33094,33086,33107,33105,33020,33137,33134,33125,33126,33140,33155,33160,33162,33152,33154,33184,33173,33188,33187,33119,33171,33193,33200,33205,33214,33208,33213,33216,33218,33210,33225,33229,33233,33241,33240,33224,33242,33247,33248,33255,33274,33275,33278,33281,33282,33285,33287,33290,33293,33296,33302,33321,33323,33336,33331,33344,33369,33368,33373,33370,33375,33380,33378,33384,33386,33387,33326,33393,33399,33400,33406,33421,33426,33451,33439,33467,33452,33505,33507,33503,33490,33524,33523,33530,33683,33539,33531,33529,33502,33542,33500,33545,33497,33589,33588,33558,33586,33585,33600,33593,33616,33605,33583,33579,33559,33560,33669,33690,33706,33695,33698,33686,33571,33678,33671,33674,33660,33717,33651,33653,33696,33673,33704,33780,33811,33771,33742,33789,33795,33752,33803,33729,33783,33799,33760,33778,33805,33826,33824,33725,33848,34054,33787,33901,33834,33852,34138,33924,33911,33899,33965,33902,33922,33897,33862,33836,33903,33913,33845,33994,33890,33977,33983,33951,34009,33997,33979,34010,34000,33985,33990,34006,33953,34081,34047,34036,34071,34072,34092,34079,34069,34068,34044,34112,34147,34136,34120,34113,34306,34123,34133,34176,34212,34184,34193,34186,34216,34157,34196,34203,34282,34183,34204,34167,34174,34192,34249,34234,34255,34233,34256,34261,34269,34277,34268,34297,34314,34323,34315,34302,34298,34310,34338,34330,34352,34367,34381,20053,34388,34399,34407,34417,34451,34467,34473,34474,34443,34444,34486,34479,34500,34502,34480,34505,34851,34475,34516,34526,34537,34540,34527,34523,34543,34578,34566,34568,34560,34563,34555,34577,34569,34573,34553,34570,34612,34623,34615,34619,34597,34601,34586,34656,34655,34680,34636,34638,34676,34647,34664,34670,34649,34643,34659,34666,34821,34722,34719,34690,34735,34763,34749,34752,34768,38614,34731,34756,34739,34759,34758,34747,34799,34802,34784,34831,34829,34814,34806,34807,34830,34770,34833,34838,34837,34850,34849,34865,34870,34873,34855,34875,34884,34882,34898,34905,34910,34914,34923,34945,34942,34974,34933,34941,34997,34930,34946,34967,34962,34990,34969,34978,34957,34980,34992,35007,34993,35011,35012,35028,35032,35033,35037,35065,35074,35068,35060,35048,35058,35076,35084,35082,35091,35139,35102,35109,35114,35115,35137,35140,35131,35126,35128,35148,35101,35168,35166,35174,35172,35181,35178,35183,35188,35191,35198,35203,35208,35210,35219,35224,35233,35241,35238,35244,35247,35250,35258,35261,35263,35264,35290,35292,35293,35303,35316,35320,35331,35350,35344,35340,35355,35357,35365,35382,35393,35419,35410,35398,35400,35452,35437,35436,35426,35461,35458,35460,35496,35489,35473,35493,35494,35482,35491,35524,35533,35522,35546,35563,35571,35559,35556,35569,35604,35552,35554,35575,35550,35547,35596,35591,35610,35553,35606,35600,35607,35616,35635,38827,35622,35627,35646,35624,35649,35660,35663,35662,35657,35670,35675,35674,35691,35679,35692,35695,35700,35709,35712,35724,35726,35730,35731,35734,35737,35738,35898,35905,35903,35912,35916,35918,35920,35925,35938,35948,35960,35962,35970,35977,35973,35978,35981,35982,35988,35964,35992,25117,36013,36010,36029,36018,36019,36014,36022,36040,36033,36068,36067,36058,36093,36090,36091,36100,36101,36106,36103,36111,36109,36112,40782,36115,36045,36116,36118,36199,36205,36209,36211,36225,36249,36290,36286,36282,36303,36314,36310,36300,36315,36299,36330,36331,36319,36323,36348,36360,36361,36351,36381,36382,36368,36383,36418,36405,36400,36404,36426,36423,36425,36428,36432,36424,36441,36452,36448,36394,36451,36437,36470,36466,36476,36481,36487,36485,36484,36491,36490,36499,36497,36500,36505,36522,36513,36524,36528,36550,36529,36542,36549,36552,36555,36571,36579,36604,36603,36587,36606,36618,36613,36629,36626,36633,36627,36636,36639,36635,36620,36646,36659,36667,36665,36677,36674,36670,36684,36681,36678,36686,36695,36700,36706,36707,36708,36764,36767,36771,36781,36783,36791,36826,36837,36834,36842,36847,36999,36852,36869,36857,36858,36881,36885,36897,36877,36894,36886,36875,36903,36918,36917,36921,36856,36943,36944,36945,36946,36878,36937,36926,36950,36952,36958,36968,36975,36982,38568,36978,36994,36989,36993,36992,37002,37001,37007,37032,37039,37041,37045,37090,37092,25160,37083,37122,37138,37145,37170,37168,37194,37206,37208,37219,37221,37225,37235,37234,37259,37257,37250,37282,37291,37295,37290,37301,37300,37306,37312,37313,37321,37323,37328,37334,37343,37345,37339,37372,37365,37366,37406,37375,37396,37420,37397,37393,37470,37463,37445,37449,37476,37448,37525,37439,37451,37456,37532,37526,37523,37531,37466,37583,37561,37559,37609,37647,37626,37700,37678,37657,37666,37658,37667,37690,37685,37691,37724,37728,37756,37742,37718,37808,37804,37805,37780,37817,37846,37847,37864,37861,37848,37827,37853,37840,37832,37860,37914,37908,37907,37891,37895,37904,37942,37931,37941,37921,37946,37953,37970,37956,37979,37984,37986,37982,37994,37417,38000,38005,38007,38013,37978,38012,38014,38017,38015,38274,38279,38282,38292,38294,38296,38297,38304,38312,38311,38317,38332,38331,38329,38334,38346,28662,38339,38349,38348,38357,38356,38358,38364,38369,38373,38370,38433,38440,38446,38447,38466,38476,38479,38475,38519,38492,38494,38493,38495,38502,38514,38508,38541,38552,38549,38551,38570,38567,38577,38578,38576,38580,38582,38584,38585,38606,38603,38601,38605,35149,38620,38669,38613,38649,38660,38662,38664,38675,38670,38673,38671,38678,38681,38692,38698,38704,38713,38717,38718,38724,38726,38728,38722,38729,38748,38752,38756,38758,38760,21202,38763,38769,38777,38789,38780,38785,38778,38790,38795,38799,38800,38812,38824,38822,38819,38835,38836,38851,38854,38856,38859,38876,38893,40783,38898,31455,38902,38901,38927,38924,38968,38948,38945,38967,38973,38982,38991,38987,39019,39023,39024,39025,39028,39027,39082,39087,39089,39094,39108,39107,39110,39145,39147,39171,39177,39186,39188,39192,39201,39197,39198,39204,39200,39212,39214,39229,39230,39234,39241,39237,39248,39243,39249,39250,39244,39253,39319,39320,39333,39341,39342,39356,39391,39387,39389,39384,39377,39405,39406,39409,39410,39419,39416,39425,39439,39429,39394,39449,39467,39479,39493,39490,39488,39491,39486,39509,39501,39515,39511,39519,39522,39525,39524,39529,39531,39530,39597,39600,39612,39616,39631,39633,39635,39636,39646,39647,39650,39651,39654,39663,39659,39662,39668,39665,39671,39675,39686,39704,39706,39711,39714,39715,39717,39719,39720,39721,39722,39726,39727,39730,39748,39747,39759,39757,39758,39761,39768,39796,39827,39811,39825,39830,39831,39839,39840,39848,39860,39872,39882,39865,39878,39887,39889,39890,39907,39906,39908,39892,39905,39994,39922,39921,39920,39957,39956,39945,39955,39948,39942,39944,39954,39946,39940,39982,39963,39973,39972,39969,39984,40007,39986,40006,39998,40026,40032,40039,40054,40056,40167,40172,40176,40201,40200,40171,40195,40198,40234,40230,40367,40227,40223,40260,40213,40210,40257,40255,40254,40262,40264,40285,40286,40292,40273,40272,40281,40306,40329,40327,40363,40303,40314,40346,40356,40361,40370,40388,40385,40379,40376,40378,40390,40399,40386,40409,40403,40440,40422,40429,40431,40445,40474,40475,40478,40565,40569,40573,40577,40584,40587,40588,40594,40597,40593,40605,40613,40617,40632,40618,40621,38753,40652,40654,40655,40656,40660,40668,40670,40669,40672,40677,40680,40687,40692,40694,40695,40697,40699,40700,40701,40711,40712,30391,40725,40737,40748,40766,40778,40786,40788,40803,40799,40800,40801,40806,40807,40812,40810,40823,40818,40822,40853,40860,40864,22575,27079,36953,29796,20956,29081,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,65506,65508,65287,65282,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,65506,65508,65287,65282,12849,8470,8481,8757,32394,35100,37704,37512,34012,20425,28859,26161,26824,37625,26363,24389,20008,20193,20220,20224,20227,20281,20310,20370,20362,20378,20372,20429,20544,20514,20479,20510,20550,20592,20546,20628,20724,20696,20810,20836,20893,20926,20972,21013,21148,21158,21184,21211,21248,21255,21284,21362,21395,21426,21469,64014,21660,21642,21673,21759,21894,22361,22373,22444,22472,22471,64015,64016,22686,22706,22795,22867,22875,22877,22883,22948,22970,23382,23488,29999,23512,23532,23582,23718,23738,23797,23847,23891,64017,23874,23917,23992,23993,24016,24353,24372,24423,24503,24542,24669,24709,24714,24798,24789,24864,24818,24849,24887,24880,24984,25107,25254,25589,25696,25757,25806,25934,26112,26133,26171,26121,26158,26142,26148,26213,26199,26201,64018,26227,26265,26272,26290,26303,26362,26382,63785,26470,26555,26706,26560,26625,26692,26831,64019,26984,64020,27032,27106,27184,27243,27206,27251,27262,27362,27364,27606,27711,27740,27782,27759,27866,27908,28039,28015,28054,28076,28111,28152,28146,28156,28217,28252,28199,28220,28351,28552,28597,28661,28677,28679,28712,28805,28843,28943,28932,29020,28998,28999,64021,29121,29182,29361,29374,29476,64022,29559,29629,29641,29654,29667,29650,29703,29685,29734,29738,29737,29742,29794,29833,29855,29953,30063,30338,30364,30366,30363,30374,64023,30534,21167,30753,30798,30820,30842,31024,64024,64025,64026,31124,64027,31131,31441,31463,64028,31467,31646,64029,32072,32092,32183,32160,32214,32338,32583,32673,64030,33537,33634,33663,33735,33782,33864,33972,34131,34137,34155,64031,34224,64032,64033,34823,35061,35346,35383,35449,35495,35518,35551,64034,35574,35667,35711,36080,36084,36114,36214,64035,36559,64036,64037,36967,37086,64038,37141,37159,37338,37335,37342,37357,37358,37348,37349,37382,37392,37386,37434,37440,37436,37454,37465,37457,37433,37479,37543,37495,37496,37607,37591,37593,37584,64039,37589,37600,37587,37669,37665,37627,64040,37662,37631,37661,37634,37744,37719,37796,37830,37854,37880,37937,37957,37960,38290,63964,64041,38557,38575,38707,38715,38723,38733,38735,38737,38741,38999,39013,64042,64043,39207,64044,39326,39502,39641,39644,39797,39794,39823,39857,39867,39936,40304,40299,64045,40473,40657,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "jis0212":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25000,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37000,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "ibm866":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],
    "iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],
    "iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],
    "iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],
    "iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],
    "iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],
    "iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],
    "iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],
    "iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],
    "iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],
    "iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],
    "iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],
    "iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],
    "koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],
    "koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,1118,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,1038,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],
    "macintosh":[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],
    "windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],
    "windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],
    "windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],
    "windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],
    "windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],
    "windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],
    "windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],
    "windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],
    "windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],
    "windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],
    "x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]
  };

  // For strict environments where `this` inside the global scope
  // is `undefined`, take a pure object instead
  }(commonjsGlobal || {}));
  });

  var encoding$1 = createCommonjsModule(function (module) {
  // This is free and unencumbered software released into the public domain.
  // See LICENSE.md for more information.

  /**
   * @fileoverview Global |this| required for resolving indexes in node.
   * @suppress {globalThis}
   */
  (function(global) {

    // If we're in node require encoding-indexes and attach it to the global.
    if (module.exports &&
      !global["encoding-indexes"]) {
      global["encoding-indexes"] =
        encodingIndexes["encoding-indexes"];
    }

    //
    // Utilities
    //

    /**
     * @param {number} a The number to test.
     * @param {number} min The minimum value in the range, inclusive.
     * @param {number} max The maximum value in the range, inclusive.
     * @return {boolean} True if a >= min and a <= max.
     */
    function inRange(a, min, max) {
      return min <= a && a <= max;
    }

    /**
     * @param {!Array.<*>} array The array to check.
     * @param {*} item The item to look for in the array.
     * @return {boolean} True if the item appears in the array.
     */
    function includes(array, item) {
      return array.indexOf(item) !== -1;
    }

    var floor = Math.floor;

    /**
     * @param {*} o
     * @return {Object}
     */
    function ToDictionary(o) {
      if (o === undefined) return {};
      if (o === Object(o)) return o;
      throw TypeError('Could not convert argument to dictionary');
    }

    /**
     * @param {string} string Input string of UTF-16 code units.
     * @return {!Array.<number>} Code points.
     */
    function stringToCodePoints(string) {
      // https://heycam.github.io/webidl/#dfn-obtain-unicode

      // 1. Let S be the DOMString value.
      var s = String(string);

      // 2. Let n be the length of S.
      var n = s.length;

      // 3. Initialize i to 0.
      var i = 0;

      // 4. Initialize U to be an empty sequence of Unicode characters.
      var u = [];

      // 5. While i < n:
      while (i < n) {

        // 1. Let c be the code unit in S at index i.
        var c = s.charCodeAt(i);

        // 2. Depending on the value of c:

        // c < 0xD800 or c > 0xDFFF
        if (c < 0xD800 || c > 0xDFFF) {
          // Append to U the Unicode character with code point c.
          u.push(c);
        }

        // 0xDC00 ≤ c ≤ 0xDFFF
        else if (0xDC00 <= c && c <= 0xDFFF) {
          // Append to U a U+FFFD REPLACEMENT CHARACTER.
          u.push(0xFFFD);
        }

        // 0xD800 ≤ c ≤ 0xDBFF
        else if (0xD800 <= c && c <= 0xDBFF) {
          // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
          // CHARACTER.
          if (i === n - 1) {
            u.push(0xFFFD);
          }
          // 2. Otherwise, i < n−1:
          else {
            // 1. Let d be the code unit in S at index i+1.
            var d = s.charCodeAt(i + 1);

            // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
            if (0xDC00 <= d && d <= 0xDFFF) {
              // 1. Let a be c & 0x3FF.
              var a = c & 0x3FF;

              // 2. Let b be d & 0x3FF.
              var b = d & 0x3FF;

              // 3. Append to U the Unicode character with code point
              // 2^16+2^10*a+b.
              u.push(0x10000 + (a << 10) + b);

              // 4. Set i to i+1.
              i += 1;
            }

            // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
            // U+FFFD REPLACEMENT CHARACTER.
            else  {
              u.push(0xFFFD);
            }
          }
        }

        // 3. Set i to i+1.
        i += 1;
      }

      // 6. Return U.
      return u;
    }

    /**
     * @param {!Array.<number>} code_points Array of code points.
     * @return {string} string String of UTF-16 code units.
     */
    function codePointsToString(code_points) {
      var s = '';
      for (var i = 0; i < code_points.length; ++i) {
        var cp = code_points[i];
        if (cp <= 0xFFFF) {
          s += String.fromCharCode(cp);
        } else {
          cp -= 0x10000;
          s += String.fromCharCode((cp >> 10) + 0xD800,
                                   (cp & 0x3FF) + 0xDC00);
        }
      }
      return s;
    }


    //
    // Implementation of Encoding specification
    // https://encoding.spec.whatwg.org/
    //

    //
    // 4. Terminology
    //

    /**
     * An ASCII byte is a byte in the range 0x00 to 0x7F, inclusive.
     * @param {number} a The number to test.
     * @return {boolean} True if a is in the range 0x00 to 0x7F, inclusive.
     */
    function isASCIIByte(a) {
      return 0x00 <= a && a <= 0x7F;
    }

    /**
     * An ASCII code point is a code point in the range U+0000 to
     * U+007F, inclusive.
     */
    var isASCIICodePoint = isASCIIByte;


    /**
     * End-of-stream is a special token that signifies no more tokens
     * are in the stream.
     * @const
     */ var end_of_stream = -1;

    /**
     * A stream represents an ordered sequence of tokens.
     *
     * @constructor
     * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide
     * the stream.
     */
    function Stream(tokens) {
      /** @type {!Array.<number>} */
      this.tokens = [].slice.call(tokens);
      // Reversed as push/pop is more efficient than shift/unshift.
      this.tokens.reverse();
    }

    Stream.prototype = {
      /**
       * @return {boolean} True if end-of-stream has been hit.
       */
      endOfStream: function() {
        return !this.tokens.length;
      },

      /**
       * When a token is read from a stream, the first token in the
       * stream must be returned and subsequently removed, and
       * end-of-stream must be returned otherwise.
       *
       * @return {number} Get the next token from the stream, or
       * end_of_stream.
       */
       read: function() {
        if (!this.tokens.length)
          return end_of_stream;
         return this.tokens.pop();
       },

      /**
       * When one or more tokens are prepended to a stream, those tokens
       * must be inserted, in given order, before the first token in the
       * stream.
       *
       * @param {(number|!Array.<number>)} token The token(s) to prepend to the
       * stream.
       */
      prepend: function(token) {
        if (Array.isArray(token)) {
          var tokens = /**@type {!Array.<number>}*/(token);
          while (tokens.length)
            this.tokens.push(tokens.pop());
        } else {
          this.tokens.push(token);
        }
      },

      /**
       * When one or more tokens are pushed to a stream, those tokens
       * must be inserted, in given order, after the last token in the
       * stream.
       *
       * @param {(number|!Array.<number>)} token The tokens(s) to push to the
       * stream.
       */
      push: function(token) {
        if (Array.isArray(token)) {
          var tokens = /**@type {!Array.<number>}*/(token);
          while (tokens.length)
            this.tokens.unshift(tokens.shift());
        } else {
          this.tokens.unshift(token);
        }
      }
    };

    //
    // 5. Encodings
    //

    // 5.1 Encoders and decoders

    /** @const */
    var finished = -1;

    /**
     * @param {boolean} fatal If true, decoding errors raise an exception.
     * @param {number=} opt_code_point Override the standard fallback code point.
     * @return {number} The code point to insert on a decoding error.
     */
    function decoderError(fatal, opt_code_point) {
      if (fatal)
        throw TypeError('Decoder error');
      return opt_code_point || 0xFFFD;
    }

    /**
     * @param {number} code_point The code point that could not be encoded.
     * @return {number} Always throws, no value is actually returned.
     */
    function encoderError(code_point) {
      throw TypeError('The code point ' + code_point + ' could not be encoded.');
    }

    // 5.2 Names and labels

    // TODO: Define @typedef for Encoding: {name:string,labels:Array.<string>}
    // https://github.com/google/closure-compiler/issues/247

    /**
     * @param {string} label The encoding label.
     * @return {?{name:string,labels:Array.<string>}}
     */
    function getEncoding(label) {
      // 1. Remove any leading and trailing ASCII whitespace from label.
      label = String(label).trim().toLowerCase();

      // 2. If label is an ASCII case-insensitive match for any of the
      // labels listed in the table below, return the corresponding
      // encoding, and failure otherwise.
      if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {
        return label_to_encoding[label];
      }
      return null;
    }

    /**
     * Encodings table: https://encoding.spec.whatwg.org/encodings.json
     * @const
     * @type {!Array.<{
     *          heading: string,
     *          encodings: Array.<{name:string,labels:Array.<string>}>
     *        }>}
     */
    var encodings = [
      {
        "encodings": [
          {
            "labels": [
              "unicode-1-1-utf-8",
              "utf-8",
              "utf8"
            ],
            "name": "UTF-8"
          }
        ],
        "heading": "The Encoding"
      },
      {
        "encodings": [
          {
            "labels": [
              "866",
              "cp866",
              "csibm866",
              "ibm866"
            ],
            "name": "IBM866"
          },
          {
            "labels": [
              "csisolatin2",
              "iso-8859-2",
              "iso-ir-101",
              "iso8859-2",
              "iso88592",
              "iso_8859-2",
              "iso_8859-2:1987",
              "l2",
              "latin2"
            ],
            "name": "ISO-8859-2"
          },
          {
            "labels": [
              "csisolatin3",
              "iso-8859-3",
              "iso-ir-109",
              "iso8859-3",
              "iso88593",
              "iso_8859-3",
              "iso_8859-3:1988",
              "l3",
              "latin3"
            ],
            "name": "ISO-8859-3"
          },
          {
            "labels": [
              "csisolatin4",
              "iso-8859-4",
              "iso-ir-110",
              "iso8859-4",
              "iso88594",
              "iso_8859-4",
              "iso_8859-4:1988",
              "l4",
              "latin4"
            ],
            "name": "ISO-8859-4"
          },
          {
            "labels": [
              "csisolatincyrillic",
              "cyrillic",
              "iso-8859-5",
              "iso-ir-144",
              "iso8859-5",
              "iso88595",
              "iso_8859-5",
              "iso_8859-5:1988"
            ],
            "name": "ISO-8859-5"
          },
          {
            "labels": [
              "arabic",
              "asmo-708",
              "csiso88596e",
              "csiso88596i",
              "csisolatinarabic",
              "ecma-114",
              "iso-8859-6",
              "iso-8859-6-e",
              "iso-8859-6-i",
              "iso-ir-127",
              "iso8859-6",
              "iso88596",
              "iso_8859-6",
              "iso_8859-6:1987"
            ],
            "name": "ISO-8859-6"
          },
          {
            "labels": [
              "csisolatingreek",
              "ecma-118",
              "elot_928",
              "greek",
              "greek8",
              "iso-8859-7",
              "iso-ir-126",
              "iso8859-7",
              "iso88597",
              "iso_8859-7",
              "iso_8859-7:1987",
              "sun_eu_greek"
            ],
            "name": "ISO-8859-7"
          },
          {
            "labels": [
              "csiso88598e",
              "csisolatinhebrew",
              "hebrew",
              "iso-8859-8",
              "iso-8859-8-e",
              "iso-ir-138",
              "iso8859-8",
              "iso88598",
              "iso_8859-8",
              "iso_8859-8:1988",
              "visual"
            ],
            "name": "ISO-8859-8"
          },
          {
            "labels": [
              "csiso88598i",
              "iso-8859-8-i",
              "logical"
            ],
            "name": "ISO-8859-8-I"
          },
          {
            "labels": [
              "csisolatin6",
              "iso-8859-10",
              "iso-ir-157",
              "iso8859-10",
              "iso885910",
              "l6",
              "latin6"
            ],
            "name": "ISO-8859-10"
          },
          {
            "labels": [
              "iso-8859-13",
              "iso8859-13",
              "iso885913"
            ],
            "name": "ISO-8859-13"
          },
          {
            "labels": [
              "iso-8859-14",
              "iso8859-14",
              "iso885914"
            ],
            "name": "ISO-8859-14"
          },
          {
            "labels": [
              "csisolatin9",
              "iso-8859-15",
              "iso8859-15",
              "iso885915",
              "iso_8859-15",
              "l9"
            ],
            "name": "ISO-8859-15"
          },
          {
            "labels": [
              "iso-8859-16"
            ],
            "name": "ISO-8859-16"
          },
          {
            "labels": [
              "cskoi8r",
              "koi",
              "koi8",
              "koi8-r",
              "koi8_r"
            ],
            "name": "KOI8-R"
          },
          {
            "labels": [
              "koi8-ru",
              "koi8-u"
            ],
            "name": "KOI8-U"
          },
          {
            "labels": [
              "csmacintosh",
              "mac",
              "macintosh",
              "x-mac-roman"
            ],
            "name": "macintosh"
          },
          {
            "labels": [
              "dos-874",
              "iso-8859-11",
              "iso8859-11",
              "iso885911",
              "tis-620",
              "windows-874"
            ],
            "name": "windows-874"
          },
          {
            "labels": [
              "cp1250",
              "windows-1250",
              "x-cp1250"
            ],
            "name": "windows-1250"
          },
          {
            "labels": [
              "cp1251",
              "windows-1251",
              "x-cp1251"
            ],
            "name": "windows-1251"
          },
          {
            "labels": [
              "ansi_x3.4-1968",
              "ascii",
              "cp1252",
              "cp819",
              "csisolatin1",
              "ibm819",
              "iso-8859-1",
              "iso-ir-100",
              "iso8859-1",
              "iso88591",
              "iso_8859-1",
              "iso_8859-1:1987",
              "l1",
              "latin1",
              "us-ascii",
              "windows-1252",
              "x-cp1252"
            ],
            "name": "windows-1252"
          },
          {
            "labels": [
              "cp1253",
              "windows-1253",
              "x-cp1253"
            ],
            "name": "windows-1253"
          },
          {
            "labels": [
              "cp1254",
              "csisolatin5",
              "iso-8859-9",
              "iso-ir-148",
              "iso8859-9",
              "iso88599",
              "iso_8859-9",
              "iso_8859-9:1989",
              "l5",
              "latin5",
              "windows-1254",
              "x-cp1254"
            ],
            "name": "windows-1254"
          },
          {
            "labels": [
              "cp1255",
              "windows-1255",
              "x-cp1255"
            ],
            "name": "windows-1255"
          },
          {
            "labels": [
              "cp1256",
              "windows-1256",
              "x-cp1256"
            ],
            "name": "windows-1256"
          },
          {
            "labels": [
              "cp1257",
              "windows-1257",
              "x-cp1257"
            ],
            "name": "windows-1257"
          },
          {
            "labels": [
              "cp1258",
              "windows-1258",
              "x-cp1258"
            ],
            "name": "windows-1258"
          },
          {
            "labels": [
              "x-mac-cyrillic",
              "x-mac-ukrainian"
            ],
            "name": "x-mac-cyrillic"
          }
        ],
        "heading": "Legacy single-byte encodings"
      },
      {
        "encodings": [
          {
            "labels": [
              "chinese",
              "csgb2312",
              "csiso58gb231280",
              "gb2312",
              "gb_2312",
              "gb_2312-80",
              "gbk",
              "iso-ir-58",
              "x-gbk"
            ],
            "name": "GBK"
          },
          {
            "labels": [
              "gb18030"
            ],
            "name": "gb18030"
          }
        ],
        "heading": "Legacy multi-byte Chinese (simplified) encodings"
      },
      {
        "encodings": [
          {
            "labels": [
              "big5",
              "big5-hkscs",
              "cn-big5",
              "csbig5",
              "x-x-big5"
            ],
            "name": "Big5"
          }
        ],
        "heading": "Legacy multi-byte Chinese (traditional) encodings"
      },
      {
        "encodings": [
          {
            "labels": [
              "cseucpkdfmtjapanese",
              "euc-jp",
              "x-euc-jp"
            ],
            "name": "EUC-JP"
          },
          {
            "labels": [
              "csiso2022jp",
              "iso-2022-jp"
            ],
            "name": "ISO-2022-JP"
          },
          {
            "labels": [
              "csshiftjis",
              "ms932",
              "ms_kanji",
              "shift-jis",
              "shift_jis",
              "sjis",
              "windows-31j",
              "x-sjis"
            ],
            "name": "Shift_JIS"
          }
        ],
        "heading": "Legacy multi-byte Japanese encodings"
      },
      {
        "encodings": [
          {
            "labels": [
              "cseuckr",
              "csksc56011987",
              "euc-kr",
              "iso-ir-149",
              "korean",
              "ks_c_5601-1987",
              "ks_c_5601-1989",
              "ksc5601",
              "ksc_5601",
              "windows-949"
            ],
            "name": "EUC-KR"
          }
        ],
        "heading": "Legacy multi-byte Korean encodings"
      },
      {
        "encodings": [
          {
            "labels": [
              "csiso2022kr",
              "hz-gb-2312",
              "iso-2022-cn",
              "iso-2022-cn-ext",
              "iso-2022-kr"
            ],
            "name": "replacement"
          },
          {
            "labels": [
              "utf-16be"
            ],
            "name": "UTF-16BE"
          },
          {
            "labels": [
              "utf-16",
              "utf-16le"
            ],
            "name": "UTF-16LE"
          },
          {
            "labels": [
              "x-user-defined"
            ],
            "name": "x-user-defined"
          }
        ],
        "heading": "Legacy miscellaneous encodings"
      }
    ];

    // Label to encoding registry.
    /** @type {Object.<string,{name:string,labels:Array.<string>}>} */
    var label_to_encoding = {};
    encodings.forEach(function(category) {
      category.encodings.forEach(function(encoding) {
        encoding.labels.forEach(function(label) {
          label_to_encoding[label] = encoding;
        });
      });
    });

    // Registry of of encoder/decoder factories, by encoding name.
    /** @type {Object.<string, function({fatal:boolean}): Encoder>} */
    var encoders = {};
    /** @type {Object.<string, function({fatal:boolean}): Decoder>} */
    var decoders = {};

    //
    // 6. Indexes
    //

    /**
     * @param {number} pointer The |pointer| to search for.
     * @param {(!Array.<?number>|undefined)} index The |index| to search within.
     * @return {?number} The code point corresponding to |pointer| in |index|,
     *     or null if |code point| is not in |index|.
     */
    function indexCodePointFor(pointer, index) {
      if (!index) return null;
      return index[pointer] || null;
    }

    /**
     * @param {number} code_point The |code point| to search for.
     * @param {!Array.<?number>} index The |index| to search within.
     * @return {?number} The first pointer corresponding to |code point| in
     *     |index|, or null if |code point| is not in |index|.
     */
    function indexPointerFor(code_point, index) {
      var pointer = index.indexOf(code_point);
      return pointer === -1 ? null : pointer;
    }

    /**
     * @param {string} name Name of the index.
     * @return {(!Array.<number>|!Array.<Array.<number>>)}
     *  */
    function index(name) {
      if (!('encoding-indexes' in global)) {
        throw Error("Indexes missing." +
                    " Did you forget to include encoding-indexes.js first?");
      }
      return global['encoding-indexes'][name];
    }

    /**
     * @param {number} pointer The |pointer| to search for in the gb18030 index.
     * @return {?number} The code point corresponding to |pointer| in |index|,
     *     or null if |code point| is not in the gb18030 index.
     */
    function indexGB18030RangesCodePointFor(pointer) {
      // 1. If pointer is greater than 39419 and less than 189000, or
      // pointer is greater than 1237575, return null.
      if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575))
        return null;

      // 2. If pointer is 7457, return code point U+E7C7.
      if (pointer === 7457) return 0xE7C7;

      // 3. Let offset be the last pointer in index gb18030 ranges that
      // is equal to or less than pointer and let code point offset be
      // its corresponding code point.
      var offset = 0;
      var code_point_offset = 0;
      var idx = index('gb18030-ranges');
      var i;
      for (i = 0; i < idx.length; ++i) {
        /** @type {!Array.<number>} */
        var entry = idx[i];
        if (entry[0] <= pointer) {
          offset = entry[0];
          code_point_offset = entry[1];
        } else {
          break;
        }
      }

      // 4. Return a code point whose value is code point offset +
      // pointer − offset.
      return code_point_offset + pointer - offset;
    }

    /**
     * @param {number} code_point The |code point| to locate in the gb18030 index.
     * @return {number} The first pointer corresponding to |code point| in the
     *     gb18030 index.
     */
    function indexGB18030RangesPointerFor(code_point) {
      // 1. If code point is U+E7C7, return pointer 7457.
      if (code_point === 0xE7C7) return 7457;

      // 2. Let offset be the last code point in index gb18030 ranges
      // that is equal to or less than code point and let pointer offset
      // be its corresponding pointer.
      var offset = 0;
      var pointer_offset = 0;
      var idx = index('gb18030-ranges');
      var i;
      for (i = 0; i < idx.length; ++i) {
        /** @type {!Array.<number>} */
        var entry = idx[i];
        if (entry[1] <= code_point) {
          offset = entry[1];
          pointer_offset = entry[0];
        } else {
          break;
        }
      }

      // 3. Return a pointer whose value is pointer offset + code point
      // − offset.
      return pointer_offset + code_point - offset;
    }

    /**
     * @param {number} code_point The |code_point| to search for in the Shift_JIS
     *     index.
     * @return {?number} The code point corresponding to |pointer| in |index|,
     *     or null if |code point| is not in the Shift_JIS index.
     */
    function indexShiftJISPointerFor(code_point) {
      // 1. Let index be index jis0208 excluding all entries whose
      // pointer is in the range 8272 to 8835, inclusive.
      shift_jis_index = shift_jis_index ||
        index('jis0208').map(function(code_point, pointer) {
          return inRange(pointer, 8272, 8835) ? null : code_point;
        });
      var index_ = shift_jis_index;

      // 2. Return the index pointer for code point in index.
      return index_.indexOf(code_point);
    }
    var shift_jis_index;

    /**
     * @param {number} code_point The |code_point| to search for in the big5
     *     index.
     * @return {?number} The code point corresponding to |pointer| in |index|,
     *     or null if |code point| is not in the big5 index.
     */
    function indexBig5PointerFor(code_point) {
      // 1. Let index be index Big5 excluding all entries whose pointer
      big5_index_no_hkscs = big5_index_no_hkscs ||
        index('big5').map(function(code_point, pointer) {
          return (pointer < (0xA1 - 0x81) * 157) ? null : code_point;
        });
      var index_ = big5_index_no_hkscs;

      // 2. If code point is U+2550, U+255E, U+2561, U+256A, U+5341, or
      // U+5345, return the last pointer corresponding to code point in
      // index.
      if (code_point === 0x2550 || code_point === 0x255E ||
          code_point === 0x2561 || code_point === 0x256A ||
          code_point === 0x5341 || code_point === 0x5345) {
        return index_.lastIndexOf(code_point);
      }

      // 3. Return the index pointer for code point in index.
      return indexPointerFor(code_point, index_);
    }
    var big5_index_no_hkscs;

    //
    // 8. API
    //

    /** @const */ var DEFAULT_ENCODING = 'utf-8';

    // 8.1 Interface TextDecoder

    /**
     * @constructor
     * @param {string=} label The label of the encoding;
     *     defaults to 'utf-8'.
     * @param {Object=} options
     */
    function TextDecoder(label, options) {
      // Web IDL conventions
      if (!(this instanceof TextDecoder))
        throw TypeError('Called as a function. Did you forget \'new\'?');
      label = label !== undefined ? String(label) : DEFAULT_ENCODING;
      options = ToDictionary(options);

      // A TextDecoder object has an associated encoding, decoder,
      // stream, ignore BOM flag (initially unset), BOM seen flag
      // (initially unset), error mode (initially replacement), and do
      // not flush flag (initially unset).

      /** @private */
      this._encoding = null;
      /** @private @type {?Decoder} */
      this._decoder = null;
      /** @private @type {boolean} */
      this._ignoreBOM = false;
      /** @private @type {boolean} */
      this._BOMseen = false;
      /** @private @type {string} */
      this._error_mode = 'replacement';
      /** @private @type {boolean} */
      this._do_not_flush = false;


      // 1. Let encoding be the result of getting an encoding from
      // label.
      var encoding = getEncoding(label);

      // 2. If encoding is failure or replacement, throw a RangeError.
      if (encoding === null || encoding.name === 'replacement')
        throw RangeError('Unknown encoding: ' + label);
      if (!decoders[encoding.name]) {
        throw Error('Decoder not present.' +
                    ' Did you forget to include encoding-indexes.js first?');
      }

      // 3. Let dec be a new TextDecoder object.
      var dec = this;

      // 4. Set dec's encoding to encoding.
      dec._encoding = encoding;

      // 5. If options's fatal member is true, set dec's error mode to
      // fatal.
      if (Boolean(options['fatal']))
        dec._error_mode = 'fatal';

      // 6. If options's ignoreBOM member is true, set dec's ignore BOM
      // flag.
      if (Boolean(options['ignoreBOM']))
        dec._ignoreBOM = true;

      // For pre-ES5 runtimes:
      if (!Object.defineProperty) {
        this.encoding = dec._encoding.name.toLowerCase();
        this.fatal = dec._error_mode === 'fatal';
        this.ignoreBOM = dec._ignoreBOM;
      }

      // 7. Return dec.
      return dec;
    }

    if (Object.defineProperty) {
      // The encoding attribute's getter must return encoding's name.
      Object.defineProperty(TextDecoder.prototype, 'encoding', {
        /** @this {TextDecoder} */
        get: function() { return this._encoding.name.toLowerCase(); }
      });

      // The fatal attribute's getter must return true if error mode
      // is fatal, and false otherwise.
      Object.defineProperty(TextDecoder.prototype, 'fatal', {
        /** @this {TextDecoder} */
        get: function() { return this._error_mode === 'fatal'; }
      });

      // The ignoreBOM attribute's getter must return true if ignore
      // BOM flag is set, and false otherwise.
      Object.defineProperty(TextDecoder.prototype, 'ignoreBOM', {
        /** @this {TextDecoder} */
        get: function() { return this._ignoreBOM; }
      });
    }

    /**
     * @param {BufferSource=} input The buffer of bytes to decode.
     * @param {Object=} options
     * @return {string} The decoded string.
     */
    TextDecoder.prototype.decode = function decode(input, options) {
      var bytes;
      if (typeof input === 'object' && input instanceof ArrayBuffer) {
        bytes = new Uint8Array(input);
      } else if (typeof input === 'object' && 'buffer' in input &&
                 input.buffer instanceof ArrayBuffer) {
        bytes = new Uint8Array(input.buffer,
                               input.byteOffset,
                               input.byteLength);
      } else {
        bytes = new Uint8Array(0);
      }

      options = ToDictionary(options);

      // 1. If the do not flush flag is unset, set decoder to a new
      // encoding's decoder, set stream to a new stream, and unset the
      // BOM seen flag.
      if (!this._do_not_flush) {
        this._decoder = decoders[this._encoding.name]({
          fatal: this._error_mode === 'fatal'});
        this._BOMseen = false;
      }

      // 2. If options's stream is true, set the do not flush flag, and
      // unset the do not flush flag otherwise.
      this._do_not_flush = Boolean(options['stream']);

      // 3. If input is given, push a copy of input to stream.
      // TODO: Align with spec algorithm - maintain stream on instance.
      var input_stream = new Stream(bytes);

      // 4. Let output be a new stream.
      var output = [];

      /** @type {?(number|!Array.<number>)} */
      var result;

      // 5. While true:
      while (true) {
        // 1. Let token be the result of reading from stream.
        var token = input_stream.read();

        // 2. If token is end-of-stream and the do not flush flag is
        // set, return output, serialized.
        // TODO: Align with spec algorithm.
        if (token === end_of_stream)
          break;

        // 3. Otherwise, run these subsubsteps:

        // 1. Let result be the result of processing token for decoder,
        // stream, output, and error mode.
        result = this._decoder.handler(input_stream, token);

        // 2. If result is finished, return output, serialized.
        if (result === finished)
          break;

        if (result !== null) {
          if (Array.isArray(result))
            output.push.apply(output, /**@type {!Array.<number>}*/(result));
          else
            output.push(result);
        }

        // 3. Otherwise, if result is error, throw a TypeError.
        // (Thrown in handler)

        // 4. Otherwise, do nothing.
      }
      // TODO: Align with spec algorithm.
      if (!this._do_not_flush) {
        do {
          result = this._decoder.handler(input_stream, input_stream.read());
          if (result === finished)
            break;
          if (result === null)
            continue;
          if (Array.isArray(result))
            output.push.apply(output, /**@type {!Array.<number>}*/(result));
          else
            output.push(result);
        } while (!input_stream.endOfStream());
        this._decoder = null;
      }

      // A TextDecoder object also has an associated serialize stream
      // algorithm...
      /**
       * @param {!Array.<number>} stream
       * @return {string}
       * @this {TextDecoder}
       */
      function serializeStream(stream) {
        // 1. Let token be the result of reading from stream.
        // (Done in-place on array, rather than as a stream)

        // 2. If encoding is UTF-8, UTF-16BE, or UTF-16LE, and ignore
        // BOM flag and BOM seen flag are unset, run these subsubsteps:
        if (includes(['UTF-8', 'UTF-16LE', 'UTF-16BE'], this._encoding.name) &&
            !this._ignoreBOM && !this._BOMseen) {
          if (stream.length > 0 && stream[0] === 0xFEFF) {
            // 1. If token is U+FEFF, set BOM seen flag.
            this._BOMseen = true;
            stream.shift();
          } else if (stream.length > 0) {
            // 2. Otherwise, if token is not end-of-stream, set BOM seen
            // flag and append token to stream.
            this._BOMseen = true;
          } else ;
        }
        // 4. Otherwise, return output.
        return codePointsToString(stream);
      }

      return serializeStream.call(this, output);
    };

    // 8.2 Interface TextEncoder

    /**
     * @constructor
     * @param {string=} label The label of the encoding. NONSTANDARD.
     * @param {Object=} options NONSTANDARD.
     */
    function TextEncoder(label, options) {
      // Web IDL conventions
      if (!(this instanceof TextEncoder))
        throw TypeError('Called as a function. Did you forget \'new\'?');
      options = ToDictionary(options);

      // A TextEncoder object has an associated encoding and encoder.

      /** @private */
      this._encoding = null;
      /** @private @type {?Encoder} */
      this._encoder = null;

      // Non-standard
      /** @private @type {boolean} */
      this._do_not_flush = false;
      /** @private @type {string} */
      this._fatal = Boolean(options['fatal']) ? 'fatal' : 'replacement';

      // 1. Let enc be a new TextEncoder object.
      var enc = this;

      // 2. Set enc's encoding to UTF-8's encoder.
      if (Boolean(options['NONSTANDARD_allowLegacyEncoding'])) {
        // NONSTANDARD behavior.
        label = label !== undefined ? String(label) : DEFAULT_ENCODING;
        var encoding = getEncoding(label);
        if (encoding === null || encoding.name === 'replacement')
          throw RangeError('Unknown encoding: ' + label);
        if (!encoders[encoding.name]) {
          throw Error('Encoder not present.' +
                      ' Did you forget to include encoding-indexes.js first?');
        }
        enc._encoding = encoding;
      } else {
        // Standard behavior.
        enc._encoding = getEncoding('utf-8');

        if (label !== undefined && 'console' in global) {
          console.warn('TextEncoder constructor called with encoding label, '
                       + 'which is ignored.');
        }
      }

      // For pre-ES5 runtimes:
      if (!Object.defineProperty)
        this.encoding = enc._encoding.name.toLowerCase();

      // 3. Return enc.
      return enc;
    }

    if (Object.defineProperty) {
      // The encoding attribute's getter must return encoding's name.
      Object.defineProperty(TextEncoder.prototype, 'encoding', {
        /** @this {TextEncoder} */
        get: function() { return this._encoding.name.toLowerCase(); }
      });
    }

    /**
     * @param {string=} opt_string The string to encode.
     * @param {Object=} options
     * @return {!Uint8Array} Encoded bytes, as a Uint8Array.
     */
    TextEncoder.prototype.encode = function encode(opt_string, options) {
      opt_string = opt_string === undefined ? '' : String(opt_string);
      options = ToDictionary(options);

      // NOTE: This option is nonstandard. None of the encodings
      // permitted for encoding (i.e. UTF-8, UTF-16) are stateful when
      // the input is a USVString so streaming is not necessary.
      if (!this._do_not_flush)
        this._encoder = encoders[this._encoding.name]({
          fatal: this._fatal === 'fatal'});
      this._do_not_flush = Boolean(options['stream']);

      // 1. Convert input to a stream.
      var input = new Stream(stringToCodePoints(opt_string));

      // 2. Let output be a new stream
      var output = [];

      /** @type {?(number|!Array.<number>)} */
      var result;
      // 3. While true, run these substeps:
      while (true) {
        // 1. Let token be the result of reading from input.
        var token = input.read();
        if (token === end_of_stream)
          break;
        // 2. Let result be the result of processing token for encoder,
        // input, output.
        result = this._encoder.handler(input, token);
        if (result === finished)
          break;
        if (Array.isArray(result))
          output.push.apply(output, /**@type {!Array.<number>}*/(result));
        else
          output.push(result);
      }
      // TODO: Align with spec algorithm.
      if (!this._do_not_flush) {
        while (true) {
          result = this._encoder.handler(input, input.read());
          if (result === finished)
            break;
          if (Array.isArray(result))
            output.push.apply(output, /**@type {!Array.<number>}*/(result));
          else
            output.push(result);
        }
        this._encoder = null;
      }
      // 3. If result is finished, convert output into a byte sequence,
      // and then return a Uint8Array object wrapping an ArrayBuffer
      // containing output.
      return new Uint8Array(output);
    };


    //
    // 9. The encoding
    //

    // 9.1 utf-8

    // 9.1.1 utf-8 decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function UTF8Decoder(options) {
      var fatal = options.fatal;

      // utf-8's decoder's has an associated utf-8 code point, utf-8
      // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
      // lower boundary (initially 0x80), and a utf-8 upper boundary
      // (initially 0xBF).
      var /** @type {number} */ utf8_code_point = 0,
          /** @type {number} */ utf8_bytes_seen = 0,
          /** @type {number} */ utf8_bytes_needed = 0,
          /** @type {number} */ utf8_lower_boundary = 0x80,
          /** @type {number} */ utf8_upper_boundary = 0xBF;

      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
        // set utf-8 bytes needed to 0 and return error.
        if (bite === end_of_stream && utf8_bytes_needed !== 0) {
          utf8_bytes_needed = 0;
          return decoderError(fatal);
        }

        // 2. If byte is end-of-stream, return finished.
        if (bite === end_of_stream)
          return finished;

        // 3. If utf-8 bytes needed is 0, based on byte:
        if (utf8_bytes_needed === 0) {

          // 0x00 to 0x7F
          if (inRange(bite, 0x00, 0x7F)) {
            // Return a code point whose value is byte.
            return bite;
          }

          // 0xC2 to 0xDF
          else if (inRange(bite, 0xC2, 0xDF)) {
            // 1. Set utf-8 bytes needed to 1.
            utf8_bytes_needed = 1;

            // 2. Set UTF-8 code point to byte & 0x1F.
            utf8_code_point = bite & 0x1F;
          }

          // 0xE0 to 0xEF
          else if (inRange(bite, 0xE0, 0xEF)) {
            // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
            if (bite === 0xE0)
              utf8_lower_boundary = 0xA0;
            // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
            if (bite === 0xED)
              utf8_upper_boundary = 0x9F;
            // 3. Set utf-8 bytes needed to 2.
            utf8_bytes_needed = 2;
            // 4. Set UTF-8 code point to byte & 0xF.
            utf8_code_point = bite & 0xF;
          }

          // 0xF0 to 0xF4
          else if (inRange(bite, 0xF0, 0xF4)) {
            // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
            if (bite === 0xF0)
              utf8_lower_boundary = 0x90;
            // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
            if (bite === 0xF4)
              utf8_upper_boundary = 0x8F;
            // 3. Set utf-8 bytes needed to 3.
            utf8_bytes_needed = 3;
            // 4. Set UTF-8 code point to byte & 0x7.
            utf8_code_point = bite & 0x7;
          }

          // Otherwise
          else {
            // Return error.
            return decoderError(fatal);
          }

          // Return continue.
          return null;
        }

        // 4. If byte is not in the range utf-8 lower boundary to utf-8
        // upper boundary, inclusive, run these substeps:
        if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

          // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
          // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
          // utf-8 upper boundary to 0xBF.
          utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
          utf8_lower_boundary = 0x80;
          utf8_upper_boundary = 0xBF;

          // 2. Prepend byte to stream.
          stream.prepend(bite);

          // 3. Return error.
          return decoderError(fatal);
        }

        // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
        // to 0xBF.
        utf8_lower_boundary = 0x80;
        utf8_upper_boundary = 0xBF;

        // 6. Set UTF-8 code point to (UTF-8 code point << 6) | (byte &
        // 0x3F)
        utf8_code_point = (utf8_code_point << 6) | (bite & 0x3F);

        // 7. Increase utf-8 bytes seen by one.
        utf8_bytes_seen += 1;

        // 8. If utf-8 bytes seen is not equal to utf-8 bytes needed,
        // continue.
        if (utf8_bytes_seen !== utf8_bytes_needed)
          return null;

        // 9. Let code point be utf-8 code point.
        var code_point = utf8_code_point;

        // 10. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
        // seen to 0.
        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

        // 11. Return a code point whose value is code point.
        return code_point;
      };
    }

    // 9.1.2 utf-8 encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function UTF8Encoder(options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is an ASCII code point, return a byte whose
        // value is code point.
        if (isASCIICodePoint(code_point))
          return code_point;

        // 3. Set count and offset based on the range code point is in:
        var count, offset;
        // U+0080 to U+07FF, inclusive:
        if (inRange(code_point, 0x0080, 0x07FF)) {
          // 1 and 0xC0
          count = 1;
          offset = 0xC0;
        }
        // U+0800 to U+FFFF, inclusive:
        else if (inRange(code_point, 0x0800, 0xFFFF)) {
          // 2 and 0xE0
          count = 2;
          offset = 0xE0;
        }
        // U+10000 to U+10FFFF, inclusive:
        else if (inRange(code_point, 0x10000, 0x10FFFF)) {
          // 3 and 0xF0
          count = 3;
          offset = 0xF0;
        }

        // 4. Let bytes be a byte sequence whose first byte is (code
        // point >> (6 × count)) + offset.
        var bytes = [(code_point >> (6 * count)) + offset];

        // 5. Run these substeps while count is greater than 0:
        while (count > 0) {

          // 1. Set temp to code point >> (6 × (count − 1)).
          var temp = code_point >> (6 * (count - 1));

          // 2. Append to bytes 0x80 | (temp & 0x3F).
          bytes.push(0x80 | (temp & 0x3F));

          // 3. Decrease count by one.
          count -= 1;
        }

        // 6. Return bytes bytes, in order.
        return bytes;
      };
    }

    /** @param {{fatal: boolean}} options */
    encoders['UTF-8'] = function(options) {
      return new UTF8Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    decoders['UTF-8'] = function(options) {
      return new UTF8Decoder(options);
    };

    //
    // 10. Legacy single-byte encodings
    //

    // 10.1 single-byte decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {!Array.<number>} index The encoding index.
     * @param {{fatal: boolean}} options
     */
    function SingleByteDecoder(index, options) {
      var fatal = options.fatal;
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream, return finished.
        if (bite === end_of_stream)
          return finished;

        // 2. If byte is an ASCII byte, return a code point whose value
        // is byte.
        if (isASCIIByte(bite))
          return bite;

        // 3. Let code point be the index code point for byte − 0x80 in
        // index single-byte.
        var code_point = index[bite - 0x80];

        // 4. If code point is null, return error.
        if (code_point === null)
          return decoderError(fatal);

        // 5. Return a code point whose value is code point.
        return code_point;
      };
    }

    // 10.2 single-byte encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {!Array.<?number>} index The encoding index.
     * @param {{fatal: boolean}} options
     */
    function SingleByteEncoder(index, options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is an ASCII code point, return a byte whose
        // value is code point.
        if (isASCIICodePoint(code_point))
          return code_point;

        // 3. Let pointer be the index pointer for code point in index
        // single-byte.
        var pointer = indexPointerFor(code_point, index);

        // 4. If pointer is null, return error with code point.
        if (pointer === null)
          encoderError(code_point);

        // 5. Return a byte whose value is pointer + 0x80.
        return pointer + 0x80;
      };
    }

    (function() {
      if (!('encoding-indexes' in global))
        return;
      encodings.forEach(function(category) {
        if (category.heading !== 'Legacy single-byte encodings')
          return;
        category.encodings.forEach(function(encoding) {
          var name = encoding.name;
          var idx = index(name.toLowerCase());
          /** @param {{fatal: boolean}} options */
          decoders[name] = function(options) {
            return new SingleByteDecoder(idx, options);
          };
          /** @param {{fatal: boolean}} options */
          encoders[name] = function(options) {
            return new SingleByteEncoder(idx, options);
          };
        });
      });
    }());

    //
    // 11. Legacy multi-byte Chinese (simplified) encodings
    //

    // 11.1 gbk

    // 11.1.1 gbk decoder
    // gbk's decoder is gb18030's decoder.
    /** @param {{fatal: boolean}} options */
    decoders['GBK'] = function(options) {
      return new GB18030Decoder(options);
    };

    // 11.1.2 gbk encoder
    // gbk's encoder is gb18030's encoder with its gbk flag set.
    /** @param {{fatal: boolean}} options */
    encoders['GBK'] = function(options) {
      return new GB18030Encoder(options, true);
    };

    // 11.2 gb18030

    // 11.2.1 gb18030 decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function GB18030Decoder(options) {
      var fatal = options.fatal;
      // gb18030's decoder has an associated gb18030 first, gb18030
      // second, and gb18030 third (all initially 0x00).
      var /** @type {number} */ gb18030_first = 0x00,
          /** @type {number} */ gb18030_second = 0x00,
          /** @type {number} */ gb18030_third = 0x00;
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and gb18030 first, gb18030
        // second, and gb18030 third are 0x00, return finished.
        if (bite === end_of_stream && gb18030_first === 0x00 &&
            gb18030_second === 0x00 && gb18030_third === 0x00) {
          return finished;
        }
        // 2. If byte is end-of-stream, and gb18030 first, gb18030
        // second, or gb18030 third is not 0x00, set gb18030 first,
        // gb18030 second, and gb18030 third to 0x00, and return error.
        if (bite === end_of_stream &&
            (gb18030_first !== 0x00 || gb18030_second !== 0x00 ||
             gb18030_third !== 0x00)) {
          gb18030_first = 0x00;
          gb18030_second = 0x00;
          gb18030_third = 0x00;
          decoderError(fatal);
        }
        var code_point;
        // 3. If gb18030 third is not 0x00, run these substeps:
        if (gb18030_third !== 0x00) {
          // 1. Let code point be null.
          code_point = null;
          // 2. If byte is in the range 0x30 to 0x39, inclusive, set
          // code point to the index gb18030 ranges code point for
          // (((gb18030 first − 0x81) × 10 + gb18030 second − 0x30) ×
          // 126 + gb18030 third − 0x81) × 10 + byte − 0x30.
          if (inRange(bite, 0x30, 0x39)) {
            code_point = indexGB18030RangesCodePointFor(
                (((gb18030_first - 0x81) * 10 + gb18030_second - 0x30) * 126 +
                 gb18030_third - 0x81) * 10 + bite - 0x30);
          }

          // 3. Let buffer be a byte sequence consisting of gb18030
          // second, gb18030 third, and byte, in order.
          var buffer = [gb18030_second, gb18030_third, bite];

          // 4. Set gb18030 first, gb18030 second, and gb18030 third to
          // 0x00.
          gb18030_first = 0x00;
          gb18030_second = 0x00;
          gb18030_third = 0x00;

          // 5. If code point is null, prepend buffer to stream and
          // return error.
          if (code_point === null) {
            stream.prepend(buffer);
            return decoderError(fatal);
          }

          // 6. Return a code point whose value is code point.
          return code_point;
        }

        // 4. If gb18030 second is not 0x00, run these substeps:
        if (gb18030_second !== 0x00) {

          // 1. If byte is in the range 0x81 to 0xFE, inclusive, set
          // gb18030 third to byte and return continue.
          if (inRange(bite, 0x81, 0xFE)) {
            gb18030_third = bite;
            return null;
          }

          // 2. Prepend gb18030 second followed by byte to stream, set
          // gb18030 first and gb18030 second to 0x00, and return error.
          stream.prepend([gb18030_second, bite]);
          gb18030_first = 0x00;
          gb18030_second = 0x00;
          return decoderError(fatal);
        }

        // 5. If gb18030 first is not 0x00, run these substeps:
        if (gb18030_first !== 0x00) {

          // 1. If byte is in the range 0x30 to 0x39, inclusive, set
          // gb18030 second to byte and return continue.
          if (inRange(bite, 0x30, 0x39)) {
            gb18030_second = bite;
            return null;
          }

          // 2. Let lead be gb18030 first, let pointer be null, and set
          // gb18030 first to 0x00.
          var lead = gb18030_first;
          var pointer = null;
          gb18030_first = 0x00;

          // 3. Let offset be 0x40 if byte is less than 0x7F and 0x41
          // otherwise.
          var offset = bite < 0x7F ? 0x40 : 0x41;

          // 4. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80
          // to 0xFE, inclusive, set pointer to (lead − 0x81) × 190 +
          // (byte − offset).
          if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFE))
            pointer = (lead - 0x81) * 190 + (bite - offset);

          // 5. Let code point be null if pointer is null and the index
          // code point for pointer in index gb18030 otherwise.
          code_point = pointer === null ? null :
              indexCodePointFor(pointer, index('gb18030'));

          // 6. If code point is null and byte is an ASCII byte, prepend
          // byte to stream.
          if (code_point === null && isASCIIByte(bite))
            stream.prepend(bite);

          // 7. If code point is null, return error.
          if (code_point === null)
            return decoderError(fatal);

          // 8. Return a code point whose value is code point.
          return code_point;
        }

        // 6. If byte is an ASCII byte, return a code point whose value
        // is byte.
        if (isASCIIByte(bite))
          return bite;

        // 7. If byte is 0x80, return code point U+20AC.
        if (bite === 0x80)
          return 0x20AC;

        // 8. If byte is in the range 0x81 to 0xFE, inclusive, set
        // gb18030 first to byte and return continue.
        if (inRange(bite, 0x81, 0xFE)) {
          gb18030_first = bite;
          return null;
        }

        // 9. Return error.
        return decoderError(fatal);
      };
    }

    // 11.2.2 gb18030 encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     * @param {boolean=} gbk_flag
     */
    function GB18030Encoder(options, gbk_flag) {
      options.fatal;
      // gb18030's decoder has an associated gbk flag (initially unset).
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is an ASCII code point, return a byte whose
        // value is code point.
        if (isASCIICodePoint(code_point))
          return code_point;

        // 3. If code point is U+E5E5, return error with code point.
        if (code_point === 0xE5E5)
          return encoderError(code_point);

        // 4. If the gbk flag is set and code point is U+20AC, return
        // byte 0x80.
        if (gbk_flag && code_point === 0x20AC)
          return 0x80;

        // 5. Let pointer be the index pointer for code point in index
        // gb18030.
        var pointer = indexPointerFor(code_point, index('gb18030'));

        // 6. If pointer is not null, run these substeps:
        if (pointer !== null) {

          // 1. Let lead be floor(pointer / 190) + 0x81.
          var lead = floor(pointer / 190) + 0x81;

          // 2. Let trail be pointer % 190.
          var trail = pointer % 190;

          // 3. Let offset be 0x40 if trail is less than 0x3F and 0x41 otherwise.
          var offset = trail < 0x3F ? 0x40 : 0x41;

          // 4. Return two bytes whose values are lead and trail + offset.
          return [lead, trail + offset];
        }

        // 7. If gbk flag is set, return error with code point.
        if (gbk_flag)
          return encoderError(code_point);

        // 8. Set pointer to the index gb18030 ranges pointer for code
        // point.
        pointer = indexGB18030RangesPointerFor(code_point);

        // 9. Let byte1 be floor(pointer / 10 / 126 / 10).
        var byte1 = floor(pointer / 10 / 126 / 10);

        // 10. Set pointer to pointer − byte1 × 10 × 126 × 10.
        pointer = pointer - byte1 * 10 * 126 * 10;

        // 11. Let byte2 be floor(pointer / 10 / 126).
        var byte2 = floor(pointer / 10 / 126);

        // 12. Set pointer to pointer − byte2 × 10 × 126.
        pointer = pointer - byte2 * 10 * 126;

        // 13. Let byte3 be floor(pointer / 10).
        var byte3 = floor(pointer / 10);

        // 14. Let byte4 be pointer − byte3 × 10.
        var byte4 = pointer - byte3 * 10;

        // 15. Return four bytes whose values are byte1 + 0x81, byte2 +
        // 0x30, byte3 + 0x81, byte4 + 0x30.
        return [byte1 + 0x81,
                byte2 + 0x30,
                byte3 + 0x81,
                byte4 + 0x30];
      };
    }

    /** @param {{fatal: boolean}} options */
    encoders['gb18030'] = function(options) {
      return new GB18030Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    decoders['gb18030'] = function(options) {
      return new GB18030Decoder(options);
    };


    //
    // 12. Legacy multi-byte Chinese (traditional) encodings
    //

    // 12.1 Big5

    // 12.1.1 Big5 decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function Big5Decoder(options) {
      var fatal = options.fatal;
      // Big5's decoder has an associated Big5 lead (initially 0x00).
      var /** @type {number} */ Big5_lead = 0x00;

      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and Big5 lead is not 0x00, set
        // Big5 lead to 0x00 and return error.
        if (bite === end_of_stream && Big5_lead !== 0x00) {
          Big5_lead = 0x00;
          return decoderError(fatal);
        }

        // 2. If byte is end-of-stream and Big5 lead is 0x00, return
        // finished.
        if (bite === end_of_stream && Big5_lead === 0x00)
          return finished;

        // 3. If Big5 lead is not 0x00, let lead be Big5 lead, let
        // pointer be null, set Big5 lead to 0x00, and then run these
        // substeps:
        if (Big5_lead !== 0x00) {
          var lead = Big5_lead;
          var pointer = null;
          Big5_lead = 0x00;

          // 1. Let offset be 0x40 if byte is less than 0x7F and 0x62
          // otherwise.
          var offset = bite < 0x7F ? 0x40 : 0x62;

          // 2. If byte is in the range 0x40 to 0x7E, inclusive, or 0xA1
          // to 0xFE, inclusive, set pointer to (lead − 0x81) × 157 +
          // (byte − offset).
          if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1, 0xFE))
            pointer = (lead - 0x81) * 157 + (bite - offset);

          // 3. If there is a row in the table below whose first column
          // is pointer, return the two code points listed in its second
          // column
          // Pointer | Code points
          // --------+--------------
          // 1133    | U+00CA U+0304
          // 1135    | U+00CA U+030C
          // 1164    | U+00EA U+0304
          // 1166    | U+00EA U+030C
          switch (pointer) {
            case 1133: return [0x00CA, 0x0304];
            case 1135: return [0x00CA, 0x030C];
            case 1164: return [0x00EA, 0x0304];
            case 1166: return [0x00EA, 0x030C];
          }

          // 4. Let code point be null if pointer is null and the index
          // code point for pointer in index Big5 otherwise.
          var code_point = (pointer === null) ? null :
              indexCodePointFor(pointer, index('big5'));

          // 5. If code point is null and byte is an ASCII byte, prepend
          // byte to stream.
          if (code_point === null && isASCIIByte(bite))
            stream.prepend(bite);

          // 6. If code point is null, return error.
          if (code_point === null)
            return decoderError(fatal);

          // 7. Return a code point whose value is code point.
          return code_point;
        }

        // 4. If byte is an ASCII byte, return a code point whose value
        // is byte.
        if (isASCIIByte(bite))
          return bite;

        // 5. If byte is in the range 0x81 to 0xFE, inclusive, set Big5
        // lead to byte and return continue.
        if (inRange(bite, 0x81, 0xFE)) {
          Big5_lead = bite;
          return null;
        }

        // 6. Return error.
        return decoderError(fatal);
      };
    }

    // 12.1.2 Big5 encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function Big5Encoder(options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is an ASCII code point, return a byte whose
        // value is code point.
        if (isASCIICodePoint(code_point))
          return code_point;

        // 3. Let pointer be the index Big5 pointer for code point.
        var pointer = indexBig5PointerFor(code_point);

        // 4. If pointer is null, return error with code point.
        if (pointer === null)
          return encoderError(code_point);

        // 5. Let lead be floor(pointer / 157) + 0x81.
        var lead = floor(pointer / 157) + 0x81;

        // 6. If lead is less than 0xA1, return error with code point.
        if (lead < 0xA1)
          return encoderError(code_point);

        // 7. Let trail be pointer % 157.
        var trail = pointer % 157;

        // 8. Let offset be 0x40 if trail is less than 0x3F and 0x62
        // otherwise.
        var offset = trail < 0x3F ? 0x40 : 0x62;

        // Return two bytes whose values are lead and trail + offset.
        return [lead, trail + offset];
      };
    }

    /** @param {{fatal: boolean}} options */
    encoders['Big5'] = function(options) {
      return new Big5Encoder(options);
    };
    /** @param {{fatal: boolean}} options */
    decoders['Big5'] = function(options) {
      return new Big5Decoder(options);
    };


    //
    // 13. Legacy multi-byte Japanese encodings
    //

    // 13.1 euc-jp

    // 13.1.1 euc-jp decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function EUCJPDecoder(options) {
      var fatal = options.fatal;

      // euc-jp's decoder has an associated euc-jp jis0212 flag
      // (initially unset) and euc-jp lead (initially 0x00).
      var /** @type {boolean} */ eucjp_jis0212_flag = false,
          /** @type {number} */ eucjp_lead = 0x00;

      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and euc-jp lead is not 0x00, set
        // euc-jp lead to 0x00, and return error.
        if (bite === end_of_stream && eucjp_lead !== 0x00) {
          eucjp_lead = 0x00;
          return decoderError(fatal);
        }

        // 2. If byte is end-of-stream and euc-jp lead is 0x00, return
        // finished.
        if (bite === end_of_stream && eucjp_lead === 0x00)
          return finished;

        // 3. If euc-jp lead is 0x8E and byte is in the range 0xA1 to
        // 0xDF, inclusive, set euc-jp lead to 0x00 and return a code
        // point whose value is 0xFF61 − 0xA1 + byte.
        if (eucjp_lead === 0x8E && inRange(bite, 0xA1, 0xDF)) {
          eucjp_lead = 0x00;
          return 0xFF61 - 0xA1 + bite;
        }

        // 4. If euc-jp lead is 0x8F and byte is in the range 0xA1 to
        // 0xFE, inclusive, set the euc-jp jis0212 flag, set euc-jp lead
        // to byte, and return continue.
        if (eucjp_lead === 0x8F && inRange(bite, 0xA1, 0xFE)) {
          eucjp_jis0212_flag = true;
          eucjp_lead = bite;
          return null;
        }

        // 5. If euc-jp lead is not 0x00, let lead be euc-jp lead, set
        // euc-jp lead to 0x00, and run these substeps:
        if (eucjp_lead !== 0x00) {
          var lead = eucjp_lead;
          eucjp_lead = 0x00;

          // 1. Let code point be null.
          var code_point = null;

          // 2. If lead and byte are both in the range 0xA1 to 0xFE,
          // inclusive, set code point to the index code point for (lead
          // − 0xA1) × 94 + byte − 0xA1 in index jis0208 if the euc-jp
          // jis0212 flag is unset and in index jis0212 otherwise.
          if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {
            code_point = indexCodePointFor(
              (lead - 0xA1) * 94 + (bite - 0xA1),
              index(!eucjp_jis0212_flag ? 'jis0208' : 'jis0212'));
          }

          // 3. Unset the euc-jp jis0212 flag.
          eucjp_jis0212_flag = false;

          // 4. If byte is not in the range 0xA1 to 0xFE, inclusive,
          // prepend byte to stream.
          if (!inRange(bite, 0xA1, 0xFE))
            stream.prepend(bite);

          // 5. If code point is null, return error.
          if (code_point === null)
            return decoderError(fatal);

          // 6. Return a code point whose value is code point.
          return code_point;
        }

        // 6. If byte is an ASCII byte, return a code point whose value
        // is byte.
        if (isASCIIByte(bite))
          return bite;

        // 7. If byte is 0x8E, 0x8F, or in the range 0xA1 to 0xFE,
        // inclusive, set euc-jp lead to byte and return continue.
        if (bite === 0x8E || bite === 0x8F || inRange(bite, 0xA1, 0xFE)) {
          eucjp_lead = bite;
          return null;
        }

        // 8. Return error.
        return decoderError(fatal);
      };
    }

    // 13.1.2 euc-jp encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function EUCJPEncoder(options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is an ASCII code point, return a byte whose
        // value is code point.
        if (isASCIICodePoint(code_point))
          return code_point;

        // 3. If code point is U+00A5, return byte 0x5C.
        if (code_point === 0x00A5)
          return 0x5C;

        // 4. If code point is U+203E, return byte 0x7E.
        if (code_point === 0x203E)
          return 0x7E;

        // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,
        // return two bytes whose values are 0x8E and code point −
        // 0xFF61 + 0xA1.
        if (inRange(code_point, 0xFF61, 0xFF9F))
          return [0x8E, code_point - 0xFF61 + 0xA1];

        // 6. If code point is U+2212, set it to U+FF0D.
        if (code_point === 0x2212)
          code_point = 0xFF0D;

        // 7. Let pointer be the index pointer for code point in index
        // jis0208.
        var pointer = indexPointerFor(code_point, index('jis0208'));

        // 8. If pointer is null, return error with code point.
        if (pointer === null)
          return encoderError(code_point);

        // 9. Let lead be floor(pointer / 94) + 0xA1.
        var lead = floor(pointer / 94) + 0xA1;

        // 10. Let trail be pointer % 94 + 0xA1.
        var trail = pointer % 94 + 0xA1;

        // 11. Return two bytes whose values are lead and trail.
        return [lead, trail];
      };
    }

    /** @param {{fatal: boolean}} options */
    encoders['EUC-JP'] = function(options) {
      return new EUCJPEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    decoders['EUC-JP'] = function(options) {
      return new EUCJPDecoder(options);
    };

    // 13.2 iso-2022-jp

    // 13.2.1 iso-2022-jp decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function ISO2022JPDecoder(options) {
      var fatal = options.fatal;
      /** @enum */
      var states = {
        ASCII: 0,
        Roman: 1,
        Katakana: 2,
        LeadByte: 3,
        TrailByte: 4,
        EscapeStart: 5,
        Escape: 6
      };
      // iso-2022-jp's decoder has an associated iso-2022-jp decoder
      // state (initially ASCII), iso-2022-jp decoder output state
      // (initially ASCII), iso-2022-jp lead (initially 0x00), and
      // iso-2022-jp output flag (initially unset).
      var /** @type {number} */ iso2022jp_decoder_state = states.ASCII,
          /** @type {number} */ iso2022jp_decoder_output_state = states.ASCII,
          /** @type {number} */ iso2022jp_lead = 0x00,
          /** @type {boolean} */ iso2022jp_output_flag = false;
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // switching on iso-2022-jp decoder state:
        switch (iso2022jp_decoder_state) {
        default:
        case states.ASCII:
          // ASCII
          // Based on byte:

          // 0x1B
          if (bite === 0x1B) {
            // Set iso-2022-jp decoder state to escape start and return
            // continue.
            iso2022jp_decoder_state = states.EscapeStart;
            return null;
          }

          // 0x00 to 0x7F, excluding 0x0E, 0x0F, and 0x1B
          if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E
              && bite !== 0x0F && bite !== 0x1B) {
            // Unset the iso-2022-jp output flag and return a code point
            // whose value is byte.
            iso2022jp_output_flag = false;
            return bite;
          }

          // end-of-stream
          if (bite === end_of_stream) {
            // Return finished.
            return finished;
          }

          // Otherwise
          // Unset the iso-2022-jp output flag and return error.
          iso2022jp_output_flag = false;
          return decoderError(fatal);

        case states.Roman:
          // Roman
          // Based on byte:

          // 0x1B
          if (bite === 0x1B) {
            // Set iso-2022-jp decoder state to escape start and return
            // continue.
            iso2022jp_decoder_state = states.EscapeStart;
            return null;
          }

          // 0x5C
          if (bite === 0x5C) {
            // Unset the iso-2022-jp output flag and return code point
            // U+00A5.
            iso2022jp_output_flag = false;
            return 0x00A5;
          }

          // 0x7E
          if (bite === 0x7E) {
            // Unset the iso-2022-jp output flag and return code point
            // U+203E.
            iso2022jp_output_flag = false;
            return 0x203E;
          }

          // 0x00 to 0x7F, excluding 0x0E, 0x0F, 0x1B, 0x5C, and 0x7E
          if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E && bite !== 0x0F
              && bite !== 0x1B && bite !== 0x5C && bite !== 0x7E) {
            // Unset the iso-2022-jp output flag and return a code point
            // whose value is byte.
            iso2022jp_output_flag = false;
            return bite;
          }

          // end-of-stream
          if (bite === end_of_stream) {
            // Return finished.
            return finished;
          }

          // Otherwise
          // Unset the iso-2022-jp output flag and return error.
          iso2022jp_output_flag = false;
          return decoderError(fatal);

        case states.Katakana:
          // Katakana
          // Based on byte:

          // 0x1B
          if (bite === 0x1B) {
            // Set iso-2022-jp decoder state to escape start and return
            // continue.
            iso2022jp_decoder_state = states.EscapeStart;
            return null;
          }

          // 0x21 to 0x5F
          if (inRange(bite, 0x21, 0x5F)) {
            // Unset the iso-2022-jp output flag and return a code point
            // whose value is 0xFF61 − 0x21 + byte.
            iso2022jp_output_flag = false;
            return 0xFF61 - 0x21 + bite;
          }

          // end-of-stream
          if (bite === end_of_stream) {
            // Return finished.
            return finished;
          }

          // Otherwise
          // Unset the iso-2022-jp output flag and return error.
          iso2022jp_output_flag = false;
          return decoderError(fatal);

        case states.LeadByte:
          // Lead byte
          // Based on byte:

          // 0x1B
          if (bite === 0x1B) {
            // Set iso-2022-jp decoder state to escape start and return
            // continue.
            iso2022jp_decoder_state = states.EscapeStart;
            return null;
          }

          // 0x21 to 0x7E
          if (inRange(bite, 0x21, 0x7E)) {
            // Unset the iso-2022-jp output flag, set iso-2022-jp lead
            // to byte, iso-2022-jp decoder state to trail byte, and
            // return continue.
            iso2022jp_output_flag = false;
            iso2022jp_lead = bite;
            iso2022jp_decoder_state = states.TrailByte;
            return null;
          }

          // end-of-stream
          if (bite === end_of_stream) {
            // Return finished.
            return finished;
          }

          // Otherwise
          // Unset the iso-2022-jp output flag and return error.
          iso2022jp_output_flag = false;
          return decoderError(fatal);

        case states.TrailByte:
          // Trail byte
          // Based on byte:

          // 0x1B
          if (bite === 0x1B) {
            // Set iso-2022-jp decoder state to escape start and return
            // continue.
            iso2022jp_decoder_state = states.EscapeStart;
            return decoderError(fatal);
          }

          // 0x21 to 0x7E
          if (inRange(bite, 0x21, 0x7E)) {
            // 1. Set the iso-2022-jp decoder state to lead byte.
            iso2022jp_decoder_state = states.LeadByte;

            // 2. Let pointer be (iso-2022-jp lead − 0x21) × 94 + byte − 0x21.
            var pointer = (iso2022jp_lead - 0x21) * 94 + bite - 0x21;

            // 3. Let code point be the index code point for pointer in
            // index jis0208.
            var code_point = indexCodePointFor(pointer, index('jis0208'));

            // 4. If code point is null, return error.
            if (code_point === null)
              return decoderError(fatal);

            // 5. Return a code point whose value is code point.
            return code_point;
          }

          // end-of-stream
          if (bite === end_of_stream) {
            // Set the iso-2022-jp decoder state to lead byte, prepend
            // byte to stream, and return error.
            iso2022jp_decoder_state = states.LeadByte;
            stream.prepend(bite);
            return decoderError(fatal);
          }

          // Otherwise
          // Set iso-2022-jp decoder state to lead byte and return
          // error.
          iso2022jp_decoder_state = states.LeadByte;
          return decoderError(fatal);

        case states.EscapeStart:
          // Escape start

          // 1. If byte is either 0x24 or 0x28, set iso-2022-jp lead to
          // byte, iso-2022-jp decoder state to escape, and return
          // continue.
          if (bite === 0x24 || bite === 0x28) {
            iso2022jp_lead = bite;
            iso2022jp_decoder_state = states.Escape;
            return null;
          }

          // 2. Prepend byte to stream.
          stream.prepend(bite);

          // 3. Unset the iso-2022-jp output flag, set iso-2022-jp
          // decoder state to iso-2022-jp decoder output state, and
          // return error.
          iso2022jp_output_flag = false;
          iso2022jp_decoder_state = iso2022jp_decoder_output_state;
          return decoderError(fatal);

        case states.Escape:
          // Escape

          // 1. Let lead be iso-2022-jp lead and set iso-2022-jp lead to
          // 0x00.
          var lead = iso2022jp_lead;
          iso2022jp_lead = 0x00;

          // 2. Let state be null.
          var state = null;

          // 3. If lead is 0x28 and byte is 0x42, set state to ASCII.
          if (lead === 0x28 && bite === 0x42)
            state = states.ASCII;

          // 4. If lead is 0x28 and byte is 0x4A, set state to Roman.
          if (lead === 0x28 && bite === 0x4A)
            state = states.Roman;

          // 5. If lead is 0x28 and byte is 0x49, set state to Katakana.
          if (lead === 0x28 && bite === 0x49)
            state = states.Katakana;

          // 6. If lead is 0x24 and byte is either 0x40 or 0x42, set
          // state to lead byte.
          if (lead === 0x24 && (bite === 0x40 || bite === 0x42))
            state = states.LeadByte;

          // 7. If state is non-null, run these substeps:
          if (state !== null) {
            // 1. Set iso-2022-jp decoder state and iso-2022-jp decoder
            // output state to states.
            iso2022jp_decoder_state = iso2022jp_decoder_state = state;

            // 2. Let output flag be the iso-2022-jp output flag.
            var output_flag = iso2022jp_output_flag;

            // 3. Set the iso-2022-jp output flag.
            iso2022jp_output_flag = true;

            // 4. Return continue, if output flag is unset, and error
            // otherwise.
            return !output_flag ? null : decoderError(fatal);
          }

          // 8. Prepend lead and byte to stream.
          stream.prepend([lead, bite]);

          // 9. Unset the iso-2022-jp output flag, set iso-2022-jp
          // decoder state to iso-2022-jp decoder output state and
          // return error.
          iso2022jp_output_flag = false;
          iso2022jp_decoder_state = iso2022jp_decoder_output_state;
          return decoderError(fatal);
        }
      };
    }

    // 13.2.2 iso-2022-jp encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function ISO2022JPEncoder(options) {
      options.fatal;
      // iso-2022-jp's encoder has an associated iso-2022-jp encoder
      // state which is one of ASCII, Roman, and jis0208 (initially
      // ASCII).
      /** @enum */
      var states = {
        ASCII: 0,
        Roman: 1,
        jis0208: 2
      };
      var /** @type {number} */ iso2022jp_state = states.ASCII;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream and iso-2022-jp encoder
        // state is not ASCII, prepend code point to stream, set
        // iso-2022-jp encoder state to ASCII, and return three bytes
        // 0x1B 0x28 0x42.
        if (code_point === end_of_stream &&
            iso2022jp_state !== states.ASCII) {
          stream.prepend(code_point);
          iso2022jp_state = states.ASCII;
          return [0x1B, 0x28, 0x42];
        }

        // 2. If code point is end-of-stream and iso-2022-jp encoder
        // state is ASCII, return finished.
        if (code_point === end_of_stream && iso2022jp_state === states.ASCII)
          return finished;

        // 3. If ISO-2022-JP encoder state is ASCII or Roman, and code
        // point is U+000E, U+000F, or U+001B, return error with U+FFFD.
        if ((iso2022jp_state === states.ASCII ||
             iso2022jp_state === states.Roman) &&
            (code_point === 0x000E || code_point === 0x000F ||
             code_point === 0x001B)) {
          return encoderError(0xFFFD);
        }

        // 4. If iso-2022-jp encoder state is ASCII and code point is an
        // ASCII code point, return a byte whose value is code point.
        if (iso2022jp_state === states.ASCII &&
            isASCIICodePoint(code_point))
          return code_point;

        // 5. If iso-2022-jp encoder state is Roman and code point is an
        // ASCII code point, excluding U+005C and U+007E, or is U+00A5
        // or U+203E, run these substeps:
        if (iso2022jp_state === states.Roman &&
            ((isASCIICodePoint(code_point) &&
             code_point !== 0x005C && code_point !== 0x007E) ||
            (code_point == 0x00A5 || code_point == 0x203E))) {

          // 1. If code point is an ASCII code point, return a byte
          // whose value is code point.
          if (isASCIICodePoint(code_point))
            return code_point;

          // 2. If code point is U+00A5, return byte 0x5C.
          if (code_point === 0x00A5)
            return 0x5C;

          // 3. If code point is U+203E, return byte 0x7E.
          if (code_point === 0x203E)
            return 0x7E;
        }

        // 6. If code point is an ASCII code point, and iso-2022-jp
        // encoder state is not ASCII, prepend code point to stream, set
        // iso-2022-jp encoder state to ASCII, and return three bytes
        // 0x1B 0x28 0x42.
        if (isASCIICodePoint(code_point) &&
            iso2022jp_state !== states.ASCII) {
          stream.prepend(code_point);
          iso2022jp_state = states.ASCII;
          return [0x1B, 0x28, 0x42];
        }

        // 7. If code point is either U+00A5 or U+203E, and iso-2022-jp
        // encoder state is not Roman, prepend code point to stream, set
        // iso-2022-jp encoder state to Roman, and return three bytes
        // 0x1B 0x28 0x4A.
        if ((code_point === 0x00A5 || code_point === 0x203E) &&
            iso2022jp_state !== states.Roman) {
          stream.prepend(code_point);
          iso2022jp_state = states.Roman;
          return [0x1B, 0x28, 0x4A];
        }

        // 8. If code point is U+2212, set it to U+FF0D.
        if (code_point === 0x2212)
          code_point = 0xFF0D;

        // 9. Let pointer be the index pointer for code point in index
        // jis0208.
        var pointer = indexPointerFor(code_point, index('jis0208'));

        // 10. If pointer is null, return error with code point.
        if (pointer === null)
          return encoderError(code_point);

        // 11. If iso-2022-jp encoder state is not jis0208, prepend code
        // point to stream, set iso-2022-jp encoder state to jis0208,
        // and return three bytes 0x1B 0x24 0x42.
        if (iso2022jp_state !== states.jis0208) {
          stream.prepend(code_point);
          iso2022jp_state = states.jis0208;
          return [0x1B, 0x24, 0x42];
        }

        // 12. Let lead be floor(pointer / 94) + 0x21.
        var lead = floor(pointer / 94) + 0x21;

        // 13. Let trail be pointer % 94 + 0x21.
        var trail = pointer % 94 + 0x21;

        // 14. Return two bytes whose values are lead and trail.
        return [lead, trail];
      };
    }

    /** @param {{fatal: boolean}} options */
    encoders['ISO-2022-JP'] = function(options) {
      return new ISO2022JPEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    decoders['ISO-2022-JP'] = function(options) {
      return new ISO2022JPDecoder(options);
    };

    // 13.3 Shift_JIS

    // 13.3.1 Shift_JIS decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function ShiftJISDecoder(options) {
      var fatal = options.fatal;
      // Shift_JIS's decoder has an associated Shift_JIS lead (initially
      // 0x00).
      var /** @type {number} */ Shift_JIS_lead = 0x00;
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and Shift_JIS lead is not 0x00,
        // set Shift_JIS lead to 0x00 and return error.
        if (bite === end_of_stream && Shift_JIS_lead !== 0x00) {
          Shift_JIS_lead = 0x00;
          return decoderError(fatal);
        }

        // 2. If byte is end-of-stream and Shift_JIS lead is 0x00,
        // return finished.
        if (bite === end_of_stream && Shift_JIS_lead === 0x00)
          return finished;

        // 3. If Shift_JIS lead is not 0x00, let lead be Shift_JIS lead,
        // let pointer be null, set Shift_JIS lead to 0x00, and then run
        // these substeps:
        if (Shift_JIS_lead !== 0x00) {
          var lead = Shift_JIS_lead;
          var pointer = null;
          Shift_JIS_lead = 0x00;

          // 1. Let offset be 0x40, if byte is less than 0x7F, and 0x41
          // otherwise.
          var offset = (bite < 0x7F) ? 0x40 : 0x41;

          // 2. Let lead offset be 0x81, if lead is less than 0xA0, and
          // 0xC1 otherwise.
          var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;

          // 3. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80
          // to 0xFC, inclusive, set pointer to (lead − lead offset) ×
          // 188 + byte − offset.
          if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFC))
            pointer = (lead - lead_offset) * 188 + bite - offset;

          // 4. If pointer is in the range 8836 to 10715, inclusive,
          // return a code point whose value is 0xE000 − 8836 + pointer.
          if (inRange(pointer, 8836, 10715))
            return 0xE000 - 8836 + pointer;

          // 5. Let code point be null, if pointer is null, and the
          // index code point for pointer in index jis0208 otherwise.
          var code_point = (pointer === null) ? null :
                indexCodePointFor(pointer, index('jis0208'));

          // 6. If code point is null and byte is an ASCII byte, prepend
          // byte to stream.
          if (code_point === null && isASCIIByte(bite))
            stream.prepend(bite);

          // 7. If code point is null, return error.
          if (code_point === null)
            return decoderError(fatal);

          // 8. Return a code point whose value is code point.
          return code_point;
        }

        // 4. If byte is an ASCII byte or 0x80, return a code point
        // whose value is byte.
        if (isASCIIByte(bite) || bite === 0x80)
          return bite;

        // 5. If byte is in the range 0xA1 to 0xDF, inclusive, return a
        // code point whose value is 0xFF61 − 0xA1 + byte.
        if (inRange(bite, 0xA1, 0xDF))
          return 0xFF61 - 0xA1 + bite;

        // 6. If byte is in the range 0x81 to 0x9F, inclusive, or 0xE0
        // to 0xFC, inclusive, set Shift_JIS lead to byte and return
        // continue.
        if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0, 0xFC)) {
          Shift_JIS_lead = bite;
          return null;
        }

        // 7. Return error.
        return decoderError(fatal);
      };
    }

    // 13.3.2 Shift_JIS encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function ShiftJISEncoder(options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is an ASCII code point or U+0080, return a
        // byte whose value is code point.
        if (isASCIICodePoint(code_point) || code_point === 0x0080)
          return code_point;

        // 3. If code point is U+00A5, return byte 0x5C.
        if (code_point === 0x00A5)
          return 0x5C;

        // 4. If code point is U+203E, return byte 0x7E.
        if (code_point === 0x203E)
          return 0x7E;

        // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,
        // return a byte whose value is code point − 0xFF61 + 0xA1.
        if (inRange(code_point, 0xFF61, 0xFF9F))
          return code_point - 0xFF61 + 0xA1;

        // 6. If code point is U+2212, set it to U+FF0D.
        if (code_point === 0x2212)
          code_point = 0xFF0D;

        // 7. Let pointer be the index Shift_JIS pointer for code point.
        var pointer = indexShiftJISPointerFor(code_point);

        // 8. If pointer is null, return error with code point.
        if (pointer === null)
          return encoderError(code_point);

        // 9. Let lead be floor(pointer / 188).
        var lead = floor(pointer / 188);

        // 10. Let lead offset be 0x81, if lead is less than 0x1F, and
        // 0xC1 otherwise.
        var lead_offset = (lead < 0x1F) ? 0x81 : 0xC1;

        // 11. Let trail be pointer % 188.
        var trail = pointer % 188;

        // 12. Let offset be 0x40, if trail is less than 0x3F, and 0x41
        // otherwise.
        var offset = (trail < 0x3F) ? 0x40 : 0x41;

        // 13. Return two bytes whose values are lead + lead offset and
        // trail + offset.
        return [lead + lead_offset, trail + offset];
      };
    }

    /** @param {{fatal: boolean}} options */
    encoders['Shift_JIS'] = function(options) {
      return new ShiftJISEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    decoders['Shift_JIS'] = function(options) {
      return new ShiftJISDecoder(options);
    };

    //
    // 14. Legacy multi-byte Korean encodings
    //

    // 14.1 euc-kr

    // 14.1.1 euc-kr decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function EUCKRDecoder(options) {
      var fatal = options.fatal;

      // euc-kr's decoder has an associated euc-kr lead (initially 0x00).
      var /** @type {number} */ euckr_lead = 0x00;
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and euc-kr lead is not 0x00, set
        // euc-kr lead to 0x00 and return error.
        if (bite === end_of_stream && euckr_lead !== 0) {
          euckr_lead = 0x00;
          return decoderError(fatal);
        }

        // 2. If byte is end-of-stream and euc-kr lead is 0x00, return
        // finished.
        if (bite === end_of_stream && euckr_lead === 0)
          return finished;

        // 3. If euc-kr lead is not 0x00, let lead be euc-kr lead, let
        // pointer be null, set euc-kr lead to 0x00, and then run these
        // substeps:
        if (euckr_lead !== 0x00) {
          var lead = euckr_lead;
          var pointer = null;
          euckr_lead = 0x00;

          // 1. If byte is in the range 0x41 to 0xFE, inclusive, set
          // pointer to (lead − 0x81) × 190 + (byte − 0x41).
          if (inRange(bite, 0x41, 0xFE))
            pointer = (lead - 0x81) * 190 + (bite - 0x41);

          // 2. Let code point be null, if pointer is null, and the
          // index code point for pointer in index euc-kr otherwise.
          var code_point = (pointer === null)
                ? null : indexCodePointFor(pointer, index('euc-kr'));

          // 3. If code point is null and byte is an ASCII byte, prepend
          // byte to stream.
          if (pointer === null && isASCIIByte(bite))
            stream.prepend(bite);

          // 4. If code point is null, return error.
          if (code_point === null)
            return decoderError(fatal);

          // 5. Return a code point whose value is code point.
          return code_point;
        }

        // 4. If byte is an ASCII byte, return a code point whose value
        // is byte.
        if (isASCIIByte(bite))
          return bite;

        // 5. If byte is in the range 0x81 to 0xFE, inclusive, set
        // euc-kr lead to byte and return continue.
        if (inRange(bite, 0x81, 0xFE)) {
          euckr_lead = bite;
          return null;
        }

        // 6. Return error.
        return decoderError(fatal);
      };
    }

    // 14.1.2 euc-kr encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function EUCKREncoder(options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is an ASCII code point, return a byte whose
        // value is code point.
        if (isASCIICodePoint(code_point))
          return code_point;

        // 3. Let pointer be the index pointer for code point in index
        // euc-kr.
        var pointer = indexPointerFor(code_point, index('euc-kr'));

        // 4. If pointer is null, return error with code point.
        if (pointer === null)
          return encoderError(code_point);

        // 5. Let lead be floor(pointer / 190) + 0x81.
        var lead = floor(pointer / 190) + 0x81;

        // 6. Let trail be pointer % 190 + 0x41.
        var trail = (pointer % 190) + 0x41;

        // 7. Return two bytes whose values are lead and trail.
        return [lead, trail];
      };
    }

    /** @param {{fatal: boolean}} options */
    encoders['EUC-KR'] = function(options) {
      return new EUCKREncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    decoders['EUC-KR'] = function(options) {
      return new EUCKRDecoder(options);
    };


    //
    // 15. Legacy miscellaneous encodings
    //

    // 15.1 replacement

    // Not needed - API throws RangeError

    // 15.2 Common infrastructure for utf-16be and utf-16le

    /**
     * @param {number} code_unit
     * @param {boolean} utf16be
     * @return {!Array.<number>} bytes
     */
    function convertCodeUnitToBytes(code_unit, utf16be) {
      // 1. Let byte1 be code unit >> 8.
      var byte1 = code_unit >> 8;

      // 2. Let byte2 be code unit & 0x00FF.
      var byte2 = code_unit & 0x00FF;

      // 3. Then return the bytes in order:
          // utf-16be flag is set: byte1, then byte2.
      if (utf16be)
        return [byte1, byte2];
      // utf-16be flag is unset: byte2, then byte1.
      return [byte2, byte1];
    }

    // 15.2.1 shared utf-16 decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {boolean} utf16_be True if big-endian, false if little-endian.
     * @param {{fatal: boolean}} options
     */
    function UTF16Decoder(utf16_be, options) {
      var fatal = options.fatal;
      var /** @type {?number} */ utf16_lead_byte = null,
          /** @type {?number} */ utf16_lead_surrogate = null;
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream and either utf-16 lead byte or
        // utf-16 lead surrogate is not null, set utf-16 lead byte and
        // utf-16 lead surrogate to null, and return error.
        if (bite === end_of_stream && (utf16_lead_byte !== null ||
                                  utf16_lead_surrogate !== null)) {
          return decoderError(fatal);
        }

        // 2. If byte is end-of-stream and utf-16 lead byte and utf-16
        // lead surrogate are null, return finished.
        if (bite === end_of_stream && utf16_lead_byte === null &&
            utf16_lead_surrogate === null) {
          return finished;
        }

        // 3. If utf-16 lead byte is null, set utf-16 lead byte to byte
        // and return continue.
        if (utf16_lead_byte === null) {
          utf16_lead_byte = bite;
          return null;
        }

        // 4. Let code unit be the result of:
        var code_unit;
        if (utf16_be) {
          // utf-16be decoder flag is set
          //   (utf-16 lead byte << 8) + byte.
          code_unit = (utf16_lead_byte << 8) + bite;
        } else {
          // utf-16be decoder flag is unset
          //   (byte << 8) + utf-16 lead byte.
          code_unit = (bite << 8) + utf16_lead_byte;
        }
        // Then set utf-16 lead byte to null.
        utf16_lead_byte = null;

        // 5. If utf-16 lead surrogate is not null, let lead surrogate
        // be utf-16 lead surrogate, set utf-16 lead surrogate to null,
        // and then run these substeps:
        if (utf16_lead_surrogate !== null) {
          var lead_surrogate = utf16_lead_surrogate;
          utf16_lead_surrogate = null;

          // 1. If code unit is in the range U+DC00 to U+DFFF,
          // inclusive, return a code point whose value is 0x10000 +
          // ((lead surrogate − 0xD800) << 10) + (code unit − 0xDC00).
          if (inRange(code_unit, 0xDC00, 0xDFFF)) {
            return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +
                (code_unit - 0xDC00);
          }

          // 2. Prepend the sequence resulting of converting code unit
          // to bytes using utf-16be decoder flag to stream and return
          // error.
          stream.prepend(convertCodeUnitToBytes(code_unit, utf16_be));
          return decoderError(fatal);
        }

        // 6. If code unit is in the range U+D800 to U+DBFF, inclusive,
        // set utf-16 lead surrogate to code unit and return continue.
        if (inRange(code_unit, 0xD800, 0xDBFF)) {
          utf16_lead_surrogate = code_unit;
          return null;
        }

        // 7. If code unit is in the range U+DC00 to U+DFFF, inclusive,
        // return error.
        if (inRange(code_unit, 0xDC00, 0xDFFF))
          return decoderError(fatal);

        // 8. Return code point code unit.
        return code_unit;
      };
    }

    // 15.2.2 shared utf-16 encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {boolean} utf16_be True if big-endian, false if little-endian.
     * @param {{fatal: boolean}} options
     */
    function UTF16Encoder(utf16_be, options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1. If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is in the range U+0000 to U+FFFF, inclusive,
        // return the sequence resulting of converting code point to
        // bytes using utf-16be encoder flag.
        if (inRange(code_point, 0x0000, 0xFFFF))
          return convertCodeUnitToBytes(code_point, utf16_be);

        // 3. Let lead be ((code point − 0x10000) >> 10) + 0xD800,
        // converted to bytes using utf-16be encoder flag.
        var lead = convertCodeUnitToBytes(
          ((code_point - 0x10000) >> 10) + 0xD800, utf16_be);

        // 4. Let trail be ((code point − 0x10000) & 0x3FF) + 0xDC00,
        // converted to bytes using utf-16be encoder flag.
        var trail = convertCodeUnitToBytes(
          ((code_point - 0x10000) & 0x3FF) + 0xDC00, utf16_be);

        // 5. Return a byte sequence of lead followed by trail.
        return lead.concat(trail);
      };
    }

    // 15.3 utf-16be
    // 15.3.1 utf-16be decoder
    /** @param {{fatal: boolean}} options */
    encoders['UTF-16BE'] = function(options) {
      return new UTF16Encoder(true, options);
    };
    // 15.3.2 utf-16be encoder
    /** @param {{fatal: boolean}} options */
    decoders['UTF-16BE'] = function(options) {
      return new UTF16Decoder(true, options);
    };

    // 15.4 utf-16le
    // 15.4.1 utf-16le decoder
    /** @param {{fatal: boolean}} options */
    encoders['UTF-16LE'] = function(options) {
      return new UTF16Encoder(false, options);
    };
    // 15.4.2 utf-16le encoder
    /** @param {{fatal: boolean}} options */
    decoders['UTF-16LE'] = function(options) {
      return new UTF16Decoder(false, options);
    };

    // 15.5 x-user-defined

    // 15.5.1 x-user-defined decoder
    /**
     * @constructor
     * @implements {Decoder}
     * @param {{fatal: boolean}} options
     */
    function XUserDefinedDecoder(options) {
      options.fatal;
      /**
       * @param {Stream} stream The stream of bytes being decoded.
       * @param {number} bite The next byte read from the stream.
       * @return {?(number|!Array.<number>)} The next code point(s)
       *     decoded, or null if not enough data exists in the input
       *     stream to decode a complete code point.
       */
      this.handler = function(stream, bite) {
        // 1. If byte is end-of-stream, return finished.
        if (bite === end_of_stream)
          return finished;

        // 2. If byte is an ASCII byte, return a code point whose value
        // is byte.
        if (isASCIIByte(bite))
          return bite;

        // 3. Return a code point whose value is 0xF780 + byte − 0x80.
        return 0xF780 + bite - 0x80;
      };
    }

    // 15.5.2 x-user-defined encoder
    /**
     * @constructor
     * @implements {Encoder}
     * @param {{fatal: boolean}} options
     */
    function XUserDefinedEncoder(options) {
      options.fatal;
      /**
       * @param {Stream} stream Input stream.
       * @param {number} code_point Next code point read from the stream.
       * @return {(number|!Array.<number>)} Byte(s) to emit.
       */
      this.handler = function(stream, code_point) {
        // 1.If code point is end-of-stream, return finished.
        if (code_point === end_of_stream)
          return finished;

        // 2. If code point is an ASCII code point, return a byte whose
        // value is code point.
        if (isASCIICodePoint(code_point))
          return code_point;

        // 3. If code point is in the range U+F780 to U+F7FF, inclusive,
        // return a byte whose value is code point − 0xF780 + 0x80.
        if (inRange(code_point, 0xF780, 0xF7FF))
          return code_point - 0xF780 + 0x80;

        // 4. Return error with code point.
        return encoderError(code_point);
      };
    }

    /** @param {{fatal: boolean}} options */
    encoders['x-user-defined'] = function(options) {
      return new XUserDefinedEncoder(options);
    };
    /** @param {{fatal: boolean}} options */
    decoders['x-user-defined'] = function(options) {
      return new XUserDefinedDecoder(options);
    };

    if (!global['TextEncoder'])
      global['TextEncoder'] = TextEncoder;
    if (!global['TextDecoder'])
      global['TextDecoder'] = TextDecoder;

    if (module.exports) {
      module.exports = {
        TextEncoder: global['TextEncoder'],
        TextDecoder: global['TextDecoder'],
        EncodingIndexes: global["encoding-indexes"]
      };
    }

  // For strict environments where `this` inside the global scope
  // is `undefined`, take a pure object instead
  }(commonjsGlobal || {}));
  });

  // This is free and unencumbered software released into the public domain.
  // See LICENSE.md for more information.



  var textEncoding = {
    TextEncoder: encoding$1.TextEncoder,
    TextDecoder: encoding$1.TextDecoder,
  };

  const utf8Encoder = new textEncoding.TextEncoder();
  const utf8Decoder = new textEncoding.TextDecoder("utf-8", { ignoreBOM: true });

  function utf8Encode$2(string) {
    return utf8Encoder.encode(string);
  }

  function utf8DecodeWithoutBOM$1(bytes) {
    return utf8Decoder.decode(bytes);
  }

  var encoding = {
    utf8Encode: utf8Encode$2,
    utf8DecodeWithoutBOM: utf8DecodeWithoutBOM$1
  };

  const { isASCIIHex } = infra;
  const { utf8Encode: utf8Encode$1 } = encoding;

  // https://url.spec.whatwg.org/#percent-encode
  function percentEncode(c) {
    let hex = c.toString(16).toUpperCase();
    if (hex.length === 1) {
      hex = `0${hex}`;
    }

    return `%${hex}`;
  }

  // https://url.spec.whatwg.org/#percent-decode
  function percentDecodeBytes$1(input) {
    const output = new Uint8Array(input.byteLength);
    let outputIndex = 0;
    for (let i = 0; i < input.byteLength; ++i) {
      const byte = input[i];
      if (byte !== 0x25) {
        output[outputIndex++] = byte;
      } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {
        output[outputIndex++] = byte;
      } else {
        const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);
        output[outputIndex++] = bytePoint;
        i += 2;
      }
    }

    return output.slice(0, outputIndex);
  }

  // https://url.spec.whatwg.org/#string-percent-decode
  function percentDecodeString(input) {
    const bytes = utf8Encode$1(input);
    return percentDecodeBytes$1(bytes);
  }

  // https://url.spec.whatwg.org/#c0-control-percent-encode-set
  function isC0ControlPercentEncode(c) {
    return c <= 0x1F || c > 0x7E;
  }

  // https://url.spec.whatwg.org/#fragment-percent-encode-set
  const extraFragmentPercentEncodeSet = new Set([32, 34, 60, 62, 96]);
  function isFragmentPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);
  }

  // https://url.spec.whatwg.org/#query-percent-encode-set
  const extraQueryPercentEncodeSet = new Set([32, 34, 35, 60, 62]);
  function isQueryPercentEncode(c) {
    return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);
  }

  // https://url.spec.whatwg.org/#special-query-percent-encode-set
  function isSpecialQueryPercentEncode(c) {
    return isQueryPercentEncode(c) || c === 39;
  }

  // https://url.spec.whatwg.org/#path-percent-encode-set
  const extraPathPercentEncodeSet = new Set([63, 96, 123, 125]);
  function isPathPercentEncode(c) {
    return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);
  }

  // https://url.spec.whatwg.org/#userinfo-percent-encode-set
  const extraUserinfoPercentEncodeSet =
    new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function isUserinfoPercentEncode(c) {
    return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
  }

  // https://url.spec.whatwg.org/#component-percent-encode-set
  const extraComponentPercentEncodeSet = new Set([36, 37, 38, 43, 44]);
  function isComponentPercentEncode(c) {
    return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);
  }

  // https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set
  const extraURLEncodedPercentEncodeSet = new Set([33, 39, 40, 41, 126]);
  function isURLEncodedPercentEncode$1(c) {
    return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);
  }

  // https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding
  // https://url.spec.whatwg.org/#utf-8-percent-encode
  // Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.
  // The "-Internal" variant here has code points as JS strings. The external version used by other files has code points
  // as JS numbers, like the rest of the codebase.
  function utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {
    const bytes = utf8Encode$1(codePoint);
    let output = "";
    for (const byte of bytes) {
      // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.
      if (!percentEncodePredicate(byte)) {
        output += String.fromCharCode(byte);
      } else {
        output += percentEncode(byte);
      }
    }

    return output;
  }

  function utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {
    return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);
  }

  // https://url.spec.whatwg.org/#string-percent-encode-after-encoding
  // https://url.spec.whatwg.org/#string-utf-8-percent-encode
  function utf8PercentEncodeString$1(input, percentEncodePredicate, spaceAsPlus = false) {
    let output = "";
    for (const codePoint of input) {
      if (spaceAsPlus && codePoint === " ") {
        output += "+";
      } else {
        output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);
      }
    }
    return output;
  }

  var percentEncoding = {
    isC0ControlPercentEncode,
    isFragmentPercentEncode,
    isQueryPercentEncode,
    isSpecialQueryPercentEncode,
    isPathPercentEncode,
    isUserinfoPercentEncode,
    isURLEncodedPercentEncode: isURLEncodedPercentEncode$1,
    percentDecodeString,
    percentDecodeBytes: percentDecodeBytes$1,
    utf8PercentEncodeString: utf8PercentEncodeString$1,
    utf8PercentEncodeCodePoint
  };

  var urlStateMachine = createCommonjsModule(function (module) {



  const { utf8DecodeWithoutBOM } = encoding;
  const { percentDecodeString, utf8PercentEncodeCodePoint, utf8PercentEncodeString, isC0ControlPercentEncode,
    isFragmentPercentEncode, isQueryPercentEncode, isSpecialQueryPercentEncode, isPathPercentEncode,
    isUserinfoPercentEncode } = percentEncoding;

  const specialSchemes = {
    ftp: 21,
    file: null,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };

  const failure = Symbol("failure");

  function countSymbols(str) {
    return [...str].length;
  }

  function at(input, idx) {
    const c = input[idx];
    return isNaN(c) ? undefined : String.fromCodePoint(c);
  }

  function isSingleDot(buffer) {
    return buffer === "." || buffer.toLowerCase() === "%2e";
  }

  function isDoubleDot(buffer) {
    buffer = buffer.toLowerCase();
    return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
  }

  function isWindowsDriveLetterCodePoints(cp1, cp2) {
    return infra.isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
  }

  function isWindowsDriveLetterString(string) {
    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
  }

  function isNormalizedWindowsDriveLetterString(string) {
    return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
  }

  function containsForbiddenHostCodePoint(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|<|>|\?|@|\[|\\|\]|\^|\|/u) !== -1;
  }

  function containsForbiddenHostCodePointExcludingPercent(string) {
    return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|<|>|\?|@|\[|\\|\]|\^|\|/u) !== -1;
  }

  function isSpecialScheme(scheme) {
    return specialSchemes[scheme] !== undefined;
  }

  function isSpecial(url) {
    return isSpecialScheme(url.scheme);
  }

  function isNotSpecial(url) {
    return !isSpecialScheme(url.scheme);
  }

  function defaultPort(scheme) {
    return specialSchemes[scheme];
  }

  function parseIPv4Number(input) {
    let R = 10;

    if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
      input = input.substring(2);
      R = 16;
    } else if (input.length >= 2 && input.charAt(0) === "0") {
      input = input.substring(1);
      R = 8;
    }

    if (input === "") {
      return 0;
    }

    let regex = /[^0-7]/u;
    if (R === 10) {
      regex = /[^0-9]/u;
    }
    if (R === 16) {
      regex = /[^0-9A-Fa-f]/u;
    }

    if (regex.test(input)) {
      return failure;
    }

    return parseInt(input, R);
  }

  function parseIPv4(input) {
    const parts = input.split(".");
    if (parts[parts.length - 1] === "") {
      if (parts.length > 1) {
        parts.pop();
      }
    }

    if (parts.length > 4) {
      return input;
    }

    const numbers = [];
    for (const part of parts) {
      if (part === "") {
        return input;
      }
      const n = parseIPv4Number(part);
      if (n === failure) {
        return input;
      }

      numbers.push(n);
    }

    for (let i = 0; i < numbers.length - 1; ++i) {
      if (numbers[i] > 255) {
        return failure;
      }
    }
    if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {
      return failure;
    }

    let ipv4 = numbers.pop();
    let counter = 0;

    for (const n of numbers) {
      ipv4 += n * 256 ** (3 - counter);
      ++counter;
    }

    return ipv4;
  }

  function serializeIPv4(address) {
    let output = "";
    let n = address;

    for (let i = 1; i <= 4; ++i) {
      output = String(n % 256) + output;
      if (i !== 4) {
        output = `.${output}`;
      }
      n = Math.floor(n / 256);
    }

    return output;
  }

  function parseIPv6(input) {
    const address = [0, 0, 0, 0, 0, 0, 0, 0];
    let pieceIndex = 0;
    let compress = null;
    let pointer = 0;

    input = Array.from(input, c => c.codePointAt(0));

    if (input[pointer] === 58) {
      if (input[pointer + 1] !== 58) {
        return failure;
      }

      pointer += 2;
      ++pieceIndex;
      compress = pieceIndex;
    }

    while (pointer < input.length) {
      if (pieceIndex === 8) {
        return failure;
      }

      if (input[pointer] === 58) {
        if (compress !== null) {
          return failure;
        }
        ++pointer;
        ++pieceIndex;
        compress = pieceIndex;
        continue;
      }

      let value = 0;
      let length = 0;

      while (length < 4 && infra.isASCIIHex(input[pointer])) {
        value = value * 0x10 + parseInt(at(input, pointer), 16);
        ++pointer;
        ++length;
      }

      if (input[pointer] === 46) {
        if (length === 0) {
          return failure;
        }

        pointer -= length;

        if (pieceIndex > 6) {
          return failure;
        }

        let numbersSeen = 0;

        while (input[pointer] !== undefined) {
          let ipv4Piece = null;

          if (numbersSeen > 0) {
            if (input[pointer] === 46 && numbersSeen < 4) {
              ++pointer;
            } else {
              return failure;
            }
          }

          if (!infra.isASCIIDigit(input[pointer])) {
            return failure;
          }

          while (infra.isASCIIDigit(input[pointer])) {
            const number = parseInt(at(input, pointer));
            if (ipv4Piece === null) {
              ipv4Piece = number;
            } else if (ipv4Piece === 0) {
              return failure;
            } else {
              ipv4Piece = ipv4Piece * 10 + number;
            }
            if (ipv4Piece > 255) {
              return failure;
            }
            ++pointer;
          }

          address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;

          ++numbersSeen;

          if (numbersSeen === 2 || numbersSeen === 4) {
            ++pieceIndex;
          }
        }

        if (numbersSeen !== 4) {
          return failure;
        }

        break;
      } else if (input[pointer] === 58) {
        ++pointer;
        if (input[pointer] === undefined) {
          return failure;
        }
      } else if (input[pointer] !== undefined) {
        return failure;
      }

      address[pieceIndex] = value;
      ++pieceIndex;
    }

    if (compress !== null) {
      let swaps = pieceIndex - compress;
      pieceIndex = 7;
      while (pieceIndex !== 0 && swaps > 0) {
        const temp = address[compress + swaps - 1];
        address[compress + swaps - 1] = address[pieceIndex];
        address[pieceIndex] = temp;
        --pieceIndex;
        --swaps;
      }
    } else if (compress === null && pieceIndex !== 8) {
      return failure;
    }

    return address;
  }

  function serializeIPv6(address) {
    let output = "";
    const compress = findLongestZeroSequence(address);
    let ignore0 = false;

    for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
      if (ignore0 && address[pieceIndex] === 0) {
        continue;
      } else if (ignore0) {
        ignore0 = false;
      }

      if (compress === pieceIndex) {
        const separator = pieceIndex === 0 ? "::" : ":";
        output += separator;
        ignore0 = true;
        continue;
      }

      output += address[pieceIndex].toString(16);

      if (pieceIndex !== 7) {
        output += ":";
      }
    }

    return output;
  }

  function parseHost(input, isNotSpecialArg = false) {
    if (input[0] === "[") {
      if (input[input.length - 1] !== "]") {
        return failure;
      }

      return parseIPv6(input.substring(1, input.length - 1));
    }

    if (isNotSpecialArg) {
      return parseOpaqueHost(input);
    }

    const domain = utf8DecodeWithoutBOM(percentDecodeString(input));
    const asciiDomain = domainToASCII(domain);
    if (asciiDomain === failure) {
      return failure;
    }

    if (containsForbiddenHostCodePoint(asciiDomain)) {
      return failure;
    }

    const ipv4Host = parseIPv4(asciiDomain);
    if (typeof ipv4Host === "number" || ipv4Host === failure) {
      return ipv4Host;
    }

    return asciiDomain;
  }

  function parseOpaqueHost(input) {
    if (containsForbiddenHostCodePointExcludingPercent(input)) {
      return failure;
    }

    return utf8PercentEncodeString(input, isC0ControlPercentEncode);
  }

  function findLongestZeroSequence(arr) {
    let maxIdx = null;
    let maxLen = 1; // only find elements > 1
    let currStart = null;
    let currLen = 0;

    for (let i = 0; i < arr.length; ++i) {
      if (arr[i] !== 0) {
        if (currLen > maxLen) {
          maxIdx = currStart;
          maxLen = currLen;
        }

        currStart = null;
        currLen = 0;
      } else {
        if (currStart === null) {
          currStart = i;
        }
        ++currLen;
      }
    }

    // if trailing zeros
    if (currLen > maxLen) {
      return currStart;
    }

    return maxIdx;
  }

  function serializeHost(host) {
    if (typeof host === "number") {
      return serializeIPv4(host);
    }

    // IPv6 serializer
    if (host instanceof Array) {
      return `[${serializeIPv6(host)}]`;
    }

    return host;
  }

  function domainToASCII(domain, beStrict = false) {
    const result = tr46.toASCII(domain, {
      checkBidi: true,
      checkHyphens: false,
      checkJoiners: true,
      useSTD3ASCIIRules: beStrict,
      verifyDNSLength: beStrict
    });
    if (result === null || result === "") {
      return failure;
    }
    return result;
  }

  function trimControlChars(url) {
    return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/ug, "");
  }

  function trimTabAndNewline(url) {
    return url.replace(/\u0009|\u000A|\u000D/ug, "");
  }

  function shortenPath(url) {
    const { path } = url;
    if (path.length === 0) {
      return;
    }
    if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
      return;
    }

    path.pop();
  }

  function includesCredentials(url) {
    return url.username !== "" || url.password !== "";
  }

  function cannotHaveAUsernamePasswordPort(url) {
    return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
  }

  function isNormalizedWindowsDriveLetter(string) {
    return /^[A-Za-z]:$/u.test(string);
  }

  function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
    this.pointer = 0;
    this.input = input;
    this.base = base || null;
    this.encodingOverride = encodingOverride || "utf-8";
    this.stateOverride = stateOverride;
    this.url = url;
    this.failure = false;
    this.parseError = false;

    if (!this.url) {
      this.url = {
        scheme: "",
        username: "",
        password: "",
        host: null,
        port: null,
        path: [],
        query: null,
        fragment: null,

        cannotBeABaseURL: false
      };

      const res = trimControlChars(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
    }

    const res = trimTabAndNewline(this.input);
    if (res !== this.input) {
      this.parseError = true;
    }
    this.input = res;

    this.state = stateOverride || "scheme start";

    this.buffer = "";
    this.atFlag = false;
    this.arrFlag = false;
    this.passwordTokenSeenFlag = false;

    this.input = Array.from(this.input, c => c.codePointAt(0));

    for (; this.pointer <= this.input.length; ++this.pointer) {
      const c = this.input[this.pointer];
      const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);

      // exec state machine
      const ret = this[`parse ${this.state}`](c, cStr);
      if (!ret) {
        break; // terminate algorithm
      } else if (ret === failure) {
        this.failure = true;
        break;
      }
    }
  }

  URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
    if (infra.isASCIIAlpha(c)) {
      this.buffer += cStr.toLowerCase();
      this.state = "scheme";
    } else if (!this.stateOverride) {
      this.state = "no scheme";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }

    return true;
  };

  URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
    if (infra.isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
      this.buffer += cStr.toLowerCase();
    } else if (c === 58) {
      if (this.stateOverride) {
        if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
          return false;
        }

        if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
          return false;
        }

        if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
          return false;
        }

        if (this.url.scheme === "file" && this.url.host === "") {
          return false;
        }
      }
      this.url.scheme = this.buffer;
      if (this.stateOverride) {
        if (this.url.port === defaultPort(this.url.scheme)) {
          this.url.port = null;
        }
        return false;
      }
      this.buffer = "";
      if (this.url.scheme === "file") {
        if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
          this.parseError = true;
        }
        this.state = "file";
      } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
        this.state = "special relative or authority";
      } else if (isSpecial(this.url)) {
        this.state = "special authority slashes";
      } else if (this.input[this.pointer + 1] === 47) {
        this.state = "path or authority";
        ++this.pointer;
      } else {
        this.url.cannotBeABaseURL = true;
        this.url.path.push("");
        this.state = "cannot-be-a-base-URL path";
      }
    } else if (!this.stateOverride) {
      this.buffer = "";
      this.state = "no scheme";
      this.pointer = -1;
    } else {
      this.parseError = true;
      return failure;
    }

    return true;
  };

  URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
    if (this.base === null || (this.base.cannotBeABaseURL && c !== 35)) {
      return failure;
    } else if (this.base.cannotBeABaseURL && c === 35) {
      this.url.scheme = this.base.scheme;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      this.url.fragment = "";
      this.url.cannotBeABaseURL = true;
      this.state = "fragment";
    } else if (this.base.scheme === "file") {
      this.state = "file";
      --this.pointer;
    } else {
      this.state = "relative";
      --this.pointer;
    }

    return true;
  };

  URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "relative";
      --this.pointer;
    }

    return true;
  };

  URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
    if (c === 47) {
      this.state = "authority";
    } else {
      this.state = "path";
      --this.pointer;
    }

    return true;
  };

  URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
    this.url.scheme = this.base.scheme;
    if (c === 47) {
      this.state = "relative slash";
    } else if (isSpecial(this.url) && c === 92) {
      this.parseError = true;
      this.state = "relative slash";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (!isNaN(c)) {
        this.url.query = null;
        this.url.path.pop();
        this.state = "path";
        --this.pointer;
      }
    }

    return true;
  };

  URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
    if (isSpecial(this.url) && (c === 47 || c === 92)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "special authority ignore slashes";
    } else if (c === 47) {
      this.state = "authority";
    } else {
      this.url.username = this.base.username;
      this.url.password = this.base.password;
      this.url.host = this.base.host;
      this.url.port = this.base.port;
      this.state = "path";
      --this.pointer;
    }

    return true;
  };

  URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
    if (c === 47 && this.input[this.pointer + 1] === 47) {
      this.state = "special authority ignore slashes";
      ++this.pointer;
    } else {
      this.parseError = true;
      this.state = "special authority ignore slashes";
      --this.pointer;
    }

    return true;
  };

  URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
    if (c !== 47 && c !== 92) {
      this.state = "authority";
      --this.pointer;
    } else {
      this.parseError = true;
    }

    return true;
  };

  URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
    if (c === 64) {
      this.parseError = true;
      if (this.atFlag) {
        this.buffer = `%40${this.buffer}`;
      }
      this.atFlag = true;

      // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars
      const len = countSymbols(this.buffer);
      for (let pointer = 0; pointer < len; ++pointer) {
        const codePoint = this.buffer.codePointAt(pointer);

        if (codePoint === 58 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);
        if (this.passwordTokenSeenFlag) {
          this.url.password += encodedCodePoints;
        } else {
          this.url.username += encodedCodePoints;
        }
      }
      this.buffer = "";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
               (isSpecial(this.url) && c === 92)) {
      if (this.atFlag && this.buffer === "") {
        this.parseError = true;
        return failure;
      }
      this.pointer -= countSymbols(this.buffer) + 1;
      this.buffer = "";
      this.state = "host";
    } else {
      this.buffer += cStr;
    }

    return true;
  };

  URLStateMachine.prototype["parse hostname"] =
  URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
    if (this.stateOverride && this.url.scheme === "file") {
      --this.pointer;
      this.state = "file host";
    } else if (c === 58 && !this.arrFlag) {
      if (this.buffer === "") {
        this.parseError = true;
        return failure;
      }

      if (this.stateOverride === "hostname") {
        return false;
      }

      const host = parseHost(this.buffer, isNotSpecial(this.url));
      if (host === failure) {
        return failure;
      }

      this.url.host = host;
      this.buffer = "";
      this.state = "port";
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
               (isSpecial(this.url) && c === 92)) {
      --this.pointer;
      if (isSpecial(this.url) && this.buffer === "") {
        this.parseError = true;
        return failure;
      } else if (this.stateOverride && this.buffer === "" &&
                 (includesCredentials(this.url) || this.url.port !== null)) {
        this.parseError = true;
        return false;
      }

      const host = parseHost(this.buffer, isNotSpecial(this.url));
      if (host === failure) {
        return failure;
      }

      this.url.host = host;
      this.buffer = "";
      this.state = "path start";
      if (this.stateOverride) {
        return false;
      }
    } else {
      if (c === 91) {
        this.arrFlag = true;
      } else if (c === 93) {
        this.arrFlag = false;
      }
      this.buffer += cStr;
    }

    return true;
  };

  URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
    if (infra.isASCIIDigit(c)) {
      this.buffer += cStr;
    } else if (isNaN(c) || c === 47 || c === 63 || c === 35 ||
               (isSpecial(this.url) && c === 92) ||
               this.stateOverride) {
      if (this.buffer !== "") {
        const port = parseInt(this.buffer);
        if (port > 2 ** 16 - 1) {
          this.parseError = true;
          return failure;
        }
        this.url.port = port === defaultPort(this.url.scheme) ? null : port;
        this.buffer = "";
      }
      if (this.stateOverride) {
        return false;
      }
      this.state = "path start";
      --this.pointer;
    } else {
      this.parseError = true;
      return failure;
    }

    return true;
  };

  const fileOtherwiseCodePoints = new Set([47, 92, 63, 35]);

  function startsWithWindowsDriveLetter(input, pointer) {
    const length = input.length - pointer;
    return length >= 2 &&
      isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) &&
      (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));
  }

  URLStateMachine.prototype["parse file"] = function parseFile(c) {
    this.url.scheme = "file";
    this.url.host = "";

    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file slash";
    } else if (this.base !== null && this.base.scheme === "file") {
      this.url.host = this.base.host;
      this.url.path = this.base.path.slice();
      this.url.query = this.base.query;
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (!isNaN(c)) {
        this.url.query = null;
        if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {
          shortenPath(this.url);
        } else {
          this.parseError = true;
          this.url.path = [];
        }

        this.state = "path";
        --this.pointer;
      }
    } else {
      this.state = "path";
      --this.pointer;
    }

    return true;
  };

  URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
    if (c === 47 || c === 92) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "file host";
    } else {
      if (this.base !== null && this.base.scheme === "file") {
        if (!startsWithWindowsDriveLetter(this.input, this.pointer) &&
            isNormalizedWindowsDriveLetterString(this.base.path[0])) {
          this.url.path.push(this.base.path[0]);
        }
        this.url.host = this.base.host;
      }
      this.state = "path";
      --this.pointer;
    }

    return true;
  };

  URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
    if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
      --this.pointer;
      if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
        this.parseError = true;
        this.state = "path";
      } else if (this.buffer === "") {
        this.url.host = "";
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
      } else {
        let host = parseHost(this.buffer, isNotSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        if (host === "localhost") {
          host = "";
        }
        this.url.host = host;

        if (this.stateOverride) {
          return false;
        }

        this.buffer = "";
        this.state = "path start";
      }
    } else {
      this.buffer += cStr;
    }

    return true;
  };

  URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
    if (isSpecial(this.url)) {
      if (c === 92) {
        this.parseError = true;
      }
      this.state = "path";

      if (c !== 47 && c !== 92) {
        --this.pointer;
      }
    } else if (!this.stateOverride && c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (!this.stateOverride && c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else if (c !== undefined) {
      this.state = "path";
      if (c !== 47) {
        --this.pointer;
      }
    } else if (this.stateOverride && this.url.host === null) {
      this.url.path.push("");
    }

    return true;
  };

  URLStateMachine.prototype["parse path"] = function parsePath(c) {
    if (isNaN(c) || c === 47 || (isSpecial(this.url) && c === 92) ||
        (!this.stateOverride && (c === 63 || c === 35))) {
      if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
      }

      if (isDoubleDot(this.buffer)) {
        shortenPath(this.url);
        if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        }
      } else if (isSingleDot(this.buffer) && c !== 47 &&
                 !(isSpecial(this.url) && c === 92)) {
        this.url.path.push("");
      } else if (!isSingleDot(this.buffer)) {
        if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
          this.buffer = `${this.buffer[0]}:`;
        }
        this.url.path.push(this.buffer);
      }
      this.buffer = "";
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      }
      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else {
      // TODO: If c is not a URL code point and not "%", parse error.

      if (c === 37 &&
        (!infra.isASCIIHex(this.input[this.pointer + 1]) ||
          !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }

      this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);
    }

    return true;
  };

  URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
    if (c === 63) {
      this.url.query = "";
      this.state = "query";
    } else if (c === 35) {
      this.url.fragment = "";
      this.state = "fragment";
    } else {
      // TODO: Add: not a URL code point
      if (!isNaN(c) && c !== 37) {
        this.parseError = true;
      }

      if (c === 37 &&
          (!infra.isASCIIHex(this.input[this.pointer + 1]) ||
           !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }

      if (!isNaN(c)) {
        this.url.path[0] += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);
      }
    }

    return true;
  };

  URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
    if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
      this.encodingOverride = "utf-8";
    }

    if ((!this.stateOverride && c === 35) || isNaN(c)) {
      const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;
      this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);

      this.buffer = "";

      if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      }
    } else if (!isNaN(c)) {
      // TODO: If c is not a URL code point and not "%", parse error.

      if (c === 37 &&
        (!infra.isASCIIHex(this.input[this.pointer + 1]) ||
          !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }

      this.buffer += cStr;
    }

    return true;
  };

  URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
    if (!isNaN(c)) {
      // TODO: If c is not a URL code point and not "%", parse error.
      if (c === 37 &&
        (!infra.isASCIIHex(this.input[this.pointer + 1]) ||
          !infra.isASCIIHex(this.input[this.pointer + 2]))) {
        this.parseError = true;
      }

      this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);
    }

    return true;
  };

  function serializeURL(url, excludeFragment) {
    let output = `${url.scheme}:`;
    if (url.host !== null) {
      output += "//";

      if (url.username !== "" || url.password !== "") {
        output += url.username;
        if (url.password !== "") {
          output += `:${url.password}`;
        }
        output += "@";
      }

      output += serializeHost(url.host);

      if (url.port !== null) {
        output += `:${url.port}`;
      }
    }

    if (url.cannotBeABaseURL) {
      output += url.path[0];
    } else {
      if (url.host === null && url.path.length > 1 && url.path[0] === "") {
        output += "/.";
      }
      for (const segment of url.path) {
        output += `/${segment}`;
      }
    }

    if (url.query !== null) {
      output += `?${url.query}`;
    }

    if (!excludeFragment && url.fragment !== null) {
      output += `#${url.fragment}`;
    }

    return output;
  }

  function serializeOrigin(tuple) {
    let result = `${tuple.scheme}://`;
    result += serializeHost(tuple.host);

    if (tuple.port !== null) {
      result += `:${tuple.port}`;
    }

    return result;
  }

  module.exports.serializeURL = serializeURL;

  module.exports.serializeURLOrigin = function (url) {
    // https://url.spec.whatwg.org/#concept-url-origin
    switch (url.scheme) {
      case "blob":
        try {
          return module.exports.serializeURLOrigin(module.exports.parseURL(url.path[0]));
        } catch (e) {
          // serializing an opaque origin returns "null"
          return "null";
        }
      case "ftp":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return serializeOrigin({
          scheme: url.scheme,
          host: url.host,
          port: url.port
        });
      case "file":
        // The spec says:
        // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.
        // Browsers tested so far:
        // - Chrome says "file://", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.
        //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586
        // - Firefox says "null", but treats file: URLs as same-origin sometimes based on directory stuff; see
        //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs
        return "null";
      default:
        // serializing an opaque origin returns "null"
        return "null";
    }
  };

  module.exports.basicURLParse = function (input, options) {
    if (options === undefined) {
      options = {};
    }

    const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
    if (usm.failure) {
      return null;
    }

    return usm.url;
  };

  module.exports.setTheUsername = function (url, username) {
    url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);
  };

  module.exports.setThePassword = function (url, password) {
    url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);
  };

  module.exports.serializeHost = serializeHost;

  module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;

  module.exports.serializeInteger = function (integer) {
    return String(integer);
  };

  module.exports.parseURL = function (input, options) {
    if (options === undefined) {
      options = {};
    }

    // We don't handle blobs, so this just delegates:
    return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
  };
  });

  const { utf8Encode, utf8DecodeWithoutBOM } = encoding;
  const { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = percentEncoding;

  // https://url.spec.whatwg.org/#concept-urlencoded-parser
  function parseUrlencoded(input) {
    const sequences = strictlySplitByteSequence(input, 38);
    const output = [];
    for (const bytes of sequences) {
      if (bytes.length === 0) {
        continue;
      }

      let name, value;
      const indexOfEqual = bytes.indexOf(61);

      if (indexOfEqual >= 0) {
        name = bytes.slice(0, indexOfEqual);
        value = bytes.slice(indexOfEqual + 1);
      } else {
        name = bytes;
        value = new Uint8Array(0);
      }

      name = replaceByteInByteSequence(name, 0x2B, 0x20);
      value = replaceByteInByteSequence(value, 0x2B, 0x20);

      const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));
      const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));

      output.push([nameString, valueString]);
    }
    return output;
  }

  // https://url.spec.whatwg.org/#concept-urlencoded-string-parser
  function parseUrlencodedString(input) {
    return parseUrlencoded(utf8Encode(input));
  }

  // https://url.spec.whatwg.org/#concept-urlencoded-serializer
  function serializeUrlencoded(tuples, encodingOverride = undefined) {
    let encoding = "utf-8";
    if (encodingOverride !== undefined) {
      // TODO "get the output encoding", i.e. handle encoding labels vs. names.
      encoding = encodingOverride;
    }

    let output = "";
    for (const [i, tuple] of tuples.entries()) {
      // TODO: handle encoding override

      const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);

      let value = tuple[1];
      if (tuple.length > 2 && tuple[2] !== undefined) {
        if (tuple[2] === "hidden" && name === "_charset_") {
          value = encoding;
        } else if (tuple[2] === "file") {
          // value is a File object
          value = value.name;
        }
      }

      value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);

      if (i !== 0) {
        output += "&";
      }
      output += `${name}=${value}`;
    }
    return output;
  }

  function strictlySplitByteSequence(buf, cp) {
    const list = [];
    let last = 0;
    let i = buf.indexOf(cp);
    while (i >= 0) {
      list.push(buf.slice(last, i));
      last = i + 1;
      i = buf.indexOf(cp, last);
    }
    if (last !== buf.length) {
      list.push(buf.slice(last));
    }
    return list;
  }

  function replaceByteInByteSequence(buf, from, to) {
    let i = buf.indexOf(from);
    while (i >= 0) {
      buf[i] = to;
      i = buf.indexOf(from, i + 1);
    }
    return buf;
  }

  var urlencoded = {
    parseUrlencodedString,
    serializeUrlencoded
  };

  var convert$1 = (value, { context = "The provided value" } = {}) => {
    if (typeof value !== "function") {
      throw new TypeError(context + " is not a function");
    }

    function invokeTheCallbackFunction(...args) {
      if (new.target !== undefined) {
        throw new Error("Internal error: invokeTheCallbackFunction is not a constructor");
      }

      const thisArg = utils$1.tryWrapperForImpl(this);
      let callResult;

      for (let i = 0; i < args.length; i++) {
        args[i] = utils$1.tryWrapperForImpl(args[i]);
      }

      callResult = Reflect.apply(value, thisArg, args);

      callResult = lib$1["any"](callResult, { context: context });

      return callResult;
    }

    invokeTheCallbackFunction.construct = (...args) => {
      for (let i = 0; i < args.length; i++) {
        args[i] = utils$1.tryWrapperForImpl(args[i]);
      }

      let callResult = Reflect.construct(value, args);

      callResult = lib$1["any"](callResult, { context: context });

      return callResult;
    };

    invokeTheCallbackFunction[utils$1.wrapperSymbol] = value;
    invokeTheCallbackFunction.objectReference = value;

    return invokeTheCallbackFunction;
  };

  var _Function = {
  	convert: convert$1
  };

  var implementation$1 = class URLSearchParamsImpl {
    constructor(globalObject, constructorArgs, { doNotStripQMark = false }) {
      let init = constructorArgs[0];
      this._list = [];
      this._url = null;

      if (!doNotStripQMark && typeof init === "string" && init[0] === "?") {
        init = init.slice(1);
      }

      if (Array.isArray(init)) {
        for (const pair of init) {
          if (pair.length !== 2) {
            throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element does not " +
                                "contain exactly two elements.");
          }
          this._list.push([pair[0], pair[1]]);
        }
      } else if (typeof init === "object" && Object.getPrototypeOf(init) === null) {
        for (const name of Object.keys(init)) {
          const value = init[name];
          this._list.push([name, value]);
        }
      } else {
        this._list = urlencoded.parseUrlencodedString(init);
      }
    }

    _updateSteps() {
      if (this._url !== null) {
        let query = urlencoded.serializeUrlencoded(this._list);
        if (query === "") {
          query = null;
        }
        this._url._url.query = query;
      }
    }

    append(name, value) {
      this._list.push([name, value]);
      this._updateSteps();
    }

    delete(name) {
      let i = 0;
      while (i < this._list.length) {
        if (this._list[i][0] === name) {
          this._list.splice(i, 1);
        } else {
          i++;
        }
      }
      this._updateSteps();
    }

    get(name) {
      for (const tuple of this._list) {
        if (tuple[0] === name) {
          return tuple[1];
        }
      }
      return null;
    }

    getAll(name) {
      const output = [];
      for (const tuple of this._list) {
        if (tuple[0] === name) {
          output.push(tuple[1]);
        }
      }
      return output;
    }

    has(name) {
      for (const tuple of this._list) {
        if (tuple[0] === name) {
          return true;
        }
      }
      return false;
    }

    set(name, value) {
      let found = false;
      let i = 0;
      while (i < this._list.length) {
        if (this._list[i][0] === name) {
          if (found) {
            this._list.splice(i, 1);
          } else {
            found = true;
            this._list[i][1] = value;
            i++;
          }
        } else {
          i++;
        }
      }
      if (!found) {
        this._list.push([name, value]);
      }
      this._updateSteps();
    }

    sort() {
      this._list.sort((a, b) => {
        if (a[0] < b[0]) {
          return -1;
        }
        if (a[0] > b[0]) {
          return 1;
        }
        return 0;
      });

      this._updateSteps();
    }

    [Symbol.iterator]() {
      return this._list[Symbol.iterator]();
    }

    toString() {
      return urlencoded.serializeUrlencoded(this._list);
    }
  };

  var URLSearchParamsImpl_1 = {
  	implementation: implementation$1
  };

  var URLSearchParams$1 = createCommonjsModule(function (module, exports) {





  const implSymbol = utils$1.implSymbol;
  const ctorRegistrySymbol = utils$1.ctorRegistrySymbol;

  const interfaceName = "URLSearchParams";

  const IteratorPrototype = Object.create(utils$1.IteratorPrototype, {
    next: {
      value: function next() {
        const internal = this && this[utils$1.iterInternalSymbol];
        if (!internal) {
          throw new TypeError("next() called on a value that is not an iterator prototype object");
        }

        const { target, kind, index } = internal;
        const values = Array.from(target[implSymbol]);
        const len = values.length;
        if (index >= len) {
          return { value: undefined, done: true };
        }

        const pair = values[index];
        internal.index = index + 1;
        return utils$1.iteratorResult(pair.map(utils$1.tryWrapperForImpl), kind);
      },
      writable: true,
      enumerable: true,
      configurable: true
    },
    [Symbol.toStringTag]: {
      value: "URLSearchParams Iterator",
      configurable: true
    }
  });

  exports.is = value => {
    return utils$1.isObject(value) && utils$1.hasOwn(value, implSymbol) && value[implSymbol] instanceof URLSearchParamsImpl_1.implementation;
  };
  exports.isImpl = value => {
    return utils$1.isObject(value) && value instanceof URLSearchParamsImpl_1.implementation;
  };
  exports.convert = (value, { context = "The provided value" } = {}) => {
    if (exports.is(value)) {
      return utils$1.implForWrapper(value);
    }
    throw new TypeError(`${context} is not of type 'URLSearchParams'.`);
  };

  exports.createDefaultIterator = (target, kind) => {
    const iterator = Object.create(IteratorPrototype);
    Object.defineProperty(iterator, utils$1.iterInternalSymbol, {
      value: { target, kind, index: 0 },
      configurable: true
    });
    return iterator;
  };

  function makeWrapper(globalObject) {
    if (globalObject[ctorRegistrySymbol] === undefined) {
      throw new Error("Internal error: invalid global object");
    }

    const ctor = globalObject[ctorRegistrySymbol]["URLSearchParams"];
    if (ctor === undefined) {
      throw new Error("Internal error: constructor URLSearchParams is not installed on the passed global object");
    }

    return Object.create(ctor.prototype);
  }

  exports.create = (globalObject, constructorArgs, privateData) => {
    const wrapper = makeWrapper(globalObject);
    return exports.setup(wrapper, globalObject, constructorArgs, privateData);
  };

  exports.createImpl = (globalObject, constructorArgs, privateData) => {
    const wrapper = exports.create(globalObject, constructorArgs, privateData);
    return utils$1.implForWrapper(wrapper);
  };

  exports._internalSetup = (wrapper, globalObject) => {};

  exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
    privateData.wrapper = wrapper;

    exports._internalSetup(wrapper, globalObject);
    Object.defineProperty(wrapper, implSymbol, {
      value: new URLSearchParamsImpl_1.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });

    wrapper[implSymbol][utils$1.wrapperSymbol] = wrapper;
    if (URLSearchParamsImpl_1.init) {
      URLSearchParamsImpl_1.init(wrapper[implSymbol]);
    }
    return wrapper;
  };

  exports.new = globalObject => {
    const wrapper = makeWrapper(globalObject);

    exports._internalSetup(wrapper, globalObject);
    Object.defineProperty(wrapper, implSymbol, {
      value: Object.create(URLSearchParamsImpl_1.implementation.prototype),
      configurable: true
    });

    wrapper[implSymbol][utils$1.wrapperSymbol] = wrapper;
    if (URLSearchParamsImpl_1.init) {
      URLSearchParamsImpl_1.init(wrapper[implSymbol]);
    }
    return wrapper[implSymbol];
  };

  const exposed = new Set(["Window", "Worker"]);

  exports.install = (globalObject, globalNames) => {
    if (!globalNames.some(globalName => exposed.has(globalName))) {
      return;
    }
    class URLSearchParams {
      constructor() {
        const args = [];
        {
          let curArg = arguments[0];
          if (curArg !== undefined) {
            if (utils$1.isObject(curArg)) {
              if (curArg[Symbol.iterator] !== undefined) {
                if (!utils$1.isObject(curArg)) {
                  throw new TypeError(
                    "Failed to construct 'URLSearchParams': parameter 1" + " sequence" + " is not an iterable object."
                  );
                } else {
                  const V = [];
                  const tmp = curArg;
                  for (let nextItem of tmp) {
                    if (!utils$1.isObject(nextItem)) {
                      throw new TypeError(
                        "Failed to construct 'URLSearchParams': parameter 1" +
                          " sequence" +
                          "'s element" +
                          " is not an iterable object."
                      );
                    } else {
                      const V = [];
                      const tmp = nextItem;
                      for (let nextItem of tmp) {
                        nextItem = lib$1["USVString"](nextItem, {
                          context:
                            "Failed to construct 'URLSearchParams': parameter 1" +
                            " sequence" +
                            "'s element" +
                            "'s element"
                        });

                        V.push(nextItem);
                      }
                      nextItem = V;
                    }

                    V.push(nextItem);
                  }
                  curArg = V;
                }
              } else {
                if (!utils$1.isObject(curArg)) {
                  throw new TypeError(
                    "Failed to construct 'URLSearchParams': parameter 1" + " record" + " is not an object."
                  );
                } else {
                  const result = Object.create(null);
                  for (const key of Reflect.ownKeys(curArg)) {
                    const desc = Object.getOwnPropertyDescriptor(curArg, key);
                    if (desc && desc.enumerable) {
                      let typedKey = key;

                      typedKey = lib$1["USVString"](typedKey, {
                        context: "Failed to construct 'URLSearchParams': parameter 1" + " record" + "'s key"
                      });

                      let typedValue = curArg[key];

                      typedValue = lib$1["USVString"](typedValue, {
                        context: "Failed to construct 'URLSearchParams': parameter 1" + " record" + "'s value"
                      });

                      result[typedKey] = typedValue;
                    }
                  }
                  curArg = result;
                }
              }
            } else {
              curArg = lib$1["USVString"](curArg, {
                context: "Failed to construct 'URLSearchParams': parameter 1"
              });
            }
          } else {
            curArg = "";
          }
          args.push(curArg);
        }
        return exports.setup(Object.create(new.target.prototype), globalObject, args);
      }

      append(name, value) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'append' called on an object that is not a valid instance of URLSearchParams.");
        }

        if (arguments.length < 2) {
          throw new TypeError(
            "Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = lib$1["USVString"](curArg, {
            context: "Failed to execute 'append' on 'URLSearchParams': parameter 1"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = lib$1["USVString"](curArg, {
            context: "Failed to execute 'append' on 'URLSearchParams': parameter 2"
          });
          args.push(curArg);
        }
        return esValue[implSymbol].append(...args);
      }

      delete(name) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'delete' called on an object that is not a valid instance of URLSearchParams.");
        }

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = lib$1["USVString"](curArg, {
            context: "Failed to execute 'delete' on 'URLSearchParams': parameter 1"
          });
          args.push(curArg);
        }
        return esValue[implSymbol].delete(...args);
      }

      get(name) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'get' called on an object that is not a valid instance of URLSearchParams.");
        }

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = lib$1["USVString"](curArg, {
            context: "Failed to execute 'get' on 'URLSearchParams': parameter 1"
          });
          args.push(curArg);
        }
        return esValue[implSymbol].get(...args);
      }

      getAll(name) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'getAll' called on an object that is not a valid instance of URLSearchParams.");
        }

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = lib$1["USVString"](curArg, {
            context: "Failed to execute 'getAll' on 'URLSearchParams': parameter 1"
          });
          args.push(curArg);
        }
        return utils$1.tryWrapperForImpl(esValue[implSymbol].getAll(...args));
      }

      has(name) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'has' called on an object that is not a valid instance of URLSearchParams.");
        }

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = lib$1["USVString"](curArg, {
            context: "Failed to execute 'has' on 'URLSearchParams': parameter 1"
          });
          args.push(curArg);
        }
        return esValue[implSymbol].has(...args);
      }

      set(name, value) {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'set' called on an object that is not a valid instance of URLSearchParams.");
        }

        if (arguments.length < 2) {
          throw new TypeError(
            "Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = lib$1["USVString"](curArg, {
            context: "Failed to execute 'set' on 'URLSearchParams': parameter 1"
          });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          curArg = lib$1["USVString"](curArg, {
            context: "Failed to execute 'set' on 'URLSearchParams': parameter 2"
          });
          args.push(curArg);
        }
        return esValue[implSymbol].set(...args);
      }

      sort() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'sort' called on an object that is not a valid instance of URLSearchParams.");
        }

        return esValue[implSymbol].sort();
      }

      toString() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'toString' called on an object that is not a valid instance of URLSearchParams.");
        }

        return esValue[implSymbol].toString();
      }

      keys() {
        if (!exports.is(this)) {
          throw new TypeError("'keys' called on an object that is not a valid instance of URLSearchParams.");
        }
        return exports.createDefaultIterator(this, "key");
      }

      values() {
        if (!exports.is(this)) {
          throw new TypeError("'values' called on an object that is not a valid instance of URLSearchParams.");
        }
        return exports.createDefaultIterator(this, "value");
      }

      entries() {
        if (!exports.is(this)) {
          throw new TypeError("'entries' called on an object that is not a valid instance of URLSearchParams.");
        }
        return exports.createDefaultIterator(this, "key+value");
      }

      forEach(callback) {
        if (!exports.is(this)) {
          throw new TypeError("'forEach' called on an object that is not a valid instance of URLSearchParams.");
        }
        if (arguments.length < 1) {
          throw new TypeError("Failed to execute 'forEach' on 'iterable': 1 argument required, " + "but only 0 present.");
        }
        callback = _Function.convert(callback, {
          context: "Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1"
        });
        const thisArg = arguments[1];
        let pairs = Array.from(this[implSymbol]);
        let i = 0;
        while (i < pairs.length) {
          const [key, value] = pairs[i].map(utils$1.tryWrapperForImpl);
          callback.call(thisArg, value, key, this);
          pairs = Array.from(this[implSymbol]);
          i++;
        }
      }
    }
    Object.defineProperties(URLSearchParams.prototype, {
      append: { enumerable: true },
      delete: { enumerable: true },
      get: { enumerable: true },
      getAll: { enumerable: true },
      has: { enumerable: true },
      set: { enumerable: true },
      sort: { enumerable: true },
      toString: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true },
      forEach: { enumerable: true },
      [Symbol.toStringTag]: { value: "URLSearchParams", configurable: true },
      [Symbol.iterator]: { value: URLSearchParams.prototype.entries, configurable: true, writable: true }
    });
    if (globalObject[ctorRegistrySymbol] === undefined) {
      globalObject[ctorRegistrySymbol] = Object.create(null);
    }
    globalObject[ctorRegistrySymbol][interfaceName] = URLSearchParams;

    Object.defineProperty(globalObject, interfaceName, {
      configurable: true,
      writable: true,
      value: URLSearchParams
    });
  };
  });

  var implementation = class URLImpl {
    constructor(globalObject, constructorArgs) {
      const url = constructorArgs[0];
      const base = constructorArgs[1];

      let parsedBase = null;
      if (base !== undefined) {
        parsedBase = urlStateMachine.basicURLParse(base);
        if (parsedBase === null) {
          throw new TypeError(`Invalid base URL: ${base}`);
        }
      }

      const parsedURL = urlStateMachine.basicURLParse(url, { baseURL: parsedBase });
      if (parsedURL === null) {
        throw new TypeError(`Invalid URL: ${url}`);
      }

      const query = parsedURL.query !== null ? parsedURL.query : "";

      this._url = parsedURL;

      // We cannot invoke the "new URLSearchParams object" algorithm without going through the constructor, which strips
      // question mark by default. Therefore the doNotStripQMark hack is used.
      this._query = URLSearchParams$1.createImpl(globalObject, [query], { doNotStripQMark: true });
      this._query._url = this;
    }

    get href() {
      return urlStateMachine.serializeURL(this._url);
    }

    set href(v) {
      const parsedURL = urlStateMachine.basicURLParse(v);
      if (parsedURL === null) {
        throw new TypeError(`Invalid URL: ${v}`);
      }

      this._url = parsedURL;

      this._query._list.splice(0);
      const { query } = parsedURL;
      if (query !== null) {
        this._query._list = urlencoded.parseUrlencodedString(query);
      }
    }

    get origin() {
      return urlStateMachine.serializeURLOrigin(this._url);
    }

    get protocol() {
      return `${this._url.scheme}:`;
    }

    set protocol(v) {
      urlStateMachine.basicURLParse(`${v}:`, { url: this._url, stateOverride: "scheme start" });
    }

    get username() {
      return this._url.username;
    }

    set username(v) {
      if (urlStateMachine.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }

      urlStateMachine.setTheUsername(this._url, v);
    }

    get password() {
      return this._url.password;
    }

    set password(v) {
      if (urlStateMachine.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }

      urlStateMachine.setThePassword(this._url, v);
    }

    get host() {
      const url = this._url;

      if (url.host === null) {
        return "";
      }

      if (url.port === null) {
        return urlStateMachine.serializeHost(url.host);
      }

      return `${urlStateMachine.serializeHost(url.host)}:${urlStateMachine.serializeInteger(url.port)}`;
    }

    set host(v) {
      if (this._url.cannotBeABaseURL) {
        return;
      }

      urlStateMachine.basicURLParse(v, { url: this._url, stateOverride: "host" });
    }

    get hostname() {
      if (this._url.host === null) {
        return "";
      }

      return urlStateMachine.serializeHost(this._url.host);
    }

    set hostname(v) {
      if (this._url.cannotBeABaseURL) {
        return;
      }

      urlStateMachine.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
    }

    get port() {
      if (this._url.port === null) {
        return "";
      }

      return urlStateMachine.serializeInteger(this._url.port);
    }

    set port(v) {
      if (urlStateMachine.cannotHaveAUsernamePasswordPort(this._url)) {
        return;
      }

      if (v === "") {
        this._url.port = null;
      } else {
        urlStateMachine.basicURLParse(v, { url: this._url, stateOverride: "port" });
      }
    }

    get pathname() {
      if (this._url.cannotBeABaseURL) {
        return this._url.path[0];
      }

      if (this._url.path.length === 0) {
        return "";
      }

      return `/${this._url.path.join("/")}`;
    }

    set pathname(v) {
      if (this._url.cannotBeABaseURL) {
        return;
      }

      this._url.path = [];
      urlStateMachine.basicURLParse(v, { url: this._url, stateOverride: "path start" });
    }

    get search() {
      if (this._url.query === null || this._url.query === "") {
        return "";
      }

      return `?${this._url.query}`;
    }

    set search(v) {
      const url = this._url;

      if (v === "") {
        url.query = null;
        this._query._list = [];
        return;
      }

      const input = v[0] === "?" ? v.substring(1) : v;
      url.query = "";
      urlStateMachine.basicURLParse(input, { url, stateOverride: "query" });
      this._query._list = urlencoded.parseUrlencodedString(input);
    }

    get searchParams() {
      return this._query;
    }

    get hash() {
      if (this._url.fragment === null || this._url.fragment === "") {
        return "";
      }

      return `#${this._url.fragment}`;
    }

    set hash(v) {
      if (v === "") {
        this._url.fragment = null;
        return;
      }

      const input = v[0] === "#" ? v.substring(1) : v;
      this._url.fragment = "";
      urlStateMachine.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
    }

    toJSON() {
      return this.href;
    }
  };

  var URLImpl_1 = {
  	implementation: implementation
  };

  var URL$1 = createCommonjsModule(function (module, exports) {




  const implSymbol = utils$1.implSymbol;
  const ctorRegistrySymbol = utils$1.ctorRegistrySymbol;

  const interfaceName = "URL";

  exports.is = value => {
    return utils$1.isObject(value) && utils$1.hasOwn(value, implSymbol) && value[implSymbol] instanceof URLImpl_1.implementation;
  };
  exports.isImpl = value => {
    return utils$1.isObject(value) && value instanceof URLImpl_1.implementation;
  };
  exports.convert = (value, { context = "The provided value" } = {}) => {
    if (exports.is(value)) {
      return utils$1.implForWrapper(value);
    }
    throw new TypeError(`${context} is not of type 'URL'.`);
  };

  function makeWrapper(globalObject) {
    if (globalObject[ctorRegistrySymbol] === undefined) {
      throw new Error("Internal error: invalid global object");
    }

    const ctor = globalObject[ctorRegistrySymbol]["URL"];
    if (ctor === undefined) {
      throw new Error("Internal error: constructor URL is not installed on the passed global object");
    }

    return Object.create(ctor.prototype);
  }

  exports.create = (globalObject, constructorArgs, privateData) => {
    const wrapper = makeWrapper(globalObject);
    return exports.setup(wrapper, globalObject, constructorArgs, privateData);
  };

  exports.createImpl = (globalObject, constructorArgs, privateData) => {
    const wrapper = exports.create(globalObject, constructorArgs, privateData);
    return utils$1.implForWrapper(wrapper);
  };

  exports._internalSetup = (wrapper, globalObject) => {};

  exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
    privateData.wrapper = wrapper;

    exports._internalSetup(wrapper, globalObject);
    Object.defineProperty(wrapper, implSymbol, {
      value: new URLImpl_1.implementation(globalObject, constructorArgs, privateData),
      configurable: true
    });

    wrapper[implSymbol][utils$1.wrapperSymbol] = wrapper;
    if (URLImpl_1.init) {
      URLImpl_1.init(wrapper[implSymbol]);
    }
    return wrapper;
  };

  exports.new = globalObject => {
    const wrapper = makeWrapper(globalObject);

    exports._internalSetup(wrapper, globalObject);
    Object.defineProperty(wrapper, implSymbol, {
      value: Object.create(URLImpl_1.implementation.prototype),
      configurable: true
    });

    wrapper[implSymbol][utils$1.wrapperSymbol] = wrapper;
    if (URLImpl_1.init) {
      URLImpl_1.init(wrapper[implSymbol]);
    }
    return wrapper[implSymbol];
  };

  const exposed = new Set(["Window", "Worker"]);

  exports.install = (globalObject, globalNames) => {
    if (!globalNames.some(globalName => exposed.has(globalName))) {
      return;
    }
    class URL {
      constructor(url) {
        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = lib$1["USVString"](curArg, { context: "Failed to construct 'URL': parameter 1" });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          if (curArg !== undefined) {
            curArg = lib$1["USVString"](curArg, { context: "Failed to construct 'URL': parameter 2" });
          }
          args.push(curArg);
        }
        return exports.setup(Object.create(new.target.prototype), globalObject, args);
      }

      toJSON() {
        const esValue = this !== null && this !== undefined ? this : globalObject;
        if (!exports.is(esValue)) {
          throw new TypeError("'toJSON' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol].toJSON();
      }

      get href() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get href' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["href"];
      }

      set href(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set href' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, { context: "Failed to set the 'href' property on 'URL': The provided value" });

        esValue[implSymbol]["href"] = V;
      }

      toString() {
        const esValue = this;
        if (!exports.is(esValue)) {
          throw new TypeError("'toString' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["href"];
      }

      get origin() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get origin' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["origin"];
      }

      get protocol() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get protocol' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["protocol"];
      }

      set protocol(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set protocol' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, {
          context: "Failed to set the 'protocol' property on 'URL': The provided value"
        });

        esValue[implSymbol]["protocol"] = V;
      }

      get username() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get username' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["username"];
      }

      set username(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set username' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, {
          context: "Failed to set the 'username' property on 'URL': The provided value"
        });

        esValue[implSymbol]["username"] = V;
      }

      get password() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get password' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["password"];
      }

      set password(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set password' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, {
          context: "Failed to set the 'password' property on 'URL': The provided value"
        });

        esValue[implSymbol]["password"] = V;
      }

      get host() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get host' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["host"];
      }

      set host(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set host' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, { context: "Failed to set the 'host' property on 'URL': The provided value" });

        esValue[implSymbol]["host"] = V;
      }

      get hostname() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get hostname' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["hostname"];
      }

      set hostname(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set hostname' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, {
          context: "Failed to set the 'hostname' property on 'URL': The provided value"
        });

        esValue[implSymbol]["hostname"] = V;
      }

      get port() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get port' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["port"];
      }

      set port(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set port' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, { context: "Failed to set the 'port' property on 'URL': The provided value" });

        esValue[implSymbol]["port"] = V;
      }

      get pathname() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get pathname' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["pathname"];
      }

      set pathname(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set pathname' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, {
          context: "Failed to set the 'pathname' property on 'URL': The provided value"
        });

        esValue[implSymbol]["pathname"] = V;
      }

      get search() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get search' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["search"];
      }

      set search(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set search' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, { context: "Failed to set the 'search' property on 'URL': The provided value" });

        esValue[implSymbol]["search"] = V;
      }

      get searchParams() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get searchParams' called on an object that is not a valid instance of URL.");
        }

        return utils$1.getSameObject(this, "searchParams", () => {
          return utils$1.tryWrapperForImpl(esValue[implSymbol]["searchParams"]);
        });
      }

      get hash() {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'get hash' called on an object that is not a valid instance of URL.");
        }

        return esValue[implSymbol]["hash"];
      }

      set hash(V) {
        const esValue = this !== null && this !== undefined ? this : globalObject;

        if (!exports.is(esValue)) {
          throw new TypeError("'set hash' called on an object that is not a valid instance of URL.");
        }

        V = lib$1["USVString"](V, { context: "Failed to set the 'hash' property on 'URL': The provided value" });

        esValue[implSymbol]["hash"] = V;
      }
    }
    Object.defineProperties(URL.prototype, {
      toJSON: { enumerable: true },
      href: { enumerable: true },
      toString: { enumerable: true },
      origin: { enumerable: true },
      protocol: { enumerable: true },
      username: { enumerable: true },
      password: { enumerable: true },
      host: { enumerable: true },
      hostname: { enumerable: true },
      port: { enumerable: true },
      pathname: { enumerable: true },
      search: { enumerable: true },
      searchParams: { enumerable: true },
      hash: { enumerable: true },
      [Symbol.toStringTag]: { value: "URL", configurable: true }
    });
    if (globalObject[ctorRegistrySymbol] === undefined) {
      globalObject[ctorRegistrySymbol] = Object.create(null);
    }
    globalObject[ctorRegistrySymbol][interfaceName] = URL;

    Object.defineProperty(globalObject, interfaceName, {
      configurable: true,
      writable: true,
      value: URL
    });

    if (globalNames.includes("Window")) {
      Object.defineProperty(globalObject, "webkitURL", {
        configurable: true,
        writable: true,
        value: URL
      });
    }
  };
  });

  var URL_1$1 = URL$1;
  var URLSearchParams_1 = URLSearchParams$1;

  var webidl2jsWrapper = {
  	URL: URL_1$1,
  	URLSearchParams: URLSearchParams_1
  };

  const { URL, URLSearchParams } = webidl2jsWrapper;



  const sharedGlobalObject = {};
  URL.install(sharedGlobalObject, ["Window"]);
  URLSearchParams.install(sharedGlobalObject, ["Window"]);

  var URL_1 = sharedGlobalObject.URL;
  sharedGlobalObject.URLSearchParams;

  urlStateMachine.parseURL;
  urlStateMachine.basicURLParse;
  urlStateMachine.serializeURL;
  urlStateMachine.serializeHost;
  urlStateMachine.serializeInteger;
  urlStateMachine.serializeURLOrigin;
  urlStateMachine.setTheUsername;
  urlStateMachine.setThePassword;
  urlStateMachine.cannotHaveAUsernamePasswordPort;

  // This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
  // optimize the gzip compression for this alphabet.
  let urlAlphabet =
    'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';

  let customAlphabet = (alphabet, size) => {
    return () => {
      let id = '';
      // A compact alternative for `for (var i = 0; i < step; i++)`.
      let i = size;
      while (i--) {
        // `| 0` is more compact and faster than `Math.floor()`.
        id += alphabet[(Math.random() * alphabet.length) | 0];
      }
      return id
    }
  };

  let nanoid$1 = (size = 21) => {
    let id = '';
    // A compact alternative for `for (var i = 0; i < step; i++)`.
    let i = size;
    while (i--) {
      // `| 0` is more compact and faster than `Math.floor()`.
      id += urlAlphabet[(Math.random() * 64) | 0];
    }
    return id
  };

  var nonSecure = { nanoid: nanoid$1, customAlphabet };

  let { existsSync, readFileSync } = path$2;
  let { dirname, join } = require$$1;


  function fromBase64 (str) {
    if (Buffer) {
      return Buffer.from(str, 'base64').toString()
    } else {
      // istanbul ignore next
      return window.atob(str)
    }
  }

  class PreviousMap {
    constructor (css, opts) {
      if (opts.map === false) return
      this.loadAnnotation(css);
      this.inline = this.startWith(this.annotation, 'data:');

      let prev = opts.map ? opts.map.prev : undefined;
      let text = this.loadMap(opts.from, prev);
      if (!this.mapFile && opts.from) {
        this.mapFile = opts.from;
      }
      if (this.mapFile) this.root = dirname(this.mapFile);
      if (text) this.text = text;
    }

    consumer () {
      if (!this.consumerCache) {
        this.consumerCache = new sourceMap.SourceMapConsumer(this.text);
      }
      return this.consumerCache
    }

    withContent () {
      return !!(
        this.consumer().sourcesContent &&
        this.consumer().sourcesContent.length > 0
      )
    }

    startWith (string, start) {
      if (!string) return false
      return string.substr(0, start.length) === start
    }

    getAnnotationURL (sourceMapString) {
      return sourceMapString
        .match(/\/\*\s*# sourceMappingURL=(.*)\s*\*\//)[1]
        .trim()
    }

    loadAnnotation (css) {
      let annotations = css.match(/\/\*\s*# sourceMappingURL=.*\s*\*\//gm);

      if (annotations && annotations.length > 0) {
        // Locate the last sourceMappingURL to avoid picking up
        // sourceMappingURLs from comments, strings, etc.
        let lastAnnotation = annotations[annotations.length - 1];
        if (lastAnnotation) {
          this.annotation = this.getAnnotationURL(lastAnnotation);
        }
      }
    }

    decodeInline (text) {
      let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
      let baseUri = /^data:application\/json;base64,/;
      let charsetUri = /^data:application\/json;charset=utf-?8,/;
      let uri = /^data:application\/json,/;

      if (charsetUri.test(text) || uri.test(text)) {
        return decodeURIComponent(text.substr(RegExp.lastMatch.length))
      }

      if (baseCharsetUri.test(text) || baseUri.test(text)) {
        return fromBase64(text.substr(RegExp.lastMatch.length))
      }

      let encoding = text.match(/data:application\/json;([^,]+),/)[1];
      throw new Error('Unsupported source map encoding ' + encoding)
    }

    loadFile (path) {
      this.root = dirname(path);
      if (void(path)) {
        this.mapFile = path;
        return readFileSync(path, 'utf-8').toString().trim()
      }
    }

    loadMap (file, prev) {
      if (prev === false) return false

      if (prev) {
        if (typeof prev === 'string') {
          return prev
        } else if (typeof prev === 'function') {
          let prevPath = prev(file);
          if (prevPath) {
            let map = this.loadFile(prevPath);
            if (!map) {
              throw new Error(
                'Unable to load previous source map: ' + prevPath.toString()
              )
            }
            return map
          }
        } else if (prev instanceof sourceMap.SourceMapConsumer) {
          return sourceMap.SourceMapGenerator.fromSourceMap(prev).toString()
        } else if (prev instanceof sourceMap.SourceMapGenerator) {
          return prev.toString()
        } else if (this.isMap(prev)) {
          return JSON.stringify(prev)
        } else {
          throw new Error(
            'Unsupported previous source map format: ' + prev.toString()
          )
        }
      } else if (this.inline) {
        return this.decodeInline(this.annotation)
      } else if (this.annotation) {
        let map = this.annotation;
        if (file) map = join(dirname(file), map);
        return this.loadFile(map)
      }
    }

    isMap (map) {
      if (typeof map !== 'object') return false
      return (
        typeof map.mappings === 'string' ||
        typeof map._mappings === 'string' ||
        Array.isArray(map.sections)
      )
    }
  }

  var previousMap = PreviousMap;
  PreviousMap.default = PreviousMap;

  var require$$2 = nonSecure;

  let { fileURLToPath, pathToFileURL } = url;
  let { resolve: resolve$1, isAbsolute } = require$$1;
  let { nanoid } = require$$2;





  let fromOffsetCache = Symbol('fromOffset cache');

  class Input {
    constructor (css, opts = {}) {
      if (
        css === null ||
        typeof css === 'undefined' ||
        (typeof css === 'object' && !css.toString)
      ) {
        throw new Error(`PostCSS received ${css} instead of CSS string`)
      }

      this.css = css.toString();

      if (this.css[0] === '\uFEFF' || this.css[0] === '\uFFFE') {
        this.hasBOM = true;
        this.css = this.css.slice(1);
      } else {
        this.hasBOM = false;
      }

      if (opts.from) {
        if (/^\w+:\/\//.test(opts.from) || isAbsolute(opts.from)) {
          this.file = opts.from;
        } else {
          this.file = resolve$1(opts.from);
        }
      }

      let map = new previousMap(this.css, opts);
      if (map.text) {
        this.map = map;
        let file = map.consumer().file;
        if (!this.file && file) this.file = this.mapResolve(file);
      }

      if (!this.file) {
        this.id = '<input css ' + nanoid(6) + '>';
      }
      if (this.map) this.map.file = this.from;
    }

    fromOffset (offset) {
      let lastLine, lineToIndex;
      if (!this[fromOffsetCache]) {
        let lines = this.css.split('\n');
        lineToIndex = new Array(lines.length);
        let prevIndex = 0;

        for (let i = 0, l = lines.length; i < l; i++) {
          lineToIndex[i] = prevIndex;
          prevIndex += lines[i].length + 1;
        }

        this[fromOffsetCache] = lineToIndex;
      } else {
        lineToIndex = this[fromOffsetCache];
      }
      lastLine = lineToIndex[lineToIndex.length - 1];

      let min = 0;
      if (offset >= lastLine) {
        min = lineToIndex.length - 1;
      } else {
        let max = lineToIndex.length - 2;
        let mid;
        while (min < max) {
          mid = min + ((max - min) >> 1);
          if (offset < lineToIndex[mid]) {
            max = mid - 1;
          } else if (offset >= lineToIndex[mid + 1]) {
            min = mid + 1;
          } else {
            min = mid;
            break
          }
        }
      }
      return {
        line: min + 1,
        col: offset - lineToIndex[min] + 1
      }
    }

    error (message, line, column, opts = {}) {
      let result;
      if (!column) {
        let pos = this.fromOffset(line);
        line = pos.line;
        column = pos.col;
      }
      let origin = this.origin(line, column);
      if (origin) {
        result = new cssSyntaxError(
          message,
          origin.line,
          origin.column,
          origin.source,
          origin.file,
          opts.plugin
        );
      } else {
        result = new cssSyntaxError(
          message,
          line,
          column,
          this.css,
          this.file,
          opts.plugin
        );
      }

      result.input = { line, column, source: this.css };
      if (this.file) {
        result.input.url = pathToFileURL(this.file).toString();
        result.input.file = this.file;
      }

      return result
    }

    origin (line, column) {
      if (!this.map) return false
      let consumer = this.map.consumer();

      let from = consumer.originalPositionFor({ line, column });
      if (!from.source) return false

      let fromUrl;

      if (isAbsolute(from.source)) {
        fromUrl = pathToFileURL(from.source);
      } else {
        fromUrl = new URL_1(
          from.source,
          this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)
        );
      }

      let result = {
        url: fromUrl.toString(),
        line: from.line,
        column: from.column
      };

      if (fromUrl.protocol === 'file:') {
        result.file = fileURLToPath(fromUrl);
      }

      let source = consumer.sourceContentFor(from.source);
      if (source) result.source = source;

      return result
    }

    mapResolve (file) {
      if (/^\w+:\/\//.test(file)) {
        return file
      }
      return resolve$1(this.map.consumer().sourceRoot || this.map.root || '.', file)
    }

    get from () {
      return this.file || this.id
    }

    toJSON () {
      let json = {};
      for (let name of ['hasBOM', 'css', 'file', 'id']) {
        if (this[name] != null) {
          json[name] = this[name];
        }
      }
      if (this.map) {
        json.map = { ...this.map };
        if (json.map.consumerCache) {
          json.map.consumerCache = undefined;
        }
      }
      return json
    }
  }

  var input = Input;
  Input.default = Input;

  if (path$2 && path$2.registerInput) {
    path$2.registerInput(Input);
  }

  function parse$4 (css, opts) {
    let input$1 = new input(css, opts);
    let parser$1 = new parser(input$1);
    try {
      parser$1.parse();
    } catch (e) {
      if (process.env.NODE_ENV !== 'production') {
        if (e.name === 'CssSyntaxError' && opts && opts.from) {
          if (/\.scss$/i.test(opts.from)) {
            e.message +=
              '\nYou tried to parse SCSS with ' +
              'the standard CSS parser; ' +
              'try again with the postcss-scss parser';
          } else if (/\.sass/i.test(opts.from)) {
            e.message +=
              '\nYou tried to parse Sass with ' +
              'the standard CSS parser; ' +
              'try again with the postcss-sass parser';
          } else if (/\.less$/i.test(opts.from)) {
            e.message +=
              '\nYou tried to parse Less with ' +
              'the standard CSS parser; ' +
              'try again with the postcss-less parser';
          }
        }
      }
      throw e
    }

    return parser$1.root
  }

  var parse_1$1 = parse$4;
  parse$4.default = parse$4;

  container.registerParse(parse$4);

  let { isClean } = symbols;






  const TYPE_TO_CLASS_NAME = {
    root: 'Root',
    atrule: 'AtRule',
    rule: 'Rule',
    decl: 'Declaration',
    comment: 'Comment'
  };

  const PLUGIN_PROPS = {
    postcssPlugin: true,
    prepare: true,
    Once: true,
    Root: true,
    Declaration: true,
    Rule: true,
    AtRule: true,
    Comment: true,
    DeclarationExit: true,
    RuleExit: true,
    AtRuleExit: true,
    CommentExit: true,
    RootExit: true,
    OnceExit: true
  };

  const NOT_VISITORS = {
    postcssPlugin: true,
    prepare: true,
    Once: true
  };

  const CHILDREN = 0;

  function isPromise (obj) {
    return typeof obj === 'object' && typeof obj.then === 'function'
  }

  function getEvents (node) {
    let key = false;
    let type = TYPE_TO_CLASS_NAME[node.type];
    if (node.type === 'decl') {
      key = node.prop.toLowerCase();
    } else if (node.type === 'atrule') {
      key = node.name.toLowerCase();
    }

    if (key && node.append) {
      return [
        type,
        type + '-' + key,
        CHILDREN,
        type + 'Exit',
        type + 'Exit-' + key
      ]
    } else if (key) {
      return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]
    } else if (node.append) {
      return [type, CHILDREN, type + 'Exit']
    } else {
      return [type, type + 'Exit']
    }
  }

  function toStack (node) {
    let events;
    if (node.type === 'root') {
      events = ['Root', CHILDREN, 'RootExit'];
    } else {
      events = getEvents(node);
    }

    return {
      node,
      events,
      eventIndex: 0,
      visitors: [],
      visitorIndex: 0,
      iterator: 0
    }
  }

  function cleanMarks (node) {
    node[isClean] = false;
    if (node.nodes) node.nodes.forEach(i => cleanMarks(i));
    return node
  }

  let postcss$1 = {};

  class LazyResult {
    constructor (processor, css, opts) {
      this.stringified = false;
      this.processed = false;

      let root;
      if (typeof css === 'object' && css !== null && css.type === 'root') {
        root = cleanMarks(css);
      } else if (css instanceof LazyResult || css instanceof result$1) {
        root = cleanMarks(css.root);
        if (css.map) {
          if (typeof opts.map === 'undefined') opts.map = {};
          if (!opts.map.inline) opts.map.inline = false;
          opts.map.prev = css.map;
        }
      } else {
        let parser = parse_1$1;
        if (opts.syntax) parser = opts.syntax.parse;
        if (opts.parser) parser = opts.parser;
        if (parser.parse) parser = parser.parse;

        try {
          root = parser(css, opts);
        } catch (error) {
          this.processed = true;
          this.error = error;
        }
      }

      this.result = new result$1(processor, root, opts);
      this.helpers = { ...postcss$1, result: this.result, postcss: postcss$1 };
      this.plugins = this.processor.plugins.map(plugin => {
        if (typeof plugin === 'object' && plugin.prepare) {
          return { ...plugin, ...plugin.prepare(this.result) }
        } else {
          return plugin
        }
      });
    }

    get [Symbol.toStringTag] () {
      return 'LazyResult'
    }

    get processor () {
      return this.result.processor
    }

    get opts () {
      return this.result.opts
    }

    get css () {
      return this.stringify().css
    }

    get content () {
      return this.stringify().content
    }

    get map () {
      return this.stringify().map
    }

    get root () {
      return this.sync().root
    }

    get messages () {
      return this.sync().messages
    }

    warnings () {
      return this.sync().warnings()
    }

    toString () {
      return this.css
    }

    then (onFulfilled, onRejected) {
      if (process.env.NODE_ENV !== 'production') {
        if (!('from' in this.opts)) {
          warnOnce(
            'Without `from` option PostCSS could generate wrong source map ' +
              'and will not find Browserslist config. Set it to CSS file path ' +
              'or to `undefined` to prevent this warning.'
          );
        }
      }
      return this.async().then(onFulfilled, onRejected)
    }

    catch (onRejected) {
      return this.async().catch(onRejected)
    }

    finally (onFinally) {
      return this.async().then(onFinally, onFinally)
    }

    async () {
      if (this.error) return Promise.reject(this.error)
      if (this.processed) return Promise.resolve(this.result)
      if (!this.processing) {
        this.processing = this.runAsync();
      }
      return this.processing
    }

    sync () {
      if (this.error) throw this.error
      if (this.processed) return this.result
      this.processed = true;

      if (this.processing) {
        throw this.getAsyncError()
      }

      for (let plugin of this.plugins) {
        let promise = this.runOnRoot(plugin);
        if (isPromise(promise)) {
          throw this.getAsyncError()
        }
      }

      this.prepareVisitors();
      if (this.hasListener) {
        let root = this.result.root;
        while (!root[isClean]) {
          root[isClean] = true;
          this.walkSync(root);
        }
        if (this.listeners.OnceExit) {
          this.visitSync(this.listeners.OnceExit, root);
        }
      }

      return this.result
    }

    stringify () {
      if (this.error) throw this.error
      if (this.stringified) return this.result
      this.stringified = true;

      this.sync();

      let opts = this.result.opts;
      let str = stringify_1$1;
      if (opts.syntax) str = opts.syntax.stringify;
      if (opts.stringifier) str = opts.stringifier;
      if (str.stringify) str = str.stringify;

      let map = new mapGenerator(str, this.result.root, this.result.opts);
      let data = map.generate();
      this.result.css = data[0];
      this.result.map = data[1];

      return this.result
    }

    walkSync (node) {
      node[isClean] = true;
      let events = getEvents(node);
      for (let event of events) {
        if (event === CHILDREN) {
          if (node.nodes) {
            node.each(child => {
              if (!child[isClean]) this.walkSync(child);
            });
          }
        } else {
          let visitors = this.listeners[event];
          if (visitors) {
            if (this.visitSync(visitors, node.toProxy())) return
          }
        }
      }
    }

    visitSync (visitors, node) {
      for (let [plugin, visitor] of visitors) {
        this.result.lastPlugin = plugin;
        let promise;
        try {
          promise = visitor(node, this.helpers);
        } catch (e) {
          throw this.handleError(e, node.proxyOf)
        }
        if (node.type !== 'root' && !node.parent) return true
        if (isPromise(promise)) {
          throw this.getAsyncError()
        }
      }
    }

    runOnRoot (plugin) {
      this.result.lastPlugin = plugin;
      try {
        if (typeof plugin === 'object' && plugin.Once) {
          return plugin.Once(this.result.root, this.helpers)
        } else if (typeof plugin === 'function') {
          return plugin(this.result.root, this.result)
        }
      } catch (error) {
        throw this.handleError(error)
      }
    }

    getAsyncError () {
      throw new Error('Use process(css).then(cb) to work with async plugins')
    }

    handleError (error, node) {
      let plugin = this.result.lastPlugin;
      try {
        if (node) node.addToError(error);
        this.error = error;
        if (error.name === 'CssSyntaxError' && !error.plugin) {
          error.plugin = plugin.postcssPlugin;
          error.setMessage();
        } else if (plugin.postcssVersion) {
          if (process.env.NODE_ENV !== 'production') {
            let pluginName = plugin.postcssPlugin;
            let pluginVer = plugin.postcssVersion;
            let runtimeVer = this.result.processor.version;
            let a = pluginVer.split('.');
            let b = runtimeVer.split('.');

            if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
              console.error(
                'Unknown error from PostCSS plugin. Your current PostCSS ' +
                  'version is ' +
                  runtimeVer +
                  ', but ' +
                  pluginName +
                  ' uses ' +
                  pluginVer +
                  '. Perhaps this is the source of the error below.'
              );
            }
          }
        }
      } catch (err) {
        // istanbul ignore next
        if (console && console.error) console.error(err);
      }
      return error
    }

    async runAsync () {
      this.plugin = 0;
      for (let i = 0; i < this.plugins.length; i++) {
        let plugin = this.plugins[i];
        let promise = this.runOnRoot(plugin);
        if (isPromise(promise)) {
          try {
            await promise;
          } catch (error) {
            throw this.handleError(error)
          }
        }
      }

      this.prepareVisitors();
      if (this.hasListener) {
        let root = this.result.root;
        while (!root[isClean]) {
          root[isClean] = true;
          let stack = [toStack(root)];
          while (stack.length > 0) {
            let promise = this.visitTick(stack);
            if (isPromise(promise)) {
              try {
                await promise;
              } catch (e) {
                let node = stack[stack.length - 1].node;
                throw this.handleError(e, node)
              }
            }
          }
        }

        if (this.listeners.OnceExit) {
          for (let [plugin, visitor] of this.listeners.OnceExit) {
            this.result.lastPlugin = plugin;
            try {
              await visitor(root, this.helpers);
            } catch (e) {
              throw this.handleError(e)
            }
          }
        }
      }

      this.processed = true;
      return this.stringify()
    }

    prepareVisitors () {
      this.listeners = {};
      let add = (plugin, type, cb) => {
        if (!this.listeners[type]) this.listeners[type] = [];
        this.listeners[type].push([plugin, cb]);
      };
      for (let plugin of this.plugins) {
        if (typeof plugin === 'object') {
          for (let event in plugin) {
            if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
              throw new Error(
                `Unknown event ${event} in ${plugin.postcssPlugin}. ` +
                  `Try to update PostCSS (${this.processor.version} now).`
              )
            }
            if (!NOT_VISITORS[event]) {
              if (typeof plugin[event] === 'object') {
                for (let filter in plugin[event]) {
                  if (filter === '*') {
                    add(plugin, event, plugin[event][filter]);
                  } else {
                    add(
                      plugin,
                      event + '-' + filter.toLowerCase(),
                      plugin[event][filter]
                    );
                  }
                }
              } else if (typeof plugin[event] === 'function') {
                add(plugin, event, plugin[event]);
              }
            }
          }
        }
      }
      this.hasListener = Object.keys(this.listeners).length > 0;
    }

    visitTick (stack) {
      let visit = stack[stack.length - 1];
      let { node, visitors } = visit;

      if (node.type !== 'root' && !node.parent) {
        stack.pop();
        return
      }

      if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
        let [plugin, visitor] = visitors[visit.visitorIndex];
        visit.visitorIndex += 1;
        if (visit.visitorIndex === visitors.length) {
          visit.visitors = [];
          visit.visitorIndex = 0;
        }
        this.result.lastPlugin = plugin;
        try {
          return visitor(node.toProxy(), this.helpers)
        } catch (e) {
          throw this.handleError(e, node)
        }
      }

      if (visit.iterator !== 0) {
        let iterator = visit.iterator;
        let child;
        while ((child = node.nodes[node.indexes[iterator]])) {
          node.indexes[iterator] += 1;
          if (!child[isClean]) {
            child[isClean] = true;
            stack.push(toStack(child));
            return
          }
        }
        visit.iterator = 0;
        delete node.indexes[iterator];
      }

      let events = visit.events;
      while (visit.eventIndex < events.length) {
        let event = events[visit.eventIndex];
        visit.eventIndex += 1;
        if (event === CHILDREN) {
          if (node.nodes && node.nodes.length) {
            node[isClean] = true;
            visit.iterator = node.getIterator();
          }
          return
        } else if (this.listeners[event]) {
          visit.visitors = this.listeners[event];
          return
        }
      }
      stack.pop();
    }
  }

  LazyResult.registerPostcss = dependant => {
    postcss$1 = dependant;
  };

  var lazyResult = LazyResult;
  LazyResult.default = LazyResult;

  root.registerLazyResult(LazyResult);

  class Processor$1 {
    constructor (plugins = []) {
      this.version = '8.2.4';
      this.plugins = this.normalize(plugins);
    }

    use (plugin) {
      this.plugins = this.plugins.concat(this.normalize([plugin]));
      return this
    }

    process (css, opts = {}) {
      if (
        this.plugins.length === 0 &&
        opts.parser === opts.stringifier &&
        !opts.hideNothingWarning
      ) {
        if (process.env.NODE_ENV !== 'production') {
          if (typeof console !== 'undefined' && console.warn) {
            console.warn(
              'You did not set any plugins, parser, or stringifier. ' +
                'Right now, PostCSS does nothing. Pick plugins for your case ' +
                'on https://www.postcss.parts/ and use them in postcss.config.js.'
            );
          }
        }
      }
      return new lazyResult(this, css, opts)
    }

    normalize (plugins) {
      let normalized = [];
      for (let i of plugins) {
        if (i.postcss === true) {
          i = i();
        } else if (i.postcss) {
          i = i.postcss;
        }

        if (typeof i === 'object' && Array.isArray(i.plugins)) {
          normalized = normalized.concat(i.plugins);
        } else if (typeof i === 'object' && i.postcssPlugin) {
          normalized.push(i);
        } else if (typeof i === 'function') {
          normalized.push(i);
        } else if (typeof i === 'object' && (i.parse || i.stringify)) {
          if (process.env.NODE_ENV !== 'production') {
            throw new Error(
              'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +
                'one of the syntax/parser/stringifier options as outlined ' +
                'in your PostCSS runner documentation.'
            )
          }
        } else {
          throw new Error(i + ' is not a PostCSS plugin')
        }
      }
      return normalized
    }
  }

  var processor$1 = Processor$1;
  Processor$1.default = Processor$1;

  root.registerProcessor(Processor$1);

  function fromJSON (json, inputs) {
    if (Array.isArray(json)) return json.map(n => fromJSON(n))

    let { inputs: ownInputs, ...defaults } = json;
    if (ownInputs) {
      inputs = [];
      for (let input$1 of ownInputs) {
        let inputHydrated = { ...input$1, __proto__: input.prototype };
        if (inputHydrated.map) {
          inputHydrated.map = {
            ...inputHydrated.map,
            __proto__: previousMap.prototype
          };
        }
        inputs.push(inputHydrated);
      }
    }
    if (defaults.nodes) {
      defaults.nodes = json.nodes.map(n => fromJSON(n, inputs));
    }
    if (defaults.source) {
      let { inputId, ...source } = defaults.source;
      defaults.source = source;
      if (inputId != null) {
        defaults.source.input = inputs[inputId];
      }
    }
    if (defaults.type === 'root') {
      return new root(defaults)
    } else if (defaults.type === 'decl') {
      return new declaration$1(defaults)
    } else if (defaults.type === 'rule') {
      return new rule(defaults)
    } else if (defaults.type === 'comment') {
      return new comment(defaults)
    } else if (defaults.type === 'atrule') {
      return new atRule$1(defaults)
    } else {
      throw new Error('Unknown node type: ' + json.type)
    }
  }

  var fromJSON_1 = fromJSON;
  fromJSON.default = fromJSON;

  function postcss (...plugins) {
    if (plugins.length === 1 && Array.isArray(plugins[0])) {
      plugins = plugins[0];
    }
    return new processor$1(plugins)
  }

  postcss.plugin = function plugin (name, initializer) {
    if (console && console.warn) {
      console.warn(
        name +
          ': postcss.plugin was deprecated. Migration guide:\n' +
          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'
      );
      if (process.env.LANG && process.env.LANG.startsWith('cn')) {
        // istanbul ignore next
        console.warn(
          name +
            ': 里面 postcss.plugin 被弃用. 迁移指南:\n' +
            'https://www.w3ctech.com/topic/2226'
        );
      }
    }
    function creator (...args) {
      let transformer = initializer(...args);
      transformer.postcssPlugin = name;
      transformer.postcssVersion = new processor$1().version;
      return transformer
    }

    let cache;
    Object.defineProperty(creator, 'postcss', {
      get () {
        if (!cache) cache = creator();
        return cache
      }
    });

    creator.process = function (css, processOpts, pluginOpts) {
      return postcss([creator(pluginOpts)]).process(css, processOpts)
    };

    return creator
  };

  postcss.stringify = stringify_1$1;
  postcss.parse = parse_1$1;
  postcss.fromJSON = fromJSON_1;
  postcss.list = list_1;

  postcss.comment = defaults => new comment(defaults);
  postcss.atRule = defaults => new atRule$1(defaults);
  postcss.decl = defaults => new declaration$1(defaults);
  postcss.rule = defaults => new rule(defaults);
  postcss.root = defaults => new root(defaults);

  postcss.CssSyntaxError = cssSyntaxError;
  postcss.Declaration = declaration$1;
  postcss.Container = container;
  postcss.Comment = comment;
  postcss.Warning = warning;
  postcss.AtRule = atRule$1;
  postcss.Result = result$1;
  postcss.Input = input;
  postcss.Rule = rule;
  postcss.Root = root;
  postcss.Node = node_1;

  lazyResult.registerPostcss(postcss);

  var postcss_1 = postcss;
  postcss.default = postcss;

  var jsReleases = [
  	{
  		name: "nodejs",
  		version: "0.2.0",
  		date: "2011-08-26",
  		lts: false,
  		security: false,
  		v8: "2.3.8.0"
  	},
  	{
  		name: "nodejs",
  		version: "0.3.0",
  		date: "2011-08-26",
  		lts: false,
  		security: false,
  		v8: "2.5.1.0"
  	},
  	{
  		name: "nodejs",
  		version: "0.4.0",
  		date: "2011-08-26",
  		lts: false,
  		security: false,
  		v8: "3.1.2.0"
  	},
  	{
  		name: "nodejs",
  		version: "0.5.0",
  		date: "2011-08-26",
  		lts: false,
  		security: false,
  		v8: "3.1.8.25"
  	},
  	{
  		name: "nodejs",
  		version: "0.6.0",
  		date: "2011-11-04",
  		lts: false,
  		security: false,
  		v8: "3.6.6.6"
  	},
  	{
  		name: "nodejs",
  		version: "0.7.0",
  		date: "2012-01-17",
  		lts: false,
  		security: false,
  		v8: "3.8.6.0"
  	},
  	{
  		name: "nodejs",
  		version: "0.8.0",
  		date: "2012-06-22",
  		lts: false,
  		security: false,
  		v8: "3.11.10.10"
  	},
  	{
  		name: "nodejs",
  		version: "0.9.0",
  		date: "2012-07-20",
  		lts: false,
  		security: false,
  		v8: "3.11.10.15"
  	},
  	{
  		name: "nodejs",
  		version: "0.10.0",
  		date: "2013-03-11",
  		lts: false,
  		security: false,
  		v8: "3.14.5.8"
  	},
  	{
  		name: "nodejs",
  		version: "0.11.0",
  		date: "2013-03-28",
  		lts: false,
  		security: false,
  		v8: "3.17.13.0"
  	},
  	{
  		name: "nodejs",
  		version: "0.12.0",
  		date: "2015-02-06",
  		lts: false,
  		security: false,
  		v8: "3.28.73.0"
  	},
  	{
  		name: "nodejs",
  		version: "4.0.0",
  		date: "2015-09-08",
  		lts: false,
  		security: false,
  		v8: "4.5.103.30"
  	},
  	{
  		name: "nodejs",
  		version: "4.1.0",
  		date: "2015-09-17",
  		lts: false,
  		security: false,
  		v8: "4.5.103.33"
  	},
  	{
  		name: "nodejs",
  		version: "4.2.0",
  		date: "2015-10-12",
  		lts: "Argon",
  		security: false,
  		v8: "4.5.103.35"
  	},
  	{
  		name: "nodejs",
  		version: "4.3.0",
  		date: "2016-02-09",
  		lts: "Argon",
  		security: false,
  		v8: "4.5.103.35"
  	},
  	{
  		name: "nodejs",
  		version: "4.4.0",
  		date: "2016-03-08",
  		lts: "Argon",
  		security: false,
  		v8: "4.5.103.35"
  	},
  	{
  		name: "nodejs",
  		version: "4.5.0",
  		date: "2016-08-16",
  		lts: "Argon",
  		security: false,
  		v8: "4.5.103.37"
  	},
  	{
  		name: "nodejs",
  		version: "4.6.0",
  		date: "2016-09-27",
  		lts: "Argon",
  		security: true,
  		v8: "4.5.103.37"
  	},
  	{
  		name: "nodejs",
  		version: "4.7.0",
  		date: "2016-12-06",
  		lts: "Argon",
  		security: false,
  		v8: "4.5.103.43"
  	},
  	{
  		name: "nodejs",
  		version: "4.8.0",
  		date: "2017-02-21",
  		lts: "Argon",
  		security: false,
  		v8: "4.5.103.45"
  	},
  	{
  		name: "nodejs",
  		version: "4.9.0",
  		date: "2018-03-28",
  		lts: "Argon",
  		security: true,
  		v8: "4.5.103.53"
  	},
  	{
  		name: "nodejs",
  		version: "5.0.0",
  		date: "2015-10-29",
  		lts: false,
  		security: false,
  		v8: "4.6.85.28"
  	},
  	{
  		name: "nodejs",
  		version: "5.1.0",
  		date: "2015-11-17",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.2.0",
  		date: "2015-12-09",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.3.0",
  		date: "2015-12-15",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.4.0",
  		date: "2016-01-06",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.5.0",
  		date: "2016-01-21",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.6.0",
  		date: "2016-02-09",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.7.0",
  		date: "2016-02-23",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.8.0",
  		date: "2016-03-09",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.9.0",
  		date: "2016-03-16",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.10.0",
  		date: "2016-04-01",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.11.0",
  		date: "2016-04-21",
  		lts: false,
  		security: false,
  		v8: "4.6.85.31"
  	},
  	{
  		name: "nodejs",
  		version: "5.12.0",
  		date: "2016-06-23",
  		lts: false,
  		security: false,
  		v8: "4.6.85.32"
  	},
  	{
  		name: "nodejs",
  		version: "6.0.0",
  		date: "2016-04-26",
  		lts: false,
  		security: false,
  		v8: "5.0.71.35"
  	},
  	{
  		name: "nodejs",
  		version: "6.1.0",
  		date: "2016-05-05",
  		lts: false,
  		security: false,
  		v8: "5.0.71.35"
  	},
  	{
  		name: "nodejs",
  		version: "6.2.0",
  		date: "2016-05-17",
  		lts: false,
  		security: false,
  		v8: "5.0.71.47"
  	},
  	{
  		name: "nodejs",
  		version: "6.3.0",
  		date: "2016-07-06",
  		lts: false,
  		security: false,
  		v8: "5.0.71.52"
  	},
  	{
  		name: "nodejs",
  		version: "6.4.0",
  		date: "2016-08-12",
  		lts: false,
  		security: false,
  		v8: "5.0.71.60"
  	},
  	{
  		name: "nodejs",
  		version: "6.5.0",
  		date: "2016-08-26",
  		lts: false,
  		security: false,
  		v8: "5.1.281.81"
  	},
  	{
  		name: "nodejs",
  		version: "6.6.0",
  		date: "2016-09-14",
  		lts: false,
  		security: false,
  		v8: "5.1.281.83"
  	},
  	{
  		name: "nodejs",
  		version: "6.7.0",
  		date: "2016-09-27",
  		lts: false,
  		security: true,
  		v8: "5.1.281.83"
  	},
  	{
  		name: "nodejs",
  		version: "6.8.0",
  		date: "2016-10-12",
  		lts: false,
  		security: false,
  		v8: "5.1.281.84"
  	},
  	{
  		name: "nodejs",
  		version: "6.9.0",
  		date: "2016-10-18",
  		lts: "Boron",
  		security: false,
  		v8: "5.1.281.84"
  	},
  	{
  		name: "nodejs",
  		version: "6.10.0",
  		date: "2017-02-21",
  		lts: "Boron",
  		security: false,
  		v8: "5.1.281.93"
  	},
  	{
  		name: "nodejs",
  		version: "6.11.0",
  		date: "2017-06-06",
  		lts: "Boron",
  		security: false,
  		v8: "5.1.281.102"
  	},
  	{
  		name: "nodejs",
  		version: "6.12.0",
  		date: "2017-11-06",
  		lts: "Boron",
  		security: false,
  		v8: "5.1.281.108"
  	},
  	{
  		name: "nodejs",
  		version: "6.13.0",
  		date: "2018-02-10",
  		lts: "Boron",
  		security: false,
  		v8: "5.1.281.111"
  	},
  	{
  		name: "nodejs",
  		version: "6.14.0",
  		date: "2018-03-28",
  		lts: "Boron",
  		security: true,
  		v8: "5.1.281.111"
  	},
  	{
  		name: "nodejs",
  		version: "6.15.0",
  		date: "2018-11-27",
  		lts: "Boron",
  		security: true,
  		v8: "5.1.281.111"
  	},
  	{
  		name: "nodejs",
  		version: "6.16.0",
  		date: "2018-12-26",
  		lts: "Boron",
  		security: false,
  		v8: "5.1.281.111"
  	},
  	{
  		name: "nodejs",
  		version: "6.17.0",
  		date: "2019-02-28",
  		lts: "Boron",
  		security: true,
  		v8: "5.1.281.111"
  	},
  	{
  		name: "nodejs",
  		version: "7.0.0",
  		date: "2016-10-25",
  		lts: false,
  		security: false,
  		v8: "5.4.500.36"
  	},
  	{
  		name: "nodejs",
  		version: "7.1.0",
  		date: "2016-11-08",
  		lts: false,
  		security: false,
  		v8: "5.4.500.36"
  	},
  	{
  		name: "nodejs",
  		version: "7.2.0",
  		date: "2016-11-22",
  		lts: false,
  		security: false,
  		v8: "5.4.500.43"
  	},
  	{
  		name: "nodejs",
  		version: "7.3.0",
  		date: "2016-12-20",
  		lts: false,
  		security: false,
  		v8: "5.4.500.45"
  	},
  	{
  		name: "nodejs",
  		version: "7.4.0",
  		date: "2017-01-04",
  		lts: false,
  		security: false,
  		v8: "5.4.500.45"
  	},
  	{
  		name: "nodejs",
  		version: "7.5.0",
  		date: "2017-01-31",
  		lts: false,
  		security: false,
  		v8: "5.4.500.48"
  	},
  	{
  		name: "nodejs",
  		version: "7.6.0",
  		date: "2017-02-21",
  		lts: false,
  		security: false,
  		v8: "5.5.372.40"
  	},
  	{
  		name: "nodejs",
  		version: "7.7.0",
  		date: "2017-02-28",
  		lts: false,
  		security: false,
  		v8: "5.5.372.41"
  	},
  	{
  		name: "nodejs",
  		version: "7.8.0",
  		date: "2017-03-29",
  		lts: false,
  		security: false,
  		v8: "5.5.372.43"
  	},
  	{
  		name: "nodejs",
  		version: "7.9.0",
  		date: "2017-04-11",
  		lts: false,
  		security: false,
  		v8: "5.5.372.43"
  	},
  	{
  		name: "nodejs",
  		version: "7.10.0",
  		date: "2017-05-02",
  		lts: false,
  		security: false,
  		v8: "5.5.372.43"
  	},
  	{
  		name: "nodejs",
  		version: "8.0.0",
  		date: "2017-05-30",
  		lts: false,
  		security: false,
  		v8: "5.8.283.41"
  	},
  	{
  		name: "nodejs",
  		version: "8.1.0",
  		date: "2017-06-08",
  		lts: false,
  		security: false,
  		v8: "5.8.283.41"
  	},
  	{
  		name: "nodejs",
  		version: "8.2.0",
  		date: "2017-07-19",
  		lts: false,
  		security: false,
  		v8: "5.8.283.41"
  	},
  	{
  		name: "nodejs",
  		version: "8.3.0",
  		date: "2017-08-08",
  		lts: false,
  		security: false,
  		v8: "6.0.286.52"
  	},
  	{
  		name: "nodejs",
  		version: "8.4.0",
  		date: "2017-08-15",
  		lts: false,
  		security: false,
  		v8: "6.0.286.52"
  	},
  	{
  		name: "nodejs",
  		version: "8.5.0",
  		date: "2017-09-12",
  		lts: false,
  		security: false,
  		v8: "6.0.287.53"
  	},
  	{
  		name: "nodejs",
  		version: "8.6.0",
  		date: "2017-09-26",
  		lts: false,
  		security: false,
  		v8: "6.0.287.53"
  	},
  	{
  		name: "nodejs",
  		version: "8.7.0",
  		date: "2017-10-11",
  		lts: false,
  		security: false,
  		v8: "6.1.534.42"
  	},
  	{
  		name: "nodejs",
  		version: "8.8.0",
  		date: "2017-10-24",
  		lts: false,
  		security: false,
  		v8: "6.1.534.42"
  	},
  	{
  		name: "nodejs",
  		version: "8.9.0",
  		date: "2017-10-31",
  		lts: "Carbon",
  		security: false,
  		v8: "6.1.534.46"
  	},
  	{
  		name: "nodejs",
  		version: "8.10.0",
  		date: "2018-03-06",
  		lts: "Carbon",
  		security: false,
  		v8: "6.2.414.50"
  	},
  	{
  		name: "nodejs",
  		version: "8.11.0",
  		date: "2018-03-28",
  		lts: "Carbon",
  		security: true,
  		v8: "6.2.414.50"
  	},
  	{
  		name: "nodejs",
  		version: "8.12.0",
  		date: "2018-09-10",
  		lts: "Carbon",
  		security: false,
  		v8: "6.2.414.66"
  	},
  	{
  		name: "nodejs",
  		version: "8.13.0",
  		date: "2018-11-20",
  		lts: "Carbon",
  		security: false,
  		v8: "6.2.414.72"
  	},
  	{
  		name: "nodejs",
  		version: "8.14.0",
  		date: "2018-11-27",
  		lts: "Carbon",
  		security: true,
  		v8: "6.2.414.72"
  	},
  	{
  		name: "nodejs",
  		version: "8.15.0",
  		date: "2018-12-26",
  		lts: "Carbon",
  		security: false,
  		v8: "6.2.414.75"
  	},
  	{
  		name: "nodejs",
  		version: "8.16.0",
  		date: "2019-04-16",
  		lts: "Carbon",
  		security: false,
  		v8: "6.2.414.77"
  	},
  	{
  		name: "nodejs",
  		version: "8.17.0",
  		date: "2019-12-17",
  		lts: "Carbon",
  		security: true,
  		v8: "6.2.414.78"
  	},
  	{
  		name: "nodejs",
  		version: "9.0.0",
  		date: "2017-10-31",
  		lts: false,
  		security: false,
  		v8: "6.2.414.32"
  	},
  	{
  		name: "nodejs",
  		version: "9.1.0",
  		date: "2017-11-07",
  		lts: false,
  		security: false,
  		v8: "6.2.414.32"
  	},
  	{
  		name: "nodejs",
  		version: "9.2.0",
  		date: "2017-11-14",
  		lts: false,
  		security: false,
  		v8: "6.2.414.44"
  	},
  	{
  		name: "nodejs",
  		version: "9.3.0",
  		date: "2017-12-12",
  		lts: false,
  		security: false,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "9.4.0",
  		date: "2018-01-10",
  		lts: false,
  		security: false,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "9.5.0",
  		date: "2018-01-31",
  		lts: false,
  		security: false,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "9.6.0",
  		date: "2018-02-21",
  		lts: false,
  		security: false,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "9.7.0",
  		date: "2018-03-01",
  		lts: false,
  		security: false,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "9.8.0",
  		date: "2018-03-07",
  		lts: false,
  		security: false,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "9.9.0",
  		date: "2018-03-21",
  		lts: false,
  		security: false,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "9.10.0",
  		date: "2018-03-28",
  		lts: false,
  		security: true,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "9.11.0",
  		date: "2018-04-04",
  		lts: false,
  		security: false,
  		v8: "6.2.414.46"
  	},
  	{
  		name: "nodejs",
  		version: "10.0.0",
  		date: "2018-04-24",
  		lts: false,
  		security: false,
  		v8: "6.6.346.24"
  	},
  	{
  		name: "nodejs",
  		version: "10.1.0",
  		date: "2018-05-08",
  		lts: false,
  		security: false,
  		v8: "6.6.346.27"
  	},
  	{
  		name: "nodejs",
  		version: "10.2.0",
  		date: "2018-05-23",
  		lts: false,
  		security: false,
  		v8: "6.6.346.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.3.0",
  		date: "2018-05-29",
  		lts: false,
  		security: false,
  		v8: "6.6.346.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.4.0",
  		date: "2018-06-06",
  		lts: false,
  		security: false,
  		v8: "6.7.288.43"
  	},
  	{
  		name: "nodejs",
  		version: "10.5.0",
  		date: "2018-06-20",
  		lts: false,
  		security: false,
  		v8: "6.7.288.46"
  	},
  	{
  		name: "nodejs",
  		version: "10.6.0",
  		date: "2018-07-04",
  		lts: false,
  		security: false,
  		v8: "6.7.288.46"
  	},
  	{
  		name: "nodejs",
  		version: "10.7.0",
  		date: "2018-07-18",
  		lts: false,
  		security: false,
  		v8: "6.7.288.49"
  	},
  	{
  		name: "nodejs",
  		version: "10.8.0",
  		date: "2018-08-01",
  		lts: false,
  		security: false,
  		v8: "6.7.288.49"
  	},
  	{
  		name: "nodejs",
  		version: "10.9.0",
  		date: "2018-08-15",
  		lts: false,
  		security: false,
  		v8: "6.8.275.24"
  	},
  	{
  		name: "nodejs",
  		version: "10.10.0",
  		date: "2018-09-06",
  		lts: false,
  		security: false,
  		v8: "6.8.275.30"
  	},
  	{
  		name: "nodejs",
  		version: "10.11.0",
  		date: "2018-09-19",
  		lts: false,
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.12.0",
  		date: "2018-10-10",
  		lts: false,
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.13.0",
  		date: "2018-10-30",
  		lts: "Dubnium",
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.14.0",
  		date: "2018-11-27",
  		lts: "Dubnium",
  		security: true,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.15.0",
  		date: "2018-12-26",
  		lts: "Dubnium",
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.16.0",
  		date: "2019-05-28",
  		lts: "Dubnium",
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.17.0",
  		date: "2019-10-22",
  		lts: "Dubnium",
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.18.0",
  		date: "2019-12-17",
  		lts: "Dubnium",
  		security: true,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.19.0",
  		date: "2020-02-05",
  		lts: "Dubnium",
  		security: true,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.20.0",
  		date: "2020-03-26",
  		lts: "Dubnium",
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.21.0",
  		date: "2020-06-02",
  		lts: "Dubnium",
  		security: true,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.22.0",
  		date: "2020-07-21",
  		lts: "Dubnium",
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.23.0",
  		date: "2020-10-27",
  		lts: "Dubnium",
  		security: false,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "10.24.0",
  		date: "2021-02-23",
  		lts: "Dubnium",
  		security: true,
  		v8: "6.8.275.32"
  	},
  	{
  		name: "nodejs",
  		version: "11.0.0",
  		date: "2018-10-23",
  		lts: false,
  		security: false,
  		v8: "7.0.276.28"
  	},
  	{
  		name: "nodejs",
  		version: "11.1.0",
  		date: "2018-10-30",
  		lts: false,
  		security: false,
  		v8: "7.0.276.32"
  	},
  	{
  		name: "nodejs",
  		version: "11.2.0",
  		date: "2018-11-15",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.3.0",
  		date: "2018-11-27",
  		lts: false,
  		security: true,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.4.0",
  		date: "2018-12-07",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.5.0",
  		date: "2018-12-18",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.6.0",
  		date: "2018-12-26",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.7.0",
  		date: "2019-01-17",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.8.0",
  		date: "2019-01-24",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.9.0",
  		date: "2019-01-30",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.10.0",
  		date: "2019-02-14",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.11.0",
  		date: "2019-03-05",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.12.0",
  		date: "2019-03-14",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.13.0",
  		date: "2019-03-28",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.14.0",
  		date: "2019-04-10",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "11.15.0",
  		date: "2019-04-30",
  		lts: false,
  		security: false,
  		v8: "7.0.276.38"
  	},
  	{
  		name: "nodejs",
  		version: "12.0.0",
  		date: "2019-04-23",
  		lts: false,
  		security: false,
  		v8: "7.4.288.21"
  	},
  	{
  		name: "nodejs",
  		version: "12.1.0",
  		date: "2019-04-29",
  		lts: false,
  		security: false,
  		v8: "7.4.288.21"
  	},
  	{
  		name: "nodejs",
  		version: "12.2.0",
  		date: "2019-05-07",
  		lts: false,
  		security: false,
  		v8: "7.4.288.21"
  	},
  	{
  		name: "nodejs",
  		version: "12.3.0",
  		date: "2019-05-21",
  		lts: false,
  		security: false,
  		v8: "7.4.288.27"
  	},
  	{
  		name: "nodejs",
  		version: "12.4.0",
  		date: "2019-06-04",
  		lts: false,
  		security: false,
  		v8: "7.4.288.27"
  	},
  	{
  		name: "nodejs",
  		version: "12.5.0",
  		date: "2019-06-26",
  		lts: false,
  		security: false,
  		v8: "7.5.288.22"
  	},
  	{
  		name: "nodejs",
  		version: "12.6.0",
  		date: "2019-07-03",
  		lts: false,
  		security: false,
  		v8: "7.5.288.22"
  	},
  	{
  		name: "nodejs",
  		version: "12.7.0",
  		date: "2019-07-23",
  		lts: false,
  		security: false,
  		v8: "7.5.288.22"
  	},
  	{
  		name: "nodejs",
  		version: "12.8.0",
  		date: "2019-08-06",
  		lts: false,
  		security: false,
  		v8: "7.5.288.22"
  	},
  	{
  		name: "nodejs",
  		version: "12.9.0",
  		date: "2019-08-20",
  		lts: false,
  		security: false,
  		v8: "7.6.303.29"
  	},
  	{
  		name: "nodejs",
  		version: "12.10.0",
  		date: "2019-09-04",
  		lts: false,
  		security: false,
  		v8: "7.6.303.29"
  	},
  	{
  		name: "nodejs",
  		version: "12.11.0",
  		date: "2019-09-25",
  		lts: false,
  		security: false,
  		v8: "7.7.299.11"
  	},
  	{
  		name: "nodejs",
  		version: "12.12.0",
  		date: "2019-10-11",
  		lts: false,
  		security: false,
  		v8: "7.7.299.13"
  	},
  	{
  		name: "nodejs",
  		version: "12.13.0",
  		date: "2019-10-21",
  		lts: "Erbium",
  		security: false,
  		v8: "7.7.299.13"
  	},
  	{
  		name: "nodejs",
  		version: "12.14.0",
  		date: "2019-12-17",
  		lts: "Erbium",
  		security: true,
  		v8: "7.7.299.13"
  	},
  	{
  		name: "nodejs",
  		version: "12.15.0",
  		date: "2020-02-05",
  		lts: "Erbium",
  		security: true,
  		v8: "7.7.299.13"
  	},
  	{
  		name: "nodejs",
  		version: "12.16.0",
  		date: "2020-02-11",
  		lts: "Erbium",
  		security: false,
  		v8: "7.8.279.23"
  	},
  	{
  		name: "nodejs",
  		version: "12.17.0",
  		date: "2020-05-26",
  		lts: "Erbium",
  		security: false,
  		v8: "7.8.279.23"
  	},
  	{
  		name: "nodejs",
  		version: "12.18.0",
  		date: "2020-06-02",
  		lts: "Erbium",
  		security: true,
  		v8: "7.8.279.23"
  	},
  	{
  		name: "nodejs",
  		version: "12.19.0",
  		date: "2020-10-06",
  		lts: "Erbium",
  		security: false,
  		v8: "7.8.279.23"
  	},
  	{
  		name: "nodejs",
  		version: "12.20.0",
  		date: "2020-11-24",
  		lts: "Erbium",
  		security: false,
  		v8: "7.8.279.23"
  	},
  	{
  		name: "nodejs",
  		version: "12.21.0",
  		date: "2021-02-23",
  		lts: "Erbium",
  		security: true,
  		v8: "7.8.279.23"
  	},
  	{
  		name: "nodejs",
  		version: "12.22.0",
  		date: "2021-03-30",
  		lts: "Erbium",
  		security: false,
  		v8: "7.8.279.23"
  	},
  	{
  		name: "nodejs",
  		version: "13.0.0",
  		date: "2019-10-22",
  		lts: false,
  		security: false,
  		v8: "7.8.279.17"
  	},
  	{
  		name: "nodejs",
  		version: "13.1.0",
  		date: "2019-11-05",
  		lts: false,
  		security: false,
  		v8: "7.8.279.17"
  	},
  	{
  		name: "nodejs",
  		version: "13.2.0",
  		date: "2019-11-21",
  		lts: false,
  		security: false,
  		v8: "7.9.317.23"
  	},
  	{
  		name: "nodejs",
  		version: "13.3.0",
  		date: "2019-12-03",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.4.0",
  		date: "2019-12-17",
  		lts: false,
  		security: true,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.5.0",
  		date: "2019-12-18",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.6.0",
  		date: "2020-01-07",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.7.0",
  		date: "2020-01-21",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.8.0",
  		date: "2020-02-05",
  		lts: false,
  		security: true,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.9.0",
  		date: "2020-02-18",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.10.0",
  		date: "2020-03-04",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.11.0",
  		date: "2020-03-12",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.12.0",
  		date: "2020-03-26",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.13.0",
  		date: "2020-04-14",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "13.14.0",
  		date: "2020-04-29",
  		lts: false,
  		security: false,
  		v8: "7.9.317.25"
  	},
  	{
  		name: "nodejs",
  		version: "14.0.0",
  		date: "2020-04-21",
  		lts: false,
  		security: false,
  		v8: "8.1.307.30"
  	},
  	{
  		name: "nodejs",
  		version: "14.1.0",
  		date: "2020-04-29",
  		lts: false,
  		security: false,
  		v8: "8.1.307.31"
  	},
  	{
  		name: "nodejs",
  		version: "14.2.0",
  		date: "2020-05-05",
  		lts: false,
  		security: false,
  		v8: "8.1.307.31"
  	},
  	{
  		name: "nodejs",
  		version: "14.3.0",
  		date: "2020-05-19",
  		lts: false,
  		security: false,
  		v8: "8.1.307.31"
  	},
  	{
  		name: "nodejs",
  		version: "14.4.0",
  		date: "2020-06-02",
  		lts: false,
  		security: true,
  		v8: "8.1.307.31"
  	},
  	{
  		name: "nodejs",
  		version: "14.5.0",
  		date: "2020-06-30",
  		lts: false,
  		security: false,
  		v8: "8.3.110.9"
  	},
  	{
  		name: "nodejs",
  		version: "14.6.0",
  		date: "2020-07-20",
  		lts: false,
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.7.0",
  		date: "2020-07-29",
  		lts: false,
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.8.0",
  		date: "2020-08-11",
  		lts: false,
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.9.0",
  		date: "2020-08-27",
  		lts: false,
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.10.0",
  		date: "2020-09-08",
  		lts: false,
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.11.0",
  		date: "2020-09-15",
  		lts: false,
  		security: true,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.12.0",
  		date: "2020-09-22",
  		lts: false,
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.13.0",
  		date: "2020-09-29",
  		lts: false,
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.14.0",
  		date: "2020-10-15",
  		lts: false,
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.15.0",
  		date: "2020-10-27",
  		lts: "Fermium",
  		security: false,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.16.0",
  		date: "2021-02-23",
  		lts: "Fermium",
  		security: true,
  		v8: "8.4.371.19"
  	},
  	{
  		name: "nodejs",
  		version: "14.17.0",
  		date: "2021-05-11",
  		lts: "Fermium",
  		security: false,
  		v8: "8.4.371.23"
  	},
  	{
  		name: "nodejs",
  		version: "14.18.0",
  		date: "2021-09-28",
  		lts: "Fermium",
  		security: false,
  		v8: "8.4.371.23"
  	},
  	{
  		name: "nodejs",
  		version: "14.19.0",
  		date: "2022-02-01",
  		lts: "Fermium",
  		security: false,
  		v8: "8.4.371.23"
  	},
  	{
  		name: "nodejs",
  		version: "14.20.0",
  		date: "2022-07-07",
  		lts: "Fermium",
  		security: true,
  		v8: "8.4.371.23"
  	},
  	{
  		name: "nodejs",
  		version: "14.21.0",
  		date: "2022-11-01",
  		lts: "Fermium",
  		security: false,
  		v8: "8.4.371.23"
  	},
  	{
  		name: "nodejs",
  		version: "15.0.0",
  		date: "2020-10-20",
  		lts: false,
  		security: false,
  		v8: "8.6.395.16"
  	},
  	{
  		name: "nodejs",
  		version: "15.1.0",
  		date: "2020-11-04",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.2.0",
  		date: "2020-11-10",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.3.0",
  		date: "2020-11-24",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.4.0",
  		date: "2020-12-09",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.5.0",
  		date: "2020-12-22",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.6.0",
  		date: "2021-01-14",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.7.0",
  		date: "2021-01-25",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.8.0",
  		date: "2021-02-02",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.9.0",
  		date: "2021-02-18",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.10.0",
  		date: "2021-02-23",
  		lts: false,
  		security: true,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.11.0",
  		date: "2021-03-03",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.12.0",
  		date: "2021-03-17",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.13.0",
  		date: "2021-03-31",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "15.14.0",
  		date: "2021-04-06",
  		lts: false,
  		security: false,
  		v8: "8.6.395.17"
  	},
  	{
  		name: "nodejs",
  		version: "16.0.0",
  		date: "2021-04-20",
  		lts: false,
  		security: false,
  		v8: "9.0.257.17"
  	},
  	{
  		name: "nodejs",
  		version: "16.1.0",
  		date: "2021-05-04",
  		lts: false,
  		security: false,
  		v8: "9.0.257.24"
  	},
  	{
  		name: "nodejs",
  		version: "16.2.0",
  		date: "2021-05-19",
  		lts: false,
  		security: false,
  		v8: "9.0.257.25"
  	},
  	{
  		name: "nodejs",
  		version: "16.3.0",
  		date: "2021-06-03",
  		lts: false,
  		security: false,
  		v8: "9.0.257.25"
  	},
  	{
  		name: "nodejs",
  		version: "16.4.0",
  		date: "2021-06-23",
  		lts: false,
  		security: false,
  		v8: "9.1.269.36"
  	},
  	{
  		name: "nodejs",
  		version: "16.5.0",
  		date: "2021-07-14",
  		lts: false,
  		security: false,
  		v8: "9.1.269.38"
  	},
  	{
  		name: "nodejs",
  		version: "16.6.0",
  		date: "2021-07-29",
  		lts: false,
  		security: true,
  		v8: "9.2.230.21"
  	},
  	{
  		name: "nodejs",
  		version: "16.7.0",
  		date: "2021-08-18",
  		lts: false,
  		security: false,
  		v8: "9.2.230.21"
  	},
  	{
  		name: "nodejs",
  		version: "16.8.0",
  		date: "2021-08-25",
  		lts: false,
  		security: false,
  		v8: "9.2.230.21"
  	},
  	{
  		name: "nodejs",
  		version: "16.9.0",
  		date: "2021-09-07",
  		lts: false,
  		security: false,
  		v8: "9.3.345.16"
  	},
  	{
  		name: "nodejs",
  		version: "16.10.0",
  		date: "2021-09-22",
  		lts: false,
  		security: false,
  		v8: "9.3.345.19"
  	},
  	{
  		name: "nodejs",
  		version: "16.11.0",
  		date: "2021-10-08",
  		lts: false,
  		security: false,
  		v8: "9.4.146.19"
  	},
  	{
  		name: "nodejs",
  		version: "16.12.0",
  		date: "2021-10-20",
  		lts: false,
  		security: false,
  		v8: "9.4.146.19"
  	},
  	{
  		name: "nodejs",
  		version: "16.13.0",
  		date: "2021-10-26",
  		lts: "Gallium",
  		security: false,
  		v8: "9.4.146.19"
  	},
  	{
  		name: "nodejs",
  		version: "16.14.0",
  		date: "2022-02-08",
  		lts: "Gallium",
  		security: false,
  		v8: "9.4.146.24"
  	},
  	{
  		name: "nodejs",
  		version: "16.15.0",
  		date: "2022-04-26",
  		lts: "Gallium",
  		security: false,
  		v8: "9.4.146.24"
  	},
  	{
  		name: "nodejs",
  		version: "16.16.0",
  		date: "2022-07-07",
  		lts: "Gallium",
  		security: true,
  		v8: "9.4.146.24"
  	},
  	{
  		name: "nodejs",
  		version: "16.17.0",
  		date: "2022-08-16",
  		lts: "Gallium",
  		security: false,
  		v8: "9.4.146.26"
  	},
  	{
  		name: "nodejs",
  		version: "16.18.0",
  		date: "2022-10-12",
  		lts: "Gallium",
  		security: false,
  		v8: "9.4.146.26"
  	},
  	{
  		name: "nodejs",
  		version: "16.19.0",
  		date: "2022-12-13",
  		lts: "Gallium",
  		security: false,
  		v8: "9.4.146.26"
  	},
  	{
  		name: "nodejs",
  		version: "16.20.0",
  		date: "2023-03-28",
  		lts: "Gallium",
  		security: false,
  		v8: "9.4.146.26"
  	},
  	{
  		name: "nodejs",
  		version: "17.0.0",
  		date: "2021-10-19",
  		lts: false,
  		security: false,
  		v8: "9.5.172.21"
  	},
  	{
  		name: "nodejs",
  		version: "17.1.0",
  		date: "2021-11-09",
  		lts: false,
  		security: false,
  		v8: "9.5.172.25"
  	},
  	{
  		name: "nodejs",
  		version: "17.2.0",
  		date: "2021-11-30",
  		lts: false,
  		security: false,
  		v8: "9.6.180.14"
  	},
  	{
  		name: "nodejs",
  		version: "17.3.0",
  		date: "2021-12-17",
  		lts: false,
  		security: false,
  		v8: "9.6.180.15"
  	},
  	{
  		name: "nodejs",
  		version: "17.4.0",
  		date: "2022-01-18",
  		lts: false,
  		security: false,
  		v8: "9.6.180.15"
  	},
  	{
  		name: "nodejs",
  		version: "17.5.0",
  		date: "2022-02-10",
  		lts: false,
  		security: false,
  		v8: "9.6.180.15"
  	},
  	{
  		name: "nodejs",
  		version: "17.6.0",
  		date: "2022-02-22",
  		lts: false,
  		security: false,
  		v8: "9.6.180.15"
  	},
  	{
  		name: "nodejs",
  		version: "17.7.0",
  		date: "2022-03-09",
  		lts: false,
  		security: false,
  		v8: "9.6.180.15"
  	},
  	{
  		name: "nodejs",
  		version: "17.8.0",
  		date: "2022-03-22",
  		lts: false,
  		security: false,
  		v8: "9.6.180.15"
  	},
  	{
  		name: "nodejs",
  		version: "17.9.0",
  		date: "2022-04-07",
  		lts: false,
  		security: false,
  		v8: "9.6.180.15"
  	},
  	{
  		name: "nodejs",
  		version: "18.0.0",
  		date: "2022-04-18",
  		lts: false,
  		security: false,
  		v8: "10.1.124.8"
  	},
  	{
  		name: "nodejs",
  		version: "18.1.0",
  		date: "2022-05-03",
  		lts: false,
  		security: false,
  		v8: "10.1.124.8"
  	},
  	{
  		name: "nodejs",
  		version: "18.2.0",
  		date: "2022-05-17",
  		lts: false,
  		security: false,
  		v8: "10.1.124.8"
  	},
  	{
  		name: "nodejs",
  		version: "18.3.0",
  		date: "2022-06-02",
  		lts: false,
  		security: false,
  		v8: "10.2.154.4"
  	},
  	{
  		name: "nodejs",
  		version: "18.4.0",
  		date: "2022-06-16",
  		lts: false,
  		security: false,
  		v8: "10.2.154.4"
  	},
  	{
  		name: "nodejs",
  		version: "18.5.0",
  		date: "2022-07-06",
  		lts: false,
  		security: true,
  		v8: "10.2.154.4"
  	},
  	{
  		name: "nodejs",
  		version: "18.6.0",
  		date: "2022-07-13",
  		lts: false,
  		security: false,
  		v8: "10.2.154.13"
  	},
  	{
  		name: "nodejs",
  		version: "18.7.0",
  		date: "2022-07-26",
  		lts: false,
  		security: false,
  		v8: "10.2.154.13"
  	},
  	{
  		name: "nodejs",
  		version: "18.8.0",
  		date: "2022-08-24",
  		lts: false,
  		security: false,
  		v8: "10.2.154.13"
  	},
  	{
  		name: "nodejs",
  		version: "18.9.0",
  		date: "2022-09-07",
  		lts: false,
  		security: false,
  		v8: "10.2.154.15"
  	},
  	{
  		name: "nodejs",
  		version: "18.10.0",
  		date: "2022-09-28",
  		lts: false,
  		security: false,
  		v8: "10.2.154.15"
  	},
  	{
  		name: "nodejs",
  		version: "18.11.0",
  		date: "2022-10-13",
  		lts: false,
  		security: false,
  		v8: "10.2.154.15"
  	},
  	{
  		name: "nodejs",
  		version: "18.12.0",
  		date: "2022-10-25",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.15"
  	},
  	{
  		name: "nodejs",
  		version: "18.13.0",
  		date: "2023-01-05",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.23"
  	},
  	{
  		name: "nodejs",
  		version: "18.14.0",
  		date: "2023-02-01",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.23"
  	},
  	{
  		name: "nodejs",
  		version: "18.15.0",
  		date: "2023-03-05",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.26"
  	},
  	{
  		name: "nodejs",
  		version: "18.16.0",
  		date: "2023-04-12",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.26"
  	},
  	{
  		name: "nodejs",
  		version: "18.17.0",
  		date: "2023-07-18",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.26"
  	},
  	{
  		name: "nodejs",
  		version: "18.18.0",
  		date: "2023-09-18",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.26"
  	},
  	{
  		name: "nodejs",
  		version: "18.19.0",
  		date: "2023-11-29",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.26"
  	},
  	{
  		name: "nodejs",
  		version: "18.20.0",
  		date: "2024-03-26",
  		lts: "Hydrogen",
  		security: false,
  		v8: "10.2.154.26"
  	},
  	{
  		name: "nodejs",
  		version: "19.0.0",
  		date: "2022-10-17",
  		lts: false,
  		security: false,
  		v8: "10.7.193.13"
  	},
  	{
  		name: "nodejs",
  		version: "19.1.0",
  		date: "2022-11-14",
  		lts: false,
  		security: false,
  		v8: "10.7.193.20"
  	},
  	{
  		name: "nodejs",
  		version: "19.2.0",
  		date: "2022-11-29",
  		lts: false,
  		security: false,
  		v8: "10.8.168.20"
  	},
  	{
  		name: "nodejs",
  		version: "19.3.0",
  		date: "2022-12-14",
  		lts: false,
  		security: false,
  		v8: "10.8.168.21"
  	},
  	{
  		name: "nodejs",
  		version: "19.4.0",
  		date: "2023-01-05",
  		lts: false,
  		security: false,
  		v8: "10.8.168.25"
  	},
  	{
  		name: "nodejs",
  		version: "19.5.0",
  		date: "2023-01-24",
  		lts: false,
  		security: false,
  		v8: "10.8.168.25"
  	},
  	{
  		name: "nodejs",
  		version: "19.6.0",
  		date: "2023-02-01",
  		lts: false,
  		security: false,
  		v8: "10.8.168.25"
  	},
  	{
  		name: "nodejs",
  		version: "19.7.0",
  		date: "2023-02-21",
  		lts: false,
  		security: false,
  		v8: "10.8.168.25"
  	},
  	{
  		name: "nodejs",
  		version: "19.8.0",
  		date: "2023-03-14",
  		lts: false,
  		security: false,
  		v8: "10.8.168.25"
  	},
  	{
  		name: "nodejs",
  		version: "19.9.0",
  		date: "2023-04-10",
  		lts: false,
  		security: false,
  		v8: "10.8.168.25"
  	},
  	{
  		name: "nodejs",
  		version: "20.0.0",
  		date: "2023-04-17",
  		lts: false,
  		security: false,
  		v8: "11.3.244.4"
  	},
  	{
  		name: "nodejs",
  		version: "20.1.0",
  		date: "2023-05-03",
  		lts: false,
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.2.0",
  		date: "2023-05-16",
  		lts: false,
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.3.0",
  		date: "2023-06-08",
  		lts: false,
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.4.0",
  		date: "2023-07-04",
  		lts: false,
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.5.0",
  		date: "2023-07-19",
  		lts: false,
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.6.0",
  		date: "2023-08-23",
  		lts: false,
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.7.0",
  		date: "2023-09-18",
  		lts: false,
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.8.0",
  		date: "2023-09-28",
  		lts: false,
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.9.0",
  		date: "2023-10-24",
  		lts: "Iron",
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.10.0",
  		date: "2023-11-22",
  		lts: "Iron",
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.11.0",
  		date: "2024-01-09",
  		lts: "Iron",
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.12.0",
  		date: "2024-03-26",
  		lts: "Iron",
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.13.0",
  		date: "2024-05-07",
  		lts: "Iron",
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.14.0",
  		date: "2024-05-28",
  		lts: "Iron",
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "20.15.0",
  		date: "2024-06-20",
  		lts: "Iron",
  		security: false,
  		v8: "11.3.244.8"
  	},
  	{
  		name: "nodejs",
  		version: "21.0.0",
  		date: "2023-10-17",
  		lts: false,
  		security: false,
  		v8: "11.8.172.13"
  	},
  	{
  		name: "nodejs",
  		version: "21.1.0",
  		date: "2023-10-24",
  		lts: false,
  		security: false,
  		v8: "11.8.172.15"
  	},
  	{
  		name: "nodejs",
  		version: "21.2.0",
  		date: "2023-11-14",
  		lts: false,
  		security: false,
  		v8: "11.8.172.17"
  	},
  	{
  		name: "nodejs",
  		version: "21.3.0",
  		date: "2023-11-30",
  		lts: false,
  		security: false,
  		v8: "11.8.172.17"
  	},
  	{
  		name: "nodejs",
  		version: "21.4.0",
  		date: "2023-12-05",
  		lts: false,
  		security: false,
  		v8: "11.8.172.17"
  	},
  	{
  		name: "nodejs",
  		version: "21.5.0",
  		date: "2023-12-19",
  		lts: false,
  		security: false,
  		v8: "11.8.172.17"
  	},
  	{
  		name: "nodejs",
  		version: "21.6.0",
  		date: "2024-01-14",
  		lts: false,
  		security: false,
  		v8: "11.8.172.17"
  	},
  	{
  		name: "nodejs",
  		version: "21.7.0",
  		date: "2024-03-06",
  		lts: false,
  		security: false,
  		v8: "11.8.172.17"
  	},
  	{
  		name: "nodejs",
  		version: "22.0.0",
  		date: "2024-04-24",
  		lts: false,
  		security: false,
  		v8: "12.4.254.14"
  	},
  	{
  		name: "nodejs",
  		version: "22.1.0",
  		date: "2024-05-02",
  		lts: false,
  		security: false,
  		v8: "12.4.254.14"
  	},
  	{
  		name: "nodejs",
  		version: "22.2.0",
  		date: "2024-05-15",
  		lts: false,
  		security: false,
  		v8: "12.4.254.14"
  	},
  	{
  		name: "nodejs",
  		version: "22.3.0",
  		date: "2024-06-11",
  		lts: false,
  		security: false,
  		v8: "12.4.254.20"
  	},
  	{
  		name: "nodejs",
  		version: "22.4.0",
  		date: "2024-07-02",
  		lts: false,
  		security: false,
  		v8: "12.4.254.21"
  	},
  	{
  		name: "nodejs",
  		version: "22.5.0",
  		date: "2024-07-17",
  		lts: false,
  		security: false,
  		v8: "12.4.254.21"
  	}
  ];

  var browsers$4={A:"ie",B:"edge",C:"firefox",D:"chrome",E:"safari",F:"opera",G:"ios_saf",H:"op_mini",I:"android",J:"bb",K:"op_mob",L:"and_chr",M:"and_ff",N:"ie_mob",O:"and_uc",P:"samsung",Q:"and_qq",R:"baidu",S:"kaios"};

  var browsers_1 = browsers$4;

  var browsers$3 = {
  	browsers: browsers_1
  };

  var browserVersions$1={"0":"25","1":"112","2":"113","3":"114","4":"115","5":"116","6":"117","7":"118","8":"119","9":"120",A:"10",B:"11",C:"12",D:"127",E:"7",F:"8",G:"9",H:"15",I:"80",J:"4",K:"6",L:"13",M:"14",N:"16",O:"17",P:"18",Q:"79",R:"81",S:"83",T:"84",U:"85",V:"86",W:"87",X:"88",Y:"89",Z:"90",a:"91",b:"92",c:"93",d:"94",e:"95",f:"96",g:"97",h:"98",i:"99",j:"100",k:"101",l:"102",m:"103",n:"104",o:"105",p:"106",q:"107",r:"108",s:"109",t:"110",u:"111",v:"20",w:"21",x:"22",y:"23",z:"24",AB:"121",BB:"122",CB:"123",DB:"124",EB:"125",FB:"126",GB:"5",HB:"19",IB:"26",JB:"27",KB:"28",LB:"29",MB:"30",NB:"31",OB:"32",PB:"33",QB:"34",RB:"35",SB:"36",TB:"37",UB:"38",VB:"39",WB:"40",XB:"41",YB:"42",ZB:"43",aB:"44",bB:"45",cB:"46",dB:"47",eB:"48",fB:"49",gB:"50",hB:"51",iB:"52",jB:"53",kB:"54",lB:"55",mB:"56",nB:"57",oB:"58",pB:"60",qB:"62",rB:"63",sB:"64",tB:"65",uB:"66",vB:"67",wB:"68",xB:"69",yB:"70",zB:"71","0B":"72","1B":"73","2B":"74","3B":"75","4B":"76","5B":"77","6B":"78","7B":"11.1","8B":"12.1","9B":"15.5",AC:"16.0",BC:"17.0",CC:"18.0",DC:"3",EC:"59",FC:"61",GC:"82",HC:"128",IC:"129",JC:"130",KC:"3.2",LC:"10.1",MC:"15.2-15.3",NC:"15.4",OC:"16.1",PC:"16.2",QC:"16.3",RC:"16.4",SC:"16.5",TC:"17.1",UC:"17.2",VC:"17.3",WC:"17.4",XC:"17.5",YC:"17.6",ZC:"11.5",aC:"4.2-4.3",bC:"5.5",cC:"2",dC:"131",eC:"3.5",fC:"3.6",gC:"3.1",hC:"5.1",iC:"6.1",jC:"7.1",kC:"9.1",lC:"13.1",mC:"14.1",nC:"15.1",oC:"15.6",pC:"16.6",qC:"TP",rC:"9.5-9.6",sC:"10.0-10.1",tC:"10.5",uC:"10.6",vC:"11.6",wC:"4.0-4.1",xC:"5.0-5.1",yC:"6.0-6.1",zC:"7.0-7.1","0C":"8.1-8.4","1C":"9.0-9.2","2C":"9.3","3C":"10.0-10.2","4C":"10.3","5C":"11.0-11.2","6C":"11.3-11.4","7C":"12.0-12.1","8C":"12.2-12.5","9C":"13.0-13.1",AD:"13.2",BD:"13.3",CD:"13.4-13.7",DD:"14.0-14.4",ED:"14.5-14.8",FD:"15.0-15.1",GD:"15.6-15.8",HD:"16.6-16.7",ID:"all",JD:"2.1",KD:"2.2",LD:"2.3",MD:"4.1",ND:"4.4",OD:"4.4.3-4.4.4",PD:"5.0-5.4",QD:"6.2-6.4",RD:"7.2-7.4",SD:"8.2",TD:"9.2",UD:"11.1-11.2",VD:"12.0",WD:"13.0",XD:"14.0",YD:"15.0",ZD:"19.0",aD:"14.9",bD:"13.52",cD:"2.5",dD:"3.0-3.1"};

  var browserVersions_1 = browserVersions$1;

  var browserVersions = {
  	browserVersions: browserVersions_1
  };

  var agents$4={A:{A:{K:0,E:0,F:0.0271533,G:0.0678831,A:0,B:0.529489,bC:0},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bC","K","E","F","G","A","B","","",""],E:"IE",F:{bC:962323200,K:998870400,E:1161129600,F:1237420800,G:1300060800,A:1346716800,B:1381968000}},B:{A:{"1":0.00757,"2":0.011355,"3":0.01514,"4":0.00757,"5":0.00757,"6":0.011355,"7":0.00757,"8":0.01514,"9":0.034065,C:0,L:0,M:0,H:0,N:0,O:0.003785,P:0.041635,Q:0,I:0,R:0,S:0,T:0,U:0,V:0,W:0,X:0,Y:0,Z:0,a:0,b:0.011355,c:0,d:0,e:0,f:0,g:0,h:0,i:0,j:0,k:0,l:0,m:0,n:0,o:0,p:0,q:0.003785,r:0.00757,s:0.064345,t:0.003785,u:0.00757,AB:0.026495,BB:0.064345,CB:0.16654,DB:2.88417,EB:1.57834,FB:0.00757,D:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C","L","M","H","N","O","P","Q","I","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","D","","",""],E:"Edge",F:{"1":1680825600,"2":1683158400,"3":1685664000,"4":1689897600,"5":1692576000,"6":1694649600,"7":1697155200,"8":1698969600,"9":1701993600,C:1438128000,L:1447286400,M:1470096000,H:1491868800,N:1508198400,O:1525046400,P:1542067200,Q:1579046400,I:1581033600,R:1586736000,S:1590019200,T:1594857600,U:1598486400,V:1602201600,W:1605830400,X:1611360000,Y:1614816000,Z:1618358400,a:1622073600,b:1626912000,c:1630627200,d:1632441600,e:1634774400,f:1637539200,g:1641427200,h:1643932800,i:1646265600,j:1649635200,k:1651190400,l:1653955200,m:1655942400,n:1659657600,o:1661990400,p:1664755200,q:1666915200,r:1670198400,s:1673481600,t:1675900800,u:1678665600,AB:1706227200,BB:1708732800,CB:1711152000,DB:1713398400,EB:1715990400,FB:1718841600,D:1721865600},D:{C:"ms",L:"ms",M:"ms",H:"ms",N:"ms",O:"ms",P:"ms"}},C:{A:{"0":0,"1":0,"2":0.011355,"3":0,"4":0.397425,"5":0,"6":0.00757,"7":0.079485,"8":0,"9":0.00757,cC:0,DC:0,J:0.003785,GB:0,K:0,E:0,F:0,G:0,A:0,B:0.018925,C:0,L:0,M:0,H:0,N:0,O:0,P:0,HB:0,v:0,w:0,x:0,y:0,z:0,IB:0,JB:0,KB:0,LB:0,MB:0,NB:0,OB:0,PB:0,QB:0,RB:0,SB:0,TB:0,UB:0,VB:0,WB:0,XB:0,YB:0,ZB:0.00757,aB:0.00757,bB:0.00757,cB:0,dB:0,eB:0,fB:0,gB:0.00757,hB:0,iB:0.05299,jB:0.003785,kB:0.003785,lB:0,mB:0.02271,nB:0,oB:0,EC:0.003785,pB:0,FC:0,qB:0,rB:0,sB:0,tB:0,uB:0,vB:0,wB:0,xB:0,yB:0,zB:0,"0B":0,"1B":0,"2B":0,"3B":0,"4B":0,"5B":0,"6B":0.01514,Q:0,I:0,R:0,GC:0,S:0,T:0,U:0,V:0,W:0,X:0.011355,Y:0,Z:0,a:0,b:0,c:0,d:0.003785,e:0,f:0,g:0,h:0,i:0,j:0,k:0,l:0.011355,m:0.011355,n:0,o:0,p:0,q:0,r:0.003785,s:0.00757,t:0,u:0,AB:0.00757,BB:0.011355,CB:0.01514,DB:0.06813,EB:0.844055,FB:0.738075,D:0.003785,HC:0,IC:0,JC:0,dC:0,eC:0,fC:0},B:"moz",C:["cC","DC","eC","fC","J","GB","K","E","F","G","A","B","C","L","M","H","N","O","P","HB","v","w","x","y","z","0","IB","JB","KB","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","ZB","aB","bB","cB","dB","eB","fB","gB","hB","iB","jB","kB","lB","mB","nB","oB","EC","pB","FC","qB","rB","sB","tB","uB","vB","wB","xB","yB","zB","0B","1B","2B","3B","4B","5B","6B","Q","I","R","GC","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","D","HC","IC","JC","dC"],E:"Firefox",F:{"0":1379376000,"1":1681171200,"2":1683590400,"3":1686009600,"4":1688428800,"5":1690848000,"6":1693267200,"7":1695686400,"8":1698105600,"9":1700524800,cC:1161648000,DC:1213660800,eC:1246320000,fC:1264032000,J:1300752000,GB:1308614400,K:1313452800,E:1317081600,F:1317081600,G:1320710400,A:1324339200,B:1327968000,C:1331596800,L:1335225600,M:1338854400,H:1342483200,N:1346112000,O:1349740800,P:1353628800,HB:1357603200,v:1361232000,w:1364860800,x:1368489600,y:1372118400,z:1375747200,IB:1386633600,JB:1391472000,KB:1395100800,LB:1398729600,MB:1402358400,NB:1405987200,OB:1409616000,PB:1413244800,QB:1417392000,RB:1421107200,SB:1424736000,TB:1428278400,UB:1431475200,VB:1435881600,WB:1439251200,XB:1442880000,YB:1446508800,ZB:1450137600,aB:1453852800,bB:1457395200,cB:1461628800,dB:1465257600,eB:1470096000,fB:1474329600,gB:1479168000,hB:1485216000,iB:1488844800,jB:1492560000,kB:1497312000,lB:1502150400,mB:1506556800,nB:1510617600,oB:1516665600,EC:1520985600,pB:1525824000,FC:1529971200,qB:1536105600,rB:1540252800,sB:1544486400,tB:1548720000,uB:1552953600,vB:1558396800,wB:1562630400,xB:1567468800,yB:1571788800,zB:1575331200,"0B":1578355200,"1B":1581379200,"2B":1583798400,"3B":1586304000,"4B":1588636800,"5B":1591056000,"6B":1593475200,Q:1595894400,I:1598313600,R:1600732800,GC:1603152000,S:1605571200,T:1607990400,U:1611619200,V:1614038400,W:1616457600,X:1618790400,Y:1622505600,Z:1626134400,a:1628553600,b:1630972800,c:1633392000,d:1635811200,e:1638835200,f:1641859200,g:1644364800,h:1646697600,i:1649116800,j:1651536000,k:1653955200,l:1656374400,m:1658793600,n:1661212800,o:1663632000,p:1666051200,q:1668470400,r:1670889600,s:1673913600,t:1676332800,u:1678752000,AB:1702944000,BB:1705968000,CB:1708387200,DB:1710806400,EB:1713225600,FB:1715644800,D:1718064000,HC:1720483200,IC:null,JC:null,dC:null}},D:{A:{"0":0,"1":0.041635,"2":0.09841,"3":0.109765,"4":0.04542,"5":0.230885,"6":0.102195,"7":0.08327,"8":0.09084,"9":0.185465,J:0,GB:0,K:0,E:0,F:0,G:0,A:0,B:0,C:0,L:0,M:0,H:0,N:0,O:0,P:0,HB:0,v:0,w:0,x:0,y:0,z:0,IB:0,JB:0,KB:0,LB:0,MB:0,NB:0,OB:0,PB:0,QB:0.00757,RB:0,SB:0,TB:0,UB:0.01514,VB:0,WB:0,XB:0,YB:0,ZB:0,aB:0,bB:0.003785,cB:0,dB:0.003785,eB:0.02271,fB:0.026495,gB:0.011355,hB:0,iB:0.003785,jB:0.003785,kB:0,lB:0,mB:0.011355,nB:0,oB:0.003785,EC:0,pB:0,FC:0.003785,qB:0,rB:0.003785,sB:0,tB:0,uB:0.02271,vB:0.00757,wB:0,xB:0.03028,yB:0.064345,zB:0.003785,"0B":0.003785,"1B":0.011355,"2B":0.00757,"3B":0.00757,"4B":0.00757,"5B":0.00757,"6B":0.01514,Q:0.12112,I:0.011355,R:0.02271,S:0.041635,T:0.00757,U:0.011355,V:0.049205,W:0.06813,X:0.01514,Y:0.011355,Z:0.011355,a:0.03785,b:0.018925,c:0.03028,d:0.041635,e:0.011355,f:0.011355,g:0.01514,h:0.071915,i:0.034065,j:0.04542,k:0.06813,l:0.049205,m:0.170325,n:0.094625,o:0.03028,p:0.03785,q:0.03028,r:0.04542,s:1.49507,t:0.026495,u:0.03785,AB:0.389855,BB:0.29523,CB:1.11279,DB:12.6116,EB:4.62527,FB:0.018925,D:0.00757,HC:0,IC:0,JC:0},B:"webkit",C:["","","","","","","J","GB","K","E","F","G","A","B","C","L","M","H","N","O","P","HB","v","w","x","y","z","0","IB","JB","KB","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","ZB","aB","bB","cB","dB","eB","fB","gB","hB","iB","jB","kB","lB","mB","nB","oB","EC","pB","FC","qB","rB","sB","tB","uB","vB","wB","xB","yB","zB","0B","1B","2B","3B","4B","5B","6B","Q","I","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","D","HC","IC","JC"],E:"Chrome",F:{"0":1357862400,"1":1680566400,"2":1682985600,"3":1685404800,"4":1689724800,"5":1692057600,"6":1694476800,"7":1696896000,"8":1698710400,"9":1701993600,J:1264377600,GB:1274745600,K:1283385600,E:1287619200,F:1291248000,G:1296777600,A:1299542400,B:1303862400,C:1307404800,L:1312243200,M:1316131200,H:1316131200,N:1319500800,O:1323734400,P:1328659200,HB:1332892800,v:1337040000,w:1340668800,x:1343692800,y:1348531200,z:1352246400,IB:1361404800,JB:1364428800,KB:1369094400,LB:1374105600,MB:1376956800,NB:1384214400,OB:1389657600,PB:1392940800,QB:1397001600,RB:1400544000,SB:1405468800,TB:1409011200,UB:1412640000,VB:1416268800,WB:1421798400,XB:1425513600,YB:1429401600,ZB:1432080000,aB:1437523200,bB:1441152000,cB:1444780800,dB:1449014400,eB:1453248000,fB:1456963200,gB:1460592000,hB:1464134400,iB:1469059200,jB:1472601600,kB:1476230400,lB:1480550400,mB:1485302400,nB:1489017600,oB:1492560000,EC:1496707200,pB:1500940800,FC:1504569600,qB:1508198400,rB:1512518400,sB:1516752000,tB:1520294400,uB:1523923200,vB:1527552000,wB:1532390400,xB:1536019200,yB:1539648000,zB:1543968000,"0B":1548720000,"1B":1552348800,"2B":1555977600,"3B":1559606400,"4B":1564444800,"5B":1568073600,"6B":1571702400,Q:1575936000,I:1580860800,R:1586304000,S:1589846400,T:1594684800,U:1598313600,V:1601942400,W:1605571200,X:1611014400,Y:1614556800,Z:1618272000,a:1621987200,b:1626739200,c:1630368000,d:1632268800,e:1634601600,f:1637020800,g:1641340800,h:1643673600,i:1646092800,j:1648512000,k:1650931200,l:1653350400,m:1655769600,n:1659398400,o:1661817600,p:1664236800,q:1666656000,r:1669680000,s:1673308800,t:1675728000,u:1678147200,AB:1705968000,BB:1708387200,CB:1710806400,DB:1713225600,EB:1715644800,FB:1718064000,D:1721174400,HC:null,IC:null,JC:null}},E:{A:{J:0,GB:0,K:0,E:0,F:0.01514,G:0.003785,A:0,B:0,C:0,L:0.00757,M:0.034065,H:0.00757,gC:0,KC:0,hC:0,iC:0,jC:0,kC:0,LC:0,"7B":0.00757,"8B":0.01514,lC:0.064345,mC:0.09084,nC:0.034065,MC:0.011355,NC:0.026495,"9B":0.034065,oC:0.246025,AC:0.03028,OC:0.049205,PC:0.03785,QC:0.09841,RC:0.03028,SC:0.06056,pC:0.34065,BC:0.03785,TC:0.06813,UC:0.08327,VC:0.09841,WC:1.5405,XC:0.185465,YC:0,CC:0,qC:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","gC","KC","J","GB","hC","K","iC","E","jC","F","G","kC","A","LC","B","7B","C","8B","L","lC","M","mC","H","nC","MC","NC","9B","oC","AC","OC","PC","QC","RC","SC","pC","BC","TC","UC","VC","WC","XC","YC","CC","qC"],E:"Safari",F:{gC:1205798400,KC:1226534400,J:1244419200,GB:1275868800,hC:1311120000,K:1343174400,iC:1382400000,E:1382400000,jC:1410998400,F:1413417600,G:1443657600,kC:1458518400,A:1474329600,LC:1490572800,B:1505779200,"7B":1522281600,C:1537142400,"8B":1553472000,L:1568851200,lC:1585008000,M:1600214400,mC:1619395200,H:1632096000,nC:1635292800,MC:1639353600,NC:1647216000,"9B":1652745600,oC:1658275200,AC:1662940800,OC:1666569600,PC:1670889600,QC:1674432000,RC:1679875200,SC:1684368000,pC:1690156800,BC:1695686400,TC:1698192000,UC:1702252800,VC:1705881600,WC:1709596800,XC:1715558400,YC:null,CC:null,qC:null}},F:{A:{"0":0,G:0,B:0,C:0,H:0,N:0,O:0,P:0,HB:0,v:0,w:0,x:0,y:0,z:0,IB:0,JB:0,KB:0,LB:0,MB:0,NB:0,OB:0,PB:0,QB:0,RB:0,SB:0,TB:0,UB:0,VB:0,WB:0,XB:0,YB:0,ZB:0,aB:0,bB:0,cB:0.01514,dB:0,eB:0,fB:0,gB:0,hB:0,iB:0,jB:0,kB:0,lB:0,mB:0,nB:0,oB:0,pB:0,qB:0,rB:0,sB:0,tB:0,uB:0,vB:0,wB:0,xB:0,yB:0,zB:0,"0B":0,"1B":0,"2B":0,"3B":0,"4B":0,"5B":0,"6B":0,Q:0,I:0,R:0,GC:0,S:0,T:0,U:0,V:0,W:0,X:0,Y:0,Z:0,a:0,b:0,c:0,d:0,e:0.041635,f:0,g:0,h:0,i:0,j:0,k:0,l:0.071915,m:0,n:0,o:0,p:0.00757,q:0.185465,r:0.01514,s:0.738075,t:0.04542,u:0,rC:0,sC:0,tC:0,uC:0,"7B":0,ZC:0,vC:0,"8B":0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","G","rC","sC","tC","uC","B","7B","ZC","vC","C","8B","H","N","O","P","HB","v","w","x","y","z","0","IB","JB","KB","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","ZB","aB","bB","cB","dB","eB","fB","gB","hB","iB","jB","kB","lB","mB","nB","oB","pB","qB","rB","sB","tB","uB","vB","wB","xB","yB","zB","0B","1B","2B","3B","4B","5B","6B","Q","I","R","GC","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","","",""],E:"Opera",F:{"0":1413331200,G:1150761600,rC:1223424000,sC:1251763200,tC:1267488000,uC:1277942400,B:1292457600,"7B":1302566400,ZC:1309219200,vC:1323129600,C:1323129600,"8B":1352073600,H:1372723200,N:1377561600,O:1381104000,P:1386288000,HB:1390867200,v:1393891200,w:1399334400,x:1401753600,y:1405987200,z:1409616000,IB:1417132800,JB:1422316800,KB:1425945600,LB:1430179200,MB:1433808000,NB:1438646400,OB:1442448000,PB:1445904000,QB:1449100800,RB:1454371200,SB:1457308800,TB:1462320000,UB:1465344000,VB:1470096000,WB:1474329600,XB:1477267200,YB:1481587200,ZB:1486425600,aB:1490054400,bB:1494374400,cB:1498003200,dB:1502236800,eB:1506470400,fB:1510099200,gB:1515024000,hB:1517961600,iB:1521676800,jB:1525910400,kB:1530144000,lB:1534982400,mB:1537833600,nB:1543363200,oB:1548201600,pB:1554768000,qB:1561593600,rB:1566259200,sB:1570406400,tB:1573689600,uB:1578441600,vB:1583971200,wB:1587513600,xB:1592956800,yB:1595894400,zB:1600128000,"0B":1603238400,"1B":1613520000,"2B":1612224000,"3B":1616544000,"4B":1619568000,"5B":1623715200,"6B":1627948800,Q:1631577600,I:1633392000,R:1635984000,GC:1638403200,S:1642550400,T:1644969600,U:1647993600,V:1650412800,W:1652745600,X:1654646400,Y:1657152000,Z:1660780800,a:1663113600,b:1668816000,c:1668643200,d:1671062400,e:1675209600,f:1677024000,g:1679529600,h:1681948800,i:1684195200,j:1687219200,k:1690329600,l:1692748800,m:1696204800,n:1699920000,o:1699920000,p:1702944000,q:1707264000,r:1710115200,s:1711497600,t:1716336000,u:1719273600},D:{G:"o",B:"o",C:"o",rC:"o",sC:"o",tC:"o",uC:"o","7B":"o",ZC:"o",vC:"o","8B":"o"}},G:{A:{F:0,KC:0,wC:0,aC:0.00289868,xC:0.00289868,yC:0.00724669,zC:0.0115947,"0C":0.00289868,"1C":0.00724669,"2C":0.0333348,"3C":0.00579735,"4C":0.0521762,"5C":0.0768149,"6C":0.0144934,"7C":0.00869603,"8C":0.210154,"9C":0.00434801,AD:0.0217401,BD:0.0101454,CD:0.0463788,DD:0.100004,ED:0.123194,FD:0.0594229,MC:0.0652202,NC:0.0739162,"9B":0.0927576,GD:0.83192,AC:0.189863,OC:0.389872,PC:0.189863,QC:0.329,RC:0.0695682,SC:0.140586,HD:1.11744,BC:0.121744,TC:0.198559,UC:0.207255,VC:0.382625,WC:8.67429,XC:0.61307,YC:0,CC:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","KC","wC","aC","xC","yC","zC","F","0C","1C","2C","3C","4C","5C","6C","7C","8C","9C","AD","BD","CD","DD","ED","FD","MC","NC","9B","GD","AC","OC","PC","QC","RC","SC","HD","BC","TC","UC","VC","WC","XC","YC","CC",""],E:"Safari on iOS",F:{KC:1270252800,wC:1283904000,aC:1299628800,xC:1331078400,yC:1359331200,zC:1394409600,F:1410912000,"0C":1413763200,"1C":1442361600,"2C":1458518400,"3C":1473724800,"4C":1490572800,"5C":1505779200,"6C":1522281600,"7C":1537142400,"8C":1553472000,"9C":1568851200,AD:1572220800,BD:1580169600,CD:1585008000,DD:1600214400,ED:1619395200,FD:1632096000,MC:1639353600,NC:1647216000,"9B":1652659200,GD:1658275200,AC:1662940800,OC:1666569600,PC:1670889600,QC:1674432000,RC:1679875200,SC:1684368000,HD:1690156800,BC:1694995200,TC:1698192000,UC:1702252800,VC:1705881600,WC:1709596800,XC:1715558400,YC:null,CC:null}},H:{A:{ID:0.1},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ID","","",""],E:"Opera Mini",F:{ID:1426464000}},I:{A:{DC:0,J:0.000065879,D:0.656352,JD:0,KD:0,LD:0,MD:0.000131758,aC:0.000395274,ND:0,OD:0.00144934},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","JD","KD","LD","DC","J","MD","aC","ND","OD","D","","",""],E:"Android Browser",F:{JD:1256515200,KD:1274313600,LD:1291593600,DC:1298332800,J:1318896000,MD:1341792000,aC:1374624000,ND:1386547200,OD:1401667200,D:1721692800}},J:{A:{E:0,A:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","E","A","","",""],E:"Blackberry Browser",F:{E:1325376000,A:1359504000}},K:{A:{A:0,B:0,C:0,I:1.2238,"7B":0,ZC:0,"8B":0},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","7B","ZC","C","8B","I","","",""],E:"Opera Mobile",F:{A:1287100800,B:1300752000,"7B":1314835200,ZC:1318291200,C:1330300800,"8B":1349740800,I:1709769600},D:{I:"webkit"}},L:{A:{D:42.0636},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","D","","",""],E:"Chrome for Android",F:{D:1721692800}},M:{A:{D:0.31075},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","D","","",""],E:"Firefox for Android",F:{D:1718064000}},N:{A:{A:0,B:0},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","","",""],E:"IE Mobile",F:{A:1340150400,B:1353456000}},O:{A:{"9B":0.913605},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","9B","","",""],E:"UC Browser for Android",F:{"9B":1710115200},D:{"9B":"webkit"}},P:{A:{"0":1.98584,J:0.141071,v:0.0217032,w:0.0542579,x:0.0651095,y:0.119367,z:0.227883,PD:0.0108516,QD:0,RD:0.0325548,SD:0,TD:0,LC:0,UD:0.0108516,VD:0,WD:0.0108516,XD:0,YD:0,AC:0,BC:0.0217032,CC:0.0108516,ZD:0.0217032},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","J","PD","QD","RD","SD","TD","LC","UD","VD","WD","XD","YD","AC","BC","CC","ZD","v","w","x","y","z","0","","",""],E:"Samsung Internet",F:{"0":1715126400,J:1461024000,PD:1481846400,QD:1509408000,RD:1528329600,SD:1546128000,TD:1554163200,LC:1567900800,UD:1582588800,VD:1593475200,WD:1605657600,XD:1618531200,YD:1629072000,AC:1640736000,BC:1651708800,CC:1659657600,ZD:1667260800,v:1677369600,w:1684454400,x:1689292800,y:1697587200,z:1711497600}},Q:{A:{aD:0.292105},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aD","","",""],E:"QQ Browser",F:{aD:1710288000}},R:{A:{bD:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bD","","",""],E:"Baidu Browser",F:{bD:1710201600}},S:{A:{cD:0.08701,dD:0},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cD","dD","","",""],E:"KaiOS Browser",F:{cD:1527811200,dD:1631664000}}};

  const browsers$2 = browsers$3.browsers;
  const versions$2 = browserVersions.browserVersions;


  function unpackBrowserVersions(versionsData) {
    return Object.keys(versionsData).reduce((usage, version) => {
      usage[versions$2[version]] = versionsData[version];
      return usage
    }, {})
  }

  var agents_1 = Object.keys(agents$4).reduce((map, key) => {
    let versionsData = agents$4[key];
    map[browsers$2[key]] = Object.keys(versionsData).reduce((data, entry) => {
      if (entry === 'A') {
        data.usage_global = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === 'C') {
        data.versions = versionsData[entry].reduce((list, version) => {
          if (version === '') {
            list.push(null);
          } else {
            list.push(versions$2[version]);
          }
          return list
        }, []);
      } else if (entry === 'D') {
        data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === 'E') {
        data.browser = versionsData[entry];
      } else if (entry === 'F') {
        data.release_date = Object.keys(versionsData[entry]).reduce(
          (map2, key2) => {
            map2[versions$2[key2]] = versionsData[entry][key2];
            return map2
          },
          {}
        );
      } else {
        // entry is B
        data.prefix = versionsData[entry];
      }
      return data
    }, {});
    return map
  }, {});

  var agents$3 = {
  	agents: agents_1
  };

  var v4 = {
  	start: "2015-09-08",
  	lts: "2015-10-12",
  	maintenance: "2017-04-01",
  	end: "2018-04-30",
  	codename: "Argon"
  };
  var v5 = {
  	start: "2015-10-29",
  	maintenance: "2016-04-30",
  	end: "2016-06-30"
  };
  var v6 = {
  	start: "2016-04-26",
  	lts: "2016-10-18",
  	maintenance: "2018-04-30",
  	end: "2019-04-30",
  	codename: "Boron"
  };
  var v7 = {
  	start: "2016-10-25",
  	maintenance: "2017-04-30",
  	end: "2017-06-30"
  };
  var v8 = {
  	start: "2017-05-30",
  	lts: "2017-10-31",
  	maintenance: "2019-01-01",
  	end: "2019-12-31",
  	codename: "Carbon"
  };
  var v9 = {
  	start: "2017-10-01",
  	maintenance: "2018-04-01",
  	end: "2018-06-30"
  };
  var v10 = {
  	start: "2018-04-24",
  	lts: "2018-10-30",
  	maintenance: "2020-05-19",
  	end: "2021-04-30",
  	codename: "Dubnium"
  };
  var v11 = {
  	start: "2018-10-23",
  	maintenance: "2019-04-22",
  	end: "2019-06-01"
  };
  var v12 = {
  	start: "2019-04-23",
  	lts: "2019-10-21",
  	maintenance: "2020-11-30",
  	end: "2022-04-30",
  	codename: "Erbium"
  };
  var v13 = {
  	start: "2019-10-22",
  	maintenance: "2020-04-01",
  	end: "2020-06-01"
  };
  var v14 = {
  	start: "2020-04-21",
  	lts: "2020-10-27",
  	maintenance: "2021-10-19",
  	end: "2023-04-30",
  	codename: "Fermium"
  };
  var v15 = {
  	start: "2020-10-20",
  	maintenance: "2021-04-01",
  	end: "2021-06-01"
  };
  var v16 = {
  	start: "2021-04-20",
  	lts: "2021-10-26",
  	maintenance: "2022-10-18",
  	end: "2023-09-11",
  	codename: "Gallium"
  };
  var v17 = {
  	start: "2021-10-19",
  	maintenance: "2022-04-01",
  	end: "2022-06-01"
  };
  var v18 = {
  	start: "2022-04-19",
  	lts: "2022-10-25",
  	maintenance: "2023-10-18",
  	end: "2025-04-30",
  	codename: "Hydrogen"
  };
  var v19 = {
  	start: "2022-10-18",
  	maintenance: "2023-04-01",
  	end: "2023-06-01"
  };
  var v20 = {
  	start: "2023-04-18",
  	lts: "2023-10-24",
  	maintenance: "2024-10-22",
  	end: "2026-04-30",
  	codename: "Iron"
  };
  var v21 = {
  	start: "2023-10-17",
  	maintenance: "2024-04-01",
  	end: "2024-06-01"
  };
  var v22 = {
  	start: "2024-04-24",
  	lts: "2024-10-29",
  	maintenance: "2025-10-21",
  	end: "2027-04-30",
  	codename: ""
  };
  var v23 = {
  	start: "2024-10-15",
  	maintenance: "2025-04-01",
  	end: "2025-06-01"
  };
  var v24 = {
  	start: "2025-04-22",
  	lts: "2025-10-28",
  	maintenance: "2026-10-20",
  	end: "2028-04-30",
  	codename: ""
  };
  var jsEOL = {
  	"v0.8": {
  	start: "2012-06-25",
  	end: "2014-07-31"
  },
  	"v0.10": {
  	start: "2013-03-11",
  	end: "2016-10-31"
  },
  	"v0.12": {
  	start: "2015-02-06",
  	end: "2016-12-31"
  },
  	v4: v4,
  	v5: v5,
  	v6: v6,
  	v7: v7,
  	v8: v8,
  	v9: v9,
  	v10: v10,
  	v11: v11,
  	v12: v12,
  	v13: v13,
  	v14: v14,
  	v15: v15,
  	v16: v16,
  	v17: v17,
  	v18: v18,
  	v19: v19,
  	v20: v20,
  	v21: v21,
  	v22: v22,
  	v23: v23,
  	v24: v24
  };

  var versions$1 = {
  	"0.20": "39",
  	"0.21": "41",
  	"0.22": "41",
  	"0.23": "41",
  	"0.24": "41",
  	"0.25": "42",
  	"0.26": "42",
  	"0.27": "43",
  	"0.28": "43",
  	"0.29": "43",
  	"0.30": "44",
  	"0.31": "45",
  	"0.32": "45",
  	"0.33": "45",
  	"0.34": "45",
  	"0.35": "45",
  	"0.36": "47",
  	"0.37": "49",
  	"1.0": "49",
  	"1.1": "50",
  	"1.2": "51",
  	"1.3": "52",
  	"1.4": "53",
  	"1.5": "54",
  	"1.6": "56",
  	"1.7": "58",
  	"1.8": "59",
  	"2.0": "61",
  	"2.1": "61",
  	"3.0": "66",
  	"3.1": "66",
  	"4.0": "69",
  	"4.1": "69",
  	"4.2": "69",
  	"5.0": "73",
  	"6.0": "76",
  	"6.1": "76",
  	"7.0": "78",
  	"7.1": "78",
  	"7.2": "78",
  	"7.3": "78",
  	"8.0": "80",
  	"8.1": "80",
  	"8.2": "80",
  	"8.3": "80",
  	"8.4": "80",
  	"8.5": "80",
  	"9.0": "83",
  	"9.1": "83",
  	"9.2": "83",
  	"9.3": "83",
  	"9.4": "83",
  	"10.0": "85",
  	"10.1": "85",
  	"10.2": "85",
  	"10.3": "85",
  	"10.4": "85",
  	"11.0": "87",
  	"11.1": "87",
  	"11.2": "87",
  	"11.3": "87",
  	"11.4": "87",
  	"11.5": "87",
  	"12.0": "89",
  	"12.1": "89",
  	"12.2": "89",
  	"13.0": "91",
  	"13.1": "91",
  	"13.2": "91",
  	"13.3": "91",
  	"13.4": "91",
  	"13.5": "91",
  	"13.6": "91",
  	"14.0": "93",
  	"14.1": "93",
  	"14.2": "93",
  	"15.0": "94",
  	"15.1": "94",
  	"15.2": "94",
  	"15.3": "94",
  	"15.4": "94",
  	"15.5": "94",
  	"16.0": "96",
  	"16.1": "96",
  	"16.2": "96",
  	"17.0": "98",
  	"17.1": "98",
  	"17.2": "98",
  	"17.3": "98",
  	"17.4": "98",
  	"18.0": "100",
  	"18.1": "100",
  	"18.2": "100",
  	"18.3": "100",
  	"19.0": "102",
  	"19.1": "102",
  	"20.0": "104",
  	"20.1": "104",
  	"20.2": "104",
  	"20.3": "104",
  	"21.0": "106",
  	"21.1": "106",
  	"21.2": "106",
  	"21.3": "106",
  	"21.4": "106",
  	"22.0": "108",
  	"22.1": "108",
  	"22.2": "108",
  	"22.3": "108",
  	"23.0": "110",
  	"23.1": "110",
  	"23.2": "110",
  	"23.3": "110",
  	"24.0": "112",
  	"24.1": "112",
  	"24.2": "112",
  	"24.3": "112",
  	"24.4": "112",
  	"24.5": "112",
  	"24.6": "112",
  	"24.7": "112",
  	"24.8": "112",
  	"25.0": "114",
  	"25.1": "114",
  	"25.2": "114",
  	"25.3": "114",
  	"25.4": "114",
  	"25.5": "114",
  	"25.6": "114",
  	"25.7": "114",
  	"25.8": "114",
  	"25.9": "114",
  	"26.0": "116",
  	"26.1": "116",
  	"26.2": "116",
  	"26.3": "116",
  	"26.4": "116",
  	"26.5": "116",
  	"26.6": "116",
  	"27.0": "118",
  	"27.1": "118",
  	"27.2": "118",
  	"27.3": "118",
  	"28.0": "120",
  	"28.1": "120",
  	"28.2": "120",
  	"28.3": "120",
  	"29.0": "122",
  	"29.1": "122",
  	"29.2": "122",
  	"29.3": "122",
  	"29.4": "122",
  	"30.0": "124",
  	"30.1": "124",
  	"30.2": "124",
  	"30.3": "124",
  	"31.0": "126",
  	"31.1": "126",
  	"31.2": "126",
  	"31.3": "126",
  	"32.0": "128"
  };

  function BrowserslistError(message) {
    this.name = 'BrowserslistError';
    this.message = message;
    this.browserslist = true;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, BrowserslistError);
    }
  }

  BrowserslistError.prototype = Error.prototype;

  var error$1 = BrowserslistError;

  var AND_REGEXP = /^\s+and\s+(.*)/i;
  var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;

  function flatten(array) {
    if (!Array.isArray(array)) return [array]
    return array.reduce(function (a, b) {
      return a.concat(flatten(b))
    }, [])
  }

  function find(string, predicate) {
    for (var n = 1, max = string.length; n <= max; n++) {
      var parsed = string.substr(-n, n);
      if (predicate(parsed, n, max)) {
        return string.slice(0, -n)
      }
    }
    return ''
  }

  function matchQuery(all, query) {
    var node = { query: query };
    if (query.indexOf('not ') === 0) {
      node.not = true;
      query = query.slice(4);
    }

    for (var name in all) {
      var type = all[name];
      var match = query.match(type.regexp);
      if (match) {
        node.type = name;
        for (var i = 0; i < type.matches.length; i++) {
          node[type.matches[i]] = match[i + 1];
        }
        return node
      }
    }

    node.type = 'unknown';
    return node
  }

  function matchBlock(all, string, qs) {
    var node;
    return find(string, function (parsed, n, max) {
      if (AND_REGEXP.test(parsed)) {
        node = matchQuery(all, parsed.match(AND_REGEXP)[1]);
        node.compose = 'and';
        qs.unshift(node);
        return true
      } else if (OR_REGEXP.test(parsed)) {
        node = matchQuery(all, parsed.match(OR_REGEXP)[1]);
        node.compose = 'or';
        qs.unshift(node);
        return true
      } else if (n === max) {
        node = matchQuery(all, parsed.trim());
        node.compose = 'or';
        qs.unshift(node);
        return true
      }
      return false
    })
  }

  var parse$3 = function parse(all, queries) {
    if (!Array.isArray(queries)) queries = [queries];
    return flatten(
      queries.map(function (block) {
        var qs = [];
        do {
          block = matchBlock(all, block, qs);
        } while (block)
        return qs
      })
    )
  };

  function noop() {}

  var browser = {
    loadQueries: function loadQueries() {
      throw new error$1(
        'Sharable configs are not supported in client-side build of Browserslist'
      )
    },

    getStat: function getStat(opts) {
      return opts.stats
    },

    loadConfig: function loadConfig(opts) {
      if (opts.config) {
        throw new error$1(
          'Browserslist config are not supported in client-side build'
        )
      }
    },

    loadCountry: function loadCountry() {
      throw new error$1(
        'Country statistics are not supported ' +
          'in client-side build of Browserslist'
      )
    },

    loadFeature: function loadFeature() {
      throw new error$1(
        'Supports queries are not available in client-side build of Browserslist'
      )
    },

    currentNode: function currentNode(resolve, context) {
      return resolve(['maintained node versions'], context)[0]
    },

    parseConfig: noop,

    readConfig: noop,

    findConfig: noop,

    clearCaches: noop,

    oldDataWarning: noop,

    env: {}
  };

  var agents$2 = agents$3.agents;






   // Will load browser.js in webpack

  var YEAR = 365.259641 * 24 * 60 * 60 * 1000;
  var ANDROID_EVERGREEN_FIRST = '37';
  var OP_MOB_BLINK_FIRST = 14;

  // Helpers

  function isVersionsMatch(versionA, versionB) {
    return (versionA + '.').indexOf(versionB + '.') === 0
  }

  function isEolReleased(name) {
    var version = name.slice(1);
    return browserslist.nodeVersions.some(function (i) {
      return isVersionsMatch(i, version)
    })
  }

  function normalize(versions) {
    return versions.filter(function (version) {
      return typeof version === 'string'
    })
  }

  function normalizeElectron(version) {
    var versionToUse = version;
    if (version.split('.').length === 3) {
      versionToUse = version.split('.').slice(0, -1).join('.');
    }
    return versionToUse
  }

  function nameMapper(name) {
    return function mapName(version) {
      return name + ' ' + version
    }
  }

  function getMajor(version) {
    return parseInt(version.split('.')[0])
  }

  function getMajorVersions(released, number) {
    if (released.length === 0) return []
    var majorVersions = uniq$2(released.map(getMajor));
    var minimum = majorVersions[majorVersions.length - number];
    if (!minimum) {
      return released
    }
    var selected = [];
    for (var i = released.length - 1; i >= 0; i--) {
      if (minimum > getMajor(released[i])) break
      selected.unshift(released[i]);
    }
    return selected
  }

  function uniq$2(array) {
    var filtered = [];
    for (var i = 0; i < array.length; i++) {
      if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
    }
    return filtered
  }

  function fillUsage(result, name, data) {
    for (var i in data) {
      result[name + ' ' + i] = data[i];
    }
  }

  function generateFilter(sign, version) {
    version = parseFloat(version);
    if (sign === '>') {
      return function (v) {
        return parseFloat(v) > version
      }
    } else if (sign === '>=') {
      return function (v) {
        return parseFloat(v) >= version
      }
    } else if (sign === '<') {
      return function (v) {
        return parseFloat(v) < version
      }
    } else {
      return function (v) {
        return parseFloat(v) <= version
      }
    }
  }

  function generateSemverFilter(sign, version) {
    version = version.split('.').map(parseSimpleInt);
    version[1] = version[1] || 0;
    version[2] = version[2] || 0;
    if (sign === '>') {
      return function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(v, version) > 0
      }
    } else if (sign === '>=') {
      return function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(v, version) >= 0
      }
    } else if (sign === '<') {
      return function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(version, v) > 0
      }
    } else {
      return function (v) {
        v = v.split('.').map(parseSimpleInt);
        return compareSemver(version, v) >= 0
      }
    }
  }

  function parseSimpleInt(x) {
    return parseInt(x)
  }

  function compare(a, b) {
    if (a < b) return -1
    if (a > b) return +1
    return 0
  }

  function compareSemver(a, b) {
    return (
      compare(parseInt(a[0]), parseInt(b[0])) ||
      compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) ||
      compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'))
    )
  }

  // this follows the npm-like semver behavior
  function semverFilterLoose(operator, range) {
    range = range.split('.').map(parseSimpleInt);
    if (typeof range[1] === 'undefined') {
      range[1] = 'x';
    }
    // ignore any patch version because we only return minor versions
    // range[2] = 'x'
    switch (operator) {
      case '<=':
        return function (version) {
          version = version.split('.').map(parseSimpleInt);
          return compareSemverLoose(version, range) <= 0
        }
      case '>=':
      default:
        return function (version) {
          version = version.split('.').map(parseSimpleInt);
          return compareSemverLoose(version, range) >= 0
        }
    }
  }

  // this follows the npm-like semver behavior
  function compareSemverLoose(version, range) {
    if (version[0] !== range[0]) {
      return version[0] < range[0] ? -1 : +1
    }
    if (range[1] === 'x') {
      return 0
    }
    if (version[1] !== range[1]) {
      return version[1] < range[1] ? -1 : +1
    }
    return 0
  }

  function resolveVersion(data, version) {
    if (data.versions.indexOf(version) !== -1) {
      return version
    } else if (browserslist.versionAliases[data.name][version]) {
      return browserslist.versionAliases[data.name][version]
    } else {
      return false
    }
  }

  function normalizeVersion(data, version) {
    var resolved = resolveVersion(data, version);
    if (resolved) {
      return resolved
    } else if (data.versions.length === 1) {
      return data.versions[0]
    } else {
      return false
    }
  }

  function filterByYear(since, context) {
    since = since / 1000;
    return Object.keys(agents$2).reduce(function (selected, name) {
      var data = byName(name, context);
      if (!data) return selected
      var versions = Object.keys(data.releaseDate).filter(function (v) {
        var date = data.releaseDate[v];
        return date !== null && date >= since
      });
      return selected.concat(versions.map(nameMapper(data.name)))
    }, [])
  }

  function cloneData(data) {
    return {
      name: data.name,
      versions: data.versions,
      released: data.released,
      releaseDate: data.releaseDate
    }
  }

  function byName(name, context) {
    name = name.toLowerCase();
    name = browserslist.aliases[name] || name;
    if (context.mobileToDesktop && browserslist.desktopNames[name]) {
      var desktop = browserslist.data[browserslist.desktopNames[name]];
      if (name === 'android') {
        return normalizeAndroidData(cloneData(browserslist.data[name]), desktop)
      } else {
        var cloned = cloneData(desktop);
        cloned.name = name;
        return cloned
      }
    }
    return browserslist.data[name]
  }

  function normalizeAndroidVersions(androidVersions, chromeVersions) {
    var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST);
    return androidVersions
      .filter(function (version) {
        return /^(?:[2-4]\.|[34]$)/.test(version)
      })
      .concat(chromeVersions.slice(iFirstEvergreen))
  }

  function copyObject(obj) {
    var copy = {};
    for (var key in obj) {
      copy[key] = obj[key];
    }
    return copy
  }

  function normalizeAndroidData(android, chrome) {
    android.released = normalizeAndroidVersions(android.released, chrome.released);
    android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
    android.releaseDate = copyObject(android.releaseDate);
    android.released.forEach(function (v) {
      if (android.releaseDate[v] === undefined) {
        android.releaseDate[v] = chrome.releaseDate[v];
      }
    });
    return android
  }

  function checkName(name, context) {
    var data = byName(name, context);
    if (!data) throw new error$1('Unknown browser ' + name)
    return data
  }

  function unknownQuery(query) {
    return new error$1(
      'Unknown browser query `' +
        query +
        '`. ' +
        'Maybe you are using old Browserslist or made typo in query.'
    )
  }

  // Adjusts last X versions queries for some mobile browsers,
  // where caniuse data jumps from a legacy version to the latest
  function filterJumps(list, name, nVersions, context) {
    var jump = 1;
    switch (name) {
      case 'android':
        if (context.mobileToDesktop) return list
        var released = browserslist.data.chrome.released;
        jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST);
        break
      case 'op_mob':
        var latest = browserslist.data.op_mob.released.slice(-1)[0];
        jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1;
        break
      default:
        return list
    }
    if (nVersions <= jump) {
      return list.slice(-1)
    }
    return list.slice(jump - 1 - nVersions)
  }

  function isSupported(flags, withPartial) {
    return (
      typeof flags === 'string' &&
      (flags.indexOf('y') >= 0 || (withPartial && flags.indexOf('a') >= 0))
    )
  }

  function resolve(queries, context) {
    return parse$3(QUERIES, queries).reduce(function (result, node, index) {
      if (node.not && index === 0) {
        throw new error$1(
          'Write any browsers query (for instance, `defaults`) ' +
            'before `' +
            node.query +
            '`'
        )
      }
      var type = QUERIES[node.type];
      var array = type.select.call(browserslist, context, node).map(function (j) {
        var parts = j.split(' ');
        if (parts[1] === '0') {
          return parts[0] + ' ' + byName(parts[0], context).versions[0]
        } else {
          return j
        }
      });

      if (node.compose === 'and') {
        if (node.not) {
          return result.filter(function (j) {
            return array.indexOf(j) === -1
          })
        } else {
          return result.filter(function (j) {
            return array.indexOf(j) !== -1
          })
        }
      } else {
        if (node.not) {
          var filter = {};
          array.forEach(function (j) {
            filter[j] = true;
          });
          return result.filter(function (j) {
            return !filter[j]
          })
        }
        return result.concat(array)
      }
    }, [])
  }

  function prepareOpts(opts) {
    if (typeof opts === 'undefined') opts = {};

    if (typeof opts.path === 'undefined') {
      opts.path = path$2.resolve ? path$2.resolve('.') : '.';
    }

    return opts
  }

  function prepareQueries(queries, opts) {
    if (typeof queries === 'undefined' || queries === null) {
      var config = browserslist.loadConfig(opts);
      if (config) {
        queries = config;
      } else {
        queries = browserslist.defaults;
      }
    }

    return queries
  }

  function checkQueries(queries) {
    if (!(typeof queries === 'string' || Array.isArray(queries))) {
      throw new error$1(
        'Browser queries must be an array or string. Got ' + typeof queries + '.'
      )
    }
  }

  var cache$1 = {};

  function browserslist(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);

    var context = {
      ignoreUnknownVersions: opts.ignoreUnknownVersions,
      dangerousExtend: opts.dangerousExtend,
      mobileToDesktop: opts.mobileToDesktop,
      path: opts.path,
      env: opts.env
    };

    browser.oldDataWarning(browserslist.data);
    var stats = browser.getStat(opts, browserslist.data);
    if (stats) {
      context.customUsage = {};
      for (var browser$1 in stats) {
        fillUsage(context.customUsage, browser$1, stats[browser$1]);
      }
    }

    var cacheKey = JSON.stringify([queries, context]);
    if (cache$1[cacheKey]) return cache$1[cacheKey]

    var result = uniq$2(resolve(queries, context)).sort(function (name1, name2) {
      name1 = name1.split(' ');
      name2 = name2.split(' ');
      if (name1[0] === name2[0]) {
        // assumptions on caniuse data
        // 1) version ranges never overlaps
        // 2) if version is not a range, it never contains `-`
        var version1 = name1[1].split('-')[0];
        var version2 = name2[1].split('-')[0];
        return compareSemver(version2.split('.'), version1.split('.'))
      } else {
        return compare(name1[0], name2[0])
      }
    });
    if (!browser.env.BROWSERSLIST_DISABLE_CACHE) {
      cache$1[cacheKey] = result;
    }
    return result
  }

  browserslist.parse = function (queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    return parse$3(QUERIES, queries)
  };

  // Will be filled by Can I Use data below
  browserslist.cache = {};
  browserslist.data = {};
  browserslist.usage = {
    global: {},
    custom: null
  };

  // Default browsers query
  browserslist.defaults = ['> 0.5%', 'last 2 versions', 'Firefox ESR', 'not dead'];

  // Browser names aliases
  browserslist.aliases = {
    fx: 'firefox',
    ff: 'firefox',
    ios: 'ios_saf',
    explorer: 'ie',
    blackberry: 'bb',
    explorermobile: 'ie_mob',
    operamini: 'op_mini',
    operamobile: 'op_mob',
    chromeandroid: 'and_chr',
    firefoxandroid: 'and_ff',
    ucandroid: 'and_uc',
    qqandroid: 'and_qq'
  };

  // Can I Use only provides a few versions for some browsers (e.g. and_chr).
  // Fallback to a similar browser for unknown versions
  // Note op_mob is not included as its chromium versions are not in sync with Opera desktop
  browserslist.desktopNames = {
    and_chr: 'chrome',
    and_ff: 'firefox',
    ie_mob: 'ie',
    android: 'chrome' // has extra processing logic
  };

  // Aliases to work with joined versions like `ios_saf 7.0-7.1`
  browserslist.versionAliases = {};

  browserslist.clearCaches = browser.clearCaches;
  browserslist.parseConfig = browser.parseConfig;
  browserslist.readConfig = browser.readConfig;
  browserslist.findConfig = browser.findConfig;
  browserslist.loadConfig = browser.loadConfig;

  browserslist.coverage = function (browsers, stats) {
    var data;
    if (typeof stats === 'undefined') {
      data = browserslist.usage.global;
    } else if (stats === 'my stats') {
      var opts = {};
      opts.path = path$2.resolve ? path$2.resolve('.') : '.';
      var customStats = browser.getStat(opts);
      if (!customStats) {
        throw new error$1('Custom usage statistics was not provided')
      }
      data = {};
      for (var browser$1 in customStats) {
        fillUsage(data, browser$1, customStats[browser$1]);
      }
    } else if (typeof stats === 'string') {
      if (stats.length > 2) {
        stats = stats.toLowerCase();
      } else {
        stats = stats.toUpperCase();
      }
      browser.loadCountry(browserslist.usage, stats, browserslist.data);
      data = browserslist.usage[stats];
    } else {
      if ('dataByBrowser' in stats) {
        stats = stats.dataByBrowser;
      }
      data = {};
      for (var name in stats) {
        for (var version in stats[name]) {
          data[name + ' ' + version] = stats[name][version];
        }
      }
    }

    return browsers.reduce(function (all, i) {
      var usage = data[i];
      if (usage === undefined) {
        usage = data[i.replace(/ \S+$/, ' 0')];
      }
      return all + (usage || 0)
    }, 0)
  };

  function nodeQuery(context, node) {
    var matched = browserslist.nodeVersions.filter(function (i) {
      return isVersionsMatch(i, node.version)
    });
    if (matched.length === 0) {
      if (context.ignoreUnknownVersions) {
        return []
      } else {
        throw new error$1(
          'Unknown version ' + node.version + ' of Node.js'
        )
      }
    }
    return ['node ' + matched[matched.length - 1]]
  }

  function sinceQuery(context, node) {
    var year = parseInt(node.year);
    var month = parseInt(node.month || '01') - 1;
    var day = parseInt(node.day || '01');
    return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context)
  }

  function coverQuery(context, node) {
    var coverage = parseFloat(node.coverage);
    var usage = browserslist.usage.global;
    if (node.place) {
      if (node.place.match(/^my\s+stats$/i)) {
        if (!context.customUsage) {
          throw new error$1('Custom usage statistics was not provided')
        }
        usage = context.customUsage;
      } else {
        var place;
        if (node.place.length === 2) {
          place = node.place.toUpperCase();
        } else {
          place = node.place.toLowerCase();
        }
        browser.loadCountry(browserslist.usage, place, browserslist.data);
        usage = browserslist.usage[place];
      }
    }
    var versions = Object.keys(usage).sort(function (a, b) {
      return usage[b] - usage[a]
    });
    var coveraged = 0;
    var result = [];
    var version;
    for (var i = 0; i < versions.length; i++) {
      version = versions[i];
      if (usage[version] === 0) break
      coveraged += usage[version];
      result.push(version);
      if (coveraged >= coverage) break
    }
    return result
  }

  var QUERIES = {
    last_major_versions: {
      matches: ['versions'],
      regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
      select: function (context, node) {
        return Object.keys(agents$2).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected
          var list = getMajorVersions(data.released, node.versions);
          list = list.map(nameMapper(data.name));
          list = filterJumps(list, data.name, node.versions, context);
          return selected.concat(list)
        }, [])
      }
    },
    last_versions: {
      matches: ['versions'],
      regexp: /^last\s+(\d+)\s+versions?$/i,
      select: function (context, node) {
        return Object.keys(agents$2).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected
          var list = data.released.slice(-node.versions);
          list = list.map(nameMapper(data.name));
          list = filterJumps(list, data.name, node.versions, context);
          return selected.concat(list)
        }, [])
      }
    },
    last_electron_major_versions: {
      matches: ['versions'],
      regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
      select: function (context, node) {
        var validVersions = getMajorVersions(Object.keys(versions$1), node.versions);
        return validVersions.map(function (i) {
          return 'chrome ' + versions$1[i]
        })
      }
    },
    last_node_major_versions: {
      matches: ['versions'],
      regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
      select: function (context, node) {
        return getMajorVersions(browserslist.nodeVersions, node.versions).map(
          function (version) {
            return 'node ' + version
          }
        )
      }
    },
    last_browser_major_versions: {
      matches: ['versions', 'browser'],
      regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
      select: function (context, node) {
        var data = checkName(node.browser, context);
        var validVersions = getMajorVersions(data.released, node.versions);
        var list = validVersions.map(nameMapper(data.name));
        list = filterJumps(list, data.name, node.versions, context);
        return list
      }
    },
    last_electron_versions: {
      matches: ['versions'],
      regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
      select: function (context, node) {
        return Object.keys(versions$1)
          .slice(-node.versions)
          .map(function (i) {
            return 'chrome ' + versions$1[i]
          })
      }
    },
    last_node_versions: {
      matches: ['versions'],
      regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
      select: function (context, node) {
        return browserslist.nodeVersions
          .slice(-node.versions)
          .map(function (version) {
            return 'node ' + version
          })
      }
    },
    last_browser_versions: {
      matches: ['versions', 'browser'],
      regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
      select: function (context, node) {
        var data = checkName(node.browser, context);
        var list = data.released.slice(-node.versions).map(nameMapper(data.name));
        list = filterJumps(list, data.name, node.versions, context);
        return list
      }
    },
    unreleased_versions: {
      matches: [],
      regexp: /^unreleased\s+versions$/i,
      select: function (context) {
        return Object.keys(agents$2).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected
          var list = data.versions.filter(function (v) {
            return data.released.indexOf(v) === -1
          });
          list = list.map(nameMapper(data.name));
          return selected.concat(list)
        }, [])
      }
    },
    unreleased_electron_versions: {
      matches: [],
      regexp: /^unreleased\s+electron\s+versions?$/i,
      select: function () {
        return []
      }
    },
    unreleased_browser_versions: {
      matches: ['browser'],
      regexp: /^unreleased\s+(\w+)\s+versions?$/i,
      select: function (context, node) {
        var data = checkName(node.browser, context);
        return data.versions
          .filter(function (v) {
            return data.released.indexOf(v) === -1
          })
          .map(nameMapper(data.name))
      }
    },
    last_years: {
      matches: ['years'],
      regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
      select: function (context, node) {
        return filterByYear(Date.now() - YEAR * node.years, context)
      }
    },
    since_y: {
      matches: ['year'],
      regexp: /^since (\d+)$/i,
      select: sinceQuery
    },
    since_y_m: {
      matches: ['year', 'month'],
      regexp: /^since (\d+)-(\d+)$/i,
      select: sinceQuery
    },
    since_y_m_d: {
      matches: ['year', 'month', 'day'],
      regexp: /^since (\d+)-(\d+)-(\d+)$/i,
      select: sinceQuery
    },
    popularity: {
      matches: ['sign', 'popularity'],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
      select: function (context, node) {
        var popularity = parseFloat(node.popularity);
        var usage = browserslist.usage.global;
        return Object.keys(usage).reduce(function (result, version) {
          if (node.sign === '>') {
            if (usage[version] > popularity) {
              result.push(version);
            }
          } else if (node.sign === '<') {
            if (usage[version] < popularity) {
              result.push(version);
            }
          } else if (node.sign === '<=') {
            if (usage[version] <= popularity) {
              result.push(version);
            }
          } else if (usage[version] >= popularity) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    popularity_in_my_stats: {
      matches: ['sign', 'popularity'],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
      select: function (context, node) {
        var popularity = parseFloat(node.popularity);
        if (!context.customUsage) {
          throw new error$1('Custom usage statistics was not provided')
        }
        var usage = context.customUsage;
        return Object.keys(usage).reduce(function (result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result
          }

          if (node.sign === '>') {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node.sign === '<') {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node.sign === '<=') {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    popularity_in_config_stats: {
      matches: ['sign', 'popularity', 'config'],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
      select: function (context, node) {
        var popularity = parseFloat(node.popularity);
        var stats = browser.loadStat(context, node.config, browserslist.data);
        if (stats) {
          context.customUsage = {};
          for (var browser$1 in stats) {
            fillUsage(context.customUsage, browser$1, stats[browser$1]);
          }
        }
        if (!context.customUsage) {
          throw new error$1('Custom usage statistics was not provided')
        }
        var usage = context.customUsage;
        return Object.keys(usage).reduce(function (result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result
          }

          if (node.sign === '>') {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node.sign === '<') {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node.sign === '<=') {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    popularity_in_place: {
      matches: ['sign', 'popularity', 'place'],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
      select: function (context, node) {
        var popularity = parseFloat(node.popularity);
        var place = node.place;
        if (place.length === 2) {
          place = place.toUpperCase();
        } else {
          place = place.toLowerCase();
        }
        browser.loadCountry(browserslist.usage, place, browserslist.data);
        var usage = browserslist.usage[place];
        return Object.keys(usage).reduce(function (result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result
          }

          if (node.sign === '>') {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node.sign === '<') {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node.sign === '<=') {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result
        }, [])
      }
    },
    cover: {
      matches: ['coverage'],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
      select: coverQuery
    },
    cover_in: {
      matches: ['coverage', 'place'],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
      select: coverQuery
    },
    supports: {
      matches: ['supportType', 'feature'],
      regexp: /^(?:(fully|partially)\s+)?supports\s+([\w-]+)$/,
      select: function (context, node) {
        browser.loadFeature(browserslist.cache, node.feature);
        var withPartial = node.supportType !== 'fully';
        var features = browserslist.cache[node.feature];
        var result = [];
        for (var name in features) {
          var data = byName(name, context);
          // Only check desktop when latest released mobile has support
          var iMax = data.released.length - 1;
          while (iMax >= 0) {
            if (data.released[iMax] in features[name]) break
            iMax--;
          }
          var checkDesktop =
            context.mobileToDesktop &&
            name in browserslist.desktopNames &&
            isSupported(features[name][data.released[iMax]], withPartial);
          data.versions.forEach(function (version) {
            var flags = features[name][version];
            if (flags === undefined && checkDesktop) {
              flags = features[browserslist.desktopNames[name]][version];
            }
            if (isSupported(flags, withPartial)) {
              result.push(name + ' ' + version);
            }
          });
        }
        return result
      }
    },
    electron_range: {
      matches: ['from', 'to'],
      regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, node) {
        var fromToUse = normalizeElectron(node.from);
        var toToUse = normalizeElectron(node.to);
        var from = parseFloat(node.from);
        var to = parseFloat(node.to);
        if (!versions$1[fromToUse]) {
          throw new error$1('Unknown version ' + from + ' of electron')
        }
        if (!versions$1[toToUse]) {
          throw new error$1('Unknown version ' + to + ' of electron')
        }
        return Object.keys(versions$1)
          .filter(function (i) {
            var parsed = parseFloat(i);
            return parsed >= from && parsed <= to
          })
          .map(function (i) {
            return 'chrome ' + versions$1[i]
          })
      }
    },
    node_range: {
      matches: ['from', 'to'],
      regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, node) {
        return browserslist.nodeVersions
          .filter(semverFilterLoose('>=', node.from))
          .filter(semverFilterLoose('<=', node.to))
          .map(function (v) {
            return 'node ' + v
          })
      }
    },
    browser_range: {
      matches: ['browser', 'from', 'to'],
      regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, node) {
        var data = checkName(node.browser, context);
        var from = parseFloat(normalizeVersion(data, node.from) || node.from);
        var to = parseFloat(normalizeVersion(data, node.to) || node.to);
        function filter(v) {
          var parsed = parseFloat(v);
          return parsed >= from && parsed <= to
        }
        return data.released.filter(filter).map(nameMapper(data.name))
      }
    },
    electron_ray: {
      matches: ['sign', 'version'],
      regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function (context, node) {
        var versionToUse = normalizeElectron(node.version);
        return Object.keys(versions$1)
          .filter(generateFilter(node.sign, versionToUse))
          .map(function (i) {
            return 'chrome ' + versions$1[i]
          })
      }
    },
    node_ray: {
      matches: ['sign', 'version'],
      regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function (context, node) {
        return browserslist.nodeVersions
          .filter(generateSemverFilter(node.sign, node.version))
          .map(function (v) {
            return 'node ' + v
          })
      }
    },
    browser_ray: {
      matches: ['browser', 'sign', 'version'],
      regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
      select: function (context, node) {
        var version = node.version;
        var data = checkName(node.browser, context);
        var alias = browserslist.versionAliases[data.name][version];
        if (alias) version = alias;
        return data.released
          .filter(generateFilter(node.sign, version))
          .map(function (v) {
            return data.name + ' ' + v
          })
      }
    },
    firefox_esr: {
      matches: [],
      regexp: /^(firefox|ff|fx)\s+esr$/i,
      select: function () {
        return ['firefox 115', 'firefox 128']
      }
    },
    opera_mini_all: {
      matches: [],
      regexp: /(operamini|op_mini)\s+all/i,
      select: function () {
        return ['op_mini all']
      }
    },
    electron_version: {
      matches: ['version'],
      regexp: /^electron\s+([\d.]+)$/i,
      select: function (context, node) {
        var versionToUse = normalizeElectron(node.version);
        var chrome = versions$1[versionToUse];
        if (!chrome) {
          throw new error$1(
            'Unknown version ' + node.version + ' of electron'
          )
        }
        return ['chrome ' + chrome]
      }
    },
    node_major_version: {
      matches: ['version'],
      regexp: /^node\s+(\d+)$/i,
      select: nodeQuery
    },
    node_minor_version: {
      matches: ['version'],
      regexp: /^node\s+(\d+\.\d+)$/i,
      select: nodeQuery
    },
    node_patch_version: {
      matches: ['version'],
      regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
      select: nodeQuery
    },
    current_node: {
      matches: [],
      regexp: /^current\s+node$/i,
      select: function (context) {
        return [browser.currentNode(resolve, context)]
      }
    },
    maintained_node: {
      matches: [],
      regexp: /^maintained\s+node\s+versions$/i,
      select: function (context) {
        var now = Date.now();
        var queries = Object.keys(jsEOL)
          .filter(function (key) {
            return (
              now < Date.parse(jsEOL[key].end) &&
              now > Date.parse(jsEOL[key].start) &&
              isEolReleased(key)
            )
          })
          .map(function (key) {
            return 'node ' + key.slice(1)
          });
        return resolve(queries, context)
      }
    },
    phantomjs_1_9: {
      matches: [],
      regexp: /^phantomjs\s+1.9$/i,
      select: function () {
        return ['safari 5']
      }
    },
    phantomjs_2_1: {
      matches: [],
      regexp: /^phantomjs\s+2.1$/i,
      select: function () {
        return ['safari 6']
      }
    },
    browser_version: {
      matches: ['browser', 'version'],
      regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
      select: function (context, node) {
        var version = node.version;
        if (/^tp$/i.test(version)) version = 'TP';
        var data = checkName(node.browser, context);
        var alias = normalizeVersion(data, version);
        if (alias) {
          version = alias;
        } else {
          if (version.indexOf('.') === -1) {
            alias = version + '.0';
          } else {
            alias = version.replace(/\.0$/, '');
          }
          alias = normalizeVersion(data, alias);
          if (alias) {
            version = alias;
          } else if (context.ignoreUnknownVersions) {
            return []
          } else {
            throw new error$1(
              'Unknown version ' + version + ' of ' + node.browser
            )
          }
        }
        return [data.name + ' ' + version]
      }
    },
    browserslist_config: {
      matches: [],
      regexp: /^browserslist config$/i,
      select: function (context) {
        return browserslist(undefined, context)
      }
    },
    extends: {
      matches: ['config'],
      regexp: /^extends (.+)$/i,
      select: function (context, node) {
        return resolve(browser.loadQueries(context, node.config), context)
      }
    },
    defaults: {
      matches: [],
      regexp: /^defaults$/i,
      select: function (context) {
        return resolve(browserslist.defaults, context)
      }
    },
    dead: {
      matches: [],
      regexp: /^dead$/i,
      select: function (context) {
        var dead = [
          'Baidu >= 0',
          'ie <= 11',
          'ie_mob <= 11',
          'bb <= 10',
          'op_mob <= 12.1',
          'samsung 4'
        ];
        return resolve(dead, context)
      }
    },
    unknown: {
      matches: [],
      regexp: /^(\w+)$/i,
      select: function (context, node) {
        if (byName(node.query, context)) {
          throw new error$1(
            'Specify versions in Browserslist query for browser ' + node.query
          )
        } else {
          throw unknownQuery(node.query)
        }
      }
    }
  }

  // Get and convert Can I Use data

  ;(function () {
    for (var name in agents$2) {
      var browser = agents$2[name];
      browserslist.data[name] = {
        name: name,
        versions: normalize(agents$2[name].versions),
        released: normalize(agents$2[name].versions.slice(0, -3)),
        releaseDate: agents$2[name].release_date
      };
      fillUsage(browserslist.usage.global, name, browser.usage_global);

      browserslist.versionAliases[name] = {};
      for (var i = 0; i < browser.versions.length; i++) {
        var full = browser.versions[i];
        if (!full) continue

        if (full.indexOf('-') !== -1) {
          var interval = full.split('-');
          for (var j = 0; j < interval.length; j++) {
            browserslist.versionAliases[name][interval[j]] = full;
          }
        }
      }
    }

    browserslist.nodeVersions = jsReleases.map(function (release) {
      return release.version
    });
  })();

  var browserslist_1 = browserslist;

  var x=String;
  var create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};
  var picocolors_browser=create();
  var createColors = create;
  picocolors_browser.createColors = createColors;

  let { list: list$5 } = postcss_1;

  /**
   * Throw special error, to tell beniary,
   * that this error is from Autoprefixer.
   */
  var error = function (text) {
    let err = new Error(text);
    err.autoprefixer = true;
    throw err
  };

  /**
   * Return array, that doesn’t contain duplicates.
   */
  var uniq$1 = function (array) {
    return [...new Set(array)]
  };

  /**
   * Return "-webkit-" on "-webkit- old"
   */
  var removeNote = function (string) {
    if (!string.includes(' ')) {
      return string
    }

    return string.split(' ')[0]
  };

  /**
   * Escape RegExp symbols
   */
  var escapeRegexp$1 = function (string) {
    return string.replace(/[$()*+-.?[\\\]^{|}]/g, '\\$&')
  };

  /**
   * Return regexp to check, that CSS string contain word
   */
  var regexp$1 = function (word, escape = true) {
    if (escape) {
      word = this.escapeRegexp(word);
    }
    return new RegExp(`(^|[\\s,(])(${word}($|[\\s(,]))`, 'gi')
  };

  /**
   * Change comma list
   */
  var editList = function (value, callback) {
    let origin = list$5.comma(value);
    let changed = callback(origin, []);

    if (origin === changed) {
      return value
    }

    let join = value.match(/,\s*/);
    join = join ? join[0] : ', ';
    return changed.join(join)
  };

  /**
   * Split the selector into parts.
   * It returns 3 level deep array because selectors can be comma
   * separated (1), space separated (2), and combined (3)
   * @param {String} selector selector string
   * @return {Array<Array<Array>>} 3 level deep array of split selector
   * @see utils.test.js for examples
   */
  var splitSelector$1 = function (selector) {
    return list$5.comma(selector).map(i => {
      return list$5.space(i).map(k => {
        return k.split(/(?=\.|#)/g)
      })
    })
  };

  /**
   * Return true if a given value only contains numbers.
   * @param {*} value
   * @returns {boolean}
   */
  var isPureNumber$1 = function (value) {
    if (typeof value === 'number') {
      return true
    }
    if (typeof value === 'string') {
      return /^[0-9]+$/.test(value)
    }
    return false
  };

  var utils = {
  	error: error,
  	uniq: uniq$1,
  	removeNote: removeNote,
  	escapeRegexp: escapeRegexp$1,
  	regexp: regexp$1,
  	editList: editList,
  	splitSelector: splitSelector$1,
  	isPureNumber: isPureNumber$1
  };

  let { agents: agents$1 } = agents$3;



  class Browsers {
    constructor(data, requirements, options, browserslistOpts) {
      this.data = data;
      this.options = options || {};
      this.browserslistOpts = browserslistOpts || {};
      this.selected = this.parse(requirements);
    }

    /**
     * Return all prefixes for default browser data
     */
    static prefixes() {
      if (this.prefixesCache) {
        return this.prefixesCache
      }

      this.prefixesCache = [];
      for (let name in agents$1) {
        this.prefixesCache.push(`-${agents$1[name].prefix}-`);
      }

      this.prefixesCache = utils
        .uniq(this.prefixesCache)
        .sort((a, b) => b.length - a.length);

      return this.prefixesCache
    }

    /**
     * Check is value contain any possible prefix
     */
    static withPrefix(value) {
      if (!this.prefixesRegexp) {
        this.prefixesRegexp = new RegExp(this.prefixes().join('|'));
      }

      return this.prefixesRegexp.test(value)
    }

    /**
     * Is browser is selected by requirements
     */
    isSelected(browser) {
      return this.selected.includes(browser)
    }

    /**
     * Return browsers selected by requirements
     */
    parse(requirements) {
      let opts = {};
      for (let i in this.browserslistOpts) {
        opts[i] = this.browserslistOpts[i];
      }
      opts.path = this.options.from;
      return browserslist_1(requirements, opts)
    }

    /**
     * Return prefix for selected browser
     */
    prefix(browser) {
      let [name, version] = browser.split(' ');
      let data = this.data[name];

      let prefix = data.prefix_exceptions && data.prefix_exceptions[version];
      if (!prefix) {
        prefix = data.prefix;
      }
      return `-${prefix}-`
    }
  }

  var browsers$1 = Browsers;

  var vendor = {
    prefix(prop) {
      let match = prop.match(/^(-\w+-)/);
      if (match) {
        return match[0]
      }

      return ''
    },

    unprefixed(prop) {
      return prop.replace(/^-\w+-/, '')
    }
  };

  /**
   * Recursively clone objects
   */
  function clone(obj, parent) {
    let cloned = new obj.constructor();

    for (let i of Object.keys(obj || {})) {
      let value = obj[i];
      if (i === 'parent' && typeof value === 'object') {
        if (parent) {
          cloned[i] = parent;
        }
      } else if (i === 'source' || i === null) {
        cloned[i] = value;
      } else if (Array.isArray(value)) {
        cloned[i] = value.map(x => clone(x, cloned));
      } else if (
        i !== '_autoprefixerPrefix' &&
        i !== '_autoprefixerValues' &&
        i !== 'proxyCache'
      ) {
        if (typeof value === 'object' && value !== null) {
          value = clone(value, cloned);
        }
        cloned[i] = value;
      }
    }

    return cloned
  }

  class Prefixer {
    constructor(name, prefixes, all) {
      this.prefixes = prefixes;
      this.name = name;
      this.all = all;
    }

    /**
     * Clone node and clean autprefixer custom caches
     */
    static clone(node, overrides) {
      let cloned = clone(node);
      for (let name in overrides) {
        cloned[name] = overrides[name];
      }
      return cloned
    }

    /**
     * Add hack to selected names
     */
    static hack(klass) {
      if (!this.hacks) {
        this.hacks = {};
      }
      return klass.names.map(name => {
        this.hacks[name] = klass;
        return this.hacks[name]
      })
    }

    /**
     * Load hacks for some names
     */
    static load(name, prefixes, all) {
      let Klass = this.hacks && this.hacks[name];
      if (Klass) {
        return new Klass(name, prefixes, all)
      } else {
        return new this(name, prefixes, all)
      }
    }

    /**
     * Shortcut for Prefixer.clone
     */
    clone(node, overrides) {
      return Prefixer.clone(node, overrides)
    }

    /**
     * Find prefix in node parents
     */
    parentPrefix(node) {
      let prefix;

      if (typeof node._autoprefixerPrefix !== 'undefined') {
        prefix = node._autoprefixerPrefix;
      } else if (node.type === 'decl' && node.prop[0] === '-') {
        prefix = vendor.prefix(node.prop);
      } else if (node.type === 'root') {
        prefix = false;
      } else if (
        node.type === 'rule' &&
        node.selector.includes(':-') &&
        /:(-\w+-)/.test(node.selector)
      ) {
        prefix = node.selector.match(/:(-\w+-)/)[1];
      } else if (node.type === 'atrule' && node.name[0] === '-') {
        prefix = vendor.prefix(node.name);
      } else {
        prefix = this.parentPrefix(node.parent);
      }

      if (!browsers$1.prefixes().includes(prefix)) {
        prefix = false;
      }

      node._autoprefixerPrefix = prefix;

      return node._autoprefixerPrefix
    }

    /**
     * Clone node with prefixes
     */
    process(node, result) {
      if (!this.check(node)) {
        return undefined
      }

      let parent = this.parentPrefix(node);

      let prefixes = this.prefixes.filter(
        prefix => !parent || parent === utils.removeNote(prefix)
      );

      let added = [];
      for (let prefix of prefixes) {
        if (this.add(node, prefix, added.concat([prefix]), result)) {
          added.push(prefix);
        }
      }

      return added
    }
  }

  var prefixer = Prefixer;

  class Declaration extends prefixer {
    /**
     * Clone and add prefixes for declaration
     */
    add(decl, prefix, prefixes, result) {
      let prefixed = this.prefixed(decl.prop, prefix);
      if (
        this.isAlready(decl, prefixed) ||
        this.otherPrefixes(decl.value, prefix)
      ) {
        return undefined
      }
      return this.insert(decl, prefix, prefixes, result)
    }

    /**
     * Calculate indentation to create visual cascade
     */
    calcBefore(prefixes, decl, prefix = '') {
      let max = this.maxPrefixed(prefixes, decl);
      let diff = max - utils.removeNote(prefix).length;

      let before = decl.raw('before');
      if (diff > 0) {
        before += Array(diff).fill(' ').join('');
      }

      return before
    }

    /**
     * Always true, because we already get prefixer by property name
     */
    check(/* decl */) {
      return true
    }

    /**
     * Clone and insert new declaration
     */
    insert(decl, prefix, prefixes) {
      let cloned = this.set(this.clone(decl), prefix);
      if (!cloned) return undefined

      let already = decl.parent.some(
        i => i.prop === cloned.prop && i.value === cloned.value
      );
      if (already) {
        return undefined
      }

      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, cloned)
    }

    /**
     * Did this declaration has this prefix above
     */
    isAlready(decl, prefixed) {
      let already = this.all.group(decl).up(i => i.prop === prefixed);
      if (!already) {
        already = this.all.group(decl).down(i => i.prop === prefixed);
      }
      return already
    }

    /**
     * Return maximum length of possible prefixed property
     */
    maxPrefixed(prefixes, decl) {
      if (decl._autoprefixerMax) {
        return decl._autoprefixerMax
      }

      let max = 0;
      for (let prefix of prefixes) {
        prefix = utils.removeNote(prefix);
        if (prefix.length > max) {
          max = prefix.length;
        }
      }
      decl._autoprefixerMax = max;

      return decl._autoprefixerMax
    }

    /**
     * Should we use visual cascade for prefixes
     */
    needCascade(decl) {
      if (!decl._autoprefixerCascade) {
        decl._autoprefixerCascade =
          this.all.options.cascade !== false && decl.raw('before').includes('\n');
      }
      return decl._autoprefixerCascade
    }

    /**
     * Return unprefixed version of property
     */
    normalize(prop) {
      return prop
    }

    /**
     * Return list of prefixed properties to clean old prefixes
     */
    old(prop, prefix) {
      return [this.prefixed(prop, prefix)]
    }

    /**
     * Check `value`, that it contain other prefixes, rather than `prefix`
     */
    otherPrefixes(value, prefix) {
      for (let other of browsers$1.prefixes()) {
        if (other === prefix) {
          continue
        }
        if (value.includes(other)) {
          return value.replace(/var\([^)]+\)/, '').includes(other)
        }
      }
      return false
    }

    /**
     * Return prefixed version of property
     */
    prefixed(prop, prefix) {
      return prefix + prop
    }

    /**
     * Add spaces for visual cascade
     */
    process(decl, result) {
      if (!this.needCascade(decl)) {
        super.process(decl, result);
        return
      }

      let prefixes = super.process(decl, result);

      if (!prefixes || !prefixes.length) {
        return
      }

      this.restoreBefore(decl);
      decl.raws.before = this.calcBefore(prefixes, decl);
    }

    /**
     * Remove visual cascade
     */
    restoreBefore(decl) {
      let lines = decl.raw('before').split('\n');
      let min = lines[lines.length - 1];

      this.all.group(decl).up(prefixed => {
        let array = prefixed.raw('before').split('\n');
        let last = array[array.length - 1];
        if (last.length < min.length) {
          min = last;
        }
      });

      lines[lines.length - 1] = min;
      decl.raws.before = lines.join('\n');
    }

    /**
     * Set prefix to declaration
     */
    set(decl, prefix) {
      decl.prop = this.prefixed(decl.prop, prefix);
      return decl
    }
  }

  var declaration = Declaration;

  /**
   * @license Fraction.js v4.3.7 31/08/2023
   * https://www.xarg.org/2014/03/rational-numbers-in-javascript/
   *
   * Copyright (c) 2023, Robert Eisele (robert@raw.org)
   * Dual licensed under the MIT or GPL Version 2 licenses.
   **/

  var fraction = createCommonjsModule(function (module, exports) {
  /**
   *
   * This class offers the possibility to calculate fractions.
   * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
   *
   * Array/Object form
   * [ 0 => <numerator>, 1 => <denominator> ]
   * [ n => <numerator>, d => <denominator> ]
   *
   * Integer form
   * - Single integer value
   *
   * Double form
   * - Single double value
   *
   * String form
   * 123.456 - a simple double
   * 123/456 - a string fraction
   * 123.'456' - a double with repeating decimal places
   * 123.(456) - synonym
   * 123.45'6' - a double with repeating last place
   * 123.45(6) - synonym
   *
   * Example:
   *
   * var f = new Fraction("9.4'31'");
   * f.mul([-4, 3]).div(4.9);
   *
   */

  (function(root) {

    // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
    // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
    // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
    var MAX_CYCLE_LEN = 2000;

    // Parsed data to avoid calling "new" all the time
    var P = {
      "s": 1,
      "n": 0,
      "d": 1
    };

    function assign(n, s) {

      if (isNaN(n = parseInt(n, 10))) {
        throw InvalidParameter();
      }
      return n * s;
    }

    // Creates a new Fraction internally without the need of the bulky constructor
    function newFraction(n, d) {

      if (d === 0) {
        throw DivisionByZero();
      }

      var f = Object.create(Fraction.prototype);
      f["s"] = n < 0 ? -1 : 1;

      n = n < 0 ? -n : n;

      var a = gcd(n, d);

      f["n"] = n / a;
      f["d"] = d / a;
      return f;
    }

    function factorize(num) {

      var factors = {};

      var n = num;
      var i = 2;
      var s = 4;

      while (s <= n) {

        while (n % i === 0) {
          n/= i;
          factors[i] = (factors[i] || 0) + 1;
        }
        s+= 1 + 2 * i++;
      }

      if (n !== num) {
        if (n > 1)
          factors[n] = (factors[n] || 0) + 1;
      } else {
        factors[num] = (factors[num] || 0) + 1;
      }
      return factors;
    }

    var parse = function(p1, p2) {

      var n = 0, d = 1, s = 1;
      var v = 0, w = 0, x = 0, y = 1, z = 1;

      var A = 0, B = 1;
      var C = 1, D = 1;

      var N = 10000000;
      var M;

      if (p1 === undefined || p1 === null) ; else if (p2 !== undefined) {
        n = p1;
        d = p2;
        s = n * d;

        if (n % 1 !== 0 || d % 1 !== 0) {
          throw NonIntegerParameter();
        }

      } else
        switch (typeof p1) {

          case "object":
            {
              if ("d" in p1 && "n" in p1) {
                n = p1["n"];
                d = p1["d"];
                if ("s" in p1)
                  n*= p1["s"];
              } else if (0 in p1) {
                n = p1[0];
                if (1 in p1)
                  d = p1[1];
              } else {
                throw InvalidParameter();
              }
              s = n * d;
              break;
            }
          case "number":
            {
              if (p1 < 0) {
                s = p1;
                p1 = -p1;
              }

              if (p1 % 1 === 0) {
                n = p1;
              } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

                if (p1 >= 1) {
                  z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
                  p1/= z;
                }

                // Using Farey Sequences
                // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

                while (B <= N && D <= N) {
                  M = (A + C) / (B + D);

                  if (p1 === M) {
                    if (B + D <= N) {
                      n = A + C;
                      d = B + D;
                    } else if (D > B) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                    break;

                  } else {

                    if (p1 > M) {
                      A+= C;
                      B+= D;
                    } else {
                      C+= A;
                      D+= B;
                    }

                    if (B > N) {
                      n = C;
                      d = D;
                    } else {
                      n = A;
                      d = B;
                    }
                  }
                }
                n*= z;
              } else if (isNaN(p1) || isNaN(p2)) {
                d = n = NaN;
              }
              break;
            }
          case "string":
            {
              B = p1.match(/\d+|./g);

              if (B === null)
                throw InvalidParameter();

              if (B[A] === '-') {// Check for minus sign at the beginning
                s = -1;
                A++;
              } else if (B[A] === '+') {// Check for plus sign at the beginning
                A++;
              }

              if (B.length === A + 1) { // Check if it's just a simple number "1234"
                w = assign(B[A++], s);
              } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

                if (B[A] !== '.') { // Handle 0.5 and .5
                  v = assign(B[A++], s);
                }
                A++;

                // Check for decimal places
                if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
                  w = assign(B[A], s);
                  y = Math.pow(10, B[A].length);
                  A++;
                }

                // Check for repeating places
                if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
                  x = assign(B[A + 1], s);
                  z = Math.pow(10, B[A + 1].length) - 1;
                  A+= 3;
                }

              } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
                w = assign(B[A], s);
                y = assign(B[A + 2], 1);
                A+= 3;
              } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
                v = assign(B[A], s);
                w = assign(B[A + 2], s);
                y = assign(B[A + 4], 1);
                A+= 5;
              }

              if (B.length <= A) { // Check for more tokens on the stack
                d = y * z;
                s = /* void */
                n = x + d * v + z * w;
                break;
              }

              /* Fall through on error */
            }
          default:
            throw InvalidParameter();
        }

      if (d === 0) {
        throw DivisionByZero();
      }

      P["s"] = s < 0 ? -1 : 1;
      P["n"] = Math.abs(n);
      P["d"] = Math.abs(d);
    };

    function modpow(b, e, m) {

      var r = 1;
      for (; e > 0; b = (b * b) % m, e >>= 1) {

        if (e & 1) {
          r = (r * b) % m;
        }
      }
      return r;
    }


    function cycleLen(n, d) {

      for (; d % 2 === 0;
        d/= 2) {
      }

      for (; d % 5 === 0;
        d/= 5) {
      }

      if (d === 1) // Catch non-cyclic numbers
        return 0;

      // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
      // 10^(d-1) % d == 1
      // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
      // as we want to translate the numbers to strings.

      var rem = 10 % d;
      var t = 1;

      for (; rem !== 1; t++) {
        rem = rem * 10 % d;

        if (t > MAX_CYCLE_LEN)
          return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
      }
      return t;
    }


    function cycleStart(n, d, len) {

      var rem1 = 1;
      var rem2 = modpow(10, len, d);

      for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
        // Solve 10^s == 10^(s+t) (mod d)

        if (rem1 === rem2)
          return t;

        rem1 = rem1 * 10 % d;
        rem2 = rem2 * 10 % d;
      }
      return 0;
    }

    function gcd(a, b) {

      if (!a)
        return b;
      if (!b)
        return a;

      while (1) {
        a%= b;
        if (!a)
          return b;
        b%= a;
        if (!b)
          return a;
      }
    }
    /**
     * Module constructor
     *
     * @constructor
     * @param {number|Fraction=} a
     * @param {number=} b
     */
    function Fraction(a, b) {

      parse(a, b);

      if (this instanceof Fraction) {
        a = gcd(P["d"], P["n"]); // Abuse variable a
        this["s"] = P["s"];
        this["n"] = P["n"] / a;
        this["d"] = P["d"] / a;
      } else {
        return newFraction(P['s'] * P['n'], P['d']);
      }
    }

    var DivisionByZero = function() { return new Error("Division by Zero"); };
    var InvalidParameter = function() { return new Error("Invalid argument"); };
    var NonIntegerParameter = function() { return new Error("Parameters must be integer"); };

    Fraction.prototype = {

      "s": 1,
      "n": 0,
      "d": 1,

      /**
       * Calculates the absolute value
       *
       * Ex: new Fraction(-4).abs() => 4
       **/
      "abs": function() {

        return newFraction(this["n"], this["d"]);
      },

      /**
       * Inverts the sign of the current fraction
       *
       * Ex: new Fraction(-4).neg() => 4
       **/
      "neg": function() {

        return newFraction(-this["s"] * this["n"], this["d"]);
      },

      /**
       * Adds two rational numbers
       *
       * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
       **/
      "add": function(a, b) {

        parse(a, b);
        return newFraction(
          this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
          this["d"] * P["d"]
        );
      },

      /**
       * Subtracts two rational numbers
       *
       * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
       **/
      "sub": function(a, b) {

        parse(a, b);
        return newFraction(
          this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
          this["d"] * P["d"]
        );
      },

      /**
       * Multiplies two rational numbers
       *
       * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
       **/
      "mul": function(a, b) {

        parse(a, b);
        return newFraction(
          this["s"] * P["s"] * this["n"] * P["n"],
          this["d"] * P["d"]
        );
      },

      /**
       * Divides two rational numbers
       *
       * Ex: new Fraction("-17.(345)").inverse().div(3)
       **/
      "div": function(a, b) {

        parse(a, b);
        return newFraction(
          this["s"] * P["s"] * this["n"] * P["d"],
          this["d"] * P["n"]
        );
      },

      /**
       * Clones the actual object
       *
       * Ex: new Fraction("-17.(345)").clone()
       **/
      "clone": function() {
        return newFraction(this['s'] * this['n'], this['d']);
      },

      /**
       * Calculates the modulo of two rational numbers - a more precise fmod
       *
       * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
       **/
      "mod": function(a, b) {

        if (isNaN(this['n']) || isNaN(this['d'])) {
          return new Fraction(NaN);
        }

        if (a === undefined) {
          return newFraction(this["s"] * this["n"] % this["d"], 1);
        }

        parse(a, b);
        if (0 === P["n"] && 0 === this["d"]) {
          throw DivisionByZero();
        }

        /*
         * First silly attempt, kinda slow
         *
         return that["sub"]({
         "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
         "d": num["d"],
         "s": this["s"]
         });*/

        /*
         * New attempt: a1 / b1 = a2 / b2 * q + r
         * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
         * => (b2 * a1 % a2 * b1) / (b1 * b2)
         */
        return newFraction(
          this["s"] * (P["d"] * this["n"]) % (P["n"] * this["d"]),
          P["d"] * this["d"]
        );
      },

      /**
       * Calculates the fractional gcd of two rational numbers
       *
       * Ex: new Fraction(5,8).gcd(3,7) => 1/56
       */
      "gcd": function(a, b) {

        parse(a, b);

        // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

        return newFraction(gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]), P["d"] * this["d"]);
      },

      /**
       * Calculates the fractional lcm of two rational numbers
       *
       * Ex: new Fraction(5,8).lcm(3,7) => 15
       */
      "lcm": function(a, b) {

        parse(a, b);

        // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

        if (P["n"] === 0 && this["n"] === 0) {
          return newFraction(0, 1);
        }
        return newFraction(P["n"] * this["n"], gcd(P["n"], this["n"]) * gcd(P["d"], this["d"]));
      },

      /**
       * Calculates the ceil of a rational number
       *
       * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
       **/
      "ceil": function(places) {

        places = Math.pow(10, places || 0);

        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return newFraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
      },

      /**
       * Calculates the floor of a rational number
       *
       * Ex: new Fraction('4.(3)').floor() => (4 / 1)
       **/
      "floor": function(places) {

        places = Math.pow(10, places || 0);

        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return newFraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
      },

      /**
       * Rounds a rational numbers
       *
       * Ex: new Fraction('4.(3)').round() => (4 / 1)
       **/
      "round": function(places) {

        places = Math.pow(10, places || 0);

        if (isNaN(this["n"]) || isNaN(this["d"])) {
          return new Fraction(NaN);
        }
        return newFraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
      },

      /**
       * Rounds a rational number to a multiple of another rational number
       *
       * Ex: new Fraction('0.9').roundTo("1/8") => 7 / 8
       **/
      "roundTo": function(a, b) {

        /*
        k * x/y ≤ a/b < (k+1) * x/y
        ⇔ k ≤ a/b / (x/y) < (k+1)
        ⇔ k = floor(a/b * y/x)
        */

        parse(a, b);

        return newFraction(this['s'] * Math.round(this['n'] * P['d'] / (this['d'] * P['n'])) * P['n'], P['d']);
      },

      /**
       * Gets the inverse of the fraction, means numerator and denominator are exchanged
       *
       * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
       **/
      "inverse": function() {

        return newFraction(this["s"] * this["d"], this["n"]);
      },

      /**
       * Calculates the fraction to some rational exponent, if possible
       *
       * Ex: new Fraction(-1,2).pow(-3) => -8
       */
      "pow": function(a, b) {

        parse(a, b);

        // Trivial case when exp is an integer

        if (P['d'] === 1) {

          if (P['s'] < 0) {
            return newFraction(Math.pow(this['s'] * this["d"], P['n']), Math.pow(this["n"], P['n']));
          } else {
            return newFraction(Math.pow(this['s'] * this["n"], P['n']), Math.pow(this["d"], P['n']));
          }
        }

        // Negative roots become complex
        //     (-a/b)^(c/d) = x
        // <=> (-1)^(c/d) * (a/b)^(c/d) = x
        // <=> (cos(pi) + i*sin(pi))^(c/d) * (a/b)^(c/d) = x         # rotate 1 by 180°
        // <=> (cos(c*pi/d) + i*sin(c*pi/d)) * (a/b)^(c/d) = x       # DeMoivre's formula in Q ( https://proofwiki.org/wiki/De_Moivre%27s_Formula/Rational_Index )
        // From which follows that only for c=0 the root is non-complex. c/d is a reduced fraction, so that sin(c/dpi)=0 occurs for d=1, which is handled by our trivial case.
        if (this['s'] < 0) return null;

        // Now prime factor n and d
        var N = factorize(this['n']);
        var D = factorize(this['d']);

        // Exponentiate and take root for n and d individually
        var n = 1;
        var d = 1;
        for (var k in N) {
          if (k === '1') continue;
          if (k === '0') {
            n = 0;
            break;
          }
          N[k]*= P['n'];

          if (N[k] % P['d'] === 0) {
            N[k]/= P['d'];
          } else return null;
          n*= Math.pow(k, N[k]);
        }

        for (var k in D) {
          if (k === '1') continue;
          D[k]*= P['n'];

          if (D[k] % P['d'] === 0) {
            D[k]/= P['d'];
          } else return null;
          d*= Math.pow(k, D[k]);
        }

        if (P['s'] < 0) {
          return newFraction(d, n);
        }
        return newFraction(n, d);
      },

      /**
       * Check if two rational numbers are the same
       *
       * Ex: new Fraction(19.6).equals([98, 5]);
       **/
      "equals": function(a, b) {

        parse(a, b);
        return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
      },

      /**
       * Check if two rational numbers are the same
       *
       * Ex: new Fraction(19.6).equals([98, 5]);
       **/
      "compare": function(a, b) {

        parse(a, b);
        var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
        return (0 < t) - (t < 0);
      },

      "simplify": function(eps) {

        if (isNaN(this['n']) || isNaN(this['d'])) {
          return this;
        }

        eps = eps || 0.001;

        var thisABS = this['abs']();
        var cont = thisABS['toContinued']();

        for (var i = 1; i < cont.length; i++) {

          var s = newFraction(cont[i - 1], 1);
          for (var k = i - 2; k >= 0; k--) {
            s = s['inverse']()['add'](cont[k]);
          }

          if (Math.abs(s['sub'](thisABS).valueOf()) < eps) {
            return s['mul'](this['s']);
          }
        }
        return this;
      },

      /**
       * Check if two rational numbers are divisible
       *
       * Ex: new Fraction(19.6).divisible(1.5);
       */
      "divisible": function(a, b) {

        parse(a, b);
        return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
      },

      /**
       * Returns a decimal representation of the fraction
       *
       * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
       **/
      'valueOf': function() {

        return this["s"] * this["n"] / this["d"];
      },

      /**
       * Returns a string-fraction representation of a Fraction object
       *
       * Ex: new Fraction("1.'3'").toFraction(true) => "4 1/3"
       **/
      'toFraction': function(excludeWhole) {

        var whole, str = "";
        var n = this["n"];
        var d = this["d"];
        if (this["s"] < 0) {
          str+= '-';
        }

        if (d === 1) {
          str+= n;
        } else {

          if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
            str+= whole;
            str+= " ";
            n%= d;
          }

          str+= n;
          str+= '/';
          str+= d;
        }
        return str;
      },

      /**
       * Returns a latex representation of a Fraction object
       *
       * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
       **/
      'toLatex': function(excludeWhole) {

        var whole, str = "";
        var n = this["n"];
        var d = this["d"];
        if (this["s"] < 0) {
          str+= '-';
        }

        if (d === 1) {
          str+= n;
        } else {

          if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
            str+= whole;
            n%= d;
          }

          str+= "\\frac{";
          str+= n;
          str+= '}{';
          str+= d;
          str+= '}';
        }
        return str;
      },

      /**
       * Returns an array of continued fraction elements
       *
       * Ex: new Fraction("7/8").toContinued() => [0,1,7]
       */
      'toContinued': function() {

        var t;
        var a = this['n'];
        var b = this['d'];
        var res = [];

        if (isNaN(a) || isNaN(b)) {
          return res;
        }

        do {
          res.push(Math.floor(a / b));
          t = a % b;
          a = b;
          b = t;
        } while (a !== 1);

        return res;
      },

      /**
       * Creates a string representation of a fraction with all digits
       *
       * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
       **/
      'toString': function(dec) {

        var N = this["n"];
        var D = this["d"];

        if (isNaN(N) || isNaN(D)) {
          return "NaN";
        }

        dec = dec || 15; // 15 = decimal places when no repetation

        var cycLen = cycleLen(N, D); // Cycle length
        var cycOff = cycleStart(N, D, cycLen); // Cycle start

        var str = this['s'] < 0 ? "-" : "";

        str+= N / D | 0;

        N%= D;
        N*= 10;

        if (N)
          str+= ".";

        if (cycLen) {

          for (var i = cycOff; i--;) {
            str+= N / D | 0;
            N%= D;
            N*= 10;
          }
          str+= "(";
          for (var i = cycLen; i--;) {
            str+= N / D | 0;
            N%= D;
            N*= 10;
          }
          str+= ")";
        } else {
          for (var i = dec; N && i--;) {
            str+= N / D | 0;
            N%= D;
            N*= 10;
          }
        }
        return str;
      }
    };

    {
      Object.defineProperty(exports, "__esModule", { 'value': true });
      exports['default'] = Fraction;
      module['exports'] = Fraction;
    }

  })();
  });

  const REGEXP = /(min|max)-resolution\s*:\s*\d*\.?\d+(dppx|dpcm|dpi|x)/gi;
  const SPLIT = /(min|max)-resolution(\s*:\s*)(\d*\.?\d+)(dppx|dpcm|dpi|x)/i;

  class Resolution extends prefixer {
    /**
     * Remove prefixed queries
     */
    clean(rule) {
      if (!this.bad) {
        this.bad = [];
        for (let prefix of this.prefixes) {
          this.bad.push(this.prefixName(prefix, 'min'));
          this.bad.push(this.prefixName(prefix, 'max'));
        }
      }

      rule.params = utils.editList(rule.params, queries => {
        return queries.filter(query => this.bad.every(i => !query.includes(i)))
      });
    }

    /**
     * Return prefixed query name
     */
    prefixName(prefix, name) {
      if (prefix === '-moz-') {
        return name + '--moz-device-pixel-ratio'
      } else {
        return prefix + name + '-device-pixel-ratio'
      }
    }

    /**
     * Return prefixed query
     */
    prefixQuery(prefix, name, colon, value, units) {
      value = new fraction(value);

      // 1dpcm = 2.54dpi
      // 1dppx = 96dpi
      if (units === 'dpi') {
        value = value.div(96);
      } else if (units === 'dpcm') {
        value = value.mul(2.54).div(96);
      }
      value = value.simplify();

      if (prefix === '-o-') {
        value = value.n + '/' + value.d;
      }
      return this.prefixName(prefix, name) + colon + value
    }

    /**
     * Add prefixed queries
     */
    process(rule) {
      let parent = this.parentPrefix(rule);
      let prefixes = parent ? [parent] : this.prefixes;

      rule.params = utils.editList(rule.params, (origin, prefixed) => {
        for (let query of origin) {
          if (
            !query.includes('min-resolution') &&
            !query.includes('max-resolution')
          ) {
            prefixed.push(query);
            continue
          }

          for (let prefix of prefixes) {
            let processed = query.replace(REGEXP, str => {
              let parts = str.match(SPLIT);
              return this.prefixQuery(
                prefix,
                parts[1],
                parts[2],
                parts[3],
                parts[4]
              )
            });
            prefixed.push(processed);
          }
          prefixed.push(query);
        }

        return utils.uniq(prefixed)
      });
    }
  }

  var resolution = Resolution;

  var openParentheses = "(".charCodeAt(0);
  var closeParentheses = ")".charCodeAt(0);
  var singleQuote = "'".charCodeAt(0);
  var doubleQuote = '"'.charCodeAt(0);
  var backslash = "\\".charCodeAt(0);
  var slash = "/".charCodeAt(0);
  var comma = ",".charCodeAt(0);
  var colon = ":".charCodeAt(0);
  var star = "*".charCodeAt(0);
  var uLower = "u".charCodeAt(0);
  var uUpper = "U".charCodeAt(0);
  var plus$1 = "+".charCodeAt(0);
  var isUnicodeRange = /^[a-f0-9?-]+$/i;

  var parse$2 = function(input) {
    var tokens = [];
    var value = input;

    var next,
      quote,
      prev,
      token,
      escape,
      escapePos,
      whitespacePos,
      parenthesesOpenPos;
    var pos = 0;
    var code = value.charCodeAt(pos);
    var max = value.length;
    var stack = [{ nodes: tokens }];
    var balanced = 0;
    var parent;

    var name = "";
    var before = "";
    var after = "";

    while (pos < max) {
      // Whitespaces
      if (code <= 32) {
        next = pos;
        do {
          next += 1;
          code = value.charCodeAt(next);
        } while (code <= 32);
        token = value.slice(pos, next);

        prev = tokens[tokens.length - 1];
        if (code === closeParentheses && balanced) {
          after = token;
        } else if (prev && prev.type === "div") {
          prev.after = token;
          prev.sourceEndIndex += token.length;
        } else if (
          code === comma ||
          code === colon ||
          (code === slash &&
            value.charCodeAt(next + 1) !== star &&
            (!parent ||
              (parent && parent.type === "function" && parent.value !== "calc")))
        ) {
          before = token;
        } else {
          tokens.push({
            type: "space",
            sourceIndex: pos,
            sourceEndIndex: next,
            value: token
          });
        }

        pos = next;

        // Quotes
      } else if (code === singleQuote || code === doubleQuote) {
        next = pos;
        quote = code === singleQuote ? "'" : '"';
        token = {
          type: "string",
          sourceIndex: pos,
          quote: quote
        };
        do {
          escape = false;
          next = value.indexOf(quote, next + 1);
          if (~next) {
            escapePos = next;
            while (value.charCodeAt(escapePos - 1) === backslash) {
              escapePos -= 1;
              escape = !escape;
            }
          } else {
            value += quote;
            next = value.length - 1;
            token.unclosed = true;
          }
        } while (escape);
        token.value = value.slice(pos + 1, next);
        token.sourceEndIndex = token.unclosed ? next : next + 1;
        tokens.push(token);
        pos = next + 1;
        code = value.charCodeAt(pos);

        // Comments
      } else if (code === slash && value.charCodeAt(pos + 1) === star) {
        next = value.indexOf("*/", pos);

        token = {
          type: "comment",
          sourceIndex: pos,
          sourceEndIndex: next + 2
        };

        if (next === -1) {
          token.unclosed = true;
          next = value.length;
          token.sourceEndIndex = next;
        }

        token.value = value.slice(pos + 2, next);
        tokens.push(token);

        pos = next + 2;
        code = value.charCodeAt(pos);

        // Operation within calc
      } else if (
        (code === slash || code === star) &&
        parent &&
        parent.type === "function" &&
        parent.value === "calc"
      ) {
        token = value[pos];
        tokens.push({
          type: "word",
          sourceIndex: pos - before.length,
          sourceEndIndex: pos + token.length,
          value: token
        });
        pos += 1;
        code = value.charCodeAt(pos);

        // Dividers
      } else if (code === slash || code === comma || code === colon) {
        token = value[pos];

        tokens.push({
          type: "div",
          sourceIndex: pos - before.length,
          sourceEndIndex: pos + token.length,
          value: token,
          before: before,
          after: ""
        });
        before = "";

        pos += 1;
        code = value.charCodeAt(pos);

        // Open parentheses
      } else if (openParentheses === code) {
        // Whitespaces after open parentheses
        next = pos;
        do {
          next += 1;
          code = value.charCodeAt(next);
        } while (code <= 32);
        parenthesesOpenPos = pos;
        token = {
          type: "function",
          sourceIndex: pos - name.length,
          value: name,
          before: value.slice(parenthesesOpenPos + 1, next)
        };
        pos = next;

        if (name === "url" && code !== singleQuote && code !== doubleQuote) {
          next -= 1;
          do {
            escape = false;
            next = value.indexOf(")", next + 1);
            if (~next) {
              escapePos = next;
              while (value.charCodeAt(escapePos - 1) === backslash) {
                escapePos -= 1;
                escape = !escape;
              }
            } else {
              value += ")";
              next = value.length - 1;
              token.unclosed = true;
            }
          } while (escape);
          // Whitespaces before closed
          whitespacePos = next;
          do {
            whitespacePos -= 1;
            code = value.charCodeAt(whitespacePos);
          } while (code <= 32);
          if (parenthesesOpenPos < whitespacePos) {
            if (pos !== whitespacePos + 1) {
              token.nodes = [
                {
                  type: "word",
                  sourceIndex: pos,
                  sourceEndIndex: whitespacePos + 1,
                  value: value.slice(pos, whitespacePos + 1)
                }
              ];
            } else {
              token.nodes = [];
            }
            if (token.unclosed && whitespacePos + 1 !== next) {
              token.after = "";
              token.nodes.push({
                type: "space",
                sourceIndex: whitespacePos + 1,
                sourceEndIndex: next,
                value: value.slice(whitespacePos + 1, next)
              });
            } else {
              token.after = value.slice(whitespacePos + 1, next);
              token.sourceEndIndex = next;
            }
          } else {
            token.after = "";
            token.nodes = [];
          }
          pos = next + 1;
          token.sourceEndIndex = token.unclosed ? next : pos;
          code = value.charCodeAt(pos);
          tokens.push(token);
        } else {
          balanced += 1;
          token.after = "";
          token.sourceEndIndex = pos + 1;
          tokens.push(token);
          stack.push(token);
          tokens = token.nodes = [];
          parent = token;
        }
        name = "";

        // Close parentheses
      } else if (closeParentheses === code && balanced) {
        pos += 1;
        code = value.charCodeAt(pos);

        parent.after = after;
        parent.sourceEndIndex += after.length;
        after = "";
        balanced -= 1;
        stack[stack.length - 1].sourceEndIndex = pos;
        stack.pop();
        parent = stack[balanced];
        tokens = parent.nodes;

        // Words
      } else {
        next = pos;
        do {
          if (code === backslash) {
            next += 1;
          }
          next += 1;
          code = value.charCodeAt(next);
        } while (
          next < max &&
          !(
            code <= 32 ||
            code === singleQuote ||
            code === doubleQuote ||
            code === comma ||
            code === colon ||
            code === slash ||
            code === openParentheses ||
            (code === star &&
              parent &&
              parent.type === "function" &&
              parent.value === "calc") ||
            (code === slash &&
              parent.type === "function" &&
              parent.value === "calc") ||
            (code === closeParentheses && balanced)
          )
        );
        token = value.slice(pos, next);

        if (openParentheses === code) {
          name = token;
        } else if (
          (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&
          plus$1 === token.charCodeAt(1) &&
          isUnicodeRange.test(token.slice(2))
        ) {
          tokens.push({
            type: "unicode-range",
            sourceIndex: pos,
            sourceEndIndex: next,
            value: token
          });
        } else {
          tokens.push({
            type: "word",
            sourceIndex: pos,
            sourceEndIndex: next,
            value: token
          });
        }

        pos = next;
      }
    }

    for (pos = stack.length - 1; pos; pos -= 1) {
      stack[pos].unclosed = true;
      stack[pos].sourceEndIndex = value.length;
    }

    return stack[0].nodes;
  };

  var walk = function walk(nodes, cb, bubble) {
    var i, max, node, result;

    for (i = 0, max = nodes.length; i < max; i += 1) {
      node = nodes[i];
      if (!bubble) {
        result = cb(node, i, nodes);
      }

      if (
        result !== false &&
        node.type === "function" &&
        Array.isArray(node.nodes)
      ) {
        walk(node.nodes, cb, bubble);
      }

      if (bubble) {
        cb(node, i, nodes);
      }
    }
  };

  function stringifyNode(node, custom) {
    var type = node.type;
    var value = node.value;
    var buf;
    var customResult;

    if (custom && (customResult = custom(node)) !== undefined) {
      return customResult;
    } else if (type === "word" || type === "space") {
      return value;
    } else if (type === "string") {
      buf = node.quote || "";
      return buf + value + (node.unclosed ? "" : buf);
    } else if (type === "comment") {
      return "/*" + value + (node.unclosed ? "" : "*/");
    } else if (type === "div") {
      return (node.before || "") + value + (node.after || "");
    } else if (Array.isArray(node.nodes)) {
      buf = stringify(node.nodes, custom);
      if (type !== "function") {
        return buf;
      }
      return (
        value +
        "(" +
        (node.before || "") +
        buf +
        (node.after || "") +
        (node.unclosed ? "" : ")")
      );
    }
    return value;
  }

  function stringify(nodes, custom) {
    var result, i;

    if (Array.isArray(nodes)) {
      result = "";
      for (i = nodes.length - 1; ~i; i -= 1) {
        result = stringifyNode(nodes[i], custom) + result;
      }
      return result;
    }
    return stringifyNode(nodes, custom);
  }

  var stringify_1 = stringify;

  var minus = "-".charCodeAt(0);
  var plus = "+".charCodeAt(0);
  var dot = ".".charCodeAt(0);
  var exp = "e".charCodeAt(0);
  var EXP = "E".charCodeAt(0);

  // Check if three code points would start a number
  // https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
  function likeNumber(value) {
    var code = value.charCodeAt(0);
    var nextCode;

    if (code === plus || code === minus) {
      nextCode = value.charCodeAt(1);

      if (nextCode >= 48 && nextCode <= 57) {
        return true;
      }

      var nextNextCode = value.charCodeAt(2);

      if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {
        return true;
      }

      return false;
    }

    if (code === dot) {
      nextCode = value.charCodeAt(1);

      if (nextCode >= 48 && nextCode <= 57) {
        return true;
      }

      return false;
    }

    if (code >= 48 && code <= 57) {
      return true;
    }

    return false;
  }

  // Consume a number
  // https://www.w3.org/TR/css-syntax-3/#consume-number
  var unit = function(value) {
    var pos = 0;
    var length = value.length;
    var code;
    var nextCode;
    var nextNextCode;

    if (length === 0 || !likeNumber(value)) {
      return false;
    }

    code = value.charCodeAt(pos);

    if (code === plus || code === minus) {
      pos++;
    }

    while (pos < length) {
      code = value.charCodeAt(pos);

      if (code < 48 || code > 57) {
        break;
      }

      pos += 1;
    }

    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);

    if (code === dot && nextCode >= 48 && nextCode <= 57) {
      pos += 2;

      while (pos < length) {
        code = value.charCodeAt(pos);

        if (code < 48 || code > 57) {
          break;
        }

        pos += 1;
      }
    }

    code = value.charCodeAt(pos);
    nextCode = value.charCodeAt(pos + 1);
    nextNextCode = value.charCodeAt(pos + 2);

    if (
      (code === exp || code === EXP) &&
      ((nextCode >= 48 && nextCode <= 57) ||
        ((nextCode === plus || nextCode === minus) &&
          nextNextCode >= 48 &&
          nextNextCode <= 57))
    ) {
      pos += nextCode === plus || nextCode === minus ? 3 : 2;

      while (pos < length) {
        code = value.charCodeAt(pos);

        if (code < 48 || code > 57) {
          break;
        }

        pos += 1;
      }
    }

    return {
      number: value.slice(0, pos),
      unit: value.slice(pos)
    };
  };

  function ValueParser(value) {
    if (this instanceof ValueParser) {
      this.nodes = parse$2(value);
      return this;
    }
    return new ValueParser(value);
  }

  ValueParser.prototype.toString = function() {
    return Array.isArray(this.nodes) ? stringify_1(this.nodes) : "";
  };

  ValueParser.prototype.walk = function(cb, bubble) {
    walk(this.nodes, cb, bubble);
    return this;
  };

  ValueParser.unit = unit;

  ValueParser.walk = walk;

  ValueParser.stringify = stringify_1;

  var lib = ValueParser;

  let { list: list$4 } = postcss_1;





  class Transition {
    constructor(prefixes) {
      this.props = ['transition', 'transition-property'];
      this.prefixes = prefixes;
    }

    /**
     * Process transition and add prefixes for all necessary properties
     */
    add(decl, result) {
      let prefix, prop;
      let add = this.prefixes.add[decl.prop];
      let vendorPrefixes = this.ruleVendorPrefixes(decl);
      let declPrefixes = vendorPrefixes || (add && add.prefixes) || [];

      let params = this.parse(decl.value);
      let names = params.map(i => this.findProp(i));
      let added = [];

      if (names.some(i => i[0] === '-')) {
        return
      }

      for (let param of params) {
        prop = this.findProp(param);
        if (prop[0] === '-') continue

        let prefixer = this.prefixes.add[prop];
        if (!prefixer || !prefixer.prefixes) continue

        for (prefix of prefixer.prefixes) {
          if (vendorPrefixes && !vendorPrefixes.some(p => prefix.includes(p))) {
            continue
          }

          let prefixed = this.prefixes.prefixed(prop, prefix);
          if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {
            if (!this.disabled(prop, prefix)) {
              added.push(this.clone(prop, prefixed, param));
            }
          }
        }
      }

      params = params.concat(added);
      let value = this.stringify(params);

      let webkitClean = this.stringify(
        this.cleanFromUnprefixed(params, '-webkit-')
      );
      if (declPrefixes.includes('-webkit-')) {
        this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean);
      }
      this.cloneBefore(decl, decl.prop, webkitClean);
      if (declPrefixes.includes('-o-')) {
        let operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'));
        this.cloneBefore(decl, `-o-${decl.prop}`, operaClean);
      }

      for (prefix of declPrefixes) {
        if (prefix !== '-webkit-' && prefix !== '-o-') {
          let prefixValue = this.stringify(
            this.cleanOtherPrefixes(params, prefix)
          );
          this.cloneBefore(decl, prefix + decl.prop, prefixValue);
        }
      }

      if (value !== decl.value && !this.already(decl, decl.prop, value)) {
        this.checkForWarning(result, decl);
        decl.cloneBefore();
        decl.value = value;
      }
    }

    /**
     * Does we already have this declaration
     */
    already(decl, prop, value) {
      return decl.parent.some(i => i.prop === prop && i.value === value)
    }

    /**
     * Show transition-property warning
     */
    checkForWarning(result, decl) {
      if (decl.prop !== 'transition-property') {
        return
      }

      let isPrefixed = false;
      let hasAssociatedProp = false;

      decl.parent.each(i => {
        if (i.type !== 'decl') {
          return undefined
        }
        if (i.prop.indexOf('transition-') !== 0) {
          return undefined
        }
        let values = list$4.comma(i.value);
        // check if current Rule's transition-property comma separated value list needs prefixes
        if (i.prop === 'transition-property') {
          values.forEach(value => {
            let lookup = this.prefixes.add[value];
            if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {
              isPrefixed = true;
            }
          });
          return undefined
        }
        // check if another transition-* prop in current Rule has comma separated value list
        hasAssociatedProp = hasAssociatedProp || values.length > 1;
        return false
      });

      if (isPrefixed && hasAssociatedProp) {
        decl.warn(
          result,
          'Replace transition-property to transition, ' +
            'because Autoprefixer could not support ' +
            'any cases of transition-property ' +
            'and other transition-*'
        );
      }
    }

    /**
     * Remove all non-webkit prefixes and unprefixed params if we have prefixed
     */
    cleanFromUnprefixed(params, prefix) {
      let remove = params
        .map(i => this.findProp(i))
        .filter(i => i.slice(0, prefix.length) === prefix)
        .map(i => this.prefixes.unprefixed(i));

      let result = [];
      for (let param of params) {
        let prop = this.findProp(param);
        let p = vendor.prefix(prop);
        if (!remove.includes(prop) && (p === prefix || p === '')) {
          result.push(param);
        }
      }
      return result
    }

    cleanOtherPrefixes(params, prefix) {
      return params.filter(param => {
        let current = vendor.prefix(this.findProp(param));
        return current === '' || current === prefix
      })
    }

    /**
     * Return new param array with different name
     */
    clone(origin, name, param) {
      let result = [];
      let changed = false;
      for (let i of param) {
        if (!changed && i.type === 'word' && i.value === origin) {
          result.push({ type: 'word', value: name });
          changed = true;
        } else {
          result.push(i);
        }
      }
      return result
    }

    /**
     * Add declaration if it is not exist
     */
    cloneBefore(decl, prop, value) {
      if (!this.already(decl, prop, value)) {
        decl.cloneBefore({ prop, value });
      }
    }

    /**
     * Check property for disabled by option
     */
    disabled(prop, prefix) {
      let other = ['order', 'justify-content', 'align-self', 'align-content'];
      if (prop.includes('flex') || other.includes(prop)) {
        if (this.prefixes.options.flexbox === false) {
          return true
        }

        if (this.prefixes.options.flexbox === 'no-2009') {
          return prefix.includes('2009')
        }
      }
      return undefined
    }

    /**
     * Find or create separator
     */
    div(params) {
      for (let param of params) {
        for (let node of param) {
          if (node.type === 'div' && node.value === ',') {
            return node
          }
        }
      }
      return { after: ' ', type: 'div', value: ',' }
    }

    /**
     * Find property name
     */
    findProp(param) {
      let prop = param[0].value;
      if (/^\d/.test(prop)) {
        for (let [i, token] of param.entries()) {
          if (i !== 0 && token.type === 'word') {
            return token.value
          }
        }
      }
      return prop
    }

    /**
     * Parse properties list to array
     */
    parse(value) {
      let ast = lib(value);
      let result = [];
      let param = [];
      for (let node of ast.nodes) {
        param.push(node);
        if (node.type === 'div' && node.value === ',') {
          result.push(param);
          param = [];
        }
      }
      result.push(param);
      return result.filter(i => i.length > 0)
    }

    /**
     * Process transition and remove all unnecessary properties
     */
    remove(decl) {
      let params = this.parse(decl.value);
      params = params.filter(i => {
        let prop = this.prefixes.remove[this.findProp(i)];
        return !prop || !prop.remove
      });
      let value = this.stringify(params);

      if (decl.value === value) {
        return
      }

      if (params.length === 0) {
        decl.remove();
        return
      }

      let double = decl.parent.some(i => {
        return i.prop === decl.prop && i.value === value
      });
      let smaller = decl.parent.some(i => {
        return i !== decl && i.prop === decl.prop && i.value.length > value.length
      });

      if (double || smaller) {
        decl.remove();
        return
      }

      decl.value = value;
    }

    /**
     * Check if transition prop is inside vendor specific rule
     */
    ruleVendorPrefixes(decl) {
      let { parent } = decl;

      if (parent.type !== 'rule') {
        return false
      } else if (!parent.selector.includes(':-')) {
        return false
      }

      let selectors = browsers$1.prefixes().filter(s =>
        parent.selector.includes(':' + s)
      );

      return selectors.length > 0 ? selectors : false
    }

    /**
     * Return properties string from array
     */
    stringify(params) {
      if (params.length === 0) {
        return ''
      }
      let nodes = [];
      for (let param of params) {
        if (param[param.length - 1].type !== 'div') {
          param.push(this.div(params));
        }
        nodes = nodes.concat(param);
      }
      if (nodes[0].type === 'div') {
        nodes = nodes.slice(1);
      }
      if (nodes[nodes.length - 1].type === 'div') {
        nodes = nodes.slice(0, +-2 + 1 );
      }
      return lib.stringify({ nodes })
    }
  }

  var transition = Transition;

  class OldValue {
    constructor(unprefixed, prefixed, string, regexp) {
      this.unprefixed = unprefixed;
      this.prefixed = prefixed;
      this.string = string || prefixed;
      this.regexp = regexp || utils.regexp(prefixed);
    }

    /**
     * Check, that value contain old value
     */
    check(value) {
      if (value.includes(this.string)) {
        return !!value.match(this.regexp)
      }
      return false
    }
  }

  var oldValue = OldValue;

  class Value extends prefixer {
    /**
     * Clone decl for each prefixed values
     */
    static save(prefixes, decl) {
      let prop = decl.prop;
      let result = [];

      for (let prefix in decl._autoprefixerValues) {
        let value = decl._autoprefixerValues[prefix];

        if (value === decl.value) {
          continue
        }

        let item;
        let propPrefix = vendor.prefix(prop);

        if (propPrefix === '-pie-') {
          continue
        }

        if (propPrefix === prefix) {
          item = decl.value = value;
          result.push(item);
          continue
        }

        let prefixed = prefixes.prefixed(prop, prefix);
        let rule = decl.parent;

        if (!rule.every(i => i.prop !== prefixed)) {
          result.push(item);
          continue
        }

        let trimmed = value.replace(/\s+/, ' ');
        let already = rule.some(
          i => i.prop === decl.prop && i.value.replace(/\s+/, ' ') === trimmed
        );

        if (already) {
          result.push(item);
          continue
        }

        let cloned = this.clone(decl, { value });
        item = decl.parent.insertBefore(decl, cloned);

        result.push(item);
      }

      return result
    }

    /**
     * Save values with next prefixed token
     */
    add(decl, prefix) {
      if (!decl._autoprefixerValues) {
        decl._autoprefixerValues = {};
      }
      let value = decl._autoprefixerValues[prefix] || this.value(decl);

      let before;
      do {
        before = value;
        value = this.replace(value, prefix);
        if (value === false) return
      } while (value !== before)

      decl._autoprefixerValues[prefix] = value;
    }

    /**
     * Is declaration need to be prefixed
     */
    check(decl) {
      let value = decl.value;
      if (!value.includes(this.name)) {
        return false
      }

      return !!value.match(this.regexp())
    }

    /**
     * Return function to fast find prefixed value
     */
    old(prefix) {
      return new oldValue(this.name, prefix + this.name)
    }

    /**
     * Lazy regexp loading
     */
    regexp() {
      return this.regexpCache || (this.regexpCache = utils.regexp(this.name))
    }

    /**
     * Add prefix to values in string
     */
    replace(string, prefix) {
      return string.replace(this.regexp(), `$1${prefix}$2`)
    }

    /**
     * Get value with comments if it was not changed
     */
    value(decl) {
      if (decl.raws.value && decl.raws.value.value === decl.value) {
        return decl.raws.value.raw
      } else {
        return decl.value
      }
    }
  }

  var value = Value;

  let list$3 = postcss_1.list;

  let uniq = utils.uniq;
  let escapeRegexp = utils.escapeRegexp;
  let splitSelector = utils.splitSelector;

  function convert(value) {
    if (
      value &&
      value.length === 2 &&
      value[0] === 'span' &&
      parseInt(value[1], 10) > 0
    ) {
      return [false, parseInt(value[1], 10)]
    }

    if (value && value.length === 1 && parseInt(value[0], 10) > 0) {
      return [parseInt(value[0], 10), false]
    }

    return [false, false]
  }

  var translate_1 = translate;

  function translate(values, startIndex, endIndex) {
    let startValue = values[startIndex];
    let endValue = values[endIndex];

    if (!startValue) {
      return [false, false]
    }

    let [start, spanStart] = convert(startValue);
    let [end, spanEnd] = convert(endValue);

    if (start && !endValue) {
      return [start, false]
    }

    if (spanStart && end) {
      return [end - spanStart, spanStart]
    }

    if (start && spanEnd) {
      return [start, spanEnd]
    }

    if (start && end) {
      return [start, end - start]
    }

    return [false, false]
  }

  var parse_1 = parse$1;

  function parse$1(decl) {
    let node = lib(decl.value);

    let values = [];
    let current = 0;
    values[current] = [];

    for (let i of node.nodes) {
      if (i.type === 'div') {
        current += 1;
        values[current] = [];
      } else if (i.type === 'word') {
        values[current].push(i.value);
      }
    }

    return values
  }

  var insertDecl_1 = insertDecl;

  function insertDecl(decl, prop, value) {
    if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {
      decl.cloneBefore({
        prop: `-ms-${prop}`,
        value: value.toString()
      });
    }
  }

  // Track transforms

  var prefixTrackProp_1 = prefixTrackProp$2;

  function prefixTrackProp$2({ prefix, prop }) {
    return prefix + prop.replace('template-', '')
  }

  function transformRepeat({ nodes }, { gap }) {
    let { count, size } = nodes.reduce(
      (result, node) => {
        if (node.type === 'div' && node.value === ',') {
          result.key = 'size';
        } else {
          result[result.key].push(lib.stringify(node));
        }
        return result
      },
      {
        count: [],
        key: 'count',
        size: []
      }
    );

    // insert gap values
    if (gap) {
      size = size.filter(i => i.trim());
      let val = [];
      for (let i = 1; i <= count; i++) {
        size.forEach((item, index) => {
          if (index > 0 || i > 1) {
            val.push(gap);
          }
          val.push(item);
        });
      }

      return val.join(' ')
    }

    return `(${size.join('')})[${count.join('')}]`
  }

  var prefixTrackValue_1 = prefixTrackValue$2;

  function prefixTrackValue$2({ gap, value }) {
    let result = lib(value).nodes.reduce((nodes, node) => {
      if (node.type === 'function' && node.value === 'repeat') {
        return nodes.concat({
          type: 'word',
          value: transformRepeat(node, { gap })
        })
      }
      if (gap && node.type === 'space') {
        return nodes.concat(
          {
            type: 'space',
            value: ' '
          },
          {
            type: 'word',
            value: gap
          },
          node
        )
      }
      return nodes.concat(node)
    }, []);

    return lib.stringify(result)
  }

  // Parse grid-template-areas

  let DOTS = /^\.+$/;

  function track(start, end) {
    return { end, span: end - start, start }
  }

  function getColumns(line) {
    return line.trim().split(/\s+/g)
  }

  var parseGridAreas_1 = parseGridAreas$1;

  function parseGridAreas$1({ gap, rows }) {
    return rows.reduce((areas, line, rowIndex) => {
      if (gap.row) rowIndex *= 2;

      if (line.trim() === '') return areas

      getColumns(line).forEach((area, columnIndex) => {
        if (DOTS.test(area)) return

        if (gap.column) columnIndex *= 2;

        if (typeof areas[area] === 'undefined') {
          areas[area] = {
            column: track(columnIndex + 1, columnIndex + 2),
            row: track(rowIndex + 1, rowIndex + 2)
          };
        } else {
          let { column, row } = areas[area];

          column.start = Math.min(column.start, columnIndex + 1);
          column.end = Math.max(column.end, columnIndex + 2);
          column.span = column.end - column.start;

          row.start = Math.min(row.start, rowIndex + 1);
          row.end = Math.max(row.end, rowIndex + 2);
          row.span = row.end - row.start;
        }
      });

      return areas
    }, {})
  }

  // Parse grid-template

  function testTrack(node) {
    return node.type === 'word' && /^\[.+]$/.test(node.value)
  }

  function verifyRowSize(result) {
    if (result.areas.length > result.rows.length) {
      result.rows.push('auto');
    }
    return result
  }

  var parseTemplate_1 = parseTemplate$1;

  function parseTemplate$1({ decl, gap }) {
    let gridTemplate = lib(decl.value).nodes.reduce(
      (result, node) => {
        let { type, value } = node;

        if (testTrack(node) || type === 'space') return result

        // area
        if (type === 'string') {
          result = verifyRowSize(result);
          result.areas.push(value);
        }

        // values and function
        if (type === 'word' || type === 'function') {
          result[result.key].push(lib.stringify(node));
        }

        // divider(/)
        if (type === 'div' && value === '/') {
          result.key = 'columns';
          result = verifyRowSize(result);
        }

        return result
      },
      {
        areas: [],
        columns: [],
        key: 'rows',
        rows: []
      }
    );

    return {
      areas: parseGridAreas$1({
        gap,
        rows: gridTemplate.areas
      }),
      columns: prefixTrackValue$2({
        gap: gap.column,
        value: gridTemplate.columns.join(' ')
      }),
      rows: prefixTrackValue$2({
        gap: gap.row,
        value: gridTemplate.rows.join(' ')
      })
    }
  }

  // Insert parsed grid areas

  /**
   * Get an array of -ms- prefixed props and values
   * @param  {Object} [area] area object with column and row data
   * @param  {Boolean} [addRowSpan] should we add grid-column-row value?
   * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?
   * @return {Array<Object>}
   */
  function getMSDecls(area, addRowSpan = false, addColumnSpan = false) {
    let result = [
      {
        prop: '-ms-grid-row',
        value: String(area.row.start)
      }
    ];
    if (area.row.span > 1 || addRowSpan) {
      result.push({
        prop: '-ms-grid-row-span',
        value: String(area.row.span)
      });
    }
    result.push({
      prop: '-ms-grid-column',
      value: String(area.column.start)
    });
    if (area.column.span > 1 || addColumnSpan) {
      result.push({
        prop: '-ms-grid-column-span',
        value: String(area.column.span)
      });
    }
    return result
  }

  function getParentMedia(parent) {
    if (parent.type === 'atrule' && parent.name === 'media') {
      return parent
    }
    if (!parent.parent) {
      return false
    }
    return getParentMedia(parent.parent)
  }

  /**
   * change selectors for rules with duplicate grid-areas.
   * @param  {Array<Rule>} rules
   * @param  {Array<String>} templateSelectors
   * @return {Array<Rule>} rules with changed selectors
   */
  function changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {
    ruleSelectors = ruleSelectors.map(selector => {
      let selectorBySpace = list$3.space(selector);
      let selectorByComma = list$3.comma(selector);

      if (selectorBySpace.length > selectorByComma.length) {
        selector = selectorBySpace.slice(-1).join('');
      }
      return selector
    });

    return ruleSelectors.map(ruleSelector => {
      let newSelector = templateSelectors.map((tplSelector, index) => {
        let space = index === 0 ? '' : ' ';
        return `${space}${tplSelector} > ${ruleSelector}`
      });

      return newSelector
    })
  }

  /**
   * check if selector of rules are equal
   * @param  {Rule} ruleA
   * @param  {Rule} ruleB
   * @return {Boolean}
   */
  function selectorsEqual(ruleA, ruleB) {
    return ruleA.selectors.some(sel => {
      return ruleB.selectors.includes(sel)
    })
  }

  /**
   * Parse data from all grid-template(-areas) declarations
   * @param  {Root} css css root
   * @return {Object} parsed data
   */
  function parseGridTemplatesData(css) {
    let parsed = [];

    // we walk through every grid-template(-areas) declaration and store
    // data with the same area names inside the item
    css.walkDecls(/grid-template(-areas)?$/, d => {
      let rule = d.parent;
      let media = getParentMedia(rule);
      let gap = getGridGap$3(d);
      let inheritedGap = inheritGridGap$3(d, gap);
      let { areas } = parseTemplate$1({ decl: d, gap: inheritedGap || gap });
      let areaNames = Object.keys(areas);

      // skip node if it doesn't have areas
      if (areaNames.length === 0) {
        return true
      }

      // check parsed array for item that include the same area names
      // return index of that item
      let index = parsed.reduce((acc, { allAreas }, idx) => {
        let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area));
        return hasAreas ? idx : acc
      }, null);

      if (index !== null) {
        // index is found, add the grid-template data to that item
        let { allAreas, rules } = parsed[index];

        // check if rule has no duplicate area names
        let hasNoDuplicates = rules.some(r => {
          return r.hasDuplicates === false && selectorsEqual(r, rule)
        });

        let duplicatesFound = false;

        // check need to gather all duplicate area names
        let duplicateAreaNames = rules.reduce((acc, r) => {
          if (!r.params && selectorsEqual(r, rule)) {
            duplicatesFound = true;
            return r.duplicateAreaNames
          }
          if (!duplicatesFound) {
            areaNames.forEach(name => {
              if (r.areas[name]) {
                acc.push(name);
              }
            });
          }
          return uniq(acc)
        }, []);

        // update grid-row/column-span values for areas with duplicate
        // area names. @see #1084 and #1146
        rules.forEach(r => {
          areaNames.forEach(name => {
            let area = r.areas[name];
            if (area && area.row.span !== areas[name].row.span) {
              areas[name].row.updateSpan = true;
            }

            if (area && area.column.span !== areas[name].column.span) {
              areas[name].column.updateSpan = true;
            }
          });
        });

        parsed[index].allAreas = uniq([...allAreas, ...areaNames]);
        parsed[index].rules.push({
          areas,
          duplicateAreaNames,
          hasDuplicates: !hasNoDuplicates,
          node: rule,
          params: media.params,
          selectors: rule.selectors
        });
      } else {
        // index is NOT found, push the new item to the parsed array
        parsed.push({
          allAreas: areaNames,
          areasCount: 0,
          rules: [
            {
              areas,
              duplicateAreaNames: [],
              duplicateRules: [],
              hasDuplicates: false,
              node: rule,
              params: media.params,
              selectors: rule.selectors
            }
          ]
        });
      }

      return undefined
    });

    return parsed
  }

  /**
   * insert prefixed grid-area declarations
   * @param  {Root}  css css root
   * @param  {Function} isDisabled check if the rule is disabled
   * @return {void}
   */
  var insertAreas_1 = insertAreas$1;

  function insertAreas$1(css, isDisabled) {
    // parse grid-template declarations
    let gridTemplatesData = parseGridTemplatesData(css);

    // return undefined if no declarations found
    if (gridTemplatesData.length === 0) {
      return undefined
    }

    // we need to store the rules that we will insert later
    let rulesToInsert = {};

    css.walkDecls('grid-area', gridArea => {
      let gridAreaRule = gridArea.parent;
      let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row';
      let gridAreaMedia = getParentMedia(gridAreaRule);

      if (isDisabled(gridArea)) {
        return undefined
      }

      let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule);

      let value = gridArea.value;
      // found the data that matches grid-area identifier
      let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0];

      if (!data) {
        return true
      }

      let lastArea = data.allAreas[data.allAreas.length - 1];
      let selectorBySpace = list$3.space(gridAreaRule.selector);
      let selectorByComma = list$3.comma(gridAreaRule.selector);
      let selectorIsComplex =
        selectorBySpace.length > 1 &&
        selectorBySpace.length > selectorByComma.length;

      // prevent doubling of prefixes
      if (hasPrefixedRow) {
        return false
      }

      // create the empty object with the key as the last area name
      // e.g if we have templates with "a b c" values, "c" will be the last area
      if (!rulesToInsert[lastArea]) {
        rulesToInsert[lastArea] = {};
      }

      let lastRuleIsSet = false;

      // walk through every grid-template rule data
      for (let rule of data.rules) {
        let area = rule.areas[value];
        let hasDuplicateName = rule.duplicateAreaNames.includes(value);

        // if we can't find the area name, update lastRule and continue
        if (!area) {
          let lastRule = rulesToInsert[lastArea].lastRule;
          let lastRuleIndex;
          if (lastRule) {
            lastRuleIndex = css.index(lastRule);
          } else {
            /* c8 ignore next 2 */
            lastRuleIndex = -1;
          }

          if (gridAreaRuleIndex > lastRuleIndex) {
            rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;
          }
          continue
        }

        // for grid-templates inside media rule we need to create empty
        // array to push prefixed grid-area rules later
        if (rule.params && !rulesToInsert[lastArea][rule.params]) {
          rulesToInsert[lastArea][rule.params] = [];
        }

        if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {
          // grid-template has no duplicates and not inside media rule

          getMSDecls(area, false, false)
            .reverse()
            .forEach(i =>
              gridAreaRule.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );

          rulesToInsert[lastArea].lastRule = gridAreaRule;
          lastRuleIsSet = true;
        } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {
          // grid-template has duplicates and not inside media rule
          let cloned = gridAreaRule.clone();
          cloned.removeAll();

          getMSDecls(area, area.row.updateSpan, area.column.updateSpan)
            .reverse()
            .forEach(i =>
              cloned.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );

          cloned.selectors = changeDuplicateAreaSelectors(
            cloned.selectors,
            rule.selectors
          );

          if (rulesToInsert[lastArea].lastRule) {
            rulesToInsert[lastArea].lastRule.after(cloned);
          }
          rulesToInsert[lastArea].lastRule = cloned;
          lastRuleIsSet = true;
        } else if (
          rule.hasDuplicates &&
          !rule.params &&
          selectorIsComplex &&
          gridAreaRule.selector.includes(rule.selectors[0])
        ) {
          // grid-template has duplicates and not inside media rule
          // and the selector is complex
          gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove());
          getMSDecls(area, area.row.updateSpan, area.column.updateSpan)
            .reverse()
            .forEach(i =>
              gridAreaRule.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );
        } else if (rule.params) {
          // grid-template is inside media rule
          // if we're inside media rule, we need to store prefixed rules
          // inside rulesToInsert object to be able to preserve the order of media
          // rules and merge them easily
          let cloned = gridAreaRule.clone();
          cloned.removeAll();

          getMSDecls(area, area.row.updateSpan, area.column.updateSpan)
            .reverse()
            .forEach(i =>
              cloned.prepend(
                Object.assign(i, {
                  raws: {
                    between: gridArea.raws.between
                  }
                })
              )
            );

          if (rule.hasDuplicates && hasDuplicateName) {
            cloned.selectors = changeDuplicateAreaSelectors(
              cloned.selectors,
              rule.selectors
            );
          }

          cloned.raws = rule.node.raws;

          if (css.index(rule.node.parent) > gridAreaRuleIndex) {
            // append the prefixed rules right inside media rule
            // with grid-template
            rule.node.parent.append(cloned);
          } else {
            // store the rule to insert later
            rulesToInsert[lastArea][rule.params].push(cloned);
          }

          // set new rule as last rule ONLY if we didn't set lastRule for
          // this grid-area before
          if (!lastRuleIsSet) {
            rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;
          }
        }
      }

      return undefined
    });

    // append stored rules inside the media rules
    Object.keys(rulesToInsert).forEach(area => {
      let data = rulesToInsert[area];
      let lastRule = data.lastRule;
      Object.keys(data)
        .reverse()
        .filter(p => p !== 'lastRule')
        .forEach(params => {
          if (data[params].length > 0 && lastRule) {
            lastRule.after({ name: 'media', params });
            lastRule.next().append(data[params]);
          }
        });
    });

    return undefined
  }

  /**
   * Warn user if grid area identifiers are not found
   * @param  {Object} areas
   * @param  {Declaration} decl
   * @param  {Result} result
   * @return {void}
   */
  var warnMissedAreas_1 = warnMissedAreas$2;

  function warnMissedAreas$2(areas, decl, result) {
    let missed = Object.keys(areas);

    decl.root().walkDecls('grid-area', gridArea => {
      missed = missed.filter(e => e !== gridArea.value);
    });

    if (missed.length > 0) {
      decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));
    }

    return undefined
  }

  /**
   * compare selectors with grid-area rule and grid-template rule
   * show warning if grid-template selector is not found
   * (this function used for grid-area rule)
   * @param  {Declaration} decl
   * @param  {Result} result
   * @return {void}
   */
  var warnTemplateSelectorNotFound_1 = warnTemplateSelectorNotFound;

  function warnTemplateSelectorNotFound(decl, result) {
    let rule = decl.parent;
    let root = decl.root();
    let duplicatesFound = false;

    // slice selector array. Remove the last part (for comparison)
    let slicedSelectorArr = list$3
      .space(rule.selector)
      .filter(str => str !== '>')
      .slice(0, -1);

    // we need to compare only if selector is complex.
    // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex
    if (slicedSelectorArr.length > 0) {
      let gridTemplateFound = false;
      let foundAreaSelector = null;

      root.walkDecls(/grid-template(-areas)?$/, d => {
        let parent = d.parent;
        let templateSelectors = parent.selectors;

        let { areas } = parseTemplate$1({ decl: d, gap: getGridGap$3(d) });
        let hasArea = areas[decl.value];

        // find the the matching selectors
        for (let tplSelector of templateSelectors) {
          if (gridTemplateFound) {
            break
          }
          let tplSelectorArr = list$3.space(tplSelector).filter(str => str !== '>');

          gridTemplateFound = tplSelectorArr.every(
            (item, idx) => item === slicedSelectorArr[idx]
          );
        }

        if (gridTemplateFound || !hasArea) {
          return true
        }

        if (!foundAreaSelector) {
          foundAreaSelector = parent.selector;
        }

        // if we found the duplicate area with different selector
        if (foundAreaSelector && foundAreaSelector !== parent.selector) {
          duplicatesFound = true;
        }

        return undefined
      });

      // warn user if we didn't find template
      if (!gridTemplateFound && duplicatesFound) {
        decl.warn(
          result,
          'Autoprefixer cannot find a grid-template ' +
            `containing the duplicate grid-area "${decl.value}" ` +
            `with full selector matching: ${slicedSelectorArr.join(' ')}`
        );
      }
    }
  }

  /**
   * warn user if both grid-area and grid-(row|column)
   * declarations are present in the same rule
   * @param  {Declaration} decl
   * @param  {Result} result
   * @return {void}
   */
  var warnIfGridRowColumnExists_1 = warnIfGridRowColumnExists;

  function warnIfGridRowColumnExists(decl, result) {
    let rule = decl.parent;
    let decls = [];
    rule.walkDecls(/^grid-(row|column)/, d => {
      if (
        !d.prop.endsWith('-end') &&
        !d.value.startsWith('span') &&
        !d.prop.endsWith('-gap')
      ) {
        decls.push(d);
      }
    });
    if (decls.length > 0) {
      decls.forEach(d => {
        d.warn(
          result,
          'You already have a grid-area declaration present in the rule. ' +
            `You should use either grid-area or ${d.prop}, not both`
        );
      });
    }

    return undefined
  }

  // Gap utils

  var getGridGap_1 = getGridGap$3;

  function getGridGap$3(decl) {
    let gap = {};

    // try to find gap
    let testGap = /^(grid-)?((row|column)-)?gap$/;
    decl.parent.walkDecls(testGap, ({ prop, value }) => {
      if (/^(grid-)?gap$/.test(prop)) {
        let [row, , column] = lib(value).nodes;

        gap.row = row && lib.stringify(row);
        gap.column = column ? lib.stringify(column) : gap.row;
      }
      if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;
      if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;
    });

    return gap
  }

  /**
   * parse media parameters (for example 'min-width: 500px')
   * @param  {String} params parameter to parse
   * @return {}
   */
  function parseMediaParams(params) {
    if (!params) {
      return []
    }
    let parsed = lib(params);
    let prop;
    let value;

    parsed.walk(node => {
      if (node.type === 'word' && /min|max/g.test(node.value)) {
        prop = node.value;
      } else if (node.value.includes('px')) {
        value = parseInt(node.value.replace(/\D/g, ''));
      }
    });

    return [prop, value]
  }

  /**
   * Compare the selectors and decide if we
   * need to inherit gap from compared selector or not.
   * @type {String} selA
   * @type {String} selB
   * @return {Boolean}
   */
  function shouldInheritGap(selA, selB) {
    let result;

    // get arrays of selector split in 3-deep array
    let splitSelectorArrA = splitSelector(selA);
    let splitSelectorArrB = splitSelector(selB);

    if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {
      // abort if selectorA has lower descendant specificity then selectorB
      // (e.g '.grid' and '.hello .world .grid')
      return false
    } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {
      // if selectorA has higher descendant specificity then selectorB
      // (e.g '.foo .bar .grid' and '.grid')

      let idx = splitSelectorArrA[0].reduce((res, [item], index) => {
        let firstSelectorPart = splitSelectorArrB[0][0][0];
        if (item === firstSelectorPart) {
          return index
        }
        return false
      }, false);

      if (idx) {
        result = splitSelectorArrB[0].every((arr, index) => {
          return arr.every(
            (part, innerIndex) =>
              // because selectorA has more space elements, we need to slice
              // selectorA array by 'idx' number to compare them
              splitSelectorArrA[0].slice(idx)[index][innerIndex] === part
          )
        });
      }
    } else {
      // if selectorA has the same descendant specificity as selectorB
      // this condition covers cases such as: '.grid.foo.bar' and '.grid'
      result = splitSelectorArrB.some(byCommaArr => {
        return byCommaArr.every((bySpaceArr, index) => {
          return bySpaceArr.every(
            (part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part
          )
        })
      });
    }

    return result
  }
  /**
   * inherit grid gap values from the closest rule above
   * with the same selector
   * @param  {Declaration} decl
   * @param  {Object} gap gap values
   * @return {Object | Boolean} return gap values or false (if not found)
   */
  var inheritGridGap_1 = inheritGridGap$3;

  function inheritGridGap$3(decl, gap) {
    let rule = decl.parent;
    let mediaRule = getParentMedia(rule);
    let root = rule.root();

    // get an array of selector split in 3-deep array
    let splitSelectorArr = splitSelector(rule.selector);

    // abort if the rule already has gaps
    if (Object.keys(gap).length > 0) {
      return false
    }

    // e.g ['min-width']
    let [prop] = parseMediaParams(mediaRule.params);

    let lastBySpace = splitSelectorArr[0];

    // get escaped value from the selector
    // if we have '.grid-2.foo.bar' selector, will be '\.grid\-2'
    let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);

    let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`);

    // find the closest rule with the same selector
    let closestRuleGap;
    root.walkRules(regexp, r => {
      let gridGap;

      // abort if are checking the same rule
      if (rule.toString() === r.toString()) {
        return false
      }

      // find grid-gap values
      r.walkDecls('grid-gap', d => (gridGap = getGridGap$3(d)));

      // skip rule without gaps
      if (!gridGap || Object.keys(gridGap).length === 0) {
        return true
      }

      // skip rules that should not be inherited from
      if (!shouldInheritGap(rule.selector, r.selector)) {
        return true
      }

      let media = getParentMedia(r);
      if (media) {
        // if we are inside media, we need to check that media props match
        // e.g ('min-width' === 'min-width')
        let propToCompare = parseMediaParams(media.params)[0];
        if (propToCompare === prop) {
          closestRuleGap = gridGap;
          return true
        }
      } else {
        closestRuleGap = gridGap;
        return true
      }

      return undefined
    });

    // if we find the closest gap object
    if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {
      return closestRuleGap
    }
    return false
  }

  var warnGridGap_1 = warnGridGap$2;

  function warnGridGap$2({ decl, gap, hasColumns, result }) {
    let hasBothGaps = gap.row && gap.column;
    if (!hasColumns && (hasBothGaps || (gap.column && !gap.row))) {
      delete gap.column;
      decl.warn(
        result,
        'Can not implement grid-gap without grid-template-columns'
      );
    }
  }

  /**
   * normalize the grid-template-rows/columns values
   * @param  {String} str grid-template-rows/columns value
   * @return {Array} normalized array with values
   * @example
   * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')
   * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']
   */
  function normalizeRowColumn(str) {
    let normalized = lib(str).nodes.reduce((result, node) => {
      if (node.type === 'function' && node.value === 'repeat') {
        let key = 'count';

        let [count, value] = node.nodes.reduce(
          (acc, n) => {
            if (n.type === 'word' && key === 'count') {
              acc[0] = Math.abs(parseInt(n.value));
              return acc
            }
            if (n.type === 'div' && n.value === ',') {
              key = 'value';
              return acc
            }
            if (key === 'value') {
              acc[1] += lib.stringify(n);
            }
            return acc
          },
          [0, '']
        );

        if (count) {
          for (let i = 0; i < count; i++) {
            result.push(value);
          }
        }

        return result
      }
      if (node.type === 'space') {
        return result
      }
      return result.concat(lib.stringify(node))
    }, []);

    return normalized
  }

  var autoplaceGridItems_1 = autoplaceGridItems$1;

  /**
   * Autoplace grid items
   * @param {Declaration} decl
   * @param {Result} result
   * @param {Object} gap gap values
   * @param {String} autoflowValue grid-auto-flow value
   * @return {void}
   * @see https://github.com/postcss/autoprefixer/issues/1148
   */
  function autoplaceGridItems$1(decl, result, gap, autoflowValue = 'row') {
    let { parent } = decl;

    let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');
    let rows = normalizeRowColumn(rowDecl.value);
    let columns = normalizeRowColumn(decl.value);

    // Build array of area names with dummy values. If we have 3 columns and
    // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']
    let filledRows = rows.map((_, rowIndex) => {
      return Array.from(
        { length: columns.length },
        (v, k) => k + rowIndex * columns.length + 1
      ).join(' ')
    });

    let areas = parseGridAreas$1({ gap, rows: filledRows });
    let keys = Object.keys(areas);
    let items = keys.map(i => areas[i]);

    // Change the order of cells if grid-auto-flow value is 'column'
    if (autoflowValue.includes('column')) {
      items = items.sort((a, b) => a.column.start - b.column.start);
    }

    // Insert new rules
    items.reverse().forEach((item, index) => {
      let { column, row } = item;
      let nodeSelector = parent.selectors
        .map(sel => sel + ` > *:nth-child(${keys.length - index})`)
        .join(', ');

      // create new rule
      let node = parent.clone().removeAll();

      // change rule selector
      node.selector = nodeSelector;

      // insert prefixed row/column values
      node.append({ prop: '-ms-grid-row', value: row.start });
      node.append({ prop: '-ms-grid-column', value: column.start });

      // insert rule
      parent.after(node);
    });

    return undefined
  }

  var gridUtils = {
  	translate: translate_1,
  	parse: parse_1,
  	insertDecl: insertDecl_1,
  	prefixTrackProp: prefixTrackProp_1,
  	prefixTrackValue: prefixTrackValue_1,
  	parseGridAreas: parseGridAreas_1,
  	parseTemplate: parseTemplate_1,
  	insertAreas: insertAreas_1,
  	warnMissedAreas: warnMissedAreas_1,
  	warnTemplateSelectorNotFound: warnTemplateSelectorNotFound_1,
  	warnIfGridRowColumnExists: warnIfGridRowColumnExists_1,
  	getGridGap: getGridGap_1,
  	inheritGridGap: inheritGridGap_1,
  	warnGridGap: warnGridGap_1,
  	autoplaceGridItems: autoplaceGridItems_1
  };

  let insertAreas = gridUtils.insertAreas;

  const OLD_LINEAR = /(^|[^-])linear-gradient\(\s*(top|left|right|bottom)/i;
  const OLD_RADIAL = /(^|[^-])radial-gradient\(\s*\d+(\w*|%)\s+\d+(\w*|%)\s*,/i;
  const IGNORE_NEXT = /(!\s*)?autoprefixer:\s*ignore\s+next/i;
  const GRID_REGEX = /(!\s*)?autoprefixer\s*grid:\s*(on|off|(no-)?autoplace)/i;

  const SIZES = [
    'width',
    'height',
    'min-width',
    'max-width',
    'min-height',
    'max-height',
    'inline-size',
    'min-inline-size',
    'max-inline-size',
    'block-size',
    'min-block-size',
    'max-block-size'
  ];

  function hasGridTemplate(decl) {
    return decl.parent.some(
      i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'
    )
  }

  function hasRowsAndColumns(decl) {
    let hasRows = decl.parent.some(i => i.prop === 'grid-template-rows');
    let hasColumns = decl.parent.some(i => i.prop === 'grid-template-columns');
    return hasRows && hasColumns
  }

  class Processor {
    constructor(prefixes) {
      this.prefixes = prefixes;
    }

    /**
     * Add necessary prefixes
     */
    add(css, result) {
      // At-rules
      let resolution = this.prefixes.add['@resolution'];
      let keyframes = this.prefixes.add['@keyframes'];
      let viewport = this.prefixes.add['@viewport'];
      let supports = this.prefixes.add['@supports'];

      css.walkAtRules(rule => {
        if (rule.name === 'keyframes') {
          if (!this.disabled(rule, result)) {
            return keyframes && keyframes.process(rule)
          }
        } else if (rule.name === 'viewport') {
          if (!this.disabled(rule, result)) {
            return viewport && viewport.process(rule)
          }
        } else if (rule.name === 'supports') {
          if (
            this.prefixes.options.supports !== false &&
            !this.disabled(rule, result)
          ) {
            return supports.process(rule)
          }
        } else if (rule.name === 'media' && rule.params.includes('-resolution')) {
          if (!this.disabled(rule, result)) {
            return resolution && resolution.process(rule)
          }
        }

        return undefined
      });

      // Selectors
      css.walkRules(rule => {
        if (this.disabled(rule, result)) return undefined

        return this.prefixes.add.selectors.map(selector => {
          return selector.process(rule, result)
        })
      });

      function insideGrid(decl) {
        return decl.parent.nodes.some(node => {
          if (node.type !== 'decl') return false
          let displayGrid =
            node.prop === 'display' && /(inline-)?grid/.test(node.value);
          let gridTemplate = node.prop.startsWith('grid-template');
          let gridGap = /^grid-([A-z]+-)?gap/.test(node.prop);
          return displayGrid || gridTemplate || gridGap
        })
      }

      let gridPrefixes =
        this.gridStatus(css, result) &&
        this.prefixes.add['grid-area'] &&
        this.prefixes.add['grid-area'].prefixes;

      css.walkDecls(decl => {
        if (this.disabledDecl(decl, result)) return undefined

        let parent = decl.parent;
        let prop = decl.prop;
        let value = decl.value;

        if (prop === 'color-adjust') {
          if (parent.every(i => i.prop !== 'print-color-adjust')) {
            result.warn(
              'Replace color-adjust to print-color-adjust. ' +
                'The color-adjust shorthand is currently deprecated.',
              { node: decl }
            );
          }
        } else if (prop === 'grid-row-span') {
          result.warn(
            'grid-row-span is not part of final Grid Layout. Use grid-row.',
            { node: decl }
          );
          return undefined
        } else if (prop === 'grid-column-span') {
          result.warn(
            'grid-column-span is not part of final Grid Layout. Use grid-column.',
            { node: decl }
          );
          return undefined
        } else if (prop === 'display' && value === 'box') {
          result.warn(
            'You should write display: flex by final spec ' +
              'instead of display: box',
            { node: decl }
          );
          return undefined
        } else if (prop === 'text-emphasis-position') {
          if (value === 'under' || value === 'over') {
            result.warn(
              'You should use 2 values for text-emphasis-position ' +
                'For example, `under left` instead of just `under`.',
              { node: decl }
            );
          }
        } else if (prop === 'text-decoration-skip' && value === 'ink') {
          result.warn(
            'Replace text-decoration-skip: ink to ' +
              'text-decoration-skip-ink: auto, because spec had been changed',
            { node: decl }
          );
        } else {
          if (gridPrefixes && this.gridStatus(decl, result)) {
            if (decl.value === 'subgrid') {
              result.warn('IE does not support subgrid', { node: decl });
            }
            if (/^(align|justify|place)-items$/.test(prop) && insideGrid(decl)) {
              let fixed = prop.replace('-items', '-self');
              result.warn(
                `IE does not support ${prop} on grid containers. ` +
                  `Try using ${fixed} on child elements instead: ` +
                  `${decl.parent.selector} > * { ${fixed}: ${decl.value} }`,
                { node: decl }
              );
            } else if (
              /^(align|justify|place)-content$/.test(prop) &&
              insideGrid(decl)
            ) {
              result.warn(`IE does not support ${decl.prop} on grid containers`, {
                node: decl
              });
            } else if (prop === 'display' && decl.value === 'contents') {
              result.warn(
                'Please do not use display: contents; ' +
                  'if you have grid setting enabled',
                { node: decl }
              );
              return undefined
            } else if (decl.prop === 'grid-gap') {
              let status = this.gridStatus(decl, result);
              if (
                status === 'autoplace' &&
                !hasRowsAndColumns(decl) &&
                !hasGridTemplate(decl)
              ) {
                result.warn(
                  'grid-gap only works if grid-template(-areas) is being ' +
                    'used or both rows and columns have been declared ' +
                    'and cells have not been manually ' +
                    'placed inside the explicit grid',
                  { node: decl }
                );
              } else if (
                (status === true || status === 'no-autoplace') &&
                !hasGridTemplate(decl)
              ) {
                result.warn(
                  'grid-gap only works if grid-template(-areas) is being used',
                  { node: decl }
                );
              }
            } else if (prop === 'grid-auto-columns') {
              result.warn('grid-auto-columns is not supported by IE', {
                node: decl
              });
              return undefined
            } else if (prop === 'grid-auto-rows') {
              result.warn('grid-auto-rows is not supported by IE', { node: decl });
              return undefined
            } else if (prop === 'grid-auto-flow') {
              let hasRows = parent.some(i => i.prop === 'grid-template-rows');
              let hasCols = parent.some(i => i.prop === 'grid-template-columns');

              if (hasGridTemplate(decl)) {
                result.warn('grid-auto-flow is not supported by IE', {
                  node: decl
                });
              } else if (value.includes('dense')) {
                result.warn('grid-auto-flow: dense is not supported by IE', {
                  node: decl
                });
              } else if (!hasRows && !hasCols) {
                result.warn(
                  'grid-auto-flow works only if grid-template-rows and ' +
                    'grid-template-columns are present in the same rule',
                  { node: decl }
                );
              }
              return undefined
            } else if (value.includes('auto-fit')) {
              result.warn('auto-fit value is not supported by IE', {
                node: decl,
                word: 'auto-fit'
              });
              return undefined
            } else if (value.includes('auto-fill')) {
              result.warn('auto-fill value is not supported by IE', {
                node: decl,
                word: 'auto-fill'
              });
              return undefined
            } else if (prop.startsWith('grid-template') && value.includes('[')) {
              result.warn(
                'Autoprefixer currently does not support line names. ' +
                  'Try using grid-template-areas instead.',
                { node: decl, word: '[' }
              );
            }
          }
          if (value.includes('radial-gradient')) {
            if (OLD_RADIAL.test(decl.value)) {
              result.warn(
                'Gradient has outdated direction syntax. ' +
                  'New syntax is like `closest-side at 0 0` ' +
                  'instead of `0 0, closest-side`.',
                { node: decl }
              );
            } else {
              let ast = lib(value);

              for (let i of ast.nodes) {
                if (i.type === 'function' && i.value === 'radial-gradient') {
                  for (let word of i.nodes) {
                    if (word.type === 'word') {
                      if (word.value === 'cover') {
                        result.warn(
                          'Gradient has outdated direction syntax. ' +
                            'Replace `cover` to `farthest-corner`.',
                          { node: decl }
                        );
                      } else if (word.value === 'contain') {
                        result.warn(
                          'Gradient has outdated direction syntax. ' +
                            'Replace `contain` to `closest-side`.',
                          { node: decl }
                        );
                      }
                    }
                  }
                }
              }
            }
          }
          if (value.includes('linear-gradient')) {
            if (OLD_LINEAR.test(value)) {
              result.warn(
                'Gradient has outdated direction syntax. ' +
                  'New syntax is like `to left` instead of `right`.',
                { node: decl }
              );
            }
          }
        }

        if (SIZES.includes(decl.prop)) {
          if (!decl.value.includes('-fill-available')) {
            if (decl.value.includes('fill-available')) {
              result.warn(
                'Replace fill-available to stretch, ' +
                  'because spec had been changed',
                { node: decl }
              );
            } else if (decl.value.includes('fill')) {
              let ast = lib(value);
              if (ast.nodes.some(i => i.type === 'word' && i.value === 'fill')) {
                result.warn(
                  'Replace fill to stretch, because spec had been changed',
                  { node: decl }
                );
              }
            }
          }
        }

        let prefixer;

        if (decl.prop === 'transition' || decl.prop === 'transition-property') {
          // Transition
          return this.prefixes.transition.add(decl, result)
        } else if (decl.prop === 'align-self') {
          // align-self flexbox or grid
          let display = this.displayType(decl);
          if (display !== 'grid' && this.prefixes.options.flexbox !== false) {
            prefixer = this.prefixes.add['align-self'];
            if (prefixer && prefixer.prefixes) {
              prefixer.process(decl);
            }
          }
          if (this.gridStatus(decl, result) !== false) {
            prefixer = this.prefixes.add['grid-row-align'];
            if (prefixer && prefixer.prefixes) {
              return prefixer.process(decl, result)
            }
          }
        } else if (decl.prop === 'justify-self') {
          // justify-self flexbox or grid
          if (this.gridStatus(decl, result) !== false) {
            prefixer = this.prefixes.add['grid-column-align'];
            if (prefixer && prefixer.prefixes) {
              return prefixer.process(decl, result)
            }
          }
        } else if (decl.prop === 'place-self') {
          prefixer = this.prefixes.add['place-self'];
          if (
            prefixer &&
            prefixer.prefixes &&
            this.gridStatus(decl, result) !== false
          ) {
            return prefixer.process(decl, result)
          }
        } else {
          // Properties
          prefixer = this.prefixes.add[decl.prop];
          if (prefixer && prefixer.prefixes) {
            return prefixer.process(decl, result)
          }
        }

        return undefined
      });

      // Insert grid-area prefixes. We need to be able to store the different
      // rules as a data and hack API is not enough for this
      if (this.gridStatus(css, result)) {
        insertAreas(css, this.disabled);
      }

      // Values
      return css.walkDecls(decl => {
        if (this.disabledValue(decl, result)) return

        let unprefixed = this.prefixes.unprefixed(decl.prop);
        let list = this.prefixes.values('add', unprefixed);
        if (Array.isArray(list)) {
          for (let value of list) {
            if (value.process) value.process(decl, result);
          }
        }
        value.save(this.prefixes, decl);
      })
    }

    /**
     * Check for control comment and global options
     */
    disabled(node, result) {
      if (!node) return false

      if (node._autoprefixerDisabled !== undefined) {
        return node._autoprefixerDisabled
      }

      if (node.parent) {
        let p = node.prev();
        if (p && p.type === 'comment' && IGNORE_NEXT.test(p.text)) {
          node._autoprefixerDisabled = true;
          node._autoprefixerSelfDisabled = true;
          return true
        }
      }

      let value = null;
      if (node.nodes) {
        let status;
        node.each(i => {
          if (i.type !== 'comment') return
          if (/(!\s*)?autoprefixer:\s*(off|on)/i.test(i.text)) {
            if (typeof status !== 'undefined') {
              result.warn(
                'Second Autoprefixer control comment ' +
                  'was ignored. Autoprefixer applies control ' +
                  'comment to whole block, not to next rules.',
                { node: i }
              );
            } else {
              status = /on/i.test(i.text);
            }
          }
        });

        if (status !== undefined) {
          value = !status;
        }
      }
      if (!node.nodes || value === null) {
        if (node.parent) {
          let isParentDisabled = this.disabled(node.parent, result);
          if (node.parent._autoprefixerSelfDisabled === true) {
            value = false;
          } else {
            value = isParentDisabled;
          }
        } else {
          value = false;
        }
      }
      node._autoprefixerDisabled = value;
      return value
    }

    /**
     * Check for grid/flexbox options.
     */
    disabledDecl(node, result) {
      if (node.type === 'decl' && this.gridStatus(node, result) === false) {
        if (node.prop.includes('grid') || node.prop === 'justify-items') {
          return true
        }
      }
      if (node.type === 'decl' && this.prefixes.options.flexbox === false) {
        let other = ['order', 'justify-content', 'align-items', 'align-content'];
        if (node.prop.includes('flex') || other.includes(node.prop)) {
          return true
        }
      }

      return this.disabled(node, result)
    }

    /**
     * Check for grid/flexbox options.
     */
    disabledValue(node, result) {
      if (this.gridStatus(node, result) === false && node.type === 'decl') {
        if (node.prop === 'display' && node.value.includes('grid')) {
          return true
        }
      }
      if (this.prefixes.options.flexbox === false && node.type === 'decl') {
        if (node.prop === 'display' && node.value.includes('flex')) {
          return true
        }
      }
      if (node.type === 'decl' && node.prop === 'content') {
        return true
      }

      return this.disabled(node, result)
    }

    /**
     * Is it flebox or grid rule
     */
    displayType(decl) {
      for (let i of decl.parent.nodes) {
        if (i.prop !== 'display') {
          continue
        }

        if (i.value.includes('flex')) {
          return 'flex'
        }

        if (i.value.includes('grid')) {
          return 'grid'
        }
      }

      return false
    }

    /**
     * Set grid option via control comment
     */
    gridStatus(node, result) {
      if (!node) return false

      if (node._autoprefixerGridStatus !== undefined) {
        return node._autoprefixerGridStatus
      }

      let value = null;
      if (node.nodes) {
        let status;
        node.each(i => {
          if (i.type !== 'comment') return
          if (GRID_REGEX.test(i.text)) {
            let hasAutoplace = /:\s*autoplace/i.test(i.text);
            let noAutoplace = /no-autoplace/i.test(i.text);
            if (typeof status !== 'undefined') {
              result.warn(
                'Second Autoprefixer grid control comment was ' +
                  'ignored. Autoprefixer applies control comments to the whole ' +
                  'block, not to the next rules.',
                { node: i }
              );
            } else if (hasAutoplace) {
              status = 'autoplace';
            } else if (noAutoplace) {
              status = true;
            } else {
              status = /on/i.test(i.text);
            }
          }
        });

        if (status !== undefined) {
          value = status;
        }
      }

      if (node.type === 'atrule' && node.name === 'supports') {
        let params = node.params;
        if (params.includes('grid') && params.includes('auto')) {
          value = false;
        }
      }

      if (!node.nodes || value === null) {
        if (node.parent) {
          let isParentGrid = this.gridStatus(node.parent, result);
          if (node.parent._autoprefixerSelfDisabled === true) {
            value = false;
          } else {
            value = isParentGrid;
          }
        } else if (typeof this.prefixes.options.grid !== 'undefined') {
          value = this.prefixes.options.grid;
        } else if (typeof process.env.AUTOPREFIXER_GRID !== 'undefined') {
          if (process.env.AUTOPREFIXER_GRID === 'autoplace') {
            value = 'autoplace';
          } else {
            value = true;
          }
        } else {
          value = false;
        }
      }

      node._autoprefixerGridStatus = value;
      return value
    }

    /**
     * Normalize spaces in cascade declaration group
     */
    reduceSpaces(decl) {
      let stop = false;
      this.prefixes.group(decl).up(() => {
        stop = true;
        return true
      });
      if (stop) {
        return
      }

      let parts = decl.raw('before').split('\n');
      let prevMin = parts[parts.length - 1].length;
      let diff = false;

      this.prefixes.group(decl).down(other => {
        parts = other.raw('before').split('\n');
        let last = parts.length - 1;

        if (parts[last].length > prevMin) {
          if (diff === false) {
            diff = parts[last].length - prevMin;
          }

          parts[last] = parts[last].slice(0, -diff);
          other.raws.before = parts.join('\n');
        }
      });
    }

    /**
     * Remove unnecessary pefixes
     */
    remove(css, result) {
      // At-rules
      let resolution = this.prefixes.remove['@resolution'];

      css.walkAtRules((rule, i) => {
        if (this.prefixes.remove[`@${rule.name}`]) {
          if (!this.disabled(rule, result)) {
            rule.parent.removeChild(i);
          }
        } else if (
          rule.name === 'media' &&
          rule.params.includes('-resolution') &&
          resolution
        ) {
          resolution.clean(rule);
        }
      });

      // Selectors
      css.walkRules((rule, i) => {
        if (this.disabled(rule, result)) return

        for (let checker of this.prefixes.remove.selectors) {
          if (checker.check(rule)) {
            rule.parent.removeChild(i);
            return
          }
        }
      });

      return css.walkDecls((decl, i) => {
        if (this.disabled(decl, result)) return

        let rule = decl.parent;
        let unprefixed = this.prefixes.unprefixed(decl.prop);

        // Transition
        if (decl.prop === 'transition' || decl.prop === 'transition-property') {
          this.prefixes.transition.remove(decl);
        }

        // Properties
        if (
          this.prefixes.remove[decl.prop] &&
          this.prefixes.remove[decl.prop].remove
        ) {
          let notHack = this.prefixes.group(decl).down(other => {
            return this.prefixes.normalize(other.prop) === unprefixed
          });

          if (unprefixed === 'flex-flow') {
            notHack = true;
          }

          if (decl.prop === '-webkit-box-orient') {
            let hacks = { 'flex-direction': true, 'flex-flow': true };
            if (!decl.parent.some(j => hacks[j.prop])) return
          }

          if (notHack && !this.withHackValue(decl)) {
            if (decl.raw('before').includes('\n')) {
              this.reduceSpaces(decl);
            }
            rule.removeChild(i);
            return
          }
        }

        // Values
        for (let checker of this.prefixes.values('remove', unprefixed)) {
          if (!checker.check) continue
          if (!checker.check(decl.value)) continue

          unprefixed = checker.unprefixed;
          let notHack = this.prefixes.group(decl).down(other => {
            return other.value.includes(unprefixed)
          });

          if (notHack) {
            rule.removeChild(i);
            return
          }
        }
      })
    }

    /**
     * Some rare old values, which is not in standard
     */
    withHackValue(decl) {
      return (
        (decl.prop === '-webkit-background-clip' && decl.value === 'text') ||
        // Do not remove -webkit-box-orient when -webkit-line-clamp is present.
        // https://github.com/postcss/autoprefixer/issues/1510
        (decl.prop === '-webkit-box-orient' &&
          decl.parent.some(d => d.prop === '-webkit-line-clamp'))
      )
    }
  }

  var processor = Processor;

  var cssFeaturequeries={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G A B C L M H N O P HB v w eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB"},E:{"1":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E F gC KC hC iC jC"},F:{"1":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 8B","2":"G B C rC sC tC uC 7B ZC vC"},G:{"1":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F KC wC aC xC yC zC 0C"},H:{"1":"ID"},I:{"1":"D ND OD","2":"DC J JD KD LD MD aC"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS Feature Queries",D:true};

  var statuses = {
    1: 'ls', // WHATWG Living Standard
    2: 'rec', // W3C Recommendation
    3: 'pr', // W3C Proposed Recommendation
    4: 'cr', // W3C Candidate Recommendation
    5: 'wd', // W3C Working Draft
    6: 'other', // Non-W3C, but reputable
    7: 'unoff' // Unofficial, Editor's Draft or W3C "Note"
  };

  var supported$1 = {
    y: 1 << 0,
    n: 1 << 1,
    a: 1 << 2,
    p: 1 << 3,
    u: 1 << 4,
    x: 1 << 5,
    d: 1 << 6
  };

  const browsers = browsers$3.browsers;
  const versions = browserVersions.browserVersions;

  const MATH2LOG = Math.log(2);

  function unpackSupport(cipher) {
    // bit flags
    let stats = Object.keys(supported$1).reduce((list, support) => {
      if (cipher & supported$1[support]) list.push(support);
      return list
    }, []);

    // notes
    let notes = cipher >> 7;
    let notesArray = [];
    while (notes) {
      let note = Math.floor(Math.log(notes) / MATH2LOG) + 1;
      notesArray.unshift(`#${note}`);
      notes -= Math.pow(2, note - 1);
    }

    return stats.concat(notesArray).join(' ')
  }

  function unpackFeature(packed) {
    let unpacked = {
      status: statuses[packed.B],
      title: packed.C,
      shown: packed.D
    };
    unpacked.stats = Object.keys(packed.A).reduce((browserStats, key) => {
      let browser = packed.A[key];
      browserStats[browsers[key]] = Object.keys(browser).reduce(
        (stats, support) => {
          let packedVersions = browser[support].split(' ');
          let unpacked2 = unpackSupport(support);
          packedVersions.forEach(v => (stats[versions[v]] = unpacked2));
          return stats
        },
        {}
      );
      return browserStats
    }, {});
    return unpacked
  }

  var feature = unpackFeature;
  var _default = unpackFeature;
  feature.default = _default;

  function last(array) {
    return array[array.length - 1]
  }

  let brackets = {
    /**
     * Parse string to nodes tree
     */
    parse(str) {
      let current = [''];
      let stack = [current];

      for (let sym of str) {
        if (sym === '(') {
          current = [''];
          last(stack).push(current);
          stack.push(current);
          continue
        }

        if (sym === ')') {
          stack.pop();
          current = last(stack);
          current.push('');
          continue
        }

        current[current.length - 1] += sym;
      }

      return stack[0]
    },

    /**
     * Generate output string by nodes tree
     */
    stringify(ast) {
      let result = '';
      for (let i of ast) {
        if (typeof i === 'object') {
          result += `(${brackets.stringify(i)})`;
          continue
        }

        result += i;
      }
      return result
    }
  };

  var brackets_1 = brackets;

  let { parse } = postcss_1;






  let data = feature(cssFeaturequeries);

  let supported = [];
  for (let browser in data.stats) {
    let versions = data.stats[browser];
    for (let version in versions) {
      let support = versions[version];
      if (/y/.test(support)) {
        supported.push(browser + ' ' + version);
      }
    }
  }

  class Supports {
    constructor(Prefixes, all) {
      this.Prefixes = Prefixes;
      this.all = all;
    }

    /**
     * Add prefixes
     */
    add(nodes, all) {
      return nodes.map(i => {
        if (this.isProp(i)) {
          let prefixed = this.prefixed(i[0]);
          if (prefixed.length > 1) {
            return this.convert(prefixed)
          }

          return i
        }

        if (typeof i === 'object') {
          return this.add(i, all)
        }

        return i
      })
    }

    /**
     * Clean brackets with one child
     */
    cleanBrackets(nodes) {
      return nodes.map(i => {
        if (typeof i !== 'object') {
          return i
        }

        if (i.length === 1 && typeof i[0] === 'object') {
          return this.cleanBrackets(i[0])
        }

        return this.cleanBrackets(i)
      })
    }

    /**
     * Add " or " between properties and convert it to brackets format
     */
    convert(progress) {
      let result = [''];
      for (let i of progress) {
        result.push([`${i.prop}: ${i.value}`]);
        result.push(' or ');
      }
      result[result.length - 1] = '';
      return result
    }

    /**
     * Check global options
     */
    disabled(node) {
      if (!this.all.options.grid) {
        if (node.prop === 'display' && node.value.includes('grid')) {
          return true
        }
        if (node.prop.includes('grid') || node.prop === 'justify-items') {
          return true
        }
      }

      if (this.all.options.flexbox === false) {
        if (node.prop === 'display' && node.value.includes('flex')) {
          return true
        }
        let other = ['order', 'justify-content', 'align-items', 'align-content'];
        if (node.prop.includes('flex') || other.includes(node.prop)) {
          return true
        }
      }

      return false
    }

    /**
     * Return true if prefixed property has no unprefixed
     */
    isHack(all, unprefixed) {
      let check = new RegExp(`(\\(|\\s)${utils.escapeRegexp(unprefixed)}:`);
      return !check.test(all)
    }

    /**
     * Return true if brackets node is "not" word
     */
    isNot(node) {
      return typeof node === 'string' && /not\s*/i.test(node)
    }

    /**
     * Return true if brackets node is "or" word
     */
    isOr(node) {
      return typeof node === 'string' && /\s*or\s*/i.test(node)
    }

    /**
     * Return true if brackets node is (prop: value)
     */
    isProp(node) {
      return (
        typeof node === 'object' &&
        node.length === 1 &&
        typeof node[0] === 'string'
      )
    }

    /**
     * Compress value functions into a string nodes
     */
    normalize(nodes) {
      if (typeof nodes !== 'object') {
        return nodes
      }

      nodes = nodes.filter(i => i !== '');

      if (typeof nodes[0] === 'string') {
        let firstNode = nodes[0].trim();

        if (
          firstNode.includes(':') ||
          firstNode === 'selector' ||
          firstNode === 'not selector'
        ) {
          return [brackets_1.stringify(nodes)]
        }
      }
      return nodes.map(i => this.normalize(i))
    }

    /**
     * Parse string into declaration property and value
     */
    parse(str) {
      let parts = str.split(':');
      let prop = parts[0];
      let value = parts[1];
      if (!value) value = '';
      return [prop.trim(), value.trim()]
    }

    /**
     * Return array of Declaration with all necessary prefixes
     */
    prefixed(str) {
      let rule = this.virtual(str);
      if (this.disabled(rule.first)) {
        return rule.nodes
      }

      let result = { warn: () => null };

      let prefixer = this.prefixer().add[rule.first.prop];
      prefixer && prefixer.process && prefixer.process(rule.first, result);

      for (let decl of rule.nodes) {
        for (let value of this.prefixer().values('add', rule.first.prop)) {
          value.process(decl);
        }
        value.save(this.all, decl);
      }

      return rule.nodes
    }

    /**
     * Return prefixer only with @supports supported browsers
     */
    prefixer() {
      if (this.prefixerCache) {
        return this.prefixerCache
      }

      let filtered = this.all.browsers.selected.filter(i => {
        return supported.includes(i)
      });

      let browsers = new browsers$1(
        this.all.browsers.data,
        filtered,
        this.all.options
      );
      this.prefixerCache = new this.Prefixes(
        this.all.data,
        browsers,
        this.all.options
      );
      return this.prefixerCache
    }

    /**
     * Add prefixed declaration
     */
    process(rule) {
      let ast = brackets_1.parse(rule.params);
      ast = this.normalize(ast);
      ast = this.remove(ast, rule.params);
      ast = this.add(ast, rule.params);
      ast = this.cleanBrackets(ast);
      rule.params = brackets_1.stringify(ast);
    }

    /**
     * Remove all unnecessary prefixes
     */
    remove(nodes, all) {
      let i = 0;
      while (i < nodes.length) {
        if (
          !this.isNot(nodes[i - 1]) &&
          this.isProp(nodes[i]) &&
          this.isOr(nodes[i + 1])
        ) {
          if (this.toRemove(nodes[i][0], all)) {
            nodes.splice(i, 2);
            continue
          }

          i += 2;
          continue
        }

        if (typeof nodes[i] === 'object') {
          nodes[i] = this.remove(nodes[i], all);
        }

        i += 1;
      }
      return nodes
    }

    /**
     * Return true if we need to remove node
     */
    toRemove(str, all) {
      let [prop, value] = this.parse(str);
      let unprefixed = this.all.unprefixed(prop);

      let cleaner = this.all.cleaner();

      if (
        cleaner.remove[prop] &&
        cleaner.remove[prop].remove &&
        !this.isHack(all, unprefixed)
      ) {
        return true
      }

      for (let checker of cleaner.values('remove', unprefixed)) {
        if (checker.check(value)) {
          return true
        }
      }

      return false
    }

    /**
     * Create virtual rule to process it by prefixer
     */
    virtual(str) {
      let [prop, value] = this.parse(str);
      let rule = parse('a{}').first;
      rule.append({ prop, raws: { before: '' }, value });
      return rule
    }
  }

  var supports = Supports;

  class OldSelector {
    constructor(selector, prefix) {
      this.prefix = prefix;
      this.prefixed = selector.prefixed(this.prefix);
      this.regexp = selector.regexp(this.prefix);

      this.prefixeds = selector
        .possible()
        .map(x => [selector.prefixed(x), selector.regexp(x)]);

      this.unprefixed = selector.name;
      this.nameRegexp = selector.regexp();
    }

    /**
     * Does rule contain an unnecessary prefixed selector
     */
    check(rule) {
      if (!rule.selector.includes(this.prefixed)) {
        return false
      }
      if (!rule.selector.match(this.regexp)) {
        return false
      }
      if (this.isHack(rule)) {
        return false
      }
      return true
    }

    /**
     * Is rule a hack without unprefixed version bottom
     */
    isHack(rule) {
      let index = rule.parent.index(rule) + 1;
      let rules = rule.parent.nodes;

      while (index < rules.length) {
        let before = rules[index].selector;
        if (!before) {
          return true
        }

        if (before.includes(this.unprefixed) && before.match(this.nameRegexp)) {
          return false
        }

        let some = false;
        for (let [string, regexp] of this.prefixeds) {
          if (before.includes(string) && before.match(regexp)) {
            some = true;
            break
          }
        }

        if (!some) {
          return true
        }

        index += 1;
      }

      return true
    }
  }

  var oldSelector = OldSelector;

  let { list: list$2 } = postcss_1;






  class Selector extends prefixer {
    constructor(name, prefixes, all) {
      super(name, prefixes, all);
      this.regexpCache = new Map();
    }

    /**
     * Clone and add prefixes for at-rule
     */
    add(rule, prefix) {
      let prefixeds = this.prefixeds(rule);

      if (this.already(rule, prefixeds, prefix)) {
        return
      }

      let cloned = this.clone(rule, { selector: prefixeds[this.name][prefix] });
      rule.parent.insertBefore(rule, cloned);
    }

    /**
     * Is rule already prefixed before
     */
    already(rule, prefixeds, prefix) {
      let index = rule.parent.index(rule) - 1;

      while (index >= 0) {
        let before = rule.parent.nodes[index];

        if (before.type !== 'rule') {
          return false
        }

        let some = false;
        for (let key in prefixeds[this.name]) {
          let prefixed = prefixeds[this.name][key];
          if (before.selector === prefixed) {
            if (prefix === key) {
              return true
            } else {
              some = true;
              break
            }
          }
        }
        if (!some) {
          return false
        }

        index -= 1;
      }

      return false
    }

    /**
     * Is rule selectors need to be prefixed
     */
    check(rule) {
      if (rule.selector.includes(this.name)) {
        return !!rule.selector.match(this.regexp())
      }

      return false
    }

    /**
     * Return function to fast find prefixed selector
     */
    old(prefix) {
      return new oldSelector(this, prefix)
    }

    /**
     * All possible prefixes
     */
    possible() {
      return browsers$1.prefixes()
    }

    /**
     * Return prefixed version of selector
     */
    prefixed(prefix) {
      return this.name.replace(/^(\W*)/, `$1${prefix}`)
    }

    /**
     * Return all possible selector prefixes
     */
    prefixeds(rule) {
      if (rule._autoprefixerPrefixeds) {
        if (rule._autoprefixerPrefixeds[this.name]) {
          return rule._autoprefixerPrefixeds
        }
      } else {
        rule._autoprefixerPrefixeds = {};
      }

      let prefixeds = {};
      if (rule.selector.includes(',')) {
        let ruleParts = list$2.comma(rule.selector);
        let toProcess = ruleParts.filter(el => el.includes(this.name));

        for (let prefix of this.possible()) {
          prefixeds[prefix] = toProcess
            .map(el => this.replace(el, prefix))
            .join(', ');
        }
      } else {
        for (let prefix of this.possible()) {
          prefixeds[prefix] = this.replace(rule.selector, prefix);
        }
      }

      rule._autoprefixerPrefixeds[this.name] = prefixeds;
      return rule._autoprefixerPrefixeds
    }

    /**
     * Lazy loadRegExp for name
     */
    regexp(prefix) {
      if (!this.regexpCache.has(prefix)) {
        let name = prefix ? this.prefixed(prefix) : this.name;
        this.regexpCache.set(
          prefix,
          new RegExp(`(^|[^:"'=])${utils.escapeRegexp(name)}`, 'gi')
        );
      }

      return this.regexpCache.get(prefix)
    }

    /**
     * Replace selectors by prefixed one
     */
    replace(selector, prefix) {
      return selector.replace(this.regexp(), `$1${this.prefixed(prefix)}`)
    }
  }

  var selector = Selector;

  class AtRule extends prefixer {
    /**
     * Clone and add prefixes for at-rule
     */
    add(rule, prefix) {
      let prefixed = prefix + rule.name;

      let already = rule.parent.some(
        i => i.name === prefixed && i.params === rule.params
      );
      if (already) {
        return undefined
      }

      let cloned = this.clone(rule, { name: prefixed });
      return rule.parent.insertBefore(rule, cloned)
    }

    /**
     * Clone node with prefixes
     */
    process(node) {
      let parent = this.parentPrefix(node);

      for (let prefix of this.prefixes) {
        if (!parent || parent === prefix) {
          this.add(node, prefix);
        }
      }
    }
  }

  var atRule = AtRule;

  class Fullscreen extends selector {
    /**
     * Return different selectors depend on prefix
     */
    prefixed(prefix) {
      if (prefix === '-webkit-') {
        return ':-webkit-full-screen'
      }
      if (prefix === '-moz-') {
        return ':-moz-full-screen'
      }
      return `:${prefix}fullscreen`
    }
  }

  Fullscreen.names = [':fullscreen'];

  var fullscreen$1 = Fullscreen;

  class Placeholder extends selector {
    /**
     * Add old mozilla to possible prefixes
     */
    possible() {
      return super.possible().concat(['-moz- old', '-ms- old'])
    }

    /**
     * Return different selectors depend on prefix
     */
    prefixed(prefix) {
      if (prefix === '-webkit-') {
        return '::-webkit-input-placeholder'
      }
      if (prefix === '-ms-') {
        return '::-ms-input-placeholder'
      }
      if (prefix === '-ms- old') {
        return ':-ms-input-placeholder'
      }
      if (prefix === '-moz- old') {
        return ':-moz-placeholder'
      }
      return `::${prefix}placeholder`
    }
  }

  Placeholder.names = ['::placeholder'];

  var placeholder = Placeholder;

  class PlaceholderShown extends selector {
    /**
     * Return different selectors depend on prefix
     */
    prefixed(prefix) {
      if (prefix === '-ms-') {
        return ':-ms-input-placeholder'
      }
      return `:${prefix}placeholder-shown`
    }
  }

  PlaceholderShown.names = [':placeholder-shown'];

  var placeholderShown = PlaceholderShown;

  class FileSelectorButton extends selector {
    constructor(name, prefixes, all) {
      super(name, prefixes, all);

      if (this.prefixes) {
        this.prefixes = utils.uniq(this.prefixes.map(() => '-webkit-'));
      }
    }

    /**
     * Return different selectors depend on prefix
     */
    prefixed(prefix) {
      if (prefix === '-webkit-') {
        return '::-webkit-file-upload-button'
      }
      return `::${prefix}file-selector-button`
    }
  }

  FileSelectorButton.names = ['::file-selector-button'];

  var fileSelectorButton = FileSelectorButton;

  /**
   * Return flexbox spec versions by prefix
   */
  var flexSpec = function (prefix) {
    let spec;
    if (prefix === '-webkit- 2009' || prefix === '-moz-') {
      spec = 2009;
    } else if (prefix === '-ms-') {
      spec = 2012;
    } else if (prefix === '-webkit-') {
      spec = 'final';
    }

    if (prefix === '-webkit- 2009') {
      prefix = '-webkit-';
    }

    return [spec, prefix]
  };

  let list$1 = postcss_1.list;




  class Flex$1 extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return 'flex'
    }

    /**
     * Change property name for 2009 spec
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-flex'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Spec 2009 supports only first argument
     * Spec 2012 disallows unitless basis
     */
    set(decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2009) {
        decl.value = list$1.space(decl.value)[0];
        decl.value = Flex$1.oldValues[decl.value] || decl.value;
        return super.set(decl, prefix)
      }
      if (spec === 2012) {
        let components = list$1.space(decl.value);
        if (components.length === 3 && components[2] === '0') {
          decl.value = components.slice(0, 2).concat('0px').join(' ');
        }
      }
      return super.set(decl, prefix)
    }
  }

  Flex$1.names = ['flex', 'box-flex'];

  Flex$1.oldValues = {
    auto: '1',
    none: '0'
  };

  var flex = Flex$1;

  class Order extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return 'order'
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-ordinal-group'
      }
      if (spec === 2012) {
        return prefix + 'flex-order'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Fix value for 2009 spec
     */
    set(decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2009 && /\d/.test(decl.value)) {
        decl.value = (parseInt(decl.value) + 1).toString();
        return super.set(decl, prefix)
      }
      return super.set(decl, prefix)
    }
  }

  Order.names = ['order', 'flex-order', 'box-ordinal-group'];

  var order = Order;

  class Filter extends declaration {
    /**
     * Check is it Internet Explorer filter
     */
    check(decl) {
      let v = decl.value;
      return (
        !v.toLowerCase().includes('alpha(') &&
        !v.includes('DXImageTransform.Microsoft') &&
        !v.includes('data:image/svg+xml')
      )
    }
  }

  Filter.names = ['filter'];

  var filter = Filter;

  let { isPureNumber } = utils;

  class GridEnd extends declaration {
    /**
     * Change repeating syntax for IE
     */
    insert(decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let clonedDecl = this.clone(decl);

      let startProp = decl.prop.replace(/end$/, 'start');
      let spanProp = prefix + decl.prop.replace(/end$/, 'span');

      if (decl.parent.some(i => i.prop === spanProp)) {
        return undefined
      }

      clonedDecl.prop = spanProp;

      if (decl.value.includes('span')) {
        clonedDecl.value = decl.value.replace(/span\s/i, '');
      } else {
        let startDecl;
        decl.parent.walkDecls(startProp, d => {
          startDecl = d;
        });
        if (startDecl) {
          if (isPureNumber(startDecl.value)) {
            let value = Number(decl.value) - Number(startDecl.value) + '';
            clonedDecl.value = value;
          } else {
            return undefined
          }
        } else {
          decl.warn(
            result,
            `Can not prefix ${decl.prop} (${startProp} is not found)`
          );
        }
      }

      decl.cloneBefore(clonedDecl);

      return undefined
    }
  }

  GridEnd.names = ['grid-row-end', 'grid-column-end'];

  var gridEnd = GridEnd;

  class Animation extends declaration {
    /**
     * Don’t add prefixes for modern values.
     */
    check(decl) {
      return !decl.value.split(/\s+/).some(i => {
        let lower = i.toLowerCase();
        return lower === 'reverse' || lower === 'alternate-reverse'
      })
    }
  }

  Animation.names = ['animation', 'animation-direction'];

  var animation = Animation;

  class FlexFlow extends declaration {
    /**
     * Use two properties for 2009 spec
     */
    insert(decl, prefix, prefixes) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec !== 2009) {
        return super.insert(decl, prefix, prefixes)
      }
      let values = decl.value
        .split(/\s+/)
        .filter(i => i !== 'wrap' && i !== 'nowrap' && 'wrap-reverse');
      if (values.length === 0) {
        return undefined
      }

      let already = decl.parent.some(
        i =>
          i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction'
      );
      if (already) {
        return undefined
      }

      let value = values[0];
      let orient = value.includes('row') ? 'horizontal' : 'vertical';
      let dir = value.includes('reverse') ? 'reverse' : 'normal';

      let cloned = this.clone(decl);
      cloned.prop = prefix + 'box-orient';
      cloned.value = orient;
      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      decl.parent.insertBefore(decl, cloned);

      cloned = this.clone(decl);
      cloned.prop = prefix + 'box-direction';
      cloned.value = dir;
      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, cloned)
    }
  }

  FlexFlow.names = ['flex-flow', 'box-direction', 'box-orient'];

  var flexFlow = FlexFlow;

  class Flex extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return 'flex'
    }

    /**
     * Return flex property for 2009 and 2012 specs
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-flex'
      }
      if (spec === 2012) {
        return prefix + 'flex-positive'
      }
      return super.prefixed(prop, prefix)
    }
  }

  Flex.names = ['flex-grow', 'flex-positive'];

  var flexGrow = Flex;

  class FlexWrap extends declaration {
    /**
     * Don't add prefix for 2009 spec
     */
    set(decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec !== 2009) {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  FlexWrap.names = ['flex-wrap'];

  var flexWrap = FlexWrap;

  class GridArea extends declaration {
    /**
     * Translate grid-area to separate -ms- prefixed properties
     */
    insert(decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let values = gridUtils.parse(decl);

      let [rowStart, rowSpan] = gridUtils.translate(values, 0, 2);
      let [columnStart, columnSpan] = gridUtils.translate(values, 1, 3)

      ;[
        ['grid-row', rowStart],
        ['grid-row-span', rowSpan],
        ['grid-column', columnStart],
        ['grid-column-span', columnSpan]
      ].forEach(([prop, value]) => {
        gridUtils.insertDecl(decl, prop, value);
      });

      gridUtils.warnTemplateSelectorNotFound(decl, result);
      gridUtils.warnIfGridRowColumnExists(decl, result);

      return undefined
    }
  }

  GridArea.names = ['grid-area'];

  var gridArea = GridArea;

  class PlaceSelf extends declaration {
    /**
     * Translate place-self to separate -ms- prefixed properties
     */
    insert(decl, prefix, prefixes) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      // prevent doubling of prefixes
      if (decl.parent.some(i => i.prop === '-ms-grid-row-align')) {
        return undefined
      }

      let [[first, second]] = gridUtils.parse(decl);

      if (second) {
        gridUtils.insertDecl(decl, 'grid-row-align', first);
        gridUtils.insertDecl(decl, 'grid-column-align', second);
      } else {
        gridUtils.insertDecl(decl, 'grid-row-align', first);
        gridUtils.insertDecl(decl, 'grid-column-align', first);
      }

      return undefined
    }
  }

  PlaceSelf.names = ['place-self'];

  var placeSelf = PlaceSelf;

  class GridStart extends declaration {
    /**
     * Do not add prefix for unsupported value in IE
     */
    check(decl) {
      let value = decl.value;
      return !value.includes('/') && !value.includes('span')
    }

    /**
     * Return a final spec property
     */
    normalize(prop) {
      return prop.replace('-start', '')
    }

    /**
     * Change property name for IE
     */
    prefixed(prop, prefix) {
      let result = super.prefixed(prop, prefix);
      if (prefix === '-ms-') {
        result = result.replace('-start', '');
      }
      return result
    }
  }

  GridStart.names = ['grid-row-start', 'grid-column-start'];

  var gridStart = GridStart;

  class AlignSelf extends declaration {
    check(decl) {
      return (
        decl.parent &&
        !decl.parent.some(i => {
          return i.prop && i.prop.startsWith('grid-')
        })
      )
    }

    /**
     * Return property name by final spec
     */
    normalize() {
      return 'align-self'
    }

    /**
     * Change property name for 2012 specs
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012) {
        return prefix + 'flex-item-align'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Change value for 2012 spec and ignore prefix for 2009
     */
    set(decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2012) {
        decl.value = AlignSelf.oldValues[decl.value] || decl.value;
        return super.set(decl, prefix)
      }
      if (spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  AlignSelf.names = ['align-self', 'flex-item-align'];

  AlignSelf.oldValues = {
    'flex-end': 'end',
    'flex-start': 'start'
  };

  var alignSelf = AlignSelf;

  class Appearance extends declaration {
    constructor(name, prefixes, all) {
      super(name, prefixes, all);

      if (this.prefixes) {
        this.prefixes = utils.uniq(
          this.prefixes.map(i => {
            if (i === '-ms-') {
              return '-webkit-'
            }
            return i
          })
        );
      }
    }
  }

  Appearance.names = ['appearance'];

  var appearance = Appearance;

  class FlexBasis extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return 'flex-basis'
    }

    /**
     * Return flex property for 2012 spec
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012) {
        return prefix + 'flex-preferred-size'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Ignore 2009 spec and use flex property for 2012
     */
    set(decl, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012 || spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  FlexBasis.names = ['flex-basis', 'flex-preferred-size'];

  var flexBasis = FlexBasis;

  class MaskBorder extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return this.name.replace('box-image', 'border')
    }

    /**
     * Return flex property for 2012 spec
     */
    prefixed(prop, prefix) {
      let result = super.prefixed(prop, prefix);
      if (prefix === '-webkit-') {
        result = result.replace('border', 'box-image');
      }
      return result
    }
  }

  MaskBorder.names = [
    'mask-border',
    'mask-border-source',
    'mask-border-slice',
    'mask-border-width',
    'mask-border-outset',
    'mask-border-repeat',
    'mask-box-image',
    'mask-box-image-source',
    'mask-box-image-slice',
    'mask-box-image-width',
    'mask-box-image-outset',
    'mask-box-image-repeat'
  ];

  var maskBorder = MaskBorder;

  class MaskComposite extends declaration {
    /**
     * Prefix mask-composite for webkit
     */
    insert(decl, prefix, prefixes) {
      let isCompositeProp = decl.prop === 'mask-composite';

      let compositeValues;

      if (isCompositeProp) {
        compositeValues = decl.value.split(',');
      } else {
        compositeValues = decl.value.match(MaskComposite.regexp) || [];
      }

      compositeValues = compositeValues.map(el => el.trim()).filter(el => el);
      let hasCompositeValues = compositeValues.length;

      let compositeDecl;

      if (hasCompositeValues) {
        compositeDecl = this.clone(decl);
        compositeDecl.value = compositeValues
          .map(value => MaskComposite.oldValues[value] || value)
          .join(', ');

        if (compositeValues.includes('intersect')) {
          compositeDecl.value += ', xor';
        }

        compositeDecl.prop = prefix + 'mask-composite';
      }

      if (isCompositeProp) {
        if (!hasCompositeValues) {
          return undefined
        }

        if (this.needCascade(decl)) {
          compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);
        }

        return decl.parent.insertBefore(decl, compositeDecl)
      }

      let cloned = this.clone(decl);
      cloned.prop = prefix + cloned.prop;

      if (hasCompositeValues) {
        cloned.value = cloned.value.replace(MaskComposite.regexp, '');
      }

      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }

      decl.parent.insertBefore(decl, cloned);

      if (!hasCompositeValues) {
        return decl
      }

      if (this.needCascade(decl)) {
        compositeDecl.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, compositeDecl)
    }
  }

  MaskComposite.names = ['mask', 'mask-composite'];

  MaskComposite.oldValues = {
    add: 'source-over',
    exclude: 'xor',
    intersect: 'source-in',
    subtract: 'source-out'
  };

  MaskComposite.regexp = new RegExp(
    `\\s+(${Object.keys(MaskComposite.oldValues).join(
    '|'
  )})\\b(?!\\))\\s*(?=[,])`,
    'ig'
  );

  var maskComposite = MaskComposite;

  class AlignItems extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return 'align-items'
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-align'
      }
      if (spec === 2012) {
        return prefix + 'flex-align'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Change value for 2009 and 2012 specs
     */
    set(decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2009 || spec === 2012) {
        decl.value = AlignItems.oldValues[decl.value] || decl.value;
      }
      return super.set(decl, prefix)
    }
  }

  AlignItems.names = ['align-items', 'flex-align', 'box-align'];

  AlignItems.oldValues = {
    'flex-end': 'end',
    'flex-start': 'start'
  };

  var alignItems = AlignItems;

  class UserSelect extends declaration {
    /**
     * Avoid prefixing all in IE
     */
    insert(decl, prefix, prefixes) {
      if (decl.value === 'all' && prefix === '-ms-') {
        return undefined
      } else if (
        decl.value === 'contain' &&
        (prefix === '-moz-' || prefix === '-webkit-')
      ) {
        return undefined
      } else {
        return super.insert(decl, prefix, prefixes)
      }
    }

    /**
     * Change prefixed value for IE
     */
    set(decl, prefix) {
      if (prefix === '-ms-' && decl.value === 'contain') {
        decl.value = 'element';
      }
      return super.set(decl, prefix)
    }
  }

  UserSelect.names = ['user-select'];

  var userSelect = UserSelect;

  class FlexShrink extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return 'flex-shrink'
    }

    /**
     * Return flex property for 2012 spec
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012) {
        return prefix + 'flex-negative'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Ignore 2009 spec and use flex property for 2012
     */
    set(decl, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012 || spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  FlexShrink.names = ['flex-shrink', 'flex-negative'];

  var flexShrink = FlexShrink;

  class BreakProps extends declaration {
    /**
     * Don’t prefix some values
     */
    insert(decl, prefix, prefixes) {
      if (decl.prop !== 'break-inside') {
        return super.insert(decl, prefix, prefixes)
      }
      if (/region/i.test(decl.value) || /page/i.test(decl.value)) {
        return undefined
      }
      return super.insert(decl, prefix, prefixes)
    }

    /**
     * Return property name by final spec
     */
    normalize(prop) {
      if (prop.includes('inside')) {
        return 'break-inside'
      }
      if (prop.includes('before')) {
        return 'break-before'
      }
      return 'break-after'
    }

    /**
     * Change name for -webkit- and -moz- prefix
     */
    prefixed(prop, prefix) {
      return `${prefix}column-${prop}`
    }

    /**
     * Change prefixed value for avoid-column and avoid-page
     */
    set(decl, prefix) {
      if (
        (decl.prop === 'break-inside' && decl.value === 'avoid-column') ||
        decl.value === 'avoid-page'
      ) {
        decl.value = 'avoid';
      }
      return super.set(decl, prefix)
    }
  }

  BreakProps.names = [
    'break-inside',
    'page-break-inside',
    'column-break-inside',
    'break-before',
    'page-break-before',
    'column-break-before',
    'break-after',
    'page-break-after',
    'column-break-after'
  ];

  var breakProps = BreakProps;

  class WritingMode extends declaration {
    insert(decl, prefix, prefixes) {
      if (prefix === '-ms-') {
        let cloned = this.set(this.clone(decl), prefix);

        if (this.needCascade(decl)) {
          cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        let direction = 'ltr';

        decl.parent.nodes.forEach(i => {
          if (i.prop === 'direction') {
            if (i.value === 'rtl' || i.value === 'ltr') direction = i.value;
          }
        });

        cloned.value = WritingMode.msValues[direction][decl.value] || decl.value;
        return decl.parent.insertBefore(decl, cloned)
      }

      return super.insert(decl, prefix, prefixes)
    }
  }

  WritingMode.names = ['writing-mode'];

  WritingMode.msValues = {
    ltr: {
      'horizontal-tb': 'lr-tb',
      'vertical-lr': 'tb-lr',
      'vertical-rl': 'tb-rl'
    },
    rtl: {
      'horizontal-tb': 'rl-tb',
      'vertical-lr': 'bt-lr',
      'vertical-rl': 'bt-rl'
    }
  };

  var writingMode = WritingMode;

  class BorderImage extends declaration {
    /**
     * Remove fill parameter for prefixed declarations
     */
    set(decl, prefix) {
      decl.value = decl.value.replace(/\s+fill(\s)/, '$1');
      return super.set(decl, prefix)
    }
  }

  BorderImage.names = ['border-image'];

  var borderImage$1 = BorderImage;

  class AlignContent extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return 'align-content'
    }

    /**
     * Change property name for 2012 spec
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2012) {
        return prefix + 'flex-line-pack'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Change value for 2012 spec and ignore prefix for 2009
     */
    set(decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2012) {
        decl.value = AlignContent.oldValues[decl.value] || decl.value;
        return super.set(decl, prefix)
      }
      if (spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  AlignContent.names = ['align-content', 'flex-line-pack'];

  AlignContent.oldValues = {
    'flex-end': 'end',
    'flex-start': 'start',
    'space-around': 'distribute',
    'space-between': 'justify'
  };

  var alignContent = AlignContent;

  class BorderRadius extends declaration {
    /**
     * Return unprefixed version of property
     */
    normalize(prop) {
      return BorderRadius.toNormal[prop] || prop
    }

    /**
     * Change syntax, when add Mozilla prefix
     */
    prefixed(prop, prefix) {
      if (prefix === '-moz-') {
        return prefix + (BorderRadius.toMozilla[prop] || prop)
      }
      return super.prefixed(prop, prefix)
    }
  }

  BorderRadius.names = ['border-radius'];

  BorderRadius.toMozilla = {};
  BorderRadius.toNormal = {};

  for (let ver of ['top', 'bottom']) {
    for (let hor of ['left', 'right']) {
      let normal = `border-${ver}-${hor}-radius`;
      let mozilla = `border-radius-${ver}${hor}`;

      BorderRadius.names.push(normal);
      BorderRadius.names.push(mozilla);

      BorderRadius.toMozilla[normal] = mozilla;
      BorderRadius.toNormal[mozilla] = normal;
    }
  }

  var borderRadius$1 = BorderRadius;

  class BlockLogical extends declaration {
    /**
     * Return property name by spec
     */
    normalize(prop) {
      if (prop.includes('-before')) {
        return prop.replace('-before', '-block-start')
      }
      return prop.replace('-after', '-block-end')
    }

    /**
     * Use old syntax for -moz- and -webkit-
     */
    prefixed(prop, prefix) {
      if (prop.includes('-start')) {
        return prefix + prop.replace('-block-start', '-before')
      }
      return prefix + prop.replace('-block-end', '-after')
    }
  }

  BlockLogical.names = [
    'border-block-start',
    'border-block-end',
    'margin-block-start',
    'margin-block-end',
    'padding-block-start',
    'padding-block-end',
    'border-before',
    'border-after',
    'margin-before',
    'margin-after',
    'padding-before',
    'padding-after'
  ];

  var blockLogical = BlockLogical;

  let {
    getGridGap: getGridGap$2,
    inheritGridGap: inheritGridGap$2,
    parseTemplate,
    warnGridGap: warnGridGap$1,
    warnMissedAreas: warnMissedAreas$1
  } = gridUtils;

  class GridTemplate extends declaration {
    /**
     * Translate grid-template to separate -ms- prefixed properties
     */
    insert(decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      if (decl.parent.some(i => i.prop === '-ms-grid-rows')) {
        return undefined
      }

      let gap = getGridGap$2(decl);

      /**
       * we must insert inherited gap values in some cases:
       * if we are inside media query && if we have no grid-gap value
       */
      let inheritedGap = inheritGridGap$2(decl, gap);

      let { areas, columns, rows } = parseTemplate({
        decl,
        gap: inheritedGap || gap
      });

      let hasAreas = Object.keys(areas).length > 0;
      let hasRows = Boolean(rows);
      let hasColumns = Boolean(columns);

      warnGridGap$1({
        decl,
        gap,
        hasColumns,
        result
      });

      warnMissedAreas$1(areas, decl, result);

      if ((hasRows && hasColumns) || hasAreas) {
        decl.cloneBefore({
          prop: '-ms-grid-rows',
          raws: {},
          value: rows
        });
      }

      if (hasColumns) {
        decl.cloneBefore({
          prop: '-ms-grid-columns',
          raws: {},
          value: columns
        });
      }

      return decl
    }
  }

  GridTemplate.names = ['grid-template'];

  var gridTemplate = GridTemplate;

  class InlineLogical extends declaration {
    /**
     * Return property name by spec
     */
    normalize(prop) {
      return prop.replace(/(margin|padding|border)-(start|end)/, '$1-inline-$2')
    }

    /**
     * Use old syntax for -moz- and -webkit-
     */
    prefixed(prop, prefix) {
      return prefix + prop.replace('-inline', '')
    }
  }

  InlineLogical.names = [
    'border-inline-start',
    'border-inline-end',
    'margin-inline-start',
    'margin-inline-end',
    'padding-inline-start',
    'padding-inline-end',
    'border-start',
    'border-end',
    'margin-start',
    'margin-end',
    'padding-start',
    'padding-end'
  ];

  var inlineLogical = InlineLogical;

  class GridRowAlign extends declaration {
    /**
     * Do not prefix flexbox values
     */
    check(decl) {
      return !decl.value.includes('flex-') && decl.value !== 'baseline'
    }

    /**
     * Change IE property back
     */
    normalize() {
      return 'align-self'
    }

    /**
     * Change property name for IE
     */
    prefixed(prop, prefix) {
      return prefix + 'grid-row-align'
    }
  }

  GridRowAlign.names = ['grid-row-align'];

  var gridRowAlign = GridRowAlign;

  class TransformDecl extends declaration {
    /**
     * Is transform contain 3D commands
     */
    contain3d(decl) {
      if (decl.prop === 'transform-origin') {
        return false
      }

      for (let func of TransformDecl.functions3d) {
        if (decl.value.includes(`${func}(`)) {
          return true
        }
      }

      return false
    }

    /**
     * Don't add prefix for IE in keyframes
     */
    insert(decl, prefix, prefixes) {
      if (prefix === '-ms-') {
        if (!this.contain3d(decl) && !this.keyframeParents(decl)) {
          return super.insert(decl, prefix, prefixes)
        }
      } else if (prefix === '-o-') {
        if (!this.contain3d(decl)) {
          return super.insert(decl, prefix, prefixes)
        }
      } else {
        return super.insert(decl, prefix, prefixes)
      }
      return undefined
    }

    /**
     * Recursively check all parents for @keyframes
     */
    keyframeParents(decl) {
      let { parent } = decl;
      while (parent) {
        if (parent.type === 'atrule' && parent.name === 'keyframes') {
          return true
        }
  ({ parent } = parent);
      }
      return false
    }

    /**
     * Replace rotateZ to rotate for IE 9
     */
    set(decl, prefix) {
      decl = super.set(decl, prefix);
      if (prefix === '-ms-') {
        decl.value = decl.value.replace(/rotatez/gi, 'rotate');
      }
      return decl
    }
  }

  TransformDecl.names = ['transform', 'transform-origin'];

  TransformDecl.functions3d = [
    'matrix3d',
    'translate3d',
    'translateZ',
    'scale3d',
    'scaleZ',
    'rotate3d',
    'rotateX',
    'rotateY',
    'perspective'
  ];

  var transformDecl = TransformDecl;

  class FlexDirection extends declaration {
    /**
     * Use two properties for 2009 spec
     */
    insert(decl, prefix, prefixes) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec !== 2009) {
        return super.insert(decl, prefix, prefixes)
      }
      let already = decl.parent.some(
        i =>
          i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction'
      );
      if (already) {
        return undefined
      }

      let v = decl.value;
      let orient, dir;
      if (v === 'inherit' || v === 'initial' || v === 'unset') {
        orient = v;
        dir = v;
      } else {
        orient = v.includes('row') ? 'horizontal' : 'vertical';
        dir = v.includes('reverse') ? 'reverse' : 'normal';
      }

      let cloned = this.clone(decl);
      cloned.prop = prefix + 'box-orient';
      cloned.value = orient;
      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      decl.parent.insertBefore(decl, cloned);

      cloned = this.clone(decl);
      cloned.prop = prefix + 'box-direction';
      cloned.value = dir;
      if (this.needCascade(decl)) {
        cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
      }
      return decl.parent.insertBefore(decl, cloned)
    }

    /**
     * Return property name by final spec
     */
    normalize() {
      return 'flex-direction'
    }

    /**
     * Clean two properties for 2009 spec
     */
    old(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return [prefix + 'box-orient', prefix + 'box-direction']
      } else {
        return super.old(prop, prefix)
      }
    }
  }

  FlexDirection.names = ['flex-direction', 'box-direction', 'box-orient'];

  var flexDirection = FlexDirection;

  class ImageRendering extends declaration {
    /**
     * Add hack only for crisp-edges
     */
    check(decl) {
      return decl.value === 'pixelated'
    }

    /**
     * Return property name by spec
     */
    normalize() {
      return 'image-rendering'
    }

    /**
     * Change property name for IE
     */
    prefixed(prop, prefix) {
      if (prefix === '-ms-') {
        return '-ms-interpolation-mode'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Warn on old value
     */
    process(node, result) {
      return super.process(node, result)
    }

    /**
     * Change property and value for IE
     */
    set(decl, prefix) {
      if (prefix !== '-ms-') return super.set(decl, prefix)
      decl.prop = '-ms-interpolation-mode';
      decl.value = 'nearest-neighbor';
      return decl
    }
  }

  ImageRendering.names = ['image-rendering', 'interpolation-mode'];

  var imageRendering = ImageRendering;

  class BackdropFilter extends declaration {
    constructor(name, prefixes, all) {
      super(name, prefixes, all);

      if (this.prefixes) {
        this.prefixes = utils.uniq(
          this.prefixes.map(i => {
            return i === '-ms-' ? '-webkit-' : i
          })
        );
      }
    }
  }

  BackdropFilter.names = ['backdrop-filter'];

  var backdropFilter = BackdropFilter;

  class BackgroundClip extends declaration {
    constructor(name, prefixes, all) {
      super(name, prefixes, all);

      if (this.prefixes) {
        this.prefixes = utils.uniq(
          this.prefixes.map(i => {
            return i === '-ms-' ? '-webkit-' : i
          })
        );
      }
    }

    check(decl) {
      return decl.value.toLowerCase() === 'text'
    }
  }

  BackgroundClip.names = ['background-clip'];

  var backgroundClip = BackgroundClip;

  const BASIC = [
    'none',
    'underline',
    'overline',
    'line-through',
    'blink',
    'inherit',
    'initial',
    'unset'
  ];

  class TextDecoration extends declaration {
    /**
     * Do not add prefixes for basic values.
     */
    check(decl) {
      return decl.value.split(/\s+/).some(i => !BASIC.includes(i))
    }
  }

  TextDecoration.names = ['text-decoration'];

  var textDecoration$1 = TextDecoration;

  class JustifyContent extends declaration {
    /**
     * Return property name by final spec
     */
    normalize() {
      return 'justify-content'
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    prefixed(prop, prefix) {
      let spec
      ;[spec, prefix] = flexSpec(prefix);
      if (spec === 2009) {
        return prefix + 'box-pack'
      }
      if (spec === 2012) {
        return prefix + 'flex-pack'
      }
      return super.prefixed(prop, prefix)
    }

    /**
     * Change value for 2009 and 2012 specs
     */
    set(decl, prefix) {
      let spec = flexSpec(prefix)[0];
      if (spec === 2009 || spec === 2012) {
        let value = JustifyContent.oldValues[decl.value] || decl.value;
        decl.value = value;
        if (spec !== 2009 || value !== 'distribute') {
          return super.set(decl, prefix)
        }
      } else if (spec === 'final') {
        return super.set(decl, prefix)
      }
      return undefined
    }
  }

  JustifyContent.names = ['justify-content', 'flex-pack', 'box-pack'];

  JustifyContent.oldValues = {
    'flex-end': 'end',
    'flex-start': 'start',
    'space-around': 'distribute',
    'space-between': 'justify'
  };

  var justifyContent = JustifyContent;

  class BackgroundSize extends declaration {
    /**
     * Duplication parameter for -webkit- browsers
     */
    set(decl, prefix) {
      let value = decl.value.toLowerCase();
      if (
        prefix === '-webkit-' &&
        !value.includes(' ') &&
        value !== 'contain' &&
        value !== 'cover'
      ) {
        decl.value = decl.value + ' ' + decl.value;
      }
      return super.set(decl, prefix)
    }
  }

  BackgroundSize.names = ['background-size'];

  var backgroundSize = BackgroundSize;

  class GridRowColumn extends declaration {
    /**
     * Translate grid-row / grid-column to separate -ms- prefixed properties
     */
    insert(decl, prefix, prefixes) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let values = gridUtils.parse(decl);
      let [start, span] = gridUtils.translate(values, 0, 1);

      let hasStartValueSpan = values[0] && values[0].includes('span');

      if (hasStartValueSpan) {
        span = values[0].join('').replace(/\D/g, '');
      }
  [
        [decl.prop, start],
        [`${decl.prop}-span`, span]
      ].forEach(([prop, value]) => {
        gridUtils.insertDecl(decl, prop, value);
      });

      return undefined
    }
  }

  GridRowColumn.names = ['grid-row', 'grid-column'];

  var gridRowColumn = GridRowColumn;

  let {
    autoplaceGridItems,
    getGridGap: getGridGap$1,
    inheritGridGap: inheritGridGap$1,
    prefixTrackProp: prefixTrackProp$1,
    prefixTrackValue: prefixTrackValue$1
  } = gridUtils;


  class GridRowsColumns extends declaration {
    insert(decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let { parent, prop, value } = decl;
      let isRowProp = prop.includes('rows');
      let isColumnProp = prop.includes('columns');

      let hasGridTemplate = parent.some(
        i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'
      );

      /**
       * Not to prefix rows declaration if grid-template(-areas) is present
       */
      if (hasGridTemplate && isRowProp) {
        return false
      }

      let processor$1 = new processor({ options: {} });
      let status = processor$1.gridStatus(parent, result);
      let gap = getGridGap$1(decl);
      gap = inheritGridGap$1(decl, gap) || gap;

      let gapValue = isRowProp ? gap.row : gap.column;

      if ((status === 'no-autoplace' || status === true) && !hasGridTemplate) {
        gapValue = null;
      }

      let prefixValue = prefixTrackValue$1({
        gap: gapValue,
        value
      });

      /**
       * Insert prefixes
       */
      decl.cloneBefore({
        prop: prefixTrackProp$1({ prefix, prop }),
        value: prefixValue
      });

      let autoflow = parent.nodes.find(i => i.prop === 'grid-auto-flow');
      let autoflowValue = 'row';

      if (autoflow && !processor$1.disabled(autoflow, result)) {
        autoflowValue = autoflow.value.trim();
      }
      if (status === 'autoplace') {
        /**
         * Show warning if grid-template-rows decl is not found
         */
        let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');

        if (!rowDecl && hasGridTemplate) {
          return undefined
        } else if (!rowDecl && !hasGridTemplate) {
          decl.warn(
            result,
            'Autoplacement does not work without grid-template-rows property'
          );
          return undefined
        }

        /**
         * Show warning if grid-template-columns decl is not found
         */
        let columnDecl = parent.nodes.find(i => {
          return i.prop === 'grid-template-columns'
        });
        if (!columnDecl && !hasGridTemplate) {
          decl.warn(
            result,
            'Autoplacement does not work without grid-template-columns property'
          );
        }

        /**
         * Autoplace grid items
         */
        if (isColumnProp && !hasGridTemplate) {
          autoplaceGridItems(decl, result, gap, autoflowValue);
        }
      }

      return undefined
    }

    /**
     * Change IE property back
     */
    normalize(prop) {
      return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1')
    }

    /**
     * Change property name for IE
     */
    prefixed(prop, prefix) {
      if (prefix === '-ms-') {
        return prefixTrackProp$1({ prefix, prop })
      }
      return super.prefixed(prop, prefix)
    }
  }

  GridRowsColumns.names = [
    'grid-template-rows',
    'grid-template-columns',
    'grid-rows',
    'grid-columns'
  ];

  var gridRowsColumns = GridRowsColumns;

  class GridColumnAlign extends declaration {
    /**
     * Do not prefix flexbox values
     */
    check(decl) {
      return !decl.value.includes('flex-') && decl.value !== 'baseline'
    }

    /**
     * Change IE property back
     */
    normalize() {
      return 'justify-self'
    }

    /**
     * Change property name for IE
     */
    prefixed(prop, prefix) {
      return prefix + 'grid-column-align'
    }
  }

  GridColumnAlign.names = ['grid-column-align'];

  var gridColumnAlign = GridColumnAlign;

  class PrintColorAdjust extends declaration {
    /**
     * Return property name by spec
     */
    normalize() {
      return 'print-color-adjust'
    }

    /**
     * Change property name for WebKit-based browsers
     */
    prefixed(prop, prefix) {
      if (prefix === '-moz-') {
        return 'color-adjust'
      } else {
        return prefix + 'print-color-adjust'
      }
    }
  }

  PrintColorAdjust.names = ['print-color-adjust', 'color-adjust'];

  var printColorAdjust = PrintColorAdjust;

  class OverscrollBehavior extends declaration {
    /**
     * Return property name by spec
     */
    normalize() {
      return 'overscroll-behavior'
    }

    /**
     * Change property name for IE
     */
    prefixed(prop, prefix) {
      return prefix + 'scroll-chaining'
    }

    /**
     * Change value for IE
     */
    set(decl, prefix) {
      if (decl.value === 'auto') {
        decl.value = 'chained';
      } else if (decl.value === 'none' || decl.value === 'contain') {
        decl.value = 'none';
      }
      return super.set(decl, prefix)
    }
  }

  OverscrollBehavior.names = ['overscroll-behavior', 'scroll-chaining'];

  var overscrollBehavior = OverscrollBehavior;

  let {
    getGridGap,
    inheritGridGap,
    parseGridAreas,
    prefixTrackProp,
    prefixTrackValue,
    warnGridGap,
    warnMissedAreas
  } = gridUtils;

  function getGridRows(tpl) {
    return tpl
      .trim()
      .slice(1, -1)
      .split(/["']\s*["']?/g)
  }

  class GridTemplateAreas extends declaration {
    /**
     * Translate grid-template-areas to separate -ms- prefixed properties
     */
    insert(decl, prefix, prefixes, result) {
      if (prefix !== '-ms-') return super.insert(decl, prefix, prefixes)

      let hasColumns = false;
      let hasRows = false;
      let parent = decl.parent;
      let gap = getGridGap(decl);
      gap = inheritGridGap(decl, gap) || gap;

      // remove already prefixed rows
      // to prevent doubling prefixes
      parent.walkDecls(/-ms-grid-rows/, i => i.remove());

      // add empty tracks to rows
      parent.walkDecls(/grid-template-(rows|columns)/, trackDecl => {
        if (trackDecl.prop === 'grid-template-rows') {
          hasRows = true;
          let { prop, value } = trackDecl;
          trackDecl.cloneBefore({
            prop: prefixTrackProp({ prefix, prop }),
            value: prefixTrackValue({ gap: gap.row, value })
          });
        } else {
          hasColumns = true;
        }
      });

      let gridRows = getGridRows(decl.value);

      if (hasColumns && !hasRows && gap.row && gridRows.length > 1) {
        decl.cloneBefore({
          prop: '-ms-grid-rows',
          raws: {},
          value: prefixTrackValue({
            gap: gap.row,
            value: `repeat(${gridRows.length}, auto)`
          })
        });
      }

      // warnings
      warnGridGap({
        decl,
        gap,
        hasColumns,
        result
      });

      let areas = parseGridAreas({
        gap,
        rows: gridRows
      });

      warnMissedAreas(areas, decl, result);

      return decl
    }
  }

  GridTemplateAreas.names = ['grid-template-areas'];

  var gridTemplateAreas = GridTemplateAreas;

  class TextEmphasisPosition extends declaration {
    set(decl, prefix) {
      if (prefix === '-webkit-') {
        decl.value = decl.value.replace(/\s*(right|left)\s*/i, '');
      }
      return super.set(decl, prefix)
    }
  }

  TextEmphasisPosition.names = ['text-emphasis-position'];

  var textEmphasisPosition = TextEmphasisPosition;

  class TextDecorationSkipInk extends declaration {
    /**
     * Change prefix for ink value
     */
    set(decl, prefix) {
      if (decl.prop === 'text-decoration-skip-ink' && decl.value === 'auto') {
        decl.prop = prefix + 'text-decoration-skip';
        decl.value = 'ink';
        return decl
      } else {
        return super.set(decl, prefix)
      }
    }
  }

  TextDecorationSkipInk.names = [
    'text-decoration-skip-ink',
    'text-decoration-skip'
  ];

  var textDecorationSkipInk = TextDecorationSkipInk;

  var normalizeRange = {
    wrap: wrapRange,
    limit: limitRange,
    validate: validateRange,
    test: testRange,
    curry: curry,
    name: name
  };

  function wrapRange(min, max, value) {
    var maxLessMin = max - min;
    return ((value - min) % maxLessMin + maxLessMin) % maxLessMin + min;
  }

  function limitRange(min, max, value) {
    return Math.max(min, Math.min(max, value));
  }

  function validateRange(min, max, value, minExclusive, maxExclusive) {
    if (!testRange(min, max, value, minExclusive, maxExclusive)) {
      throw new Error(value + ' is outside of range [' + min + ',' + max + ')');
    }
    return value;
  }

  function testRange(min, max, value, minExclusive, maxExclusive) {
    return !(
         value < min ||
         value > max ||
         (maxExclusive && (value === max)) ||
         (minExclusive && (value === min))
    );
  }

  function name(min, max, minExcl, maxExcl) {
    return (minExcl ? '(' : '[') + min + ',' + max + (maxExcl ? ')' : ']');
  }

  function curry(min, max, minExclusive, maxExclusive) {
    var boundNameFn = name.bind(null, min, max, minExclusive, maxExclusive);
    return {
      wrap: wrapRange.bind(null, min, max),
      limit: limitRange.bind(null, min, max),
      validate: function(value) {
        return validateRange(min, max, value, minExclusive, maxExclusive);
      },
      test: function(value) {
        return testRange(min, max, value, minExclusive, maxExclusive);
      },
      toString: boundNameFn,
      name: boundNameFn
    };
  }

  let IS_DIRECTION = /top|left|right|bottom/gi;

  class Gradient extends value {
    /**
     * Do not add non-webkit prefixes for list-style and object
     */
    add(decl, prefix) {
      let p = decl.prop;
      if (p.includes('mask')) {
        if (prefix === '-webkit-' || prefix === '-webkit- old') {
          return super.add(decl, prefix)
        }
      } else if (
        p === 'list-style' ||
        p === 'list-style-image' ||
        p === 'content'
      ) {
        if (prefix === '-webkit-' || prefix === '-webkit- old') {
          return super.add(decl, prefix)
        }
      } else {
        return super.add(decl, prefix)
      }
      return undefined
    }

    /**
     * Get div token from exists parameters
     */
    cloneDiv(params) {
      for (let i of params) {
        if (i.type === 'div' && i.value === ',') {
          return i
        }
      }
      return { after: ' ', type: 'div', value: ',' }
    }

    /**
     * Change colors syntax to old webkit
     */
    colorStops(params) {
      let result = [];
      for (let i = 0; i < params.length; i++) {
        let pos;
        let param = params[i];
        let item;
        if (i === 0) {
          continue
        }

        let color = lib.stringify(param[0]);
        if (param[1] && param[1].type === 'word') {
          pos = param[1].value;
        } else if (param[2] && param[2].type === 'word') {
          pos = param[2].value;
        }

        let stop;
        if (i === 1 && (!pos || pos === '0%')) {
          stop = `from(${color})`;
        } else if (i === params.length - 1 && (!pos || pos === '100%')) {
          stop = `to(${color})`;
        } else if (pos) {
          stop = `color-stop(${pos}, ${color})`;
        } else {
          stop = `color-stop(${color})`;
        }

        let div = param[param.length - 1];
        params[i] = [{ type: 'word', value: stop }];
        if (div.type === 'div' && div.value === ',') {
          item = params[i].push(div);
        }
        result.push(item);
      }
      return result
    }

    /**
     * Change new direction to old
     */
    convertDirection(params) {
      if (params.length > 0) {
        if (params[0].value === 'to') {
          this.fixDirection(params);
        } else if (params[0].value.includes('deg')) {
          this.fixAngle(params);
        } else if (this.isRadial(params)) {
          this.fixRadial(params);
        }
      }
      return params
    }

    /**
     * Add 90 degrees
     */
    fixAngle(params) {
      let first = params[0].value;
      first = parseFloat(first);
      first = Math.abs(450 - first) % 360;
      first = this.roundFloat(first, 3);
      params[0].value = `${first}deg`;
    }

    /**
     * Replace `to top left` to `bottom right`
     */
    fixDirection(params) {
      params.splice(0, 2);

      for (let param of params) {
        if (param.type === 'div') {
          break
        }
        if (param.type === 'word') {
          param.value = this.revertDirection(param.value);
        }
      }
    }

    /**
     * Fix radial direction syntax
     */
    fixRadial(params) {
      let first = [];
      let second = [];
      let a, b, c, i, next;

      for (i = 0; i < params.length - 2; i++) {
        a = params[i];
        b = params[i + 1];
        c = params[i + 2];
        if (a.type === 'space' && b.value === 'at' && c.type === 'space') {
          next = i + 3;
          break
        } else {
          first.push(a);
        }
      }

      let div;
      for (i = next; i < params.length; i++) {
        if (params[i].type === 'div') {
          div = params[i];
          break
        } else {
          second.push(params[i]);
        }
      }

      params.splice(0, i, ...second, div, ...first);
    }

    /**
     * Look for at word
     */
    isRadial(params) {
      let state = 'before';
      for (let param of params) {
        if (state === 'before' && param.type === 'space') {
          state = 'at';
        } else if (state === 'at' && param.value === 'at') {
          state = 'after';
        } else if (state === 'after' && param.type === 'space') {
          return true
        } else if (param.type === 'div') {
          break
        } else {
          state = 'before';
        }
      }
      return false
    }

    /**
     * Replace old direction to new
     */
    newDirection(params) {
      if (params[0].value === 'to') {
        return params
      }
      IS_DIRECTION.lastIndex = 0; // reset search index of global regexp
      if (!IS_DIRECTION.test(params[0].value)) {
        return params
      }

      params.unshift(
        {
          type: 'word',
          value: 'to'
        },
        {
          type: 'space',
          value: ' '
        }
      );

      for (let i = 2; i < params.length; i++) {
        if (params[i].type === 'div') {
          break
        }
        if (params[i].type === 'word') {
          params[i].value = this.revertDirection(params[i].value);
        }
      }

      return params
    }

    /**
     * Normalize angle
     */
    normalize(nodes, gradientName) {
      if (!nodes[0]) return nodes

      if (/-?\d+(.\d+)?grad/.test(nodes[0].value)) {
        nodes[0].value = this.normalizeUnit(nodes[0].value, 400);
      } else if (/-?\d+(.\d+)?rad/.test(nodes[0].value)) {
        nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);
      } else if (/-?\d+(.\d+)?turn/.test(nodes[0].value)) {
        nodes[0].value = this.normalizeUnit(nodes[0].value, 1);
      } else if (nodes[0].value.includes('deg')) {
        let num = parseFloat(nodes[0].value);
        num = normalizeRange.wrap(0, 360, num);
        nodes[0].value = `${num}deg`;
      }

      if (
        gradientName === 'linear-gradient' ||
        gradientName === 'repeating-linear-gradient'
      ) {
        let direction = nodes[0].value;

        // Unitless zero for `<angle>` values are allowed in CSS gradients and transforms.
        // Spec: https://github.com/w3c/csswg-drafts/commit/602789171429b2231223ab1e5acf8f7f11652eb3
        if (direction === '0deg' || direction === '0') {
          nodes = this.replaceFirst(nodes, 'to', ' ', 'top');
        } else if (direction === '90deg') {
          nodes = this.replaceFirst(nodes, 'to', ' ', 'right');
        } else if (direction === '180deg') {
          nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom'); // default value
        } else if (direction === '270deg') {
          nodes = this.replaceFirst(nodes, 'to', ' ', 'left');
        }
      }

      return nodes
    }

    /**
     * Convert angle unit to deg
     */
    normalizeUnit(str, full) {
      let num = parseFloat(str);
      let deg = (num / full) * 360;
      return `${deg}deg`
    }

    /**
     * Remove old WebKit gradient too
     */
    old(prefix) {
      if (prefix === '-webkit-') {
        let type;
        if (this.name === 'linear-gradient') {
          type = 'linear';
        } else if (this.name === 'repeating-linear-gradient') {
          type = 'repeating-linear';
        } else if (this.name === 'repeating-radial-gradient') {
          type = 'repeating-radial';
        } else {
          type = 'radial';
        }
        let string = '-gradient';
        let regexp = utils.regexp(
          `-webkit-(${type}-gradient|gradient\\(\\s*${type})`,
          false
        );

        return new oldValue(this.name, prefix + this.name, string, regexp)
      } else {
        return super.old(prefix)
      }
    }

    /**
     * Change direction syntax to old webkit
     */
    oldDirection(params) {
      let div = this.cloneDiv(params[0]);

      if (params[0][0].value !== 'to') {
        return params.unshift([
          { type: 'word', value: Gradient.oldDirections.bottom },
          div
        ])
      } else {
        let words = [];
        for (let node of params[0].slice(2)) {
          if (node.type === 'word') {
            words.push(node.value.toLowerCase());
          }
        }

        words = words.join(' ');
        let old = Gradient.oldDirections[words] || words;

        params[0] = [{ type: 'word', value: old }, div];
        return params[0]
      }
    }

    /**
     * Convert to old webkit syntax
     */
    oldWebkit(node) {
      let { nodes } = node;
      let string = lib.stringify(node.nodes);

      if (this.name !== 'linear-gradient') {
        return false
      }
      if (nodes[0] && nodes[0].value.includes('deg')) {
        return false
      }
      if (
        string.includes('px') ||
        string.includes('-corner') ||
        string.includes('-side')
      ) {
        return false
      }

      let params = [[]];
      for (let i of nodes) {
        params[params.length - 1].push(i);
        if (i.type === 'div' && i.value === ',') {
          params.push([]);
        }
      }

      this.oldDirection(params);
      this.colorStops(params);

      node.nodes = [];
      for (let param of params) {
        node.nodes = node.nodes.concat(param);
      }

      node.nodes.unshift(
        { type: 'word', value: 'linear' },
        this.cloneDiv(node.nodes)
      );
      node.value = '-webkit-gradient';

      return true
    }

    /**
     * Change degrees for webkit prefix
     */
    replace(string, prefix) {
      let ast = lib(string);
      for (let node of ast.nodes) {
        let gradientName = this.name; // gradient name
        if (node.type === 'function' && node.value === gradientName) {
          node.nodes = this.newDirection(node.nodes);
          node.nodes = this.normalize(node.nodes, gradientName);
          if (prefix === '-webkit- old') {
            let changes = this.oldWebkit(node);
            if (!changes) {
              return false
            }
          } else {
            node.nodes = this.convertDirection(node.nodes);
            node.value = prefix + node.value;
          }
        }
      }
      return ast.toString()
    }

    /**
     * Replace first token
     */
    replaceFirst(params, ...words) {
      let prefix = words.map(i => {
        if (i === ' ') {
          return { type: 'space', value: i }
        }
        return { type: 'word', value: i }
      });
      return prefix.concat(params.slice(1))
    }

    revertDirection(word) {
      return Gradient.directions[word.toLowerCase()] || word
    }

    /**
     * Round float and save digits under dot
     */
    roundFloat(float, digits) {
      return parseFloat(float.toFixed(digits))
    }
  }

  Gradient.names = [
    'linear-gradient',
    'repeating-linear-gradient',
    'radial-gradient',
    'repeating-radial-gradient'
  ];

  Gradient.directions = {
    bottom: 'top',
    left: 'right',
    right: 'left',
    top: 'bottom' // default value
  };

  // Direction to replace
  Gradient.oldDirections = {
    'bottom': 'left top, left bottom',
    'bottom left': 'right top, left bottom',
    'bottom right': 'left top, right bottom',
    'left': 'right top, left top',

    'left bottom': 'right top, left bottom',
    'left top': 'right bottom, left top',
    'right': 'left top, right top',
    'right bottom': 'left top, right bottom',
    'right top': 'left bottom, right top',
    'top': 'left bottom, left top',
    'top left': 'right bottom, left top',
    'top right': 'left bottom, right top'
  };

  var gradient = Gradient;

  function regexp(name) {
    return new RegExp(`(^|[\\s,(])(${name}($|[\\s),]))`, 'gi')
  }

  class Intrinsic extends value {
    add(decl, prefix) {
      if (decl.prop.includes('grid') && prefix !== '-webkit-') {
        return undefined
      }
      return super.add(decl, prefix)
    }

    isStretch() {
      return (
        this.name === 'stretch' ||
        this.name === 'fill' ||
        this.name === 'fill-available'
      )
    }

    old(prefix) {
      let prefixed = prefix + this.name;
      if (this.isStretch()) {
        if (prefix === '-moz-') {
          prefixed = '-moz-available';
        } else if (prefix === '-webkit-') {
          prefixed = '-webkit-fill-available';
        }
      }
      return new oldValue(this.name, prefixed, prefixed, regexp(prefixed))
    }

    regexp() {
      if (!this.regexpCache) this.regexpCache = regexp(this.name);
      return this.regexpCache
    }

    replace(string, prefix) {
      if (prefix === '-moz-' && this.isStretch()) {
        return string.replace(this.regexp(), '$1-moz-available$3')
      }
      if (prefix === '-webkit-' && this.isStretch()) {
        return string.replace(this.regexp(), '$1-webkit-fill-available$3')
      }
      return super.replace(string, prefix)
    }
  }

  Intrinsic.names = [
    'max-content',
    'min-content',
    'fit-content',
    'fill',
    'fill-available',
    'stretch'
  ];

  var intrinsic = Intrinsic;

  class Pixelated extends value {
    /**
     * Different name for WebKit and Firefox
     */
    old(prefix) {
      if (prefix === '-webkit-') {
        return new oldValue(this.name, '-webkit-optimize-contrast')
      }
      if (prefix === '-moz-') {
        return new oldValue(this.name, '-moz-crisp-edges')
      }
      return super.old(prefix)
    }

    /**
     * Use non-standard name for WebKit and Firefox
     */
    replace(string, prefix) {
      if (prefix === '-webkit-') {
        return string.replace(this.regexp(), '$1-webkit-optimize-contrast')
      }
      if (prefix === '-moz-') {
        return string.replace(this.regexp(), '$1-moz-crisp-edges')
      }
      return super.replace(string, prefix)
    }
  }

  Pixelated.names = ['pixelated'];

  var pixelated = Pixelated;

  class ImageSet extends value {
    /**
     * Use non-standard name for WebKit and Firefox
     */
    replace(string, prefix) {
      let fixed = super.replace(string, prefix);
      if (prefix === '-webkit-') {
        fixed = fixed.replace(/("[^"]+"|'[^']+')(\s+\d+\w)/gi, 'url($1)$2');
      }
      return fixed
    }
  }

  ImageSet.names = ['image-set'];

  var imageSet = ImageSet;

  let list = postcss_1.list;



  class CrossFade extends value {
    replace(string, prefix) {
      return list
        .space(string)
        .map(value => {
          if (value.slice(0, +this.name.length + 1) !== this.name + '(') {
            return value
          }

          let close = value.lastIndexOf(')');
          let after = value.slice(close + 1);
          let args = value.slice(this.name.length + 1, close);

          if (prefix === '-webkit-') {
            let match = args.match(/\d*.?\d+%?/);
            if (match) {
              args = args.slice(match[0].length).trim();
              args += `, ${match[0]}`;
            } else {
              args += ', 0.5';
            }
          }
          return prefix + this.name + '(' + args + ')' + after
        })
        .join(' ')
    }
  }

  CrossFade.names = ['cross-fade'];

  var crossFade = CrossFade;

  class DisplayFlex extends value {
    constructor(name, prefixes) {
      super(name, prefixes);
      if (name === 'display-flex') {
        this.name = 'flex';
      }
    }

    /**
     * Faster check for flex value
     */
    check(decl) {
      return decl.prop === 'display' && decl.value === this.name
    }

    /**
     * Change value for old specs
     */
    old(prefix) {
      let prefixed = this.prefixed(prefix);
      if (!prefixed) return undefined
      return new oldValue(this.name, prefixed)
    }

    /**
     * Return value by spec
     */
    prefixed(prefix) {
      let spec, value
      ;[spec, prefix] = flexSpec(prefix);

      if (spec === 2009) {
        if (this.name === 'flex') {
          value = 'box';
        } else {
          value = 'inline-box';
        }
      } else if (spec === 2012) {
        if (this.name === 'flex') {
          value = 'flexbox';
        } else {
          value = 'inline-flexbox';
        }
      } else if (spec === 'final') {
        value = this.name;
      }

      return prefix + value
    }

    /**
     * Add prefix to value depend on flebox spec version
     */
    replace(string, prefix) {
      return this.prefixed(prefix)
    }
  }

  DisplayFlex.names = ['display-flex', 'inline-flex'];

  var displayFlex = DisplayFlex;

  class DisplayGrid extends value {
    constructor(name, prefixes) {
      super(name, prefixes);
      if (name === 'display-grid') {
        this.name = 'grid';
      }
    }

    /**
     * Faster check for flex value
     */
    check(decl) {
      return decl.prop === 'display' && decl.value === this.name
    }
  }

  DisplayGrid.names = ['display-grid', 'inline-grid'];

  var displayGrid = DisplayGrid;

  class FilterValue extends value {
    constructor(name, prefixes) {
      super(name, prefixes);
      if (name === 'filter-function') {
        this.name = 'filter';
      }
    }
  }

  FilterValue.names = ['filter', 'filter-function'];

  var filterValue = FilterValue;

  class Autofill extends selector {
    constructor(name, prefixes, all) {
      super(name, prefixes, all);

      if (this.prefixes) {
        this.prefixes = utils.uniq(this.prefixes.map(() => '-webkit-'));
      }
    }

    /**
     * Return different selectors depend on prefix
     */
    prefixed(prefix) {
      if (prefix === '-webkit-') {
        return ':-webkit-autofill'
      }
      return `:${prefix}autofill`
    }
  }

  Autofill.names = [':autofill'];

  var autofill = Autofill;

  selector.hack(autofill);
  selector.hack(fullscreen$1);
  selector.hack(placeholder);
  selector.hack(placeholderShown);
  selector.hack(fileSelectorButton);
  declaration.hack(flex);
  declaration.hack(order);
  declaration.hack(filter);
  declaration.hack(gridEnd);
  declaration.hack(animation);
  declaration.hack(flexFlow);
  declaration.hack(flexGrow);
  declaration.hack(flexWrap);
  declaration.hack(gridArea);
  declaration.hack(placeSelf);
  declaration.hack(gridStart);
  declaration.hack(alignSelf);
  declaration.hack(appearance);
  declaration.hack(flexBasis);
  declaration.hack(maskBorder);
  declaration.hack(maskComposite);
  declaration.hack(alignItems);
  declaration.hack(userSelect);
  declaration.hack(flexShrink);
  declaration.hack(breakProps);
  declaration.hack(writingMode);
  declaration.hack(borderImage$1);
  declaration.hack(alignContent);
  declaration.hack(borderRadius$1);
  declaration.hack(blockLogical);
  declaration.hack(gridTemplate);
  declaration.hack(inlineLogical);
  declaration.hack(gridRowAlign);
  declaration.hack(transformDecl);
  declaration.hack(flexDirection);
  declaration.hack(imageRendering);
  declaration.hack(backdropFilter);
  declaration.hack(backgroundClip);
  declaration.hack(textDecoration$1);
  declaration.hack(justifyContent);
  declaration.hack(backgroundSize);
  declaration.hack(gridRowColumn);
  declaration.hack(gridRowsColumns);
  declaration.hack(gridColumnAlign);
  declaration.hack(overscrollBehavior);
  declaration.hack(gridTemplateAreas);
  declaration.hack(printColorAdjust);
  declaration.hack(textEmphasisPosition);
  declaration.hack(textDecorationSkipInk);
  value.hack(gradient);
  value.hack(intrinsic);
  value.hack(pixelated);
  value.hack(imageSet);
  value.hack(crossFade);
  value.hack(displayFlex);
  value.hack(displayGrid);
  value.hack(filterValue);

  let declsCache = new Map();

  class Prefixes {
    constructor(data, browsers, options = {}) {
      this.data = data;
      this.browsers = browsers;
      this.options = options
      ;[this.add, this.remove] = this.preprocess(this.select(this.data));
      this.transition = new transition(this);
      this.processor = new processor(this);
    }

    /**
     * Return clone instance to remove all prefixes
     */
    cleaner() {
      if (this.cleanerCache) {
        return this.cleanerCache
      }

      if (this.browsers.selected.length) {
        let empty = new browsers$1(this.browsers.data, []);
        this.cleanerCache = new Prefixes(this.data, empty, this.options);
      } else {
        return this
      }

      return this.cleanerCache
    }

    /**
     * Declaration loader with caching
     */
    decl(prop) {
      if (!declsCache.has(prop)) {
        declsCache.set(prop, declaration.load(prop));
      }

      return declsCache.get(prop)
    }

    /**
     * Group declaration by unprefixed property to check them
     */
    group(decl) {
      let rule = decl.parent;
      let index = rule.index(decl);
      let { length } = rule.nodes;
      let unprefixed = this.unprefixed(decl.prop);

      let checker = (step, callback) => {
        index += step;
        while (index >= 0 && index < length) {
          let other = rule.nodes[index];
          if (other.type === 'decl') {
            if (step === -1 && other.prop === unprefixed) {
              if (!browsers$1.withPrefix(other.value)) {
                break
              }
            }

            if (this.unprefixed(other.prop) !== unprefixed) {
              break
            } else if (callback(other) === true) {
              return true
            }

            if (step === +1 && other.prop === unprefixed) {
              if (!browsers$1.withPrefix(other.value)) {
                break
              }
            }
          }

          index += step;
        }
        return false
      };

      return {
        down(callback) {
          return checker(+1, callback)
        },
        up(callback) {
          return checker(-1, callback)
        }
      }
    }

    /**
     * Normalize prefix for remover
     */
    normalize(prop) {
      return this.decl(prop).normalize(prop)
    }

    /**
     * Return prefixed version of property
     */
    prefixed(prop, prefix) {
      prop = vendor.unprefixed(prop);
      return this.decl(prop).prefixed(prop, prefix)
    }

    /**
     * Cache prefixes data to fast CSS processing
     */
    preprocess(selected) {
      let add = {
        '@supports': new supports(Prefixes, this),
        'selectors': []
      };
      for (let name in selected.add) {
        let prefixes = selected.add[name];
        if (name === '@keyframes' || name === '@viewport') {
          add[name] = new atRule(name, prefixes, this);
        } else if (name === '@resolution') {
          add[name] = new resolution(name, prefixes, this);
        } else if (this.data[name].selector) {
          add.selectors.push(selector.load(name, prefixes, this));
        } else {
          let props = this.data[name].props;

          if (props) {
            let value$1 = value.load(name, prefixes, this);
            for (let prop of props) {
              if (!add[prop]) {
                add[prop] = { values: [] };
              }
              add[prop].values.push(value$1);
            }
          } else {
            let values = (add[name] && add[name].values) || [];
            add[name] = declaration.load(name, prefixes, this);
            add[name].values = values;
          }
        }
      }

      let remove = { selectors: [] };
      for (let name in selected.remove) {
        let prefixes = selected.remove[name];
        if (this.data[name].selector) {
          let selector$1 = selector.load(name, prefixes);
          for (let prefix of prefixes) {
            remove.selectors.push(selector$1.old(prefix));
          }
        } else if (name === '@keyframes' || name === '@viewport') {
          for (let prefix of prefixes) {
            let prefixed = `@${prefix}${name.slice(1)}`;
            remove[prefixed] = { remove: true };
          }
        } else if (name === '@resolution') {
          remove[name] = new resolution(name, prefixes, this);
        } else {
          let props = this.data[name].props;
          if (props) {
            let value$1 = value.load(name, [], this);
            for (let prefix of prefixes) {
              let old = value$1.old(prefix);
              if (old) {
                for (let prop of props) {
                  if (!remove[prop]) {
                    remove[prop] = {};
                  }
                  if (!remove[prop].values) {
                    remove[prop].values = [];
                  }
                  remove[prop].values.push(old);
                }
              }
            }
          } else {
            for (let p of prefixes) {
              let olds = this.decl(name).old(name, p);
              if (name === 'align-self') {
                let a = add[name] && add[name].prefixes;
                if (a) {
                  if (p === '-webkit- 2009' && a.includes('-webkit-')) {
                    continue
                  } else if (p === '-webkit-' && a.includes('-webkit- 2009')) {
                    continue
                  }
                }
              }
              for (let prefixed of olds) {
                if (!remove[prefixed]) {
                  remove[prefixed] = {};
                }
                remove[prefixed].remove = true;
              }
            }
          }
        }
      }

      return [add, remove]
    }

    /**
     * Select prefixes from data, which is necessary for selected browsers
     */
    select(list) {
      let selected = { add: {}, remove: {} };

      for (let name in list) {
        let data = list[name];
        let add = data.browsers.map(i => {
          let params = i.split(' ');
          return {
            browser: `${params[0]} ${params[1]}`,
            note: params[2]
          }
        });

        let notes = add
          .filter(i => i.note)
          .map(i => `${this.browsers.prefix(i.browser)} ${i.note}`);
        notes = utils.uniq(notes);

        add = add
          .filter(i => this.browsers.isSelected(i.browser))
          .map(i => {
            let prefix = this.browsers.prefix(i.browser);
            if (i.note) {
              return `${prefix} ${i.note}`
            } else {
              return prefix
            }
          });
        add = this.sort(utils.uniq(add));

        if (this.options.flexbox === 'no-2009') {
          add = add.filter(i => !i.includes('2009'));
        }

        let all = data.browsers.map(i => this.browsers.prefix(i));
        if (data.mistakes) {
          all = all.concat(data.mistakes);
        }
        all = all.concat(notes);
        all = utils.uniq(all);

        if (add.length) {
          selected.add[name] = add;
          if (add.length < all.length) {
            selected.remove[name] = all.filter(i => !add.includes(i));
          }
        } else {
          selected.remove[name] = all;
        }
      }

      return selected
    }

    /**
     * Sort vendor prefixes
     */
    sort(prefixes) {
      return prefixes.sort((a, b) => {
        let aLength = utils.removeNote(a).length;
        let bLength = utils.removeNote(b).length;

        if (aLength === bLength) {
          return b.length - a.length
        } else {
          return bLength - aLength
        }
      })
    }

    /**
     * Return unprefixed version of property
     */
    unprefixed(prop) {
      let value = this.normalize(vendor.unprefixed(prop));
      if (value === 'flex-direction') {
        value = 'flex-flow';
      }
      return value
    }

    /**
     * Return values, which must be prefixed in selected property
     */
    values(type, prop) {
      let data = this[type];

      let global = data['*'] && data['*'].values;
      let values = data[prop] && data[prop].values;

      if (global && values) {
        return utils.uniq(global.concat(values))
      } else {
        return global || values || []
      }
    }
  }

  var prefixes$1 = Prefixes;

  var borderRadius={A:{A:{"1":"G A B","2":"K E F bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","257":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB","289":"DC eC fC","292":"cC"},D:{"1":"0 1 2 3 4 5 6 7 8 9 GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"J"},E:{"1":"GB E F G A B C L M H jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"J gC KC","129":"K hC iC"},F:{"1":"0 B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u tC uC 7B ZC vC 8B","2":"G rC sC"},G:{"1":"F wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"KC"},H:{"2":"ID"},I:{"1":"DC J D KD LD MD aC ND OD","33":"JD"},J:{"1":"E A"},K:{"1":"B C I 7B ZC 8B","2":"A"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","257":"cD"}},B:4,C:"CSS3 Border-radius (rounded corners)",D:true};

  var cssBoxshadow={A:{A:{"1":"G A B","2":"K E F bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC","33":"eC fC"},D:{"1":"0 1 2 3 4 5 6 7 8 9 A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"J GB K E F G"},E:{"1":"K E F G A B C L M H hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"GB","164":"J gC KC"},F:{"1":"0 B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u tC uC 7B ZC vC 8B","2":"G rC sC"},G:{"1":"F xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"wC aC","164":"KC"},H:{"2":"ID"},I:{"1":"J D MD aC ND OD","164":"DC JD KD LD"},J:{"1":"A","33":"E"},K:{"1":"B C I 7B ZC 8B","2":"A"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS3 Box-shadow",D:true};

  var cssAnimation={A:{A:{"1":"A B","2":"K E F G bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J eC fC","33":"GB K E F G A B C L M H"},D:{"1":"1 2 3 4 5 6 7 8 9 ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB"},E:{"1":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"gC KC","33":"K E F hC iC jC","292":"J GB"},F:{"1":"MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 8B","2":"G B rC sC tC uC 7B ZC vC","33":"0 C H N O P HB v w x y z IB JB KB LB"},G:{"1":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"F yC zC 0C","164":"KC wC aC xC"},H:{"2":"ID"},I:{"1":"D","33":"J MD aC ND OD","164":"DC JD KD LD"},J:{"33":"E A"},K:{"1":"I 8B","2":"A B C 7B ZC"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:5,C:"CSS Animation",D:true};

  var cssTransitions={A:{A:{"1":"A B","2":"K E F G bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC fC","33":"GB K E F G A B C L M H","164":"J"},D:{"1":"1 2 3 4 5 6 7 8 9 IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 J GB K E F G A B C L M H N O P HB v w x y z"},E:{"1":"E F G A B C L M H iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"K hC","164":"J GB gC KC"},F:{"1":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 8B","2":"G rC sC","33":"C","164":"B tC uC 7B ZC vC"},G:{"1":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"yC","164":"KC wC aC xC"},H:{"2":"ID"},I:{"1":"D ND OD","33":"DC J JD KD LD MD aC"},J:{"1":"A","33":"E"},K:{"1":"I 8B","33":"C","164":"A B 7B ZC"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:5,C:"CSS3 Transitions",D:true};

  var transforms2d={A:{A:{"2":"bC","8":"K E F","129":"A B","161":"G"},B:{"1":"1 2 3 4 5 6 7 8 9 O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","129":"C L M H N"},C:{"1":"0 1 2 3 4 5 6 7 8 9 N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC","33":"J GB K E F G A B C L M H eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB"},E:{"1":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"J GB K E F gC KC hC iC jC"},F:{"1":"0 y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 8B","2":"G rC sC","33":"B C H N O P HB v w x tC uC 7B ZC vC"},G:{"1":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"F KC wC aC xC yC zC 0C"},H:{"2":"ID"},I:{"1":"D","33":"DC J JD KD LD MD aC ND OD"},J:{"33":"E A"},K:{"1":"B C I 7B ZC 8B","2":"A"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS3 2D Transforms",D:true};

  var transforms3d={A:{A:{"2":"K E F G bC","132":"A B"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G eC fC","33":"A B C L M H"},D:{"1":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B","33":"0 C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB"},E:{"1":"NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"gC KC","33":"J GB K E F hC iC jC","257":"G A B C L M H kC LC 7B 8B lC mC nC MC"},F:{"1":"0 y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"H N O P HB v w x"},G:{"1":"NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"F KC wC aC xC yC zC 0C","257":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC"},H:{"2":"ID"},I:{"1":"D","2":"JD KD LD","33":"DC J MD aC ND OD"},J:{"33":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"132":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:5,C:"CSS3 3D Transforms",D:true};

  var cssGradients={A:{A:{"1":"A B","2":"K E F G bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC","260":"0 N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB","292":"J GB K E F G A B C L M H fC"},D:{"1":"1 2 3 4 5 6 7 8 9 IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 A B C L M H N O P HB v w x y z","548":"J GB K E F G"},E:{"1":"NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"gC KC","260":"E F G A B C L M H iC jC kC LC 7B 8B lC mC nC MC","292":"K hC","804":"J GB"},F:{"1":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 8B","2":"G B rC sC tC uC","33":"C vC","164":"7B ZC"},G:{"1":"NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","260":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC","292":"xC yC","804":"KC wC aC"},H:{"2":"ID"},I:{"1":"D ND OD","33":"J MD aC","548":"DC JD KD LD"},J:{"1":"A","548":"E"},K:{"1":"I 8B","2":"A B","33":"C","164":"7B ZC"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS Gradients",D:true};

  var css3Boxsizing={A:{A:{"1":"F G A B","8":"K E bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","33":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB eC fC"},D:{"1":"0 1 2 3 4 5 6 7 8 9 A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"J GB K E F G"},E:{"1":"K E F G A B C L M H hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"J GB gC KC"},F:{"1":"0 B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u rC sC tC uC 7B ZC vC 8B","2":"G"},G:{"1":"F xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"KC wC aC"},H:{"1":"ID"},I:{"1":"J D MD aC ND OD","33":"DC JD KD LD"},J:{"1":"A","33":"E"},K:{"1":"A B C I 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:5,C:"CSS3 Box-sizing",D:true};

  var cssFilters={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","1028":"L M H N O P","1346":"C"},C:{"1":"1 2 3 4 5 6 7 8 9 RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC","196":"QB","516":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB fC"},D:{"1":"1 2 3 4 5 6 7 8 9 jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H N O","33":"0 P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB"},E:{"1":"A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB gC KC hC","33":"K E F G iC jC"},F:{"1":"WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB"},G:{"1":"2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC","33":"F yC zC 0C 1C"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC","33":"ND OD"},J:{"2":"E","33":"A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z RD SD TD LC UD VD WD XD YD AC BC CC ZD","33":"J PD QD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:5,C:"CSS Filter Effects",D:true};

  var cssFilterFunction={A:{A:{"2":"K E F G A B bC"},B:{"2":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"2":"0 1 2 3 4 5 6 7 8 9 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC eC fC"},D:{"2":"0 1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"1":"A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E F gC KC hC iC jC","33":"G"},F:{"2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u rC sC tC uC 7B ZC vC 8B"},G:{"1":"3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F KC wC aC xC yC zC 0C","33":"1C 2C"},H:{"2":"ID"},I:{"2":"DC J D JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"2":"A B C I 7B ZC 8B"},L:{"2":"D"},M:{"2":"D"},N:{"2":"A B"},O:{"2":"9B"},P:{"2":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"2":"aD"},R:{"2":"bD"},S:{"2":"cD dD"}},B:5,C:"CSS filter() function",D:true};

  var cssBackdropFilter={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N","257":"O P"},C:{"1":"1 2 3 4 5 6 7 8 9 m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB eC fC","578":"yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l"},D:{"1":"1 2 3 4 5 6 7 8 9 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB","194":"dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B"},E:{"1":"CC qC","2":"J GB K E F gC KC hC iC jC","33":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC"},F:{"1":"sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB rC sC tC uC 7B ZC vC 8B","194":"QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB"},G:{"1":"CC","2":"F KC wC aC xC yC zC 0C","33":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z VD WD XD YD AC BC CC ZD","2":"J","194":"PD QD RD SD TD LC UD"},Q:{"2":"aD"},R:{"1":"bD"},S:{"2":"cD dD"}},B:7,C:"CSS Backdrop Filter",D:true};

  var cssElementFunction={A:{A:{"2":"K E F G A B bC"},B:{"2":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"33":"0 1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","164":"cC DC eC fC"},D:{"2":"0 1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"2":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC"},F:{"2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u rC sC tC uC 7B ZC vC 8B"},G:{"2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"2":"DC J D JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"2":"A B C I 7B ZC 8B"},L:{"2":"D"},M:{"33":"D"},N:{"2":"A B"},O:{"2":"9B"},P:{"2":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"2":"aD"},R:{"2":"bD"},S:{"33":"cD dD"}},B:5,C:"CSS element() function",D:true};

  var multicolumn={A:{A:{"1":"A B","2":"K E F G bC"},B:{"1":"C L M H N O P","516":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"132":"iB jB kB lB mB nB oB EC pB FC qB rB sB","164":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB eC fC","516":"tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a","1028":"1 2 3 4 5 6 7 8 9 b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC"},D:{"420":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB","516":"1 2 3 4 5 6 7 8 9 gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"1":"A B C L M H LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","132":"G kC","164":"E F jC","420":"J GB K gC KC hC iC"},F:{"1":"C 7B ZC vC 8B","2":"G B rC sC tC uC","420":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB","516":"TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},G:{"1":"3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","132":"1C 2C","164":"F zC 0C","420":"KC wC aC xC yC"},H:{"1":"ID"},I:{"420":"DC J JD KD LD MD aC ND OD","516":"D"},J:{"420":"E A"},K:{"1":"C 7B ZC 8B","2":"A B","516":"I"},L:{"516":"D"},M:{"1028":"D"},N:{"1":"A B"},O:{"516":"9B"},P:{"420":"J","516":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"516":"aD"},R:{"516":"bD"},S:{"164":"cD dD"}},B:4,C:"CSS3 Multiple column layout",D:true};

  var userSelectNone={A:{A:{"2":"K E F G bC","33":"A B"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","33":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","33":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB"},E:{"33":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC"},F:{"1":"XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB"},G:{"33":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"1":"D","33":"DC J JD KD LD MD aC ND OD"},J:{"33":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"33":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","33":"J PD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","33":"cD"}},B:5,C:"CSS user-select: none",D:true};

  var flexbox={A:{A:{"2":"K E F G bC","1028":"B","1316":"A"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","164":"cC DC J GB K E F G A B C L M H N O P HB v w eC fC","516":"0 x y z IB JB"},D:{"1":"1 2 3 4 5 6 7 8 9 LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 w x y z IB JB KB","164":"J GB K E F G A B C L M H N O P HB v"},E:{"1":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"E F iC jC","164":"J GB K gC KC hC"},F:{"1":"0 O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 8B","2":"G B C rC sC tC uC 7B ZC vC","33":"H N"},G:{"1":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"F zC 0C","164":"KC wC aC xC yC"},H:{"1":"ID"},I:{"1":"D ND OD","164":"DC J JD KD LD MD aC"},J:{"1":"A","164":"E"},K:{"1":"I 8B","2":"A B C 7B ZC"},L:{"1":"D"},M:{"1":"D"},N:{"1":"B","292":"A"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS Flexible Box Layout Module",D:true};

  var calc={A:{A:{"2":"K E F bC","260":"G","516":"A B"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC fC","33":"J GB K E F G A B C L M H"},D:{"1":"1 2 3 4 5 6 7 8 9 IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H N O P","33":"0 HB v w x y z"},E:{"1":"E F G A B C L M H iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB gC KC hC","33":"K"},F:{"1":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B"},G:{"1":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC","33":"yC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC","132":"ND OD"},J:{"1":"A","2":"E"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"calc() as CSS unit value",D:true};

  var backgroundImgOpts={A:{A:{"1":"G A B","2":"K E F bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC","36":"fC"},D:{"1":"0 1 2 3 4 5 6 7 8 9 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","516":"J GB K E F G A B C L M"},E:{"1":"E F G A B C L M H jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","772":"J GB K gC KC hC iC"},F:{"1":"0 B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u tC uC 7B ZC vC 8B","2":"G rC","36":"sC"},G:{"1":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","4":"KC wC aC yC","516":"xC"},H:{"132":"ID"},I:{"1":"D ND OD","36":"JD","516":"DC J MD aC","548":"KD LD"},J:{"1":"E A"},K:{"1":"A B C I 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS3 Background-image options",D:true};

  var backgroundClipText={A:{A:{"2":"K E F G A B bC"},B:{"1":"H N O P","33":"C L M","132":"9 AB BB CB DB EB FB D","164":"1 2 3 4 5 6 7 8 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},C:{"1":"1 2 3 4 5 6 7 8 9 fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB eC fC"},D:{"132":"9 AB BB CB DB EB FB D HC IC JC","164":"0 1 2 3 4 5 6 7 8 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},E:{"16":"gC KC","132":"9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","388":"M H mC nC MC NC","420":"J GB K E F G A B C L hC iC jC kC LC 7B 8B lC"},F:{"2":"G B C rC sC tC uC 7B ZC vC 8B","132":"p q r s t u","164":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o"},G:{"16":"KC wC aC xC","132":"9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","388":"DD ED FD MC NC","420":"F yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD"},H:{"2":"ID"},I:{"16":"DC JD KD LD","132":"D","164":"J MD aC ND OD"},J:{"164":"E A"},K:{"16":"A B C 7B ZC 8B","132":"I"},L:{"132":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"164":"9B"},P:{"1":"0","164":"J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"164":"aD"},R:{"164":"bD"},S:{"1":"cD dD"}},B:7,C:"Background-clip: text",D:true};

  var fontFeature={A:{A:{"1":"A B","2":"K E F G bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC fC","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB","164":"J GB K E F G A B C L M"},D:{"1":"1 2 3 4 5 6 7 8 9 eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H","33":"0 w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB","292":"N O P HB v"},E:{"1":"A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"E F G gC KC iC jC","4":"J GB K hC"},F:{"1":"RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB"},G:{"1":"2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F zC 0C 1C","4":"KC wC aC xC yC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC","33":"ND OD"},J:{"2":"E","33":"A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","33":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:2,C:"CSS font-feature-settings",D:true};

  var fontKerning={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G A B C L M H N O P HB v w x y eC fC","194":"0 z IB JB KB LB MB NB OB PB"},D:{"1":"1 2 3 4 5 6 7 8 9 PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB","33":"LB MB NB OB"},E:{"1":"A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K gC KC hC iC","33":"E F G jC"},F:{"1":"0 v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C H rC sC tC uC 7B ZC vC 8B","33":"N O P HB"},G:{"1":"7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC zC","33":"F 0C 1C 2C 3C 4C 5C 6C"},H:{"2":"ID"},I:{"1":"D OD","2":"DC J JD KD LD MD aC","33":"ND"},J:{"2":"E","33":"A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS3 font-kerning",D:true};

  var borderImage={A:{A:{"1":"B","2":"K E F G A bC"},B:{"1":"1 2 3 4 5 6 7 8 9 M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","129":"C L"},C:{"1":"1 2 3 4 5 6 7 8 9 gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC","260":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB","804":"J GB K E F G A B C L M eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","260":"hB iB jB kB lB","388":"MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB","1412":"0 H N O P HB v w x y z IB JB KB LB","1956":"J GB K E F G A B C L M"},E:{"1":"NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","129":"A B C L M H kC LC 7B 8B lC mC nC MC","1412":"K E F G iC jC","1956":"J GB gC KC hC"},F:{"1":"ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G rC sC","260":"UB VB WB XB YB","388":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB","1796":"tC uC","1828":"B C 7B ZC vC 8B"},G:{"1":"NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","129":"2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC","1412":"F yC zC 0C 1C","1956":"KC wC aC xC"},H:{"1828":"ID"},I:{"1":"D","388":"ND OD","1956":"DC J JD KD LD MD aC"},J:{"1412":"A","1924":"E"},K:{"1":"I","2":"A","1828":"B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"1":"B","2":"A"},O:{"1":"9B"},P:{"1":"0 v w x y z RD SD TD LC UD VD WD XD YD AC BC CC ZD","260":"PD QD","388":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","260":"cD"}},B:4,C:"CSS3 Border images",D:true};

  var cssSelection={A:{A:{"1":"G A B","2":"K E F bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","33":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC eC fC"},D:{"1":"0 1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"1":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC"},F:{"1":"0 B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u rC sC tC uC 7B ZC vC 8B","2":"G"},G:{"2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"1":"D ND OD","2":"DC J JD KD LD MD aC"},J:{"1":"A","2":"E"},K:{"1":"C I ZC 8B","16":"A B 7B"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","33":"cD"}},B:5,C:"::selection CSS pseudo-element",D:true};

  var cssPlaceholder={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","36":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","33":"0 HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB","130":"cC DC J GB K E F G A B C L M H N O P eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","36":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB"},E:{"1":"B C L M H LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J gC KC","36":"GB K E F G A hC iC jC kC"},F:{"1":"aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","36":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB"},G:{"1":"4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC","36":"F aC xC yC zC 0C 1C 2C 3C"},H:{"2":"ID"},I:{"1":"D","36":"DC J JD KD LD MD aC ND OD"},J:{"36":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"36":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z RD SD TD LC UD VD WD XD YD AC BC CC ZD","36":"J PD QD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","33":"cD"}},B:5,C:"::placeholder CSS pseudo-element",D:true};

  var cssPlaceholderShown={A:{A:{"2":"K E F G bC","292":"A B"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC fC","164":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB"},D:{"1":"1 2 3 4 5 6 7 8 9 dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB"},E:{"1":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E F gC KC hC iC jC"},F:{"1":"QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB rC sC tC uC 7B ZC vC 8B"},G:{"1":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F KC wC aC xC yC zC 0C"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","164":"cD"}},B:5,C:":placeholder-shown CSS pseudo-class",D:true};

  var cssHyphens={A:{A:{"2":"K E F G bC","33":"A B"},B:{"1":"1 2 3 4 5 6 7 8 9 o p q r s t u AB BB CB DB EB FB D","33":"C L M H N O P","132":"Q I R S T U V W","260":"X Y Z a b c d e f g h i j k l m n"},C:{"1":"1 2 3 4 5 6 7 8 9 ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB eC fC","33":"0 K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB"},D:{"1":"1 2 3 4 5 6 7 8 9 X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB","132":"lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W"},E:{"1":"BC TC UC VC WC XC YC CC qC","2":"J GB gC KC","33":"K E F G A B C L M H hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC"},F:{"1":"a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB rC sC tC uC 7B ZC vC 8B","132":"YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z"},G:{"1":"BC TC UC VC WC XC YC CC","2":"KC wC","33":"F aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J","132":"PD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS Hyphenation",D:true};

  var fullscreen={A:{A:{"2":"K E F G A bC","548":"B"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","516":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G eC fC","676":"0 A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB","1700":"dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB"},D:{"1":"1 2 3 4 5 6 7 8 9 zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M","676":"H N O P HB","804":"0 v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB"},E:{"1":"RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB gC KC","548":"NC 9B oC AC OC PC QC","676":"hC","804":"K E F G A B C L M H iC jC kC LC 7B 8B lC mC nC MC"},F:{"1":"sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 8B","2":"G B C rC sC tC uC 7B ZC vC","804":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB"},G:{"2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C","2052":"7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"2":"DC J D JD KD LD MD aC ND OD"},J:{"2":"E","292":"A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A","548":"B"},O:{"1":"9B"},P:{"1":"0 v w x y z LC UD VD WD XD YD AC BC CC ZD","804":"J PD QD RD SD TD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:1,C:"Fullscreen API",D:true};

  var mdnCssBackdropPseudoElement={A:{D:{"1":"1 2 3 4 5 6 7 8 9 TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB","33":"OB PB QB RB SB"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","33":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB eC fC"},M:{"1":"D"},A:{"2":"K E F G A bC","33":"B"},F:{"1":"0 z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C H N O P rC sC tC uC 7B ZC vC 8B","33":"HB v w x y"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC qC"},G:{"1":"NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},I:{"1":"D","2":"DC J JD KD LD MD aC","33":"ND OD"}},B:6,C:"CSS ::backdrop pseudo-element",D:undefined};

  var cssFileSelectorButton={A:{D:{"1":"1 2 3 4 5 6 7 8 9 Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","33":"C L M H N O P Q I R S T U V W X"},C:{"1":"1 2 3 4 5 6 7 8 9 GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R eC fC"},M:{"1":"D"},A:{"2":"K E F G bC","33":"A B"},F:{"1":"3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"H mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"qC","33":"J GB K E F G A B C L M gC KC hC iC jC kC LC 7B 8B lC"},G:{"1":"ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD"},P:{"1":"0 v w x y z YD AC BC CC ZD","33":"J PD QD RD SD TD LC UD VD WD XD"},I:{"1":"D","2":"DC J JD KD LD MD aC","33":"ND OD"}},B:6,C:"::file-selector-button CSS pseudo-element",D:undefined};

  var cssAutofill={A:{D:{"1":"1 2 3 4 5 6 7 8 9 t u AB BB CB DB EB FB D HC IC JC","33":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 t u AB BB CB DB EB FB D","2":"C L M H N O P","33":"Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s"},C:{"1":"1 2 3 4 5 6 7 8 9 V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U eC fC"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"1":"f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"H nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"qC","33":"J GB K E F G A B C L M gC KC hC iC jC kC LC 7B 8B lC mC"},G:{"1":"FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED"},P:{"1":"0 w x y z","33":"J v PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},I:{"1":"D","2":"DC J JD KD LD MD aC","33":"ND OD"}},B:6,C:":autofill CSS pseudo-class",D:undefined};

  var css3Tabsize={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC fC","33":"jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z","164":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB"},D:{"1":"1 2 3 4 5 6 7 8 9 YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H N O P HB v","132":"0 w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB"},E:{"1":"M H lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K gC KC hC","132":"E F G A B C L iC jC kC LC 7B 8B"},F:{"1":"LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G rC sC tC","132":"0 H N O P HB v w x y z IB JB KB","164":"B C uC 7B ZC vC 8B"},G:{"1":"CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC","132":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD"},H:{"164":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC","132":"ND OD"},J:{"132":"E A"},K:{"1":"I","2":"A","164":"B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"164":"cD dD"}},B:4,C:"CSS3 tab-size",D:true};

  var intrinsicWidth={A:{A:{"2":"K E F G A B bC"},B:{"2":"C L M H N O P","1025":"1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","1537":"Q I R S T U V W X Y Z a b c"},C:{"2":"cC","932":"0 DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB eC fC","2308":"1 2 3 4 5 6 7 8 9 uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC"},D:{"2":"J GB K E F G A B C L M H N O P HB v w","545":"0 x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB","1025":"1 2 3 4 5 6 7 8 9 d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","1537":"cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c"},E:{"1":"AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K gC KC hC","516":"B C L M H 7B 8B lC mC nC MC NC 9B oC","548":"G A kC LC","676":"E F iC jC"},F:{"2":"G B C rC sC tC uC 7B ZC vC 8B","513":"QB","545":"0 H N O P HB v w x y z IB JB KB LB MB NB OB","1025":"e f g h i j k l m n o p q r s t u","1537":"PB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d"},G:{"1":"AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC","516":"DD ED FD MC NC 9B GD","548":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD","676":"F zC 0C"},H:{"2":"ID"},I:{"2":"DC J JD KD LD MD aC","545":"ND OD","1025":"D"},J:{"2":"E","545":"A"},K:{"2":"A B C 7B ZC 8B","1025":"I"},L:{"1025":"D"},M:{"2308":"D"},N:{"2":"A B"},O:{"1537":"9B"},P:{"545":"J","1025":"0 v w x y z BC CC ZD","1537":"PD QD RD SD TD LC UD VD WD XD YD AC"},Q:{"1537":"aD"},R:{"1537":"bD"},S:{"932":"cD","2308":"dD"}},B:5,C:"Intrinsic & Extrinsic Sizing",D:true};

  var cssWidthStretch={A:{D:{"2":"J GB K E F G A B C L M H N O P HB v w","33":"0 1 2 3 4 5 6 7 8 9 x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},L:{"33":"D"},B:{"2":"C L M H N O P","33":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"2":"cC","33":"0 1 2 3 4 5 6 7 8 9 DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC eC fC"},M:{"33":"D"},A:{"2":"K E F G A B bC"},F:{"2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},K:{"2":"A B C 7B ZC 8B","33":"I"},E:{"2":"J GB K gC KC hC iC qC","33":"E F G A B C L M H jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC"},G:{"2":"KC wC aC xC yC","33":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},P:{"2":"J","33":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},I:{"2":"DC J JD KD LD MD aC","33":"D ND OD"}},B:6,C:"width: stretch property",D:undefined};

  var css3CursorsNewer={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","33":"cC DC J GB K E F G A B C L M H N O P HB v w x y eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB"},E:{"1":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"J GB K E F gC KC hC iC jC"},F:{"1":"0 C z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u vC 8B","2":"G B rC sC tC uC 7B ZC","33":"H N O P HB v w x y"},G:{"2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"33":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"2":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"2":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"2":"cD dD"}},B:2,C:"CSS3 Cursors: zoom-in & zoom-out",D:true};

  var css3CursorsGrab={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M"},C:{"1":"1 2 3 4 5 6 7 8 9 JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","33":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB"},E:{"1":"B C L M H 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"J GB K E F G A gC KC hC iC jC kC LC"},F:{"1":"C lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u vC 8B","2":"G B rC sC tC uC 7B ZC","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB"},G:{"2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"33":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"2":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"2":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"2":"cD dD"}},B:2,C:"CSS grab & grabbing cursors",D:true};

  var cssSticky={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H","1028":"Q I R S T U V W X Y Z","4100":"N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z eC fC","194":"IB JB KB LB MB NB","516":"OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB"},D:{"1":"1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H N O P HB v w x TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB","322":"0 y z IB JB KB LB MB NB OB PB QB RB SB iB jB kB lB","1028":"mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z"},E:{"1":"L M H lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K gC KC hC","33":"F G A B C jC kC LC 7B 8B","2084":"E iC"},F:{"1":"6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB rC sC tC uC 7B ZC vC 8B","322":"VB WB XB","1028":"YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B"},G:{"1":"9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC","33":"F 0C 1C 2C 3C 4C 5C 6C 7C 8C","2084":"yC zC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J PD"},Q:{"1028":"aD"},R:{"1":"bD"},S:{"1":"dD","516":"cD"}},B:5,C:"CSS position:sticky",D:true};

  var pointer={A:{A:{"1":"B","2":"K E F G bC","164":"A"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB eC fC","8":"0 K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB","328":"XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB"},D:{"1":"1 2 3 4 5 6 7 8 9 lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H N O P HB v w","8":"0 x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB","584":"iB jB kB"},E:{"1":"L M H lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K gC KC hC","8":"E F G A B C iC jC kC LC 7B","1096":"8B"},F:{"1":"YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","8":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB","584":"VB WB XB"},G:{"1":"AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","8":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C","6148":"9C"},H:{"2":"ID"},I:{"1":"D","8":"DC J JD KD LD MD aC ND OD"},J:{"8":"E A"},K:{"1":"I","2":"A","8":"B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"1":"B","36":"A"},O:{"1":"9B"},P:{"1":"0 v w x y z QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"PD","8":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","328":"cD"}},B:2,C:"Pointer events",D:true};

  var textDecoration={A:{A:{"2":"K E F G A B bC"},B:{"2":"C L M H N O P","2052":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"2":"cC DC J GB eC fC","1028":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","1060":"0 K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB"},D:{"2":"0 J GB K E F G A B C L M H N O P HB v w x y z","226":"IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB","2052":"1 2 3 4 5 6 7 8 9 nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"2":"J GB K E gC KC hC iC","772":"L M H 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","804":"F G A B C kC LC 7B","1316":"jC"},F:{"2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB rC sC tC uC 7B ZC vC 8B","226":"RB SB TB UB VB WB XB YB ZB","2052":"aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},G:{"2":"KC wC aC xC yC zC","292":"F 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"2":"A B C 7B ZC 8B","2052":"I"},L:{"2052":"D"},M:{"1028":"D"},N:{"2":"A B"},O:{"2052":"9B"},P:{"2":"J PD QD","2052":"0 v w x y z RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"2052":"aD"},R:{"2052":"bD"},S:{"1028":"cD dD"}},B:4,C:"text-decoration styling",D:true};

  var mdnTextDecorationShorthand={A:{D:{"1":"1 2 3 4 5 6 7 8 9 nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"0 1 2 3 4 5 6 7 8 9 K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB eC fC"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"1":"aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB rC sC tC uC 7B ZC vC 8B"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"2":"J GB K E gC KC hC iC jC qC","33":"F G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC"},G:{"2":"KC wC aC xC yC zC","33":"F 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},P:{"1":"0 v w x y z RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J PD QD"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"}},B:6,C:"text-decoration shorthand property",D:undefined};

  var mdnTextDecorationColor={A:{D:{"1":"1 2 3 4 5 6 7 8 9 nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB eC fC","33":"0 K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"1":"aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB rC sC tC uC 7B ZC vC 8B"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"L M H 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"J GB K E gC KC hC iC jC qC","33":"F G A B C kC LC 7B"},G:{"1":"8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC zC","33":"F 0C 1C 2C 3C 4C 5C 6C 7C"},P:{"1":"0 v w x y z RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J PD QD"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"}},B:6,C:"text-decoration-color property",D:undefined};

  var mdnTextDecorationLine={A:{D:{"1":"1 2 3 4 5 6 7 8 9 nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB eC fC","33":"0 K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"1":"aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB rC sC tC uC 7B ZC vC 8B"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"L M H 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"J GB K E gC KC hC iC jC qC","33":"F G A B C kC LC 7B"},G:{"1":"8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC zC","33":"F 0C 1C 2C 3C 4C 5C 6C 7C"},P:{"1":"0 v w x y z RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J PD QD"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"}},B:6,C:"text-decoration-line property",D:undefined};

  var mdnTextDecorationStyle={A:{D:{"1":"1 2 3 4 5 6 7 8 9 nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB eC fC","33":"0 K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"1":"aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB rC sC tC uC 7B ZC vC 8B"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"L M H 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"J GB K E gC KC hC iC jC qC","33":"F G A B C kC LC 7B"},G:{"1":"8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC zC","33":"F 0C 1C 2C 3C 4C 5C 6C 7C"},P:{"1":"0 v w x y z RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J PD QD"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"}},B:6,C:"text-decoration-style property",D:undefined};

  var textSizeAdjust={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","33":"C L M H N O P"},C:{"2":"0 1 2 3 4 5 6 7 8 9 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB","258":"IB"},E:{"2":"J GB K E F G A B C L M H gC KC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","258":"hC"},F:{"1":"ZB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB aB rC sC tC uC 7B ZC vC 8B"},G:{"2":"KC wC aC","33":"F xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"33":"D"},N:{"161":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"2":"cD dD"}},B:7,C:"CSS text-size-adjust",D:true};

  var cssMasks={A:{A:{"2":"K E F G A B bC"},B:{"1":"9 AB BB CB DB EB FB D","2":"C L M H N","164":"1 2 3 4 5 6 7 8 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","3138":"O","12292":"P"},C:{"1":"1 2 3 4 5 6 7 8 9 jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC","260":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB eC fC"},D:{"1":"9 AB BB CB DB EB FB D HC IC JC","164":"0 1 2 3 4 5 6 7 8 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},E:{"1":"NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"gC KC","164":"J GB K E F G A B C L M H hC iC jC kC LC 7B 8B lC mC nC MC"},F:{"1":"p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","164":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o"},G:{"1":"NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","164":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC"},H:{"2":"ID"},I:{"1":"D","164":"ND OD","676":"DC J JD KD LD MD aC"},J:{"164":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"164":"9B"},P:{"1":"0","164":"J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"164":"aD"},R:{"164":"bD"},S:{"1":"dD","260":"cD"}},B:4,C:"CSS Masks",D:true};

  var cssClipPath={A:{A:{"2":"K E F G A B bC"},B:{"2":"C L M H N O","260":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","3138":"P"},C:{"1":"1 2 3 4 5 6 7 8 9 kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC","132":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB eC fC","644":"dB eB fB gB hB iB jB"},D:{"2":"J GB K E F G A B C L M H N O P HB v w x y","260":"1 2 3 4 5 6 7 8 9 lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","292":"0 z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB"},E:{"2":"J GB K gC KC hC iC","260":"M H lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","292":"E F G A B C L jC kC LC 7B 8B"},F:{"2":"G B C rC sC tC uC 7B ZC vC 8B","260":"YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","292":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB"},G:{"2":"KC wC aC xC yC","260":"9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","292":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C"},H:{"2":"ID"},I:{"2":"DC J JD KD LD MD aC","260":"D","292":"ND OD"},J:{"2":"E A"},K:{"2":"A B C 7B ZC 8B","260":"I"},L:{"260":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"260":"9B"},P:{"260":"0 v w x y z QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","292":"J PD"},Q:{"260":"aD"},R:{"260":"bD"},S:{"1":"dD","644":"cD"}},B:4,C:"CSS clip-path property (for HTML)",D:true};

  var cssBoxdecorationbreak={A:{A:{"2":"K E F G A B bC"},B:{"2":"C L M H N O P","164":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB eC fC"},D:{"2":"J GB K E F G A B C L M H N O P HB v w","164":"0 1 2 3 4 5 6 7 8 9 x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"2":"J GB K gC KC hC","164":"E F G A B C L M H iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC"},F:{"2":"G rC sC tC uC","129":"B C 7B ZC vC 8B","164":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},G:{"2":"KC wC aC xC yC","164":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"132":"ID"},I:{"2":"DC J JD KD LD MD aC","164":"D ND OD"},J:{"2":"E","164":"A"},K:{"2":"A","129":"B C 7B ZC 8B","164":"I"},L:{"164":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"164":"9B"},P:{"164":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"164":"aD"},R:{"164":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS box-decoration-break",D:true};

  var objectFit={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H","260":"N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB"},E:{"1":"A B C L M H LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E gC KC hC iC","132":"F G jC kC"},F:{"1":"0 HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G H N O P rC sC tC","33":"B C uC 7B ZC vC 8B"},G:{"1":"3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC zC","132":"F 0C 1C 2C"},H:{"33":"ID"},I:{"1":"D OD","2":"DC J JD KD LD MD aC ND"},J:{"2":"E A"},K:{"1":"I","2":"A","33":"B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS3 object-fit/object-position",D:true};

  var cssShapes={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB eC fC","322":"hB iB jB kB lB mB nB oB EC pB FC"},D:{"1":"1 2 3 4 5 6 7 8 9 TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB","194":"QB RB SB"},E:{"1":"B C L M H LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E gC KC hC iC","33":"F G A jC kC"},F:{"1":"0 z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C H N O P HB v w x y rC sC tC uC 7B ZC vC 8B"},G:{"1":"4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC zC","33":"F 0C 1C 2C 3C"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","2":"cD"}},B:4,C:"CSS Shapes Level 1",D:true};

  var textOverflow={A:{A:{"1":"K E F G A B","2":"bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"0 1 2 3 4 5 6 7 8 9 E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","8":"cC DC J GB K eC fC"},D:{"1":"0 1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"1":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC"},F:{"1":"0 B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 7B ZC vC 8B","33":"G rC sC tC uC"},G:{"1":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"1":"ID"},I:{"1":"DC J D JD KD LD MD aC ND OD"},J:{"1":"E A"},K:{"1":"I 8B","33":"A B C 7B ZC"},L:{"1":"D"},M:{"1":"D"},N:{"1":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:2,C:"CSS3 Text-overflow",D:true};

  var cssDeviceadaptation={A:{A:{"2":"K E F G bC","164":"A B"},B:{"66":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","164":"C L M H N O P"},C:{"2":"0 1 2 3 4 5 6 7 8 9 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC eC fC"},D:{"2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB","66":"1 2 3 4 5 6 7 8 9 LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"2":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC"},F:{"2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB rC sC tC uC 7B ZC vC 8B","66":"WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},G:{"2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"292":"ID"},I:{"2":"DC J D JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"2":"A I","292":"B C 7B ZC 8B"},L:{"2":"D"},M:{"2":"D"},N:{"164":"A B"},O:{"2":"9B"},P:{"2":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"66":"aD"},R:{"2":"bD"},S:{"2":"cD dD"}},B:5,C:"CSS Device Adaptation",D:true};

  var cssMediaResolution={A:{A:{"2":"K E F bC","132":"G A B"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","1028":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC","260":"J GB K E F G A B C L M H eC fC","1028":"0 N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC"},D:{"1":"1 2 3 4 5 6 7 8 9 wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","548":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB","1028":"LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB"},E:{"1":"AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"gC KC","548":"J GB K E F G A B C L M H hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC"},F:{"1":"lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u 8B","2":"G","548":"B C rC sC tC uC 7B ZC vC","1028":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB"},G:{"1":"AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","16":"KC","548":"F wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD"},H:{"132":"ID"},I:{"1":"D","16":"JD KD","548":"DC J LD MD aC","1028":"ND OD"},J:{"548":"E A"},K:{"1":"I 8B","548":"A B C 7B ZC"},L:{"1":"D"},M:{"1":"D"},N:{"132":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z LC UD VD WD XD YD AC BC CC ZD","1028":"J PD QD RD SD TD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"Media Queries: resolution feature",D:true};

  var cssTextAlignLast={A:{A:{"132":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","4":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G A B eC fC","33":"0 C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB"},D:{"1":"1 2 3 4 5 6 7 8 9 dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB","322":"RB SB TB UB VB WB XB YB ZB aB bB cB"},E:{"1":"AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC"},F:{"1":"QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C H N O P HB v w rC sC tC uC 7B ZC vC 8B","578":"0 x y z IB JB KB LB MB NB OB PB"},G:{"1":"AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"132":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","33":"cD"}},B:4,C:"CSS3 text-align-last",D:true};

  var cssCrispEdges={A:{A:{"2":"K bC","2340":"E F G A B"},B:{"2":"C L M H N O P","1025":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC eC","513":"tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b","545":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB fC"},D:{"2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB","1025":"1 2 3 4 5 6 7 8 9 XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"1":"A B C L M H LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB gC KC hC","164":"K","4644":"E F G iC jC kC"},F:{"2":"0 G B H N O P HB v w x y z IB JB rC sC tC uC 7B ZC","545":"C vC 8B","1025":"KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},G:{"1":"3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC","4260":"xC yC","4644":"F zC 0C 1C 2C"},H:{"2":"ID"},I:{"2":"DC J JD KD LD MD aC ND OD","1025":"D"},J:{"2":"E","4260":"A"},K:{"2":"A B 7B ZC","545":"C 8B","1025":"I"},L:{"1025":"D"},M:{"1":"D"},N:{"2340":"A B"},O:{"1025":"9B"},P:{"1025":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1025":"aD"},R:{"1025":"bD"},S:{"1":"dD","4097":"cD"}},B:4,C:"Crisp edges/pixelated images",D:true};

  var cssLogicalProps={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P","1028":"W X","1540":"Q I R S T U V"},C:{"1":"1 2 3 4 5 6 7 8 9 uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC","164":"0 DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB eC fC","1540":"XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB"},D:{"1":"1 2 3 4 5 6 7 8 9 Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","292":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB","1028":"W X","1540":"xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V"},E:{"1":"H nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","292":"J GB K E F G A B C gC KC hC iC jC kC LC 7B","1540":"L M 8B lC","3076":"mC"},F:{"1":"4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","292":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB","1028":"2B 3B","1540":"mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B"},G:{"1":"FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","292":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C","1540":"8C 9C AD BD CD DD","3076":"ED"},H:{"2":"ID"},I:{"1":"D","292":"DC J JD KD LD MD aC ND OD"},J:{"292":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z YD AC BC CC ZD","292":"J PD QD RD SD TD","1540":"LC UD VD WD XD"},Q:{"1540":"aD"},R:{"1":"bD"},S:{"1":"dD","1540":"cD"}},B:5,C:"CSS Logical Properties",D:true};

  var cssAppearance={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","33":"S","164":"Q I R","388":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","164":"RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q","676":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","33":"S","164":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R"},E:{"1":"NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","164":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC"},F:{"1":"1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"yB zB 0B","164":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB"},G:{"1":"NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","164":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC"},H:{"2":"ID"},I:{"1":"D","164":"DC J JD KD LD MD aC ND OD"},J:{"164":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A","388":"B"},O:{"1":"9B"},P:{"1":"0 v w x y z XD YD AC BC CC ZD","164":"J PD QD RD SD TD LC UD VD WD"},Q:{"164":"aD"},R:{"1":"bD"},S:{"1":"dD","164":"cD"}},B:5,C:"CSS Appearance",D:true};

  var cssSnappoints={A:{A:{"2":"K E F G bC","6308":"A","6436":"B"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","6436":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB eC fC","2052":"VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB"},D:{"1":"1 2 3 4 5 6 7 8 9 xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB","8258":"uB vB wB"},E:{"1":"B C L M H 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E F gC KC hC iC jC","3108":"G A kC LC"},F:{"1":"sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB rC sC tC uC 7B ZC vC 8B","8258":"kB lB mB nB oB pB qB rB"},G:{"1":"5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F KC wC aC xC yC zC 0C","3108":"1C 2C 3C 4C"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z LC UD VD WD XD YD AC BC CC ZD","2":"J PD QD RD SD TD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","2052":"cD"}},B:4,C:"CSS Scroll Snap",D:true};

  var cssRegions={A:{A:{"2":"K E F G bC","420":"A B"},B:{"2":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","420":"C L M H N O P"},C:{"2":"0 1 2 3 4 5 6 7 8 9 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC eC fC"},D:{"2":"1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","36":"H N O P","66":"0 HB v w x y z IB JB KB LB MB NB OB PB QB"},E:{"2":"J GB K C L M H gC KC hC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","33":"E F G A B iC jC kC LC"},F:{"2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u rC sC tC uC 7B ZC vC 8B"},G:{"2":"KC wC aC xC yC 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","33":"F zC 0C 1C 2C 3C 4C 5C"},H:{"2":"ID"},I:{"2":"DC J D JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"2":"A B C I 7B ZC 8B"},L:{"2":"D"},M:{"2":"D"},N:{"420":"A B"},O:{"2":"9B"},P:{"2":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"2":"aD"},R:{"2":"bD"},S:{"2":"cD dD"}},B:5,C:"CSS Regions",D:true};

  var cssImageSet={A:{A:{"2":"K E F G A B bC"},B:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB FB D","2":"C L M H N O P","164":"1 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2049":"2"},C:{"1":"2 3 4 5 6 7 8 9 AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U eC fC","66":"V W","2305":"1 Y Z a b c d e f g h i j k l m n o p q r s t u","2820":"X"},D:{"1":"3 4 5 6 7 8 9 AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H N O P HB v","164":"0 1 w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2049":"2"},E:{"1":"BC TC UC VC WC XC YC CC qC","2":"J GB gC KC hC","132":"A B C L LC 7B 8B lC","164":"K E F G iC jC kC","1540":"M H mC nC MC NC 9B oC AC OC PC QC RC SC pC"},F:{"1":"j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","164":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h","2049":"i"},G:{"1":"BC TC UC VC WC XC YC CC","2":"KC wC aC xC","132":"3C 4C 5C 6C 7C 8C 9C AD BD CD","164":"F yC zC 0C 1C 2C","1540":"DD ED FD MC NC 9B GD AC OC PC QC RC SC HD"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC","164":"ND OD"},J:{"2":"E","164":"A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"164":"9B"},P:{"1":"0 y z","164":"J v w x PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"164":"aD"},R:{"164":"bD"},S:{"2":"cD dD"}},B:5,C:"CSS image-set",D:true};

  var cssWritingMode={A:{A:{"132":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 C L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB eC fC","322":"SB TB UB VB WB"},D:{"1":"1 2 3 4 5 6 7 8 9 eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K","16":"E","33":"0 F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB"},E:{"1":"B C L M H 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J gC KC","16":"GB","33":"K E F G A hC iC jC kC LC"},F:{"1":"RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB"},G:{"1":"5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","16":"KC wC aC","33":"F xC yC zC 0C 1C 2C 3C 4C"},H:{"2":"ID"},I:{"1":"D","2":"JD KD LD","33":"DC J MD aC ND OD"},J:{"33":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"36":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","33":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:2,C:"CSS writing-mode property",D:true};

  var cssCrossFade={A:{A:{"2":"K E F G A B bC"},B:{"2":"C L M H N O P","33":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"2":"0 1 2 3 4 5 6 7 8 9 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC eC fC"},D:{"2":"J GB K E F G A B C L M H N","33":"0 1 2 3 4 5 6 7 8 9 O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"1":"A B C L M H LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB gC KC","33":"K E F G hC iC jC kC"},F:{"2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},G:{"1":"3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC","33":"F xC yC zC 0C 1C 2C"},H:{"2":"ID"},I:{"2":"DC J JD KD LD MD aC","33":"D ND OD"},J:{"2":"E A"},K:{"2":"A B C 7B ZC 8B","33":"I"},L:{"33":"D"},M:{"2":"D"},N:{"2":"A B"},O:{"33":"9B"},P:{"33":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"33":"aD"},R:{"33":"bD"},S:{"2":"cD dD"}},B:4,C:"CSS Cross-Fade Function",D:true};

  var cssReadOnlyWrite={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 L M H N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C"},C:{"1":"1 2 3 4 5 6 7 8 9 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","16":"cC","33":"0 DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","16":"J GB K E F G A B C L M","132":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB"},E:{"1":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","16":"gC KC","132":"J GB K E F hC iC jC"},F:{"1":"0 y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","16":"G B rC sC tC uC 7B","132":"C H N O P HB v w x ZC vC 8B"},G:{"1":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","16":"KC wC","132":"F aC xC yC zC 0C"},H:{"2":"ID"},I:{"1":"D","16":"JD KD","132":"DC J LD MD aC ND OD"},J:{"1":"A","132":"E"},K:{"1":"I","2":"A B 7B","132":"C ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","33":"cD"}},B:1,C:"CSS :read-only and :read-write selectors",D:true};

  var textEmphasis={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P","164":"Q I R S T U V W X Y Z a b c d e f g h"},C:{"1":"1 2 3 4 5 6 7 8 9 cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB eC fC","322":"bB"},D:{"1":"1 2 3 4 5 6 7 8 9 i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H N O P HB v w x y z","164":"0 IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h"},E:{"1":"F G A B C L M H jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K gC KC hC","164":"E iC"},F:{"1":"V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","164":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U"},G:{"1":"F zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC","164":"ND OD"},J:{"2":"E","164":"A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z CC ZD","164":"J PD QD RD SD TD LC UD VD WD XD YD AC BC"},Q:{"164":"aD"},R:{"164":"bD"},S:{"1":"cD dD"}},B:4,C:"text-emphasis styling",D:true};

  var cssGrid={A:{A:{"2":"K E F bC","8":"G","292":"A B"},B:{"1":"1 2 3 4 5 6 7 8 9 N O P Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","292":"C L M H"},C:{"1":"1 2 3 4 5 6 7 8 9 kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G A B C L M H N O P eC fC","8":"0 HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB","584":"WB XB YB ZB aB bB cB dB eB fB gB hB","1025":"iB jB"},D:{"1":"1 2 3 4 5 6 7 8 9 oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H N O P HB v w x y z","8":"0 IB JB KB","200":"LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB","1025":"nB"},E:{"1":"B C L M H LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB gC KC hC","8":"K E F G A iC jC kC"},F:{"1":"aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB rC sC tC uC 7B ZC vC 8B","200":"KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB"},G:{"1":"4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC","8":"F yC zC 0C 1C 2C 3C"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD","8":"aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"292":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"PD","8":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:4,C:"CSS Grid Layout (level 1)",D:true};

  var cssTextSpacing={A:{A:{"2":"K E bC","161":"F G A B"},B:{"2":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","161":"C L M H N O P"},C:{"2":"0 1 2 3 4 5 6 7 8 9 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC eC fC"},D:{"2":"0 1 2 3 4 5 6 7 8 9 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},E:{"2":"J GB K E F G A B C L M H gC KC hC iC jC kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC"},F:{"2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u rC sC tC uC 7B ZC vC 8B"},G:{"2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC"},H:{"2":"ID"},I:{"2":"DC J D JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"2":"A B C I 7B ZC 8B"},L:{"2":"D"},M:{"2":"D"},N:{"16":"A B"},O:{"2":"9B"},P:{"2":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},Q:{"2":"aD"},R:{"2":"bD"},S:{"2":"cD dD"}},B:5,C:"CSS Text 4 text-spacing",D:false};

  var cssAnyLink={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","16":"cC","33":"0 DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","16":"J GB K E F G A B C L M","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB"},E:{"1":"G A B C L M H kC LC 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","16":"J GB K gC KC hC","33":"E F iC jC"},F:{"1":"iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB"},G:{"1":"1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","16":"KC wC aC xC","33":"F yC zC 0C"},H:{"2":"ID"},I:{"1":"D","16":"DC J JD KD LD MD aC","33":"ND OD"},J:{"16":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z TD LC UD VD WD XD YD AC BC CC ZD","16":"J","33":"PD QD RD SD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","33":"cD"}},B:5,C:"CSS :any-link selector",D:true};

  var mdnCssUnicodeBidiIsolate={A:{D:{"1":"1 2 3 4 5 6 7 8 9 eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"J GB K E F G A B C L M H","33":"0 N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G eC fC","33":"0 A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"1":"RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"B C L M H 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"J GB gC KC hC qC","33":"K E F G A iC jC kC LC"},G:{"1":"5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC","33":"F yC zC 0C 1C 2C 3C 4C"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"}},B:6,C:"isolate from unicode-bidi",D:undefined};

  var mdnCssUnicodeBidiPlaintext={A:{D:{"1":"1 2 3 4 5 6 7 8 9 eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G eC fC","33":"0 A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"1":"RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB rC sC tC uC 7B ZC vC 8B"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"B C L M H 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"J GB gC KC hC qC","33":"K E F G A iC jC kC LC"},G:{"1":"5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC","33":"F yC zC 0C 1C 2C 3C 4C"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"}},B:6,C:"plaintext from unicode-bidi",D:undefined};

  var mdnCssUnicodeBidiIsolateOverride={A:{D:{"1":"1 2 3 4 5 6 7 8 9 eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB"},L:{"1":"D"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"cC DC J GB K E F G A B C L M H N eC fC","33":"0 O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"1":"RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB rC sC tC uC 7B ZC vC 8B"},K:{"1":"I","2":"A B C 7B ZC 8B"},E:{"1":"B C L M H 7B 8B lC mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"J GB K gC KC hC iC qC","33":"E F G A jC kC LC"},G:{"1":"5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC yC","33":"F zC 0C 1C 2C 3C 4C"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"}},B:6,C:"isolate-override from unicode-bidi",D:undefined};

  var cssOverscrollBehavior={A:{A:{"2":"K E F G bC","132":"A B"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","132":"C L M H N O","516":"P"},C:{"1":"1 2 3 4 5 6 7 8 9 EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB eC fC"},D:{"1":"1 2 3 4 5 6 7 8 9 tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB","260":"rB sB"},E:{"1":"AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E F G A B C L M gC KC hC iC jC kC LC 7B 8B lC","1090":"H mC nC MC NC 9B oC"},F:{"1":"iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB rC sC tC uC 7B ZC vC 8B","260":"gB hB"},G:{"1":"AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F KC wC aC xC yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD","1090":"ED FD MC NC 9B GD"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"132":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J PD QD RD"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"dD","2":"cD"}},B:5,C:"CSS overscroll-behavior",D:true};

  var cssTextOrientation={A:{A:{"2":"K E F G A B bC"},B:{"1":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D","2":"C L M H N O P"},C:{"1":"1 2 3 4 5 6 7 8 9 XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB eC fC","194":"UB VB WB"},D:{"1":"1 2 3 4 5 6 7 8 9 eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC","2":"0 J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB"},E:{"1":"M H mC nC MC NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC qC","2":"J GB K E F G gC KC hC iC jC kC","16":"A","33":"B C L LC 7B 8B lC"},F:{"1":"RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u","2":"0 G B C H N O P HB v w x y z IB JB KB LB MB NB OB PB QB rC sC tC uC 7B ZC vC 8B"},G:{"1":"3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"F KC wC aC xC yC zC 0C 1C 2C"},H:{"2":"ID"},I:{"1":"D","2":"DC J JD KD LD MD aC ND OD"},J:{"2":"E A"},K:{"1":"I","2":"A B C 7B ZC 8B"},L:{"1":"D"},M:{"1":"D"},N:{"2":"A B"},O:{"1":"9B"},P:{"1":"0 v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD","2":"J"},Q:{"1":"aD"},R:{"1":"bD"},S:{"1":"cD dD"}},B:2,C:"CSS text-orientation",D:true};

  var cssPrintColorAdjust={A:{D:{"2":"J GB K E F G A B C L M H N","33":"0 1 2 3 4 5 6 7 8 9 O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC"},L:{"33":"D"},B:{"2":"C L M H N O P","33":"1 2 3 4 5 6 7 8 9 Q I R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u AB BB CB DB EB FB D"},C:{"1":"1 2 3 4 5 6 7 8 9 g h i j k l m n o p q r s t u AB BB CB DB EB FB D HC IC JC dC","2":"0 cC DC J GB K E F G A B C L M H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eC fC","33":"eB fB gB hB iB jB kB lB mB nB oB EC pB FC qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f"},M:{"1":"D"},A:{"2":"K E F G A B bC"},F:{"2":"G B C rC sC tC uC 7B ZC vC 8B","33":"0 H N O P HB v w x y z IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB rB sB tB uB vB wB xB yB zB 0B 1B 2B 3B 4B 5B 6B Q I R GC S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u"},K:{"2":"A B C 7B ZC 8B","33":"I"},E:{"1":"NC 9B oC AC OC PC QC RC SC pC BC TC UC VC WC XC YC CC","2":"J GB gC KC hC qC","33":"K E F G A B C L M H iC jC kC LC 7B 8B lC mC nC MC"},G:{"1":"NC 9B GD AC OC PC QC RC SC HD BC TC UC VC WC XC YC CC","2":"KC wC aC xC","33":"F yC zC 0C 1C 2C 3C 4C 5C 6C 7C 8C 9C AD BD CD DD ED FD MC"},P:{"33":"0 J v w x y z PD QD RD SD TD LC UD VD WD XD YD AC BC CC ZD"},I:{"2":"DC J JD KD LD MD aC","33":"D ND OD"}},B:6,C:"print-color-adjust property",D:undefined};

  function browsersSort(a, b) {
    a = a.split(' ');
    b = b.split(' ');
    if (a[0] > b[0]) {
      return 1
    } else if (a[0] < b[0]) {
      return -1
    } else {
      return Math.sign(parseFloat(a[1]) - parseFloat(b[1]))
    }
  }

  // Convert Can I Use data
  function f(data, opts, callback) {
    data = feature(data);

    if (!callback) {
  [callback, opts] = [opts, {}];
    }

    let match = opts.match || /\sx($|\s)/;
    let need = [];

    for (let browser in data.stats) {
      let versions = data.stats[browser];
      for (let version in versions) {
        let support = versions[version];
        if (support.match(match)) {
          need.push(browser + ' ' + version);
        }
      }
    }

    callback(need.sort(browsersSort));
  }

  // Add data for all properties
  let result = {};

  function prefix$1(names, data) {
    for (let name of names) {
      result[name] = Object.assign({}, data);
    }
  }

  function add(names, data) {
    for (let name of names) {
      result[name].browsers = result[name].browsers
        .concat(data.browsers)
        .sort(browsersSort);
    }
  }

  var prefixes = result;

  // Border Radius


  f(borderRadius, browsers =>
    prefix$1(
      [
        'border-radius',
        'border-top-left-radius',
        'border-top-right-radius',
        'border-bottom-right-radius',
        'border-bottom-left-radius'
      ],
      {
        browsers,
        feature: 'border-radius',
        mistakes: ['-khtml-', '-ms-', '-o-']
      }
    )
  );

  // Box Shadow


  f(cssBoxshadow, browsers =>
    prefix$1(['box-shadow'], {
      browsers,
      feature: 'css-boxshadow',
      mistakes: ['-khtml-']
    })
  );

  // Animation


  f(cssAnimation, browsers =>
    prefix$1(
      [
        'animation',
        'animation-name',
        'animation-duration',
        'animation-delay',
        'animation-direction',
        'animation-fill-mode',
        'animation-iteration-count',
        'animation-play-state',
        'animation-timing-function',
        '@keyframes'
      ],
      {
        browsers,
        feature: 'css-animation',
        mistakes: ['-khtml-', '-ms-']
      }
    )
  );

  // Transition


  f(cssTransitions, browsers =>
    prefix$1(
      [
        'transition',
        'transition-property',
        'transition-duration',
        'transition-delay',
        'transition-timing-function'
      ],
      {
        browsers,
        feature: 'css-transitions',
        mistakes: ['-khtml-', '-ms-']
      }
    )
  );

  // Transform 2D


  f(transforms2d, browsers =>
    prefix$1(['transform', 'transform-origin'], {
      browsers,
      feature: 'transforms2d'
    })
  );

  // Transform 3D


  f(transforms3d, browsers => {
    prefix$1(['perspective', 'perspective-origin'], {
      browsers,
      feature: 'transforms3d'
    });
    return prefix$1(['transform-style'], {
      browsers,
      feature: 'transforms3d',
      mistakes: ['-ms-', '-o-']
    })
  });

  f(transforms3d, { match: /y\sx|y\s#2/ }, browsers =>
    prefix$1(['backface-visibility'], {
      browsers,
      feature: 'transforms3d',
      mistakes: ['-ms-', '-o-']
    })
  );

  // Gradients


  f(cssGradients, { match: /y\sx/ }, browsers =>
    prefix$1(
      [
        'linear-gradient',
        'repeating-linear-gradient',
        'radial-gradient',
        'repeating-radial-gradient'
      ],
      {
        browsers,
        feature: 'css-gradients',
        mistakes: ['-ms-'],
        props: [
          'background',
          'background-image',
          'border-image',
          'mask',
          'list-style',
          'list-style-image',
          'content',
          'mask-image'
        ]
      }
    )
  );

  f(cssGradients, { match: /a\sx/ }, browsers => {
    browsers = browsers.map(i => {
      if (/firefox|op/.test(i)) {
        return i
      } else {
        return `${i} old`
      }
    });
    return add(
      [
        'linear-gradient',
        'repeating-linear-gradient',
        'radial-gradient',
        'repeating-radial-gradient'
      ],
      {
        browsers,
        feature: 'css-gradients'
      }
    )
  });

  // Box sizing


  f(css3Boxsizing, browsers =>
    prefix$1(['box-sizing'], {
      browsers,
      feature: 'css3-boxsizing'
    })
  );

  // Filter Effects


  f(cssFilters, browsers =>
    prefix$1(['filter'], {
      browsers,
      feature: 'css-filters'
    })
  );

  // filter() function


  f(cssFilterFunction, browsers =>
    prefix$1(['filter-function'], {
      browsers,
      feature: 'css-filter-function',
      props: [
        'background',
        'background-image',
        'border-image',
        'mask',
        'list-style',
        'list-style-image',
        'content',
        'mask-image'
      ]
    })
  );

  // Backdrop-filter


  f(cssBackdropFilter, { match: /y\sx|y\s#2/ }, browsers =>
    prefix$1(['backdrop-filter'], {
      browsers,
      feature: 'css-backdrop-filter'
    })
  );

  // element() function


  f(cssElementFunction, browsers =>
    prefix$1(['element'], {
      browsers,
      feature: 'css-element-function',
      props: [
        'background',
        'background-image',
        'border-image',
        'mask',
        'list-style',
        'list-style-image',
        'content',
        'mask-image'
      ]
    })
  );

  // Multicolumns


  f(multicolumn, browsers => {
    prefix$1(
      [
        'columns',
        'column-width',
        'column-gap',
        'column-rule',
        'column-rule-color',
        'column-rule-width',
        'column-count',
        'column-rule-style',
        'column-span',
        'column-fill'
      ],
      {
        browsers,
        feature: 'multicolumn'
      }
    );

    let noff = browsers.filter(i => !/firefox/.test(i));
    prefix$1(['break-before', 'break-after', 'break-inside'], {
      browsers: noff,
      feature: 'multicolumn'
    });
  });

  // User select


  f(userSelectNone, browsers =>
    prefix$1(['user-select'], {
      browsers,
      feature: 'user-select-none',
      mistakes: ['-khtml-']
    })
  );

  // Flexible Box Layout


  f(flexbox, { match: /a\sx/ }, browsers => {
    browsers = browsers.map(i => {
      if (/ie|firefox/.test(i)) {
        return i
      } else {
        return `${i} 2009`
      }
    });
    prefix$1(['display-flex', 'inline-flex'], {
      browsers,
      feature: 'flexbox',
      props: ['display']
    });
    prefix$1(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {
      browsers,
      feature: 'flexbox'
    });
    prefix$1(
      [
        'flex-direction',
        'flex-wrap',
        'flex-flow',
        'justify-content',
        'order',
        'align-items',
        'align-self',
        'align-content'
      ],
      {
        browsers,
        feature: 'flexbox'
      }
    );
  });

  f(flexbox, { match: /y\sx/ }, browsers => {
    add(['display-flex', 'inline-flex'], {
      browsers,
      feature: 'flexbox'
    });
    add(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {
      browsers,
      feature: 'flexbox'
    });
    add(
      [
        'flex-direction',
        'flex-wrap',
        'flex-flow',
        'justify-content',
        'order',
        'align-items',
        'align-self',
        'align-content'
      ],
      {
        browsers,
        feature: 'flexbox'
      }
    );
  });

  // calc() unit


  f(calc, browsers =>
    prefix$1(['calc'], {
      browsers,
      feature: 'calc',
      props: ['*']
    })
  );

  // Background options


  f(backgroundImgOpts, browsers =>
    prefix$1(['background-origin', 'background-size'], {
      browsers,
      feature: 'background-img-opts'
    })
  );

  // background-clip: text


  f(backgroundClipText, browsers =>
    prefix$1(['background-clip'], {
      browsers,
      feature: 'background-clip-text'
    })
  );

  // Font feature settings


  f(fontFeature, browsers =>
    prefix$1(
      [
        'font-feature-settings',
        'font-variant-ligatures',
        'font-language-override'
      ],
      {
        browsers,
        feature: 'font-feature'
      }
    )
  );

  // CSS font-kerning property


  f(fontKerning, browsers =>
    prefix$1(['font-kerning'], {
      browsers,
      feature: 'font-kerning'
    })
  );

  // Border image


  f(borderImage, browsers =>
    prefix$1(['border-image'], {
      browsers,
      feature: 'border-image'
    })
  );

  // Selection selector


  f(cssSelection, browsers =>
    prefix$1(['::selection'], {
      browsers,
      feature: 'css-selection',
      selector: true
    })
  );

  // Placeholder selector


  f(cssPlaceholder, browsers => {
    prefix$1(['::placeholder'], {
      browsers: browsers.concat(['ie 10 old', 'ie 11 old', 'firefox 18 old']),
      feature: 'css-placeholder',
      selector: true
    });
  });

  // Placeholder-shown selector


  f(cssPlaceholderShown, browsers => {
    prefix$1([':placeholder-shown'], {
      browsers,
      feature: 'css-placeholder-shown',
      selector: true
    });
  });

  // Hyphenation


  f(cssHyphens, browsers =>
    prefix$1(['hyphens'], {
      browsers,
      feature: 'css-hyphens'
    })
  );

  // Fullscreen selector


  f(fullscreen, browsers =>
    prefix$1([':fullscreen'], {
      browsers,
      feature: 'fullscreen',
      selector: true
    })
  );

  // ::backdrop pseudo-element
  // https://caniuse.com/mdn-css_selectors_backdrop


  f(mdnCssBackdropPseudoElement, browsers =>
    prefix$1(['::backdrop'], {
      browsers,
      feature: 'backdrop',
      selector: true
    })
  );

  // File selector button


  f(cssFileSelectorButton, browsers =>
    prefix$1(['::file-selector-button'], {
      browsers,
      feature: 'file-selector-button',
      selector: true
    })
  );

  // :autofill


  f(cssAutofill, browsers =>
    prefix$1([':autofill'], {
      browsers,
      feature: 'css-autofill',
      selector: true
    })
  );

  // Tab size


  f(css3Tabsize, browsers =>
    prefix$1(['tab-size'], {
      browsers,
      feature: 'css3-tabsize'
    })
  );

  // Intrinsic & extrinsic sizing


  let sizeProps = [
    'width',
    'min-width',
    'max-width',
    'height',
    'min-height',
    'max-height',
    'inline-size',
    'min-inline-size',
    'max-inline-size',
    'block-size',
    'min-block-size',
    'max-block-size',
    'grid',
    'grid-template',
    'grid-template-rows',
    'grid-template-columns',
    'grid-auto-columns',
    'grid-auto-rows'
  ];

  f(intrinsicWidth, browsers =>
    prefix$1(['max-content', 'min-content'], {
      browsers,
      feature: 'intrinsic-width',
      props: sizeProps
    })
  );

  f(intrinsicWidth, { match: /x|\s#4/ }, browsers =>
    prefix$1(['fill', 'fill-available'], {
      browsers,
      feature: 'intrinsic-width',
      props: sizeProps
    })
  );

  f(intrinsicWidth, { match: /x|\s#5/ }, browsers =>
    prefix$1(['fit-content'], {
      browsers,
      feature: 'intrinsic-width',
      props: sizeProps
    })
  );

  // Stretch value



  f(cssWidthStretch, browsers =>
    prefix$1(['stretch'], {
      browsers,
      feature: 'css-width-stretch',
      props: sizeProps
    })
  );

  // Zoom cursors


  f(css3CursorsNewer, browsers =>
    prefix$1(['zoom-in', 'zoom-out'], {
      browsers,
      feature: 'css3-cursors-newer',
      props: ['cursor']
    })
  );

  // Grab cursors


  f(css3CursorsGrab, browsers =>
    prefix$1(['grab', 'grabbing'], {
      browsers,
      feature: 'css3-cursors-grab',
      props: ['cursor']
    })
  );

  // Sticky position


  f(cssSticky, browsers =>
    prefix$1(['sticky'], {
      browsers,
      feature: 'css-sticky',
      props: ['position']
    })
  );

  // Pointer Events


  f(pointer, browsers =>
    prefix$1(['touch-action'], {
      browsers,
      feature: 'pointer'
    })
  );

  // Text decoration


  f(textDecoration, { match: /x.*#[235]/ }, browsers =>
    prefix$1(['text-decoration-skip', 'text-decoration-skip-ink'], {
      browsers,
      feature: 'text-decoration'
    })
  );



  f(mdnTextDecorationShorthand, browsers =>
    prefix$1(['text-decoration'], {
      browsers,
      feature: 'text-decoration'
    })
  );



  f(mdnTextDecorationColor, browsers =>
    prefix$1(['text-decoration-color'], {
      browsers,
      feature: 'text-decoration'
    })
  );



  f(mdnTextDecorationLine, browsers =>
    prefix$1(['text-decoration-line'], {
      browsers,
      feature: 'text-decoration'
    })
  );



  f(mdnTextDecorationStyle, browsers =>
    prefix$1(['text-decoration-style'], {
      browsers,
      feature: 'text-decoration'
    })
  );

  // Text Size Adjust


  f(textSizeAdjust, browsers =>
    prefix$1(['text-size-adjust'], {
      browsers,
      feature: 'text-size-adjust'
    })
  );

  // CSS Masks


  f(cssMasks, browsers => {
    prefix$1(
      [
        'mask-clip',
        'mask-composite',
        'mask-image',
        'mask-origin',
        'mask-repeat',
        'mask-border-repeat',
        'mask-border-source'
      ],
      {
        browsers,
        feature: 'css-masks'
      }
    );
    prefix$1(
      [
        'mask',
        'mask-position',
        'mask-size',
        'mask-border',
        'mask-border-outset',
        'mask-border-width',
        'mask-border-slice'
      ],
      {
        browsers,
        feature: 'css-masks'
      }
    );
  });

  // CSS clip-path property


  f(cssClipPath, browsers =>
    prefix$1(['clip-path'], {
      browsers,
      feature: 'css-clip-path'
    })
  );

  // Fragmented Borders and Backgrounds


  f(cssBoxdecorationbreak, browsers =>
    prefix$1(['box-decoration-break'], {
      browsers,
      feature: 'css-boxdecorationbreak'
    })
  );

  // CSS3 object-fit/object-position


  f(objectFit, browsers =>
    prefix$1(['object-fit', 'object-position'], {
      browsers,
      feature: 'object-fit'
    })
  );

  // CSS Shapes


  f(cssShapes, browsers =>
    prefix$1(['shape-margin', 'shape-outside', 'shape-image-threshold'], {
      browsers,
      feature: 'css-shapes'
    })
  );

  // CSS3 text-overflow


  f(textOverflow, browsers =>
    prefix$1(['text-overflow'], {
      browsers,
      feature: 'text-overflow'
    })
  );

  // Viewport at-rule


  f(cssDeviceadaptation, browsers =>
    prefix$1(['@viewport'], {
      browsers,
      feature: 'css-deviceadaptation'
    })
  );

  // Resolution Media Queries


  f(cssMediaResolution, { match: /( x($| )|a #2)/ }, browsers =>
    prefix$1(['@resolution'], {
      browsers,
      feature: 'css-media-resolution'
    })
  );

  // CSS text-align-last


  f(cssTextAlignLast, browsers =>
    prefix$1(['text-align-last'], {
      browsers,
      feature: 'css-text-align-last'
    })
  );

  // Crisp Edges Image Rendering Algorithm


  f(cssCrispEdges, { match: /y x|a x #1/ }, browsers =>
    prefix$1(['pixelated'], {
      browsers,
      feature: 'css-crisp-edges',
      props: ['image-rendering']
    })
  );

  f(cssCrispEdges, { match: /a x #2/ }, browsers =>
    prefix$1(['image-rendering'], {
      browsers,
      feature: 'css-crisp-edges'
    })
  );

  // Logical Properties


  f(cssLogicalProps, browsers =>
    prefix$1(
      [
        'border-inline-start',
        'border-inline-end',
        'margin-inline-start',
        'margin-inline-end',
        'padding-inline-start',
        'padding-inline-end'
      ],
      {
        browsers,
        feature: 'css-logical-props'
      }
    )
  );

  f(cssLogicalProps, { match: /x\s#2/ }, browsers =>
    prefix$1(
      [
        'border-block-start',
        'border-block-end',
        'margin-block-start',
        'margin-block-end',
        'padding-block-start',
        'padding-block-end'
      ],
      {
        browsers,
        feature: 'css-logical-props'
      }
    )
  );

  // CSS appearance


  f(cssAppearance, { match: /#2|x/ }, browsers =>
    prefix$1(['appearance'], {
      browsers,
      feature: 'css-appearance'
    })
  );

  // CSS Scroll snap points


  f(cssSnappoints, browsers =>
    prefix$1(
      [
        'scroll-snap-type',
        'scroll-snap-coordinate',
        'scroll-snap-destination',
        'scroll-snap-points-x',
        'scroll-snap-points-y'
      ],
      {
        browsers,
        feature: 'css-snappoints'
      }
    )
  );

  // CSS Regions


  f(cssRegions, browsers =>
    prefix$1(['flow-into', 'flow-from', 'region-fragment'], {
      browsers,
      feature: 'css-regions'
    })
  );

  // CSS image-set


  f(cssImageSet, browsers =>
    prefix$1(['image-set'], {
      browsers,
      feature: 'css-image-set',
      props: [
        'background',
        'background-image',
        'border-image',
        'cursor',
        'mask',
        'mask-image',
        'list-style',
        'list-style-image',
        'content'
      ]
    })
  );

  // Writing Mode


  f(cssWritingMode, { match: /a|x/ }, browsers =>
    prefix$1(['writing-mode'], {
      browsers,
      feature: 'css-writing-mode'
    })
  );

  // Cross-Fade Function


  f(cssCrossFade, browsers =>
    prefix$1(['cross-fade'], {
      browsers,
      feature: 'css-cross-fade',
      props: [
        'background',
        'background-image',
        'border-image',
        'mask',
        'list-style',
        'list-style-image',
        'content',
        'mask-image'
      ]
    })
  );

  // Read Only selector


  f(cssReadOnlyWrite, browsers =>
    prefix$1([':read-only', ':read-write'], {
      browsers,
      feature: 'css-read-only-write',
      selector: true
    })
  );

  // Text Emphasize


  f(textEmphasis, browsers =>
    prefix$1(
      [
        'text-emphasis',
        'text-emphasis-position',
        'text-emphasis-style',
        'text-emphasis-color'
      ],
      {
        browsers,
        feature: 'text-emphasis'
      }
    )
  );

  // CSS Grid Layout


  f(cssGrid, browsers => {
    prefix$1(['display-grid', 'inline-grid'], {
      browsers,
      feature: 'css-grid',
      props: ['display']
    });
    prefix$1(
      [
        'grid-template-columns',
        'grid-template-rows',
        'grid-row-start',
        'grid-column-start',
        'grid-row-end',
        'grid-column-end',
        'grid-row',
        'grid-column',
        'grid-area',
        'grid-template',
        'grid-template-areas',
        'place-self'
      ],
      {
        browsers,
        feature: 'css-grid'
      }
    );
  });

  f(cssGrid, { match: /a x/ }, browsers =>
    prefix$1(['grid-column-align', 'grid-row-align'], {
      browsers,
      feature: 'css-grid'
    })
  );

  // CSS text-spacing


  f(cssTextSpacing, browsers =>
    prefix$1(['text-spacing'], {
      browsers,
      feature: 'css-text-spacing'
    })
  );

  // :any-link selector


  f(cssAnyLink, browsers =>
    prefix$1([':any-link'], {
      browsers,
      feature: 'css-any-link',
      selector: true
    })
  );

  // unicode-bidi



  f(mdnCssUnicodeBidiIsolate, browsers =>
    prefix$1(['isolate'], {
      browsers,
      feature: 'css-unicode-bidi',
      props: ['unicode-bidi']
    })
  );



  f(mdnCssUnicodeBidiPlaintext, browsers =>
    prefix$1(['plaintext'], {
      browsers,
      feature: 'css-unicode-bidi',
      props: ['unicode-bidi']
    })
  );



  f(mdnCssUnicodeBidiIsolateOverride, { match: /y x/ }, browsers =>
    prefix$1(['isolate-override'], {
      browsers,
      feature: 'css-unicode-bidi',
      props: ['unicode-bidi']
    })
  );

  // overscroll-behavior selector


  f(cssOverscrollBehavior, { match: /a #1/ }, browsers =>
    prefix$1(['overscroll-behavior'], {
      browsers,
      feature: 'css-overscroll-behavior'
    })
  );

  // text-orientation


  f(cssTextOrientation, browsers =>
    prefix$1(['text-orientation'], {
      browsers,
      feature: 'css-text-orientation'
    })
  );

  // print-color-adjust


  f(cssPrintColorAdjust, browsers =>
    prefix$1(['print-color-adjust', 'color-adjust'], {
      browsers,
      feature: 'css-print-color-adjust'
    })
  );

  function capitalize(str) {
    return str.slice(0, 1).toUpperCase() + str.slice(1)
  }

  const NAMES = {
    and_chr: 'Chrome for Android',
    and_ff: 'Firefox for Android',
    and_qq: 'QQ Browser',
    and_uc: 'UC for Android',
    baidu: 'Baidu Browser',
    ie: 'IE',
    ie_mob: 'IE Mobile',
    ios_saf: 'iOS Safari',
    kaios: 'KaiOS Browser',
    op_mini: 'Opera Mini',
    op_mob: 'Opera Mobile',
    samsung: 'Samsung Internet'
  };

  function prefix(name, prefixes, note) {
    let out = `  ${name}`;
    if (note) out += ' *';
    out += ': ';
    out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ');
    out += '\n';
    return out
  }

  var info = function (prefixes) {
    if (prefixes.browsers.selected.length === 0) {
      return 'No browsers selected'
    }

    let versions = {};
    for (let browser of prefixes.browsers.selected) {
      let parts = browser.split(' ');
      let name = parts[0];
      let version = parts[1];

      name = NAMES[name] || capitalize(name);
      if (versions[name]) {
        versions[name].push(version);
      } else {
        versions[name] = [version];
      }
    }

    let out = 'Browsers:\n';
    for (let browser in versions) {
      let list = versions[browser];
      list = list.sort((a, b) => parseFloat(b) - parseFloat(a));
      out += `  ${browser}: ${list.join(', ')}\n`;
    }

    let coverage = browserslist_1.coverage(prefixes.browsers.selected);
    let round = Math.round(coverage * 100) / 100.0;
    out += `\nThese browsers account for ${round}% of all users globally\n`;

    let atrules = [];
    for (let name in prefixes.add) {
      let data = prefixes.add[name];
      if (name[0] === '@' && data.prefixes) {
        atrules.push(prefix(name, data.prefixes));
      }
    }
    if (atrules.length > 0) {
      out += `\nAt-Rules:\n${atrules.sort().join('')}`;
    }

    let selectors = [];
    for (let selector of prefixes.add.selectors) {
      if (selector.prefixes) {
        selectors.push(prefix(selector.name, selector.prefixes));
      }
    }
    if (selectors.length > 0) {
      out += `\nSelectors:\n${selectors.sort().join('')}`;
    }

    let values = [];
    let props = [];
    let hadGrid = false;
    for (let name in prefixes.add) {
      let data = prefixes.add[name];
      if (name[0] !== '@' && data.prefixes) {
        let grid = name.indexOf('grid-') === 0;
        if (grid) hadGrid = true;
        props.push(prefix(name, data.prefixes, grid));
      }

      if (!Array.isArray(data.values)) {
        continue
      }
      for (let value of data.values) {
        let grid = value.name.includes('grid');
        if (grid) hadGrid = true;
        let string = prefix(value.name, value.prefixes, grid);
        if (!values.includes(string)) {
          values.push(string);
        }
      }
    }

    if (props.length > 0) {
      out += `\nProperties:\n${props.sort().join('')}`;
    }
    if (values.length > 0) {
      out += `\nValues:\n${values.sort().join('')}`;
    }
    if (hadGrid) {
      out += '\n* - Prefixes will be added only on grid: true option.\n';
    }

    if (!atrules.length && !selectors.length && !props.length && !values.length) {
      out +=
        "\nAwesome! Your browsers don't require any vendor prefixes." +
        '\nNow you can remove Autoprefixer from build steps.';
    }

    return out
  };

  var pico = picocolors_browser;

  let { agents } = agents$3;







  let autoprefixerData = { browsers: agents, prefixes: prefixes };

  const WARNING =
    '\n' +
    '  Replace Autoprefixer `browsers` option to Browserslist config.\n' +
    '  Use `browserslist` key in `package.json` or `.browserslistrc` file.\n' +
    '\n' +
    '  Using `browsers` option can cause errors. Browserslist config can\n' +
    '  be used for Babel, Autoprefixer, postcss-normalize and other tools.\n' +
    '\n' +
    '  If you really need to use option, rename it to `overrideBrowserslist`.\n' +
    '\n' +
    '  Learn more at:\n' +
    '  https://github.com/browserslist/browserslist#readme\n' +
    '  https://twitter.com/browserslist\n' +
    '\n';

  function isPlainObject(obj) {
    return Object.prototype.toString.apply(obj) === '[object Object]'
  }

  let cache = new Map();

  function timeCapsule(result, prefixes) {
    if (prefixes.browsers.selected.length === 0) {
      return
    }
    if (prefixes.add.selectors.length > 0) {
      return
    }
    if (Object.keys(prefixes.add).length > 2) {
      return
    }
    /* c8 ignore next 11 */
    result.warn(
      'Autoprefixer target browsers do not need any prefixes.' +
        'You do not need Autoprefixer anymore.\n' +
        'Check your Browserslist config to be sure that your targets ' +
        'are set up correctly.\n' +
        '\n' +
        '  Learn more at:\n' +
        '  https://github.com/postcss/autoprefixer#readme\n' +
        '  https://github.com/browserslist/browserslist#readme\n' +
        '\n'
    );
  }

  var autoprefixer$1 = plugin;

  function plugin(...reqs) {
    let options;
    if (reqs.length === 1 && isPlainObject(reqs[0])) {
      options = reqs[0];
      reqs = undefined;
    } else if (reqs.length === 0 || (reqs.length === 1 && !reqs[0])) {
      reqs = undefined;
    } else if (reqs.length <= 2 && (Array.isArray(reqs[0]) || !reqs[0])) {
      options = reqs[1];
      reqs = reqs[0];
    } else if (typeof reqs[reqs.length - 1] === 'object') {
      options = reqs.pop();
    }

    if (!options) {
      options = {};
    }

    if (options.browser) {
      throw new Error(
        'Change `browser` option to `overrideBrowserslist` in Autoprefixer'
      )
    } else if (options.browserslist) {
      throw new Error(
        'Change `browserslist` option to `overrideBrowserslist` in Autoprefixer'
      )
    }

    if (options.overrideBrowserslist) {
      reqs = options.overrideBrowserslist;
    } else if (options.browsers) {
      if (typeof console !== 'undefined' && console.warn) {
        console.warn(
          pico.red(WARNING.replace(/`[^`]+`/g, i => pico.yellow(i.slice(1, -1))))
        );
      }
      reqs = options.browsers;
    }

    let brwlstOpts = {
      env: options.env,
      ignoreUnknownVersions: options.ignoreUnknownVersions,
      stats: options.stats
    };

    function loadPrefixes(opts) {
      let d = autoprefixerData;
      let browsers = new browsers$1(d.browsers, reqs, opts, brwlstOpts);
      let key = browsers.selected.join(', ') + JSON.stringify(options);

      if (!cache.has(key)) {
        cache.set(key, new prefixes$1(d.prefixes, browsers, options));
      }

      return cache.get(key)
    }

    return {
      browsers: reqs,

      info(opts) {
        opts = opts || {};
        opts.from = opts.from || process.cwd();
        return info(loadPrefixes(opts))
      },

      options,

      postcssPlugin: 'autoprefixer',
      prepare(result) {
        let prefixes = loadPrefixes({
          env: options.env,
          from: result.opts.from
        });

        return {
          OnceExit(root) {
            timeCapsule(result, prefixes);
            if (options.remove !== false) {
              prefixes.processor.remove(root, result);
            }
            if (options.add !== false) {
              prefixes.processor.add(root, result);
            }
          }
        }
      }
    }
  }

  plugin.postcss = true;

  /**
   * Autoprefixer data
   */
  plugin.data = autoprefixerData;

  /**
   * Autoprefixer default browsers
   */
  plugin.defaults = browserslist_1.defaults;

  /**
   * Inspect with default Autoprefixer
   */
  plugin.info = () => plugin().info();

  var autoprefixer = {
    process: (css, processOptions, pluginOptions) => {
      // execjs does not support passing callback from ruby,
      // which makes waiting for the promise to settle from async function impossible
      var result = postcss_1([autoprefixer$1(pluginOptions)]).process(css, processOptions);

      var warns  = result.warnings().map(function (i) {
        delete i.plugin;
        return i.toString()
      });

      var map = result.map ? result.map.toString() : null;
      return  { css: result.css, map: map, warnings: warns }
    },

    info: (options) => {
      return autoprefixer$1(options).info()
    }
  };

  return autoprefixer;

})();